{
	"name": "Append_FactTbl_Talent",
	"properties": {
		"folder": {
			"name": "Client/Database/Load Fact Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_TalentData_File",
						"type": "DatasetReference"
					},
					"name": "Talent"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "etalentTalentFactTbl",
						"type": "DatasetReference"
					},
					"name": "AppendTalentMapping"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "AlterColumnNamesforMap"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'yyyy-MM-dd',",
				"          {Event Year} as short,",
				"          {Event Date} as date,",
				"          Event as string,",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Performance Rating} as string,",
				"          {Performance Rating Date} as date,",
				"          {Talent Identifier (1)} as string,",
				"          {Talent Identifier (2)} as string,",
				"          {Talent Identifier (3)} as string,",
				"          {Talent Identifier (4)} as string,",
				"          {Talent Identifier (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Talent",
				"Talent alterRow(upsertIf(true()),",
				"     deleteIf(isNull({Client ID})),",
				"     deleteIf(isNull({Client Engagement Date})),",
				"     deleteIf(isNull({Performance Rating}))) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          ClientId = {Client ID},",
				"          ClientEngagementDt = {Client Engagement Date},",
				"          EventYear = {Event Year},",
				"          EventDt = {Event Date},",
				"          Event,",
				"          EventType = {Event Type},",
				"          WorkerId = {Worker ID},",
				"          PerfRating = {Performance Rating},",
				"          PerfRatingDt = {Performance Rating Date},",
				"          TalentIdentifier1 = {Talent Identifier (1)},",
				"          TalentIdentifier2 = {Talent Identifier (2)},",
				"          TalentIdentifier3 = {Talent Identifier (3)},",
				"          TalentIdentifier4 = {Talent Identifier (4)},",
				"          TalentIdentifier5 = {Talent Identifier (5)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
				"AlterColumnNamesforMap derive(Event = 'PER',",
				"          LoadDt = currentDate()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventYear as integer,",
				"          EventDt as date,",
				"          Event as string,",
				"          EventType as string,",
				"          PerfRating as string,",
				"          PerfRatingDt as date,",
				"          TalentIdentifier1 as string,",
				"          TalentIdentifier2 as string,",
				"          TalentIdentifier3 as string,",
				"          TalentIdentifier4 as string,",
				"          TalentIdentifier5 as string,",
				"          LoadDt as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ClientId','ClientEngagementDt','EventDt','PerfRating'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AppendTalentMapping"
			]
		}
	}
}