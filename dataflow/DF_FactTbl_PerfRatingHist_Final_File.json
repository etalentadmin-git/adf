{
	"name": "DF_FactTbl_PerfRatingHist_Final_File",
	"properties": {
		"folder": {
			"name": "Client/Fact Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_PerRatingHistory_File",
						"type": "DatasetReference"
					},
					"name": "PerformanceHistory"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "Core"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "CoreForHCTEventYears"
				},
				{
					"dataset": {
						"referenceName": "etalentPerfRatingHistFactTbl",
						"type": "DatasetReference"
					},
					"name": "PerfRatingHistFactTbl"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreDBHist"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_FactTblFldr",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CreateTalentTagScore"
				},
				{
					"name": "CreateCurTalentTag"
				},
				{
					"name": "select1"
				},
				{
					"name": "SelectCoreValues"
				},
				{
					"name": "HCTFilter"
				},
				{
					"name": "MaxYearMinus2"
				},
				{
					"name": "JoinEventYrMinus2"
				},
				{
					"name": "SumEmpCountFor3Yr"
				},
				{
					"name": "join1"
				},
				{
					"name": "RemoveNullWorkerIDRows"
				},
				{
					"name": "SelectLastTalentTag"
				},
				{
					"name": "join2"
				},
				{
					"name": "union1"
				},
				{
					"name": "SelectHistoricalCoreDB"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "RemoveDups"
				},
				{
					"name": "FilterHCTOnly"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'yyyy-MM-dd',",
				"          {Worker ID} as string,",
				"          {Event Year} as short,",
				"          {Last Performance Year} as short,",
				"          {Last Performance Rating Date} as date 'MM/dd/yyyy',",
				"          {Last Client Performance Rating} as string,",
				"          {Last Elloree Performance Rating} as string,",
				"          {Last Elloree Performance Rating Sort Id} as integer,",
				"          {Last Top Talent Ind} as string,",
				"          {Curr Performance Year} as short,",
				"          {Curr Performance Rating Date} as date 'MM/dd/yyyy',",
				"          {Curr Talent Tag} as string,",
				"          {Curr Client Performance Rating} as string,",
				"          {Curr Elloree Performance Rating} as string,",
				"          {Curr Elloree Performance Rating Sort Id} as integer,",
				"          {Curr Top Talent Ind} as string,",
				"          {P1 Performance Year} as short,",
				"          {P1 Performance Rating Date} as date 'MM/dd/yyyy',",
				"          {P1 Client Performance Rating} as string,",
				"          {P1 Elloree Performance Rating} as string,",
				"          {P1 Elloree Performance Rating Sort Id} as integer,",
				"          {P1 Top Talent Ind} as string,",
				"          {P2 Performance Year} as short,",
				"          {P2 Client Performance Rating} as string,",
				"          {P2 Performance Rating Date} as date 'MM/dd/yyyy',",
				"          {P2 Elloree Performance Rating} as string,",
				"          {P2 Elloree Performance Rating Sort Id} as integer,",
				"          {P2 Top Talent Ind} as string,",
				"          {P3 Performance Year} as short,",
				"          {P3 Client Performance Rating} as string,",
				"          {P3 Performance Rating Date} as date 'MM/dd/yyyy',",
				"          {P3 Elloree Performance Rating} as string,",
				"          {P3 Elloree Performance Rating Sort Id} as integer,",
				"          {P3 Top Talent Ind} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PerformanceHistory",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as date,",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as double,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as date,",
				"          {Current Hire Date} as date,",
				"          {Years of Service} as double,",
				"          {Years of Service Band} as double,",
				"          {Years of Service Sort ID} as integer,",
				"          {Last Promo Date} as date,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as integer,",
				"          EmpCount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Core",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date,",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as date,",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as double,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as date,",
				"          {Current Hire Date} as date,",
				"          {Years of Service} as double,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as integer,",
				"          {Last Promo Date} as date,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as integer,",
				"          EmpCount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CoreForHCTEventYears",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventYear as integer,",
				"          WorkerId as string,",
				"          LastPerfYear as integer,",
				"          LastPerfRatingDt as date,",
				"          LastClientPerfRating as string,",
				"          LastElloreePerfRating as string,",
				"          LastElloreePerfRatingSortId as integer,",
				"          LastTopTalentInd as string,",
				"          CurrPerfYear as integer,",
				"          CurrPerfRatingDt as date,",
				"          CurrTalentTag as string,",
				"          CurrClientPerfRating as string,",
				"          CurrElloreePerfRating as string,",
				"          CurrElloreePerfRatingSortId as integer,",
				"          CurrTopTalentInd as string,",
				"          P1PerfYear as integer,",
				"          P1PerfRatingDt as date,",
				"          P1ClientPerfRating as string,",
				"          P1ElloreePerfRating as string,",
				"          P1ElloreePerfRatingSortId as integer,",
				"          P1TopTalentInd as string,",
				"          P2PerfYear as integer,",
				"          P2PerfRatingDt as date,",
				"          P2ClientPerfRating as string,",
				"          P2ElloreePerfRating as string,",
				"          P2ElloreePerfRatingSortId as integer,",
				"          P2TopTalentInd as string,",
				"          P3PerfYear as integer,",
				"          P3PerfRatingDt as date,",
				"          P3ClientPerfRating as string,",
				"          P3ElloreePerfRating as string,",
				"          P3ElloreePerfRatingSortId as integer,",
				"          P3TopTalentInd as string,",
				"          LastTalentTagYear as integer,",
				"          LastTalentTag as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> PerfRatingHistFactTbl",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventID = 'HCT'\"),",
				"     format: 'query') ~> CoreDBHist",
				"join2 derive({Group 1-3 Scoring} = iif({Curr Elloree Performance Rating}=='Outstanding',1,0)\r",
				"+iif({P1 Elloree Performance Rating}=='Outstanding',1,0)\r",
				"+iif({P2 Elloree Performance Rating}=='Outstanding',1,0),",
				"          {Group 4-6 Scoring} = iif({Curr Elloree Performance Rating}=='Exceeds',1,0)\r",
				"+iif({P1 Elloree Performance Rating}=='Exceeds',1,0)\r",
				"+iif({P2 Elloree Performance Rating}=='Exceeds',1,0),",
				"          {Group 3 Flag} = iif({Curr Elloree Performance Rating}=='Outstanding', 'Y','N'),",
				"          {Group 6 Flag} = iif({Curr Elloree Performance Rating}=='Exceeds', 'Y','N')) ~> CreateTalentTagScore",
				"CreateTalentTagScore derive({Talent Tag} = iif({3 Yr TotalEmpCount}==3, iif({Group 1-3 Scoring}==3,'Group 1', \r",
				"iif({Group 1-3 Scoring}==2,'Group 2',\r",
				"iif({Group 3 Flag}=='Y','Group 3',\r",
				"iif({Group 4-6 Scoring}==3,'Group 4',\r",
				"iif({Group 4-6 Scoring}==2,'Group 5',\r",
				"iif({Group 6 Flag}=='Y','Group 6', 'N/A')))))),'N/A')) ~> CreateCurTalentTag",
				"CreateCurTalentTag select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Last Performance Year},",
				"          {Last Performance Rating Date},",
				"          {Last Client Performance Rating},",
				"          {Last Elloree Performance Rating},",
				"          {Last Elloree Performance Rating Sort Id},",
				"          {Last Top Talent Ind},",
				"          {Curr Performance Year},",
				"          {Curr Performance Rating Date},",
				"          {Curr Talent Tag} = {Talent Tag},",
				"          {Last Talent Tag},",
				"          {Last Talent Tag Year} = {Last Talent Tag PerfYear},",
				"          {Curr Client Performance Rating},",
				"          {Curr Elloree Performance Rating},",
				"          {Curr Elloree Performance Rating Sort Id},",
				"          {Curr Top Talent Ind},",
				"          {P1 Performance Year},",
				"          {P1 Performance Rating Date},",
				"          {P1 Client Performance Rating},",
				"          {P1 Elloree Performance Rating},",
				"          {P1 Elloree Performance Rating Sort Id},",
				"          {P1 Top Talent Ind},",
				"          {P2 Performance Year},",
				"          {P2 Client Performance Rating},",
				"          {P2 Performance Rating Date},",
				"          {P2 Elloree Performance Rating},",
				"          {P2 Elloree Performance Rating Sort Id},",
				"          {P2 Top Talent Ind},",
				"          {P3 Performance Year},",
				"          {P3 Client Performance Rating},",
				"          {P3 Performance Rating Date},",
				"          {P3 Elloree Performance Rating},",
				"          {P3 Elloree Performance Rating Sort Id},",
				"          {P3 Top Talent Ind}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"RemoveDups select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Event Code},",
				"          EmpCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCoreValues",
				"CoreForHCTEventYears filter({Event Code}=='HCT') ~> HCTFilter",
				"HCTFilter aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
				"SelectCoreValues, MaxYearMinus2 join({Event Year} >= {Event Year -2},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinEventYrMinus2",
				"JoinEventYrMinus2 aggregate(groupBy({Worker ID 3Yr Count} = {Worker ID}),",
				"     {3 Yr TotalEmpCount} = sum(EmpCount)) ~> SumEmpCountFor3Yr",
				"PerformanceHistory, SumEmpCountFor3Yr join({Worker ID} == {Worker ID 3Yr Count},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join1",
				"select1 filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
				"PerfRatingHistFactTbl select(mapColumn(",
				"          {Last Talent Tag WorkerId} = WorkerId,",
				"          {Last Talent Tag PerfYear} = CurrPerfYear,",
				"          {Last Talent Tag} = CurrTalentTag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectLastTalentTag",
				"join1, SelectLastTalentTag join({Worker ID} == {Last Talent Tag WorkerId},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"SelectColumns, SelectHistoricalCoreDB union(byName: true)~> union1",
				"CoreDBHist select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          {Event Code} = EventId,",
				"          EmpCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectHistoricalCoreDB",
				"FilterHCTOnly select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Event Code},",
				"          EmpCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"union1 aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Event Code},",
				"          EmpCount),",
				"     RowCount = count({Worker ID})) ~> RemoveDups",
				"Core filter({Event Code}=='HCT') ~> FilterHCTOnly",
				"RemoveNullWorkerIDRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}