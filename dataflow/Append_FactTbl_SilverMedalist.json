{
	"name": "Append_FactTbl_SilverMedalist",
	"properties": {
		"folder": {
			"name": "Client/Database/Load Fact Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_SilverMedalist_File",
						"type": "DatasetReference"
					},
					"name": "SilverMedalist"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "etalentSilverMedalistFactTbl",
						"type": "DatasetReference"
					},
					"name": "AppendSilverMedalistFAct"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "AlterColumnNamesforMap"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'yyyy-MM-dd',",
				"          {Event Year} as short,",
				"          {Applicant ID} as string,",
				"          {Internal Worker ID} as string,",
				"          {Requisition ID} as string,",
				"          {Silver Medalist Ind} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SilverMedalist",
				"SilverMedalist alterRow(upsertIf(true()),",
				"     deleteIf(isNull({Client ID})),",
				"     deleteIf(isNull({Client Engagement Date})),",
				"     deleteIf(isNull({Event Year})),",
				"     deleteIf(isNull({Requisition ID})),",
				"     deleteIf(isNull({Applicant ID}))) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          ClientId = {Client ID},",
				"          ClientEngagementDt = {Client Engagement Date},",
				"          EventYear = {Event Year},",
				"          ApplId = {Applicant ID},",
				"          IntWorkerId = {Internal Worker ID},",
				"          ReqId = {Requisition ID},",
				"          SilverMedalistInd = {Silver Medalist Ind}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
				"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventYear as integer,",
				"          ReqId as string,",
				"          ApplId as string,",
				"          IntWorkerId as string,",
				"          SilverMedalistInd as string,",
				"          LoadDt as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ClientId','ClientEngagementDt','EventYear','ReqId','ApplId'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AppendSilverMedalistFAct"
			]
		}
	}
}