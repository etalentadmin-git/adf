{
	"name": "DF_Mapping_Job_USING_CLIENT",
	"properties": {
		"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
		"folder": {
			"name": "Client/Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "etalentJobMapReviewTbl",
						"type": "DatasetReference"
					},
					"name": "JobMappingTableClient"
				},
				{
					"dataset": {
						"referenceName": "etalentReqFactTbl",
						"type": "DatasetReference"
					},
					"name": "Requisitions"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseCoreRecords"
				},
				{
					"dataset": {
						"referenceName": "etalentCorpTitleMapTbl",
						"type": "DatasetReference"
					},
					"name": "CorpTitleMapping"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_MappingPrepFldr",
						"type": "DatasetReference"
					},
					"name": "OutputMappingToPrepFldr"
				},
				{
					"dataset": {
						"referenceName": "Source_MappingWorkingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputMappingToWorkingFldr"
				}
			],
			"transformations": [
				{
					"name": "CreatePivotCorpTitleEventTime"
				},
				{
					"name": "SortOnEvent"
				},
				{
					"name": "SortOnJobFunction"
				},
				{
					"name": "SelectUniqueOtherClientValues"
				},
				{
					"name": "SelectExistingCorpTitleMapping"
				},
				{
					"name": "JoinCurrJobInfo"
				},
				{
					"name": "select5"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select6"
				},
				{
					"name": "UnionCurrAndPrevCorpTitleRows"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "SelectJobColumnsFromReq"
				},
				{
					"name": "select10"
				},
				{
					"name": "JoinCoreAndReqRecords"
				},
				{
					"name": "selectCoreDBRecs"
				},
				{
					"name": "RemoveDups"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "GetCountOfClientForUniqueValues"
				},
				{
					"name": "JoinClientIDCountInForMaxFilter"
				},
				{
					"name": "CleanupSelectFields"
				},
				{
					"name": "SelectMappingWithMostClients"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "JoinBackFinalSelectMapping"
				},
				{
					"name": "TakeLastClientValForRemainingDups"
				},
				{
					"name": "NotEqualtoClientID"
				},
				{
					"name": "EqualtoClientId"
				},
				{
					"name": "GroupUniqueValues"
				},
				{
					"name": "selectUniqueClientIDValues"
				},
				{
					"name": "SelectLastEngagementDt"
				},
				{
					"name": "SelectBasedOnMostRecentClientEngagment"
				},
				{
					"name": "selectCorpTitleMap"
				},
				{
					"name": "JoinCorpTitleMap"
				},
				{
					"name": "select12"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventYear as integer,",
				"          Event as string,",
				"          BusinessGrpLvl1 as string,",
				"          CorpTitle as string,",
				"          JobTitle as string,",
				"          JobFunction as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select ClientId, ClientEngagementDt, WorkerId, EventYear, Event, BusinessGrpLvl1, CorpTitle, JobTitle, JobFunction from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> AllCoreData",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientBusGrpLvl1 as string,",
				"          ClientCorpTitle as string,",
				"          ClientJobTitle as string,",
				"          ClientJobFunction as string,",
				"          ElloreeJobFunction as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> JobMappingTableClient",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          BusinessGrpLvl1 as string,",
				"          CorpTitle as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          EventYear as integer,",
				"          Event as string,",
				"          ReqId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select ClientId, ClientEngagementDt, BusinessGrpLvl1, CorpTitle, JobTitle, JobFunction, EventYear, Event, ReqId from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> Requisitions",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventYear as integer,",
				"          Event as string,",
				"          BusinessGrpLvl1 as string,",
				"          CorpTitle as string,",
				"          JobTitle as string,",
				"          JobFunction as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select ClientId, ClientEngagementDt, WorkerId, EventYear, Event, BusinessGrpLvl1, CorpTitle, JobTitle, JobFunction from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseCoreRecords",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientCorpTitle as string,",
				"          ElloreeCorpTitle as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select ClientId, ClientEngagementDt, ClientCorpTitle, ElloreeCorpTitle from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> CorpTitleMapping",
				"derivedColumn4 pivot(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Elloree Corporate Title},",
				"          {Client Job Title},",
				"          {Client Job Function},",
				"          {Elloree Job Function},",
				"          {Suggested Elloree Job Function},",
				"          {Suggested Source}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Worker ID}),",
				"     columnNaming: '$N$V',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> CreatePivotCorpTitleEventTime",
				"derivedColumn5 sort(asc({Event Year}, true)) ~> SortOnEvent",
				"CreatePivotCorpTitleEventTime sort(asc({Client Job Function}, true)) ~> SortOnJobFunction",
				"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
				"          {Unique ClientCorpTitle} = ClientCorpTitle,",
				"          {Unique ClientJobTitle} = ClientJobTitle,",
				"          {Unique ClientJobFunction} = ClientJobFunction,",
				"          {Unique ElloreeJobFunction} = ElloreeJobFunction,",
				"          ClientEngagementDt),",
				"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
				"TakeLastClientValForRemainingDups select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientJobTitle},",
				"          {Unique ClientJobFunction},",
				"          {Unique ElloreeJobFunction}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectExistingCorpTitleMapping",
				"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
				"     && BusinessGrpLvl1 == {Unique ClientBusGrpLvl1}",
				"     && {Corporate Title} == {Unique ClientCorpTitle}",
				"     && {Job Title} == {Unique ClientJobTitle}",
				"     && {Job Function} == {Unique CllientJobFunction},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCurrJobInfo",
				"JoinCurrJobInfo select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Client BusinessGrpLvl1} = BusinessGrpLvl1,",
				"          {Client Corporate Title} = {Corporate Title},",
				"          {Client Job Title} = {Job Title},",
				"          {Client Job Function} = {Job Function},",
				"          {Elloree Job Function},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested Elloree Job Function} = {Unique ElloreeJobFunction},",
				"          {Event and Year},",
				"          {Worker ID} = RecordID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorpTitle}",
				"     && {Client BusinessGrpLvl1} == {Unique ClientBusGrpLvl1}",
				"     && {Client Job Title} == {Unique ClientJobTitle}",
				"     && {Client Job Function} == {Unique ClientJobFunction}",
				"     && {Client ID} != {Unique ClientId},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join5",
				"select6 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Elloree Job Function} = iif(isNull({Suggested Source}),{Unique ElloreeJobFunction},{Suggested Elloree Job Function}),",
				"          {Job Function (Current or Previous)} = 'Curr Function') ~> derivedColumn2",
				"join5 select(mapColumn(",
				"          {Client BusinessGrpLvl1},",
				"          {Client Corporate Title},",
				"          {Client Job Title},",
				"          {Client Job Function},",
				"          {Elloree Job Function},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Elloree Job Function},",
				"          {Worker ID},",
				"          {Unique ClientId},",
				"          {Unique ClientCorporateTitle} = {Unique ClientCorpTitle},",
				"          {Unique ClientJobTitle},",
				"          {Unique ClientJobFunction},",
				"          {Unique ElloreeJobFunction}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"derivedColumn2, SortOnEvent union(byName: true)~> UnionCurrAndPrevCorpTitleRows",
				"select12 derive({Event and Year} = concat({Event and Year},concat(' ',{Job Function (Current or Previous)}))) ~> derivedColumn4",
				"Requisitions select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          BusinessGrpLvl1,",
				"          {Corporate Title} = CorpTitle,",
				"          {Job Title} = JobTitle,",
				"          {Job Function} = JobFunction,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          RecordID = ReqId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectJobColumnsFromReq",
				"AllCoreData select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          BusinessGrpLvl1,",
				"          {Corporate Title} = CorpTitle,",
				"          {Job Title} = JobTitle,",
				"          {Job Function} = JobFunction,",
				"          RecordID = WorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"select10, SelectJobColumnsFromReq, selectCoreDBRecs union(byName: true)~> JoinCoreAndReqRecords",
				"aggregate2 select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          RecordID = WorkerId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          BusinessGrpLvl1,",
				"          {Corporate Title} = CorpTitle,",
				"          {Job Title} = JobTitle,",
				"          {Job Function} = JobFunction",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
				"JoinCoreAndReqRecords aggregate(groupBy({Client Engagement Date},",
				"          {Event Year},",
				"          Event,",
				"          BusinessGrpLvl1,",
				"          {Corporate Title},",
				"          {Job Title},",
				"          {Job Function},",
				"          RecordID),",
				"     {Client ID} = max({Client ID})) ~> RemoveDups",
				"RemoveDups derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
				"          {Elloree Job Function} = '') ~> derivedColumn5",
				"DatabaseCoreRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventYear,",
				"          Event,",
				"          BusinessGrpLvl1,",
				"          CorpTitle,",
				"          JobTitle,",
				"          JobFunction),",
				"     TotWorkers = count(WorkerId)) ~> aggregate2",
				"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
				"          {Count Unique ClientCorpTitle} = {Unique ClientCorpTitle},",
				"          {Count Unique ClientJobTitle} = {Unique ClientJobTitle},",
				"          {Count Unique ClientJobFunction} = {Unique ClientJobFunction},",
				"          {Count Unique ElloreeJobFunction} = {Unique ElloreeJobFunction}),",
				"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
				"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientCorpTitle} == {Count Unique ClientCorpTitle}",
				"     && {Unique ClientBusGrpLvl1} == {Count Unique ClientBusGrpLvl1}",
				"     && {Unique ClientJobTitle} == {Count Unique ClientJobTitle}",
				"     && {Unique ClientJobFunction} == {Count Unique ClientJobFunction}",
				"     && {Unique ElloreeJobFunction} == {Count Unique ElloreeJobFunction},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
				"JoinClientIDCountInForMaxFilter select(mapColumn(",
				"          {Unique ClientId},",
				"          ClientEngagementDt,",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientJobTitle},",
				"          {Unique ClientJobFunction},",
				"          {Unique ElloreeJobFunction},",
				"          ClientIDCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
				"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientJobTitle},",
				"          {Unique ClientJobFunction},",
				"          {Unique ElloreeJobFunction}),",
				"     ClientIDCount = max(ClientIDCount),",
				"          ClientEngagementDt = max(ClientEngagementDt)) ~> SelectMappingWithMostClients",
				"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
				"          {Agg Unique ClientCorpTitle} = {Unique ClientCorpTitle},",
				"          {Agg Unique ClientJobTitle} = {Unique ClientJobTitle},",
				"          {Agg Unique ClientJobFunction} = {Unique ClientJobFunction}),",
				"     {Agg Unique ElloreeJobFunction} = first({Unique ElloreeJobFunction})) ~> aggregate3",
				"SelectMappingWithMostClients, aggregate3 join({Unique ClientBusGrpLvl1} == {Agg Unique ClientBusGrpLvl1}",
				"     && {Unique ClientCorpTitle} == {Agg Unique ClientCorpTitle}",
				"     && {Unique ClientJobTitle} == {Agg Unique ClientJobTitle}",
				"     && {Unique ClientJobFunction} == {Agg Unique ClientJobFunction}",
				"     && {Unique ElloreeJobFunction} == {Agg Unique ElloreeJobFunction},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
				"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientBusGrpLvl1},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientJobTitle},",
				"          {Unique ClientJobFunction},",
				"          {Unique ElloreeJobFunction}),",
				"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
				"JobMappingTableClient filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
				"JobMappingTableClient filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
				"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
				"          {Unique ClientCorpTitle} = ClientCorpTitle,",
				"          {Unique ClientJobTitle} = ClientJobTitle,",
				"          {Unique ClientJobFunction} = ClientJobFunction,",
				"          {Unique ElloreeJobFunction} = ElloreeJobFunction,",
				"          ClientEngagementDt),",
				"     RowCount = count(ClientId)) ~> GroupUniqueValues",
				"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientJobTitle},",
				"          {Unique CllientJobFunction} = {Unique ClientJobFunction},",
				"          {Unique ElloreeJobFunction}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
				"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
				"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
				"     negate:false,",
				"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
				"CorpTitleMapping select(mapColumn(",
				"          {Mapping ClientCorpTitle} = ClientCorpTitle,",
				"          {Mapping ElloreeCorpTitle} = ElloreeCorpTitle",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCorpTitleMap",
				"UnionCurrAndPrevCorpTitleRows, selectCorpTitleMap join({Client Corporate Title} == {Mapping ClientCorpTitle},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCorpTitleMap",
				"JoinCorpTitleMap select(mapColumn(",
				"          {Elloree Corporate Title} = {Mapping ElloreeCorpTitle},",
				"          {Client Job Title},",
				"          {Client Job Function},",
				"          {Elloree Job Function},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Elloree Job Function},",
				"          {Worker ID},",
				"          {Unique ClientId},",
				"          {Unique ClientCorporateTitle},",
				"          {Unique ClientJobTitle},",
				"          {Unique ClientJobFunction},",
				"          {Unique ElloreeJobFunction},",
				"          {Job Function (Current or Previous)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"SortOnJobFunction sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['prep_job_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputMappingToPrepFldr",
				"SortOnJobFunction sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['job_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputMappingToWorkingFldr"
			]
		}
	}
}