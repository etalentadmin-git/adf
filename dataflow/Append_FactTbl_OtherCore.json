{
	"name": "Append_FactTbl_OtherCore",
	"properties": {
		"folder": {
			"name": "Client/Database/Load Fact Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_OtherCore_File",
						"type": "DatasetReference"
					},
					"name": "Other"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "etalentOtherCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "AppendOtherFactTbl"
				},
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OtherNullRecordOutput"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "AlterColumnNamesforMap"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Worker ID} as string,",
				"          {Event Date} as date,",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event ID} as string,",
				"          Event as string,",
				"          {Event (Type)} as string,",
				"          {Event (Desc)} as string,",
				"          {Other (Char Value 1)} as string,",
				"          {Other (Char Value 2)} as string,",
				"          {Other (Num Value 1)} as double,",
				"          {Other (Num Value 2)} as double,",
				"          {Other (Date Value 1)} as date,",
				"          {Other (Date Value 2)} as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Other",
				"Other alterRow(deleteIf(isNull({Worker ID})),",
				"     upsertIf(true()),",
				"     deleteIf(isNull({Client ID})),",
				"     deleteIf(isNull({Client Engagement Date})),",
				"     deleteIf(isNull({Event Year})),",
				"     deleteIf(isNull({Event (Type)}))) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          ClientId = {Client ID},",
				"          ClientEngagementDt = {Client Engagement Date},",
				"          WorkerId = {Worker ID},",
				"          EventDt = {Event Date},",
				"          EventMonth,",
				"          EventQuarter = {Event Quarter},",
				"          EventYear = {Event Year},",
				"          Event,",
				"          EventId = {Event ID},",
				"          EventType = {Event (Type)},",
				"          EventDesc = {Event (Desc)},",
				"          OtherCharVal1 = {Other (Char Value 1)},",
				"          OtherCharVal2 = {Other (Char Value 2)},",
				"          OtherNumVal1 = {Other (Num Value 1)},",
				"          OtherNumVal2 = {Other (Num Value 2)},",
				"          OtherDtVal1 = {Other (Date Value 1)},",
				"          OtherDtVal2 = {Other (Date Value 2)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
				"AlterColumnNamesforMap derive(WorkerId = iif(isNull(WorkerId),'N/A',WorkerId),",
				"          LoadDt = currentDate()) ~> derivedColumn1",
				"derivedColumn1 filter(WorkerId!='N/A') ~> filter1",
				"derivedColumn1 filter(WorkerId=='N/A') ~> filter2",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientEngagementType as string,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventDesc as string,",
				"          EventType as string,",
				"          OtherCharVal11 as string,",
				"          OtherCharVal2 as string,",
				"          OtherNumVal1 as double,",
				"          OtherNumVal2 as double,",
				"          OtherDtVal1 as date,",
				"          OtherDtVal2 as date,",
				"          LoadDt as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ClientId','ClientEngagementDt','EventDt','EventYear','EventType','EventDesc','WorkerId'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventDt,",
				"          EventMonth,",
				"          EventQuarter,",
				"          EventYear,",
				"          Event,",
				"          EventId,",
				"          EventDesc,",
				"          EventType,",
				"          OtherCharVal11 = OtherCharVal1,",
				"          OtherCharVal2,",
				"          OtherNumVal1,",
				"          OtherNumVal2,",
				"          OtherDtVal1,",
				"          OtherDtVal2,",
				"          LoadDt",
				"     )) ~> AppendOtherFactTbl",
				"filter2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Other Core Fact Table Load - Reject Records.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OtherNullRecordOutput"
			]
		}
	}
}