{
	"name": "DF_FactTbl_PerfRatingHist_Init_File",
	"properties": {
		"folder": {
			"name": "Client/Fact Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "Core"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_TalentData_File",
						"type": "DatasetReference"
					},
					"name": "Performance"
				},
				{
					"dataset": {
						"referenceName": "etalentPerfRatingMapTbl",
						"type": "DatasetReference"
					},
					"name": "PerformanceMapping"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "HistoricalCoreDB"
				},
				{
					"dataset": {
						"referenceName": "etalentTalentFactTbl",
						"type": "DatasetReference"
					},
					"name": "HistoricalTalentDB"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_FactTblFldr",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "JoinToPerfMapping"
				},
				{
					"name": "PerformanceWithMapping"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "CurrJoin"
				},
				{
					"name": "CurrSelect"
				},
				{
					"name": "P1Join"
				},
				{
					"name": "P1Select"
				},
				{
					"name": "P2Join"
				},
				{
					"name": "P2Select"
				},
				{
					"name": "P3Join"
				},
				{
					"name": "P3Select"
				},
				{
					"name": "SelectPrep"
				},
				{
					"name": "TransformNulls"
				},
				{
					"name": "CalcLast"
				},
				{
					"name": "AddTopTalent"
				},
				{
					"name": "FinalSelect"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "RemoveNullWorkerId"
				},
				{
					"name": "union1"
				},
				{
					"name": "union2"
				},
				{
					"name": "selectHistoricalCoreDB"
				},
				{
					"name": "select2"
				},
				{
					"name": "selectHistoricalTalentDB"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string,",
				"          RowCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Core",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Event Year} as short,",
				"          {Event Date} as string,",
				"          Event as string,",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Performance Rating} as string,",
				"          {Performance Rating Date} as date,",
				"          {Talent Identifier (1)} as string,",
				"          {Talent Identifier (2)} as string,",
				"          {Talent Identifier (3)} as string,",
				"          {Talent Identifier (4)} as string,",
				"          {Talent Identifier (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Performance",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientPerfRating as string,",
				"          ElloreePerfRating as string,",
				"          ElloreePerfRatingSortId as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> PerformanceMapping",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGBTQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> HistoricalCoreDB",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventYear as integer,",
				"          EventDt as date,",
				"          Event as string,",
				"          EventType as string,",
				"          PerfRating as string,",
				"          PerfRatingDt as date,",
				"          TalentIdentifier1 as string,",
				"          TalentIdentifier2 as string,",
				"          TalentIdentifier3 as string,",
				"          TalentIdentifier4 as string,",
				"          TalentIdentifier5 as string,",
				"          LoadDt as date,",
				"          SalaryRange as string,",
				"          Bonus as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> HistoricalTalentDB",
				"aggregate1 select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"union1 aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year}),",
				"     EmpCount = count({Worker ID})) ~> aggregate1",
				"union2, PerformanceMapping join({Client ID} == ClientId",
				"     && {Client Engagement Date} == ClientEngagementDt",
				"     && {Performance Rating} == ClientPerfRating,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinToPerfMapping",
				"JoinToPerfMapping select(mapColumn(",
				"          {Perf Client ID} = {Client ID},",
				"          {Perf Client Engagement Date} = {Client Engagement Date},",
				"          {Perf Event Year} = {Event Year},",
				"          {Perf Worker ID} = {Worker ID},",
				"          {Performance Rating},",
				"          {Performance Rating Date},",
				"          ElloreePerfRating,",
				"          ElloreePerfRatingSortId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PerformanceWithMapping",
				"select1 derive({Curr Performance Year} = toShort({Event Year}),",
				"          {P1 Performance Year} = toShort({Event Year} - 1),",
				"          {P2 Performance Year} = toShort({Event Year} - 2),",
				"          {P3 Performance Year} = toShort({Event Year} - 3)) ~> derivedColumn1",
				"derivedColumn1, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
				"     && {Client Engagement Date} == {Perf Client Engagement Date}",
				"     && {Worker ID} == {Perf Worker ID}",
				"     && {Curr Performance Year} == {Perf Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CurrJoin",
				"CurrJoin select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {P1 Performance Year},",
				"          {P2 Performance Year},",
				"          {P3 Performance Year},",
				"          {Curr Performance Year},",
				"          {Curr Client Performance Rating} = {Performance Rating},",
				"          {Curr Performance Rating Date} = {Performance Rating Date},",
				"          {Curr ElloreePerfRating} = ElloreePerfRating,",
				"          {Curr ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CurrSelect",
				"CurrSelect, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
				"     && {Client Engagement Date} == {Perf Client Engagement Date}",
				"     && {Worker ID} == {Perf Worker ID}",
				"     && {P1 Performance Year} == {Perf Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> P1Join",
				"P1Join select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {P2 Performance Year},",
				"          {P3 Performance Year},",
				"          {Curr Performance Year},",
				"          {Curr Performance Rating Date},",
				"          {Curr Client Performance Rating},",
				"          {Curr ElloreePerfRating},",
				"          {Curr ElloreePerfRatingSortId},",
				"          {P1 Performance Year},",
				"          {P1 Performance Rating Date} = {Performance Rating Date},",
				"          {P1 Client Performance Rating} = {Performance Rating},",
				"          {P1 ElloreePerfRating} = ElloreePerfRating,",
				"          {P1 ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> P1Select",
				"P1Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
				"     && {Client Engagement Date} == {Perf Client Engagement Date}",
				"     && {Worker ID} == {Perf Worker ID}",
				"     && {P2 Performance Year} == {Perf Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> P2Join",
				"P2Join select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Curr Performance Year},",
				"          {Curr Performance Rating Date},",
				"          {Curr Client Performance Rating},",
				"          {Curr ElloreePerfRating},",
				"          {Curr ElloreePerfRatingSortId},",
				"          {P1 Performance Year},",
				"          {P1 Performance Rating Date},",
				"          {P1 Client Performance Rating},",
				"          {P1 ElloreePerfRating},",
				"          {P1 ElloreePerfRatingSortId},",
				"          {P2 Performance Year},",
				"          {P2 Client Performance Rating} = {Performance Rating},",
				"          {P2 Performance Rating Date} = {Performance Rating Date},",
				"          {P2 ElloreePerfRating} = ElloreePerfRating,",
				"          {P2 ElloreePerfRatingSortId} = ElloreePerfRatingSortId,",
				"          {P3 Performance Year}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> P2Select",
				"P2Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
				"     && {Client Engagement Date} == {Perf Client Engagement Date}",
				"     && {Worker ID} == {Perf Worker ID}",
				"     && {P3 Performance Year} == {Perf Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> P3Join",
				"P3Join select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Curr Performance Year},",
				"          {Curr Performance Rating Date},",
				"          {Curr Client Performance Rating},",
				"          {Curr Elloree Performance Rating} = {Curr ElloreePerfRating},",
				"          {Curr Elloree Performance Rating Sort Id} = {Curr ElloreePerfRatingSortId},",
				"          {P1 Performance Year},",
				"          {P1 Performance Rating Date},",
				"          {P1 Client Performance Rating},",
				"          {P1 Elloree Performance Rating} = {P1 ElloreePerfRating},",
				"          {P1 Elloree Performance Rating Sort Id} = {P1 ElloreePerfRatingSortId},",
				"          {P2 Performance Year},",
				"          {P2 Client Performance Rating},",
				"          {P2 Performance Rating Date},",
				"          {P2 Elloree Performance Rating} = {P2 ElloreePerfRating},",
				"          {P2 Elloree Performance Rating Sort Id} = {P2 ElloreePerfRatingSortId},",
				"          {P3 Performance Year},",
				"          {P3 Client Performance Rating} = {Performance Rating},",
				"          {P3 Performance Rating Date} = {Performance Rating Date},",
				"          {P3 Elloree Performance Rating} = ElloreePerfRating,",
				"          {P3 Elloree Performance Rating Sort Id} = ElloreePerfRatingSortId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> P3Select",
				"CalcLast select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Curr Performance Year},",
				"          {Curr Performance Rating Date},",
				"          {Curr Client Performance Rating},",
				"          {Curr Elloree Performance Rating},",
				"          {Curr Elloree Performance Rating Sort Id},",
				"          {P1 Performance Year},",
				"          {P1 Performance Rating Date},",
				"          {P1 Client Performance Rating},",
				"          {P1 Elloree Performance Rating},",
				"          {P1 Elloree Performance Rating Sort Id},",
				"          {P2 Performance Year},",
				"          {P2 Client Performance Rating},",
				"          {P2 Performance Rating Date},",
				"          {P2 Elloree Performance Rating},",
				"          {P2 Elloree Performance Rating Sort Id},",
				"          {P3 Performance Year},",
				"          {P3 Client Performance Rating},",
				"          {P3 Performance Rating Date},",
				"          {P3 Elloree Performance Rating},",
				"          {P3 Elloree Performance Rating Sort Id},",
				"          {Last Performance Year},",
				"          {Last Performance Rating Date},",
				"          {Last Client Performance Rating},",
				"          {Last Elloree Performance Rating},",
				"          {Last Elloree Performance Rating Sort Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPrep",
				"SelectPrep derive({Last Client Performance Rating} = iif(isNull({Last Client Performance Rating}),'N/A',{Last Client Performance Rating}),",
				"          {Last Elloree Performance Rating} = iif(isNull({Last Elloree Performance Rating}),'N/A',{Last Elloree Performance Rating}),",
				"          {Last Elloree Performance Rating Sort Id} = iif(isNull({Last Elloree Performance Rating Sort Id}),99,{Last Elloree Performance Rating Sort Id}),",
				"          {Last Performance Rating Date} = iif(isNull({Last Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Last Performance Rating Date})),",
				"          {Curr Client Performance Rating} = iif(isNull({Curr Client Performance Rating}),'N/A',{Curr Client Performance Rating}),",
				"          {Curr Elloree Performance Rating} = iif(isNull({Curr Elloree Performance Rating}),'N/A',{Curr Elloree Performance Rating}),",
				"          {Curr Elloree Performance Rating Sort Id} = iif(isNull({Curr Elloree Performance Rating Sort Id}),99,{Curr Elloree Performance Rating Sort Id}),",
				"          {Curr Performance Rating Date} = iif(isNull({Curr Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Curr Performance Rating Date})),",
				"          {P1 Performance Rating Date} = iif(isNull({P1 Performance Rating Date}),concat('12/31/',toString({P1 Performance Year})),toString({P1 Performance Rating Date})),",
				"          {P1 Client Performance Rating} = iif(isNull({P1 Client Performance Rating}),'N/A',{P1 Client Performance Rating}),",
				"          {P1 Elloree Performance Rating} = iif(isNull({P1 Elloree Performance Rating}),'N/A',{P1 Elloree Performance Rating}),",
				"          {P1 Elloree Performance Rating Sort Id} = iif(isNull({P1 Elloree Performance Rating Sort Id}),99,{P1 Elloree Performance Rating Sort Id}),",
				"          {P2 Client Performance Rating} = iif(isNull({P2 Client Performance Rating}),'N/A',{P2 Client Performance Rating}),",
				"          {P2 Elloree Performance Rating} = iif(isNull({P2 Elloree Performance Rating}),'N/A',{P2 Elloree Performance Rating}),",
				"          {P2 Elloree Performance Rating Sort Id} = iif(isNull({P2 Elloree Performance Rating Sort Id}),99,{P2 Elloree Performance Rating Sort Id}),",
				"          {P2 Performance Rating Date} = iif(isNull({P2 Performance Rating Date}),concat('12/31/',toString({P2 Performance Year})),toString({P2 Performance Rating Date})),",
				"          {P3 Client Performance Rating} = iif(isNull({P3 Client Performance Rating}),'N/A',{P3 Client Performance Rating}),",
				"          {P3 Elloree Performance Rating} = iif(isNull({P3 Elloree Performance Rating}),'N/A',{P3 Elloree Performance Rating}),",
				"          {P3 Elloree Performance Rating Sort Id} = iif(isNull({P3 Elloree Performance Rating Sort Id}),99,{P3 Elloree Performance Rating Sort Id}),",
				"          {P3 Performance Rating Date} = iif(isNull({P3 Performance Rating Date}),concat('12/31/',toString({P3 Performance Year})),toString({P3 Performance Rating Date}))) ~> TransformNulls",
				"P3Select derive({Last Performance Year} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Year},\r",
				"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Year},\r",
				"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Year},\r",
				"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Year},{Curr Performance Year})))),",
				"          {Last Performance Rating Date} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Rating Date},\r",
				"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Rating Date},\r",
				"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Rating Date},\r",
				"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Rating Date},{Curr Performance Rating Date})))),",
				"          {Last Client Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Client Performance Rating},\r",
				"iif(not(isNull({P1 Client Performance Rating})),{P1 Client Performance Rating},\r",
				"iif(not(isNull({P2 Client Performance Rating})),{P2 Client Performance Rating},\r",
				"iif(not(isNull({P3 Client Performance Rating})),{P3 Client Performance Rating},'N/A')))),",
				"          {Last Elloree Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating},\r",
				"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating},\r",
				"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating},\r",
				"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating},'N/A')))),",
				"          {Last Elloree Performance Rating Sort Id} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating Sort Id},\r",
				"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating Sort Id},\r",
				"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating Sort Id},\r",
				"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating Sort Id},99))))) ~> CalcLast",
				"TransformNulls derive({Last Top Talent Ind} = iif({Last Elloree Performance Rating}=='Outstanding','Y',iif({Last Elloree Performance Rating}=='Exceeds','Y','N')),",
				"          {Curr Top Talent Ind} = iif({Curr Elloree Performance Rating}=='Outstanding','Y',iif({Curr Elloree Performance Rating}=='Exceeds','Y','N')),",
				"          {P1 Top Talent Ind} = iif({P1 Elloree Performance Rating}=='Outstanding','Y',iif({P1 Elloree Performance Rating}=='Exceeds','Y','N')),",
				"          {P2 Top Talent Ind} = iif({P2 Elloree Performance Rating}=='Outstanding','Y',iif({P2 Elloree Performance Rating}=='Exceeds','Y','N')),",
				"          {P3 Top Talent Ind} = iif({P3 Elloree Performance Rating}=='Outstanding','Y',iif({P3 Elloree Performance Rating}=='Exceeds','Y','N'))) ~> AddTopTalent",
				"aggregate2 select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Last Performance Year},",
				"          {Last Performance Rating Date},",
				"          {Last Client Performance Rating},",
				"          {Last Elloree Performance Rating},",
				"          {Last Elloree Performance Rating Sort Id},",
				"          {Last Top Talent Ind},",
				"          {Curr Performance Year},",
				"          {Curr Performance Rating Date},",
				"          {Curr Client Performance Rating},",
				"          {Curr Elloree Performance Rating},",
				"          {Curr Elloree Performance Rating Sort Id},",
				"          {Curr Top Talent Ind},",
				"          {P1 Performance Year},",
				"          {P1 Performance Rating Date},",
				"          {P1 Client Performance Rating},",
				"          {P1 Elloree Performance Rating},",
				"          {P1 Elloree Performance Rating Sort Id},",
				"          {P1 Top Talent Ind},",
				"          {P2 Performance Year},",
				"          {P2 Client Performance Rating},",
				"          {P2 Performance Rating Date},",
				"          {P2 Elloree Performance Rating},",
				"          {P2 Elloree Performance Rating Sort Id},",
				"          {P2 Top Talent Ind},",
				"          {P3 Performance Year},",
				"          {P3 Client Performance Rating},",
				"          {P3 Performance Rating Date},",
				"          {P3 Elloree Performance Rating},",
				"          {P3 Elloree Performance Rating Sort Id},",
				"          {P3 Top Talent Ind}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect",
				"AddTopTalent aggregate(groupBy({Client ID},",
				"          {P2 Top Talent Ind},",
				"          {Last Elloree Performance Rating},",
				"          {P2 Performance Rating Date},",
				"          {P3 Top Talent Ind},",
				"          {P1 Elloree Performance Rating},",
				"          {P1 Top Talent Ind},",
				"          {Last Top Talent Ind},",
				"          {Last Performance Year},",
				"          {Last Performance Rating Date},",
				"          {Last Client Performance Rating},",
				"          {Last Elloree Performance Rating Sort Id},",
				"          {Curr Top Talent Ind},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {P3 Performance Year},",
				"          {P3 Client Performance Rating},",
				"          {P3 Performance Rating Date},",
				"          {P3 Elloree Performance Rating},",
				"          {P3 Elloree Performance Rating Sort Id},",
				"          {P2 Performance Year},",
				"          {P2 Client Performance Rating},",
				"          {P2 Elloree Performance Rating},",
				"          {P2 Elloree Performance Rating Sort Id},",
				"          {P1 Performance Year},",
				"          {P1 Performance Rating Date},",
				"          {P1 Client Performance Rating},",
				"          {P1 Elloree Performance Rating Sort Id},",
				"          {Curr Performance Year},",
				"          {Curr Performance Rating Date},",
				"          {Curr Client Performance Rating},",
				"          {Curr Elloree Performance Rating},",
				"          {Curr Elloree Performance Rating Sort Id}),",
				"     EmpCount = count({Worker ID})) ~> aggregate2",
				"FinalSelect filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerId",
				"select2, selectHistoricalCoreDB union(byName: true)~> union1",
				"select3, selectHistoricalTalentDB union(byName: true)~> union2",
				"HistoricalCoreDB select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Event Year} = EventYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectHistoricalCoreDB",
				"Core select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"HistoricalTalentDB select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          {Performance Rating} = PerfRating,",
				"          {Performance Rating Date} = PerfRatingDt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectHistoricalTalentDB",
				"Performance select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year},",
				"          {Worker ID},",
				"          {Performance Rating},",
				"          {Performance Rating Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"RemoveNullWorkerId sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}