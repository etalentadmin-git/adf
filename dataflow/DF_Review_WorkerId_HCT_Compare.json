{
	"name": "DF_Review_WorkerId_HCT_Compare",
	"properties": {
		"folder": {
			"name": "Client/Audit Reports"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "Core"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreDB"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "HCTFilter"
				},
				{
					"name": "MaxYear"
				},
				{
					"name": "JoinMax"
				},
				{
					"name": "MaxYearMinus1"
				},
				{
					"name": "MaxYearMinus2"
				},
				{
					"name": "MaxYearMinus3"
				},
				{
					"name": "MaxYearMinus4"
				},
				{
					"name": "SelectWorkerAndYear"
				},
				{
					"name": "TotalWorkersMaxYear"
				},
				{
					"name": "JoinMaxMinus1"
				},
				{
					"name": "TotalWorkersMaxYearMinus1"
				},
				{
					"name": "JoinMaxMinus2"
				},
				{
					"name": "TotalWorkersMaxYearMinus2"
				},
				{
					"name": "JoinMaxMinus3"
				},
				{
					"name": "TotalWorkersMaxYearMinus3"
				},
				{
					"name": "JoinMaxMinus4"
				},
				{
					"name": "TotalWorkersMaxYearMinus4"
				},
				{
					"name": "JoinMaxMinus1forCompare"
				},
				{
					"name": "selectMax"
				},
				{
					"name": "selectMaxMinus1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "JoinMaxMinus2forCompare"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "selectMaxMinus2"
				},
				{
					"name": "JoinMaxMinus3forCompare"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "selectMaxMinus3"
				},
				{
					"name": "JoinMaxMinus4forCompare"
				},
				{
					"name": "selectMaxMinus4"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "JoinTotalMax"
				},
				{
					"name": "FinalSelectMaxCompare"
				},
				{
					"name": "JoinTotal1P"
				},
				{
					"name": "FinalSelect1PCompare"
				},
				{
					"name": "JoinTotal2P"
				},
				{
					"name": "FinalSelect2PCompare"
				},
				{
					"name": "JoinTotal3P"
				},
				{
					"name": "FinalSelect3PCompare"
				},
				{
					"name": "MaxYearMinus5"
				},
				{
					"name": "JoinMaxMinus5"
				},
				{
					"name": "selectMaxMinus5"
				},
				{
					"name": "TotalWorkersMaxYearMinus5"
				},
				{
					"name": "JoinMaxMinus5forCompare"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "JoinTotal4P"
				},
				{
					"name": "FinalSelect4PCompare"
				},
				{
					"name": "CalcMaxPercent"
				},
				{
					"name": "Calc1PPercent"
				},
				{
					"name": "Calc2PPercent"
				},
				{
					"name": "Calc3PPercent"
				},
				{
					"name": "Calc4PPercent"
				},
				{
					"name": "union1"
				},
				{
					"name": "TERFilter"
				},
				{
					"name": "JoinFilterMaxTER"
				},
				{
					"name": "JoinFilter1PTER"
				},
				{
					"name": "JoinFilter2PTER"
				},
				{
					"name": "JoinFilter3PTER"
				},
				{
					"name": "JoinFilter4PTER"
				},
				{
					"name": "SelectTERColumns"
				},
				{
					"name": "MaxTERExist5PHC"
				},
				{
					"name": "Terminations4PCount"
				},
				{
					"name": "MaxTERExist4PHC"
				},
				{
					"name": "Terminations3PCount"
				},
				{
					"name": "MaxTERExist3PHC"
				},
				{
					"name": "Terminations2PCount"
				},
				{
					"name": "MaxTERExist2PHC"
				},
				{
					"name": "Terminations1PCount"
				},
				{
					"name": "MaxTERExist1PHC"
				},
				{
					"name": "TerminationsMaxCount"
				},
				{
					"name": "JoinMaxTERCount"
				},
				{
					"name": "FinalSelect1P"
				},
				{
					"name": "Join1PTERCount"
				},
				{
					"name": "FinalSelect2P"
				},
				{
					"name": "Join2PTERCount"
				},
				{
					"name": "FinalSelect3P"
				},
				{
					"name": "Join3PTERCount"
				},
				{
					"name": "FinalSelect4P"
				},
				{
					"name": "Join4PTERCount"
				},
				{
					"name": "FinalSelect5P"
				},
				{
					"name": "HIRFilter"
				},
				{
					"name": "SelectHIRColumns"
				},
				{
					"name": "JoinFilterMaxHIR"
				},
				{
					"name": "HireMaxCount"
				},
				{
					"name": "MaxHIRExistMaxHC"
				},
				{
					"name": "JoinFilter1PHIR"
				},
				{
					"name": "HIR1PExist1PHC"
				},
				{
					"name": "Hire1PCount"
				},
				{
					"name": "JoinFilter2PHIR"
				},
				{
					"name": "HIR2PExist2PHC"
				},
				{
					"name": "Hire2PCount"
				},
				{
					"name": "JoinFilter3PHIR"
				},
				{
					"name": "HIR3PExist3PHC"
				},
				{
					"name": "Hire3PCount"
				},
				{
					"name": "JoinFilter4PHIR"
				},
				{
					"name": "HIR4PExist4PHC"
				},
				{
					"name": "Hire4PCount"
				},
				{
					"name": "Join4PHIRCount"
				},
				{
					"name": "Join3PHIRCount"
				},
				{
					"name": "Join2PHIRCount"
				},
				{
					"name": "Join1PHIRCount"
				},
				{
					"name": "JoinMaxHIRCount"
				},
				{
					"name": "SelectCoreDBFields"
				},
				{
					"name": "UnionWithCoreDB"
				},
				{
					"name": "RemoveDupsCore"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as integer,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Core",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientEngagementType as string,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> CoreDB",
				"RemoveDupsCore filter({Event Code}=='HCT') ~> filter1",
				"RemoveDupsCore filter({Event Code}=='HCT') ~> HCTFilter",
				"filter1 aggregate({Event Year Last} = max({Event Year})) ~> MaxYear",
				"SelectWorkerAndYear, MaxYear join({Event Year} == {Event Year Last},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMax",
				"filter1 aggregate({Event Year -1} = max({Event Year})-1) ~> MaxYearMinus1",
				"filter1 aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
				"filter1 aggregate({Event Year -3} = max({Event Year})-3) ~> MaxYearMinus3",
				"filter1 aggregate({Event Year -4} = max({Event Year})-4) ~> MaxYearMinus4",
				"HCTFilter select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWorkerAndYear",
				"JoinMax aggregate(groupBy({Event Year Last}),",
				"     {Total Max} = count({Worker ID})) ~> TotalWorkersMaxYear",
				"SelectWorkerAndYear, MaxYearMinus1 join({Event Year} == {Event Year -1},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus1",
				"JoinMaxMinus1 aggregate(groupBy({Event Year -1}),",
				"     {Total Max -1} = count({Worker ID})) ~> TotalWorkersMaxYearMinus1",
				"SelectWorkerAndYear, MaxYearMinus2 join({Event Year} == {Event Year -2},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus2",
				"JoinMaxMinus2 aggregate(groupBy({Event Year -2}),",
				"     TotalWorkersMaxYearMinus2 = count({Worker ID})) ~> TotalWorkersMaxYearMinus2",
				"SelectWorkerAndYear, MaxYearMinus3 join({Event Year} == {Event Year -3},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus3",
				"JoinMaxMinus3 aggregate(groupBy({Event Year -3}),",
				"     TotalWorkersMaxYearMinus3 = count({Worker ID})) ~> TotalWorkersMaxYearMinus3",
				"SelectWorkerAndYear, MaxYearMinus4 join({Event Year} == {Event Year -4},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus4",
				"JoinMaxMinus4 aggregate(groupBy({Event Year -4}),",
				"     TotalWorkersMaxYearMinus4 = count({Worker ID})) ~> TotalWorkersMaxYearMinus4",
				"selectMax, selectMaxMinus1 join({Max Worker ID} == {1P Worker ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus1forCompare",
				"JoinMax select(mapColumn(",
				"          {Max Client ID} = {Client ID},",
				"          {Max Client Engagement Date} = {Client Engagement Date},",
				"          {Max Worker ID} = {Worker ID},",
				"          {Max Event Year} = {Event Year},",
				"          {Event Year Last}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMax",
				"JoinMaxMinus1 select(mapColumn(",
				"          {1P Client ID} = {Client ID},",
				"          {1P Client Engagement Date} = {Client Engagement Date},",
				"          {1P Worker ID} = {Worker ID},",
				"          {1P Event Year} = {Event Year},",
				"          {Event Year -1}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMaxMinus1",
				"JoinMaxMinus1forCompare aggregate(groupBy({Client ID} = {Max Client ID},",
				"          {Client Engagement Date} = {Max Client Engagement Date},",
				"          {1P Event Year},",
				"          {Max Event Year}),",
				"     {Total 1P HCT in Latest HCT} = count({1P Worker ID})) ~> aggregate1",
				"selectMaxMinus1, selectMaxMinus2 join({1P Worker ID} == {2P Worker ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus2forCompare",
				"JoinMaxMinus2forCompare aggregate(groupBy({Client ID} = {1P Client ID},",
				"          {Client Engagement Date} = {1P Client Engagement Date},",
				"          {2P Event Year},",
				"          {1P Event Year}),",
				"     {Total Max -2 in Max -1} = count({2P Worker ID})) ~> aggregate2",
				"JoinMaxMinus2 select(mapColumn(",
				"          {2P Client ID} = {Client ID},",
				"          {2P Client Engagement Date} = {Client Engagement Date},",
				"          {2P Worker ID} = {Worker ID},",
				"          {2P Event Year} = {Event Year},",
				"          {Event Year -2}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMaxMinus2",
				"selectMaxMinus2, selectMaxMinus3 join({2P Worker ID} == {3P Worker ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus3forCompare",
				"JoinMaxMinus3forCompare aggregate(groupBy({Client ID} = {2P Client ID},",
				"          {Client Engagement Date} = {2P Client Engagement Date},",
				"          {3P Event Year},",
				"          {2P Event Year}),",
				"     {Total Max -3 in Max -2} = count({3P Worker ID})) ~> aggregate3",
				"JoinMaxMinus3 select(mapColumn(",
				"          {3P Client ID} = {Client ID},",
				"          {3P Client Engagement Date} = {Client Engagement Date},",
				"          {3P Worker ID} = {Worker ID},",
				"          {3P Event Year} = {Event Year},",
				"          {Event Year -3}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMaxMinus3",
				"selectMaxMinus3, selectMaxMinus4 join({3P Worker ID} == {4P Worker ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus4forCompare",
				"JoinMaxMinus4 select(mapColumn(",
				"          {4P Client ID} = {Client ID},",
				"          {4P Client Engagement Date} = {Client Engagement Date},",
				"          {4P Worker ID} = {Worker ID},",
				"          {4P Event Year} = {Event Year},",
				"          {Event Year -4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMaxMinus4",
				"JoinMaxMinus4forCompare aggregate(groupBy({Client ID} = {3P Client ID},",
				"          {Client Engagement Date} = {3P Client Engagement Date},",
				"          {4P Event Year},",
				"          {3P Event Year}),",
				"     {Total Max -4 in Max -3} = count({4P Worker ID})) ~> aggregate4",
				"aggregate1, TotalWorkersMaxYear join({Max Event Year} == {Event Year Last},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinTotalMax",
				"JoinTotalMax select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr} = {1P Event Year},",
				"          {Prior Yr HCT in Compare YR HCT} = {Total 1P HCT in Latest HCT},",
				"          {Compare Yr} = {Event Year Last},",
				"          {Compare Yr HCT} = {Total Max}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelectMaxCompare",
				"aggregate2, TotalWorkersMaxYearMinus1 join({1P Event Year} == {Event Year -1},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTotal1P",
				"JoinTotal1P select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr} = {2P Event Year},",
				"          {Prior Yr HCT in Compare YR HCT} = {Total Max -2 in Max -1},",
				"          {Compare Yr} = {Event Year -1},",
				"          {Compare Yr HCT} = {Total Max -1}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect1PCompare",
				"aggregate3, TotalWorkersMaxYearMinus2 join({2P Event Year} == {Event Year -2},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTotal2P",
				"JoinTotal2P select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr} = {3P Event Year},",
				"          {Prior Yr HCT in Compare YR HCT} = {Total Max -3 in Max -2},",
				"          {Compare Yr} = {Event Year -2},",
				"          {Compare Yr HCT} = TotalWorkersMaxYearMinus2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect2PCompare",
				"aggregate4, TotalWorkersMaxYearMinus3 join({3P Event Year} == {Event Year -3},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTotal3P",
				"JoinTotal3P select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr} = {4P Event Year},",
				"          {Prior Yr HCT in Compare YR HCT} = {Total Max -4 in Max -3},",
				"          {Compare Yr} = {Event Year -3},",
				"          {Compare Yr HCT} = TotalWorkersMaxYearMinus3",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect3PCompare",
				"filter1 aggregate({Event Year -5} = max({Event Year})-5) ~> MaxYearMinus5",
				"SelectWorkerAndYear, MaxYearMinus5 join({Event Year} == {Event Year -5},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus5",
				"JoinMaxMinus5 select(mapColumn(",
				"          {5P Client ID} = {Client ID},",
				"          {5P Client Engagement Date} = {Client Engagement Date},",
				"          {5P Worker ID} = {Worker ID},",
				"          {5P Event Year} = {Event Year},",
				"          {Event Year -5}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMaxMinus5",
				"JoinMaxMinus5 aggregate(TotalWorkersMaxYearMinus5 = count({Worker ID})) ~> TotalWorkersMaxYearMinus5",
				"selectMaxMinus4, selectMaxMinus5 join({4P Worker ID} == {5P Worker ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxMinus5forCompare",
				"JoinMaxMinus5forCompare aggregate(groupBy({Client ID} = {4P Client ID},",
				"          {Client Engagement Date} = {4P Client Engagement Date},",
				"          {5P Event Year},",
				"          {4P Event Year}),",
				"     {Total Max -5 in Max -4} = count({4P Worker ID})) ~> aggregate5",
				"aggregate5, TotalWorkersMaxYearMinus4 join({4P Event Year} == {Event Year -4},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTotal4P",
				"JoinTotal4P select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr} = {5P Event Year},",
				"          {Prior Yr HCT in Compare YR HCT} = {Total Max -5 in Max -4},",
				"          {Compare Yr} = {Event Year -4},",
				"          {Compare Yr HCT} = TotalWorkersMaxYearMinus4",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect4PCompare",
				"FinalSelect1P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> CalcMaxPercent",
				"FinalSelect2P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc1PPercent",
				"FinalSelect3P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc2PPercent",
				"FinalSelect4P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc3PPercent",
				"FinalSelect5P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc4PPercent",
				"Calc4PPercent, Calc3PPercent, Calc2PPercent, Calc1PPercent, CalcMaxPercent union(byName: true)~> union1",
				"SelectTERColumns filter({Event Code}=='TER') ~> TERFilter",
				"TERFilter, MaxYear join({Event Year} == {Event Year Last},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFilterMaxTER",
				"TERFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFilter1PTER",
				"TERFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFilter2PTER",
				"TERFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFilter3PTER",
				"TERFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFilter4PTER",
				"RemoveDupsCore select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Event Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTERColumns",
				"JoinFilter4PTER, selectMaxMinus5 exists({Worker ID} == {5P Worker ID},",
				"     negate:false,",
				"     broadcast: 'both')~> MaxTERExist5PHC",
				"MaxTERExist5PHC aggregate(groupBy({Termination Year} = {Event Year}),",
				"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations4PCount",
				"JoinFilter3PTER, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
				"     negate:false,",
				"     broadcast: 'both')~> MaxTERExist4PHC",
				"MaxTERExist4PHC aggregate(groupBy({Termination Year} = {Event Year}),",
				"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations3PCount",
				"JoinFilter2PTER, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
				"     negate:false,",
				"     broadcast: 'both')~> MaxTERExist3PHC",
				"MaxTERExist3PHC aggregate(groupBy({Termination Year} = {Event Year}),",
				"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations2PCount",
				"JoinFilter1PTER, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
				"     negate:false,",
				"     broadcast: 'both')~> MaxTERExist2PHC",
				"MaxTERExist2PHC aggregate(groupBy({Termination Year} = {Event Year}),",
				"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations1PCount",
				"JoinFilterMaxTER, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
				"     negate:false,",
				"     broadcast: 'both')~> MaxTERExist1PHC",
				"MaxTERExist1PHC aggregate(groupBy({Termination Year} = {Event Year}),",
				"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> TerminationsMaxCount",
				"FinalSelectMaxCompare, TerminationsMaxCount join({Compare Yr} == {Termination Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinMaxTERCount",
				"JoinMaxHIRCount select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr},",
				"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
				"          {Termination Year},",
				"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
				"          {Hire Year},",
				"          {Hires in Compare HCT},",
				"          {Compare Yr},",
				"          {Compare Yr HCT}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect1P",
				"FinalSelect1PCompare, Terminations1PCount join({Compare Yr} == {Termination Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join1PTERCount",
				"Join1PHIRCount select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr},",
				"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
				"          {Termination Year},",
				"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
				"          {Hire Year},",
				"          {Hires in Compare HCT},",
				"          {Compare Yr},",
				"          {Compare Yr HCT}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect2P",
				"FinalSelect2PCompare, Terminations2PCount join({Compare Yr} == {Termination Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join2PTERCount",
				"Join2PHIRCount select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr},",
				"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
				"          {Termination Year},",
				"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
				"          {Hire Year},",
				"          {Hires in Compare HCT},",
				"          {Compare Yr},",
				"          {Compare Yr HCT}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect3P",
				"FinalSelect3PCompare, Terminations3PCount join({Compare Yr} == {Termination Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join3PTERCount",
				"Join3PHIRCount select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr},",
				"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
				"          {Termination Year},",
				"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
				"          {Hire Year},",
				"          {Hires in Compare HCT},",
				"          {Compare Yr},",
				"          {Compare Yr HCT}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect4P",
				"FinalSelect4PCompare, Terminations4PCount join({Compare Yr} == {Termination Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join4PTERCount",
				"Join4PHIRCount select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Prior Yr},",
				"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
				"          {Termination Year},",
				"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
				"          {Hire Year},",
				"          {Hires in Compare HCT},",
				"          {Compare Yr},",
				"          {Compare Yr HCT}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect5P",
				"SelectHIRColumns filter({Event Code}=='HIR') ~> HIRFilter",
				"RemoveDupsCore select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Year},",
				"          {Event Code}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectHIRColumns",
				"HIRFilter, MaxYear join({Event Year} == {Event Year Last},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinFilterMaxHIR",
				"MaxHIRExistMaxHC aggregate(groupBy({Hire Year} = {Event Year}),",
				"     {Hires in Compare HCT} = count({Worker ID})) ~> HireMaxCount",
				"JoinFilterMaxHIR, selectMax exists({Worker ID} == {Max Worker ID},",
				"     negate:false,",
				"     broadcast: 'auto')~> MaxHIRExistMaxHC",
				"HIRFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinFilter1PHIR",
				"JoinFilter1PHIR, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
				"     negate:false,",
				"     broadcast: 'auto')~> HIR1PExist1PHC",
				"HIR1PExist1PHC aggregate(groupBy({Hire Year} = {Event Year}),",
				"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire1PCount",
				"HIRFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinFilter2PHIR",
				"JoinFilter2PHIR, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
				"     negate:false,",
				"     broadcast: 'auto')~> HIR2PExist2PHC",
				"HIR2PExist2PHC aggregate(groupBy({Hire Year} = {Event Year}),",
				"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire2PCount",
				"HIRFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFilter3PHIR",
				"JoinFilter3PHIR, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
				"     negate:false,",
				"     broadcast: 'auto')~> HIR3PExist3PHC",
				"HIR3PExist3PHC aggregate(groupBy({Hire Year} = {Event Year}),",
				"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire3PCount",
				"HIRFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinFilter4PHIR",
				"JoinFilter4PHIR, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
				"     negate:false,",
				"     broadcast: 'auto')~> HIR4PExist4PHC",
				"HIR4PExist4PHC aggregate(groupBy({Hire Year} = {Event Year}),",
				"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire4PCount",
				"Join4PTERCount, Hire4PCount join({Compare Yr} == {Hire Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join4PHIRCount",
				"Join3PTERCount, Hire3PCount join({Compare Yr} == {Hire Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join3PHIRCount",
				"Join2PTERCount, Hire2PCount join({Compare Yr} == {Hire Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join2PHIRCount",
				"Join1PTERCount, Hire1PCount join({Compare Yr} == {Hire Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join1PHIRCount",
				"JoinMaxTERCount, HireMaxCount join({Compare Yr} == {Hire Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinMaxHIRCount",
				"CoreDB select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          {Event Code} = EventId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCoreDBFields",
				"Core, SelectCoreDBFields union(byName: true)~> UnionWithCoreDB",
				"UnionWithCoreDB aggregate(groupBy({Client Engagement Date},",
				"          {Event Year},",
				"          {Event Code},",
				"          {Worker ID}),",
				"     {Client ID} = max({Client ID})) ~> RemoveDupsCore",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Worker IDs HCT Compare Over Time.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}