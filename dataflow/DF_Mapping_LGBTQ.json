{
	"name": "DF_Mapping_LGBTQ",
	"properties": {
		"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
		"folder": {
			"name": "Client/Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "etalentLGBTQMapTbl",
						"type": "DatasetReference"
					},
					"name": "LGTBQMappingTbl"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_Applicant_File",
						"type": "DatasetReference"
					},
					"name": "Applicant"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseCoreRecords"
				},
				{
					"dataset": {
						"referenceName": "etalentApplicantFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseApplicantRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_MappingWorkingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputWorkinglgtbqMapping"
				},
				{
					"dataset": {
						"referenceName": "Source_MappingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputPrepLGTBQMapping"
				}
			],
			"transformations": [
				{
					"name": "CreatePivotGenderAndEventTime"
				},
				{
					"name": "SortOnEvent"
				},
				{
					"name": "SortOnLGTBQ"
				},
				{
					"name": "AddDerivedEventYearColumn"
				},
				{
					"name": "SelectUniqueOtherClientValues"
				},
				{
					"name": "SelectWithoutEngagementDt"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "SelectApplicant"
				},
				{
					"name": "SelectCore"
				},
				{
					"name": "union1"
				},
				{
					"name": "selectCoreDBRecs"
				},
				{
					"name": "selectApplicantDBRecsInit"
				},
				{
					"name": "selectApplicantDBRecs"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "GetCountOfClientForUniqueValues"
				},
				{
					"name": "JoinClientIDCountInForMaxFilter"
				},
				{
					"name": "CleanupSelectFields"
				},
				{
					"name": "SelectMappingWithMostClients"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "JoinBackFinalSelectMapping"
				},
				{
					"name": "TakeLastClientValForRemainingDups"
				},
				{
					"name": "NotEqualtoClientID"
				},
				{
					"name": "EqualtoClientId"
				},
				{
					"name": "GroupUniqueValues"
				},
				{
					"name": "SelectBasedOnMostRecentClientEngagment"
				},
				{
					"name": "SelectLastEngagementDt"
				},
				{
					"name": "selectUniqueClientIDValues"
				},
				{
					"name": "RemoveDupRows"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string (\"8/31/2024\"),",
				"     Flow_Client_Dt as string (\"8/31/2024\")",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string,",
				"          RowCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientLGBTQ as string,",
				"          ElloreeLGBTQ as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LGTBQMappingTbl",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Event Date} as string,",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Application Date} as string,",
				"          {Applicant ID} as string,",
				"          Source as string,",
				"          {Applicant Type} as string,",
				"          {Internal Worker ID} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Applicant Final Disposition Date} as string,",
				"          {Applicant Final Disposition} as string,",
				"          {Applicant Step Before Final Disposition} as string,",
				"          {Applicant Rejected Reason} as string,",
				"          {Applicant Other (1)} as string,",
				"          {Applicant Other (2)} as string,",
				"          {Applicant Other (3)} as string,",
				"          {Applicant Other (4)} as string,",
				"          {Applicant Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Applicant",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGBTQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseCoreRecords",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ApplicantId as string,",
				"          Source as string,",
				"          ApplType as string,",
				"          InternalWorkerId as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGBTQ as string,",
				"          DisabilityInd as string,",
				"          ApplFinalDisp as string,",
				"          ApplStepBeforeFinalDisp as string,",
				"          ApplRejectedReason as string,",
				"          ApplOther1 as string,",
				"          ApplOther2 as string,",
				"          ApplOther3 as string,",
				"          ApplOther4 as string,",
				"          ApplOther5 as string,",
				"          LoadDt as date,",
				"          ApplicantCity as string,",
				"          ApplicantState as string,",
				"          ApplicantCountry as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseApplicantRecords",
				"derivedColumn1 pivot(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Client LGBTQ},",
				"          {Elloree LGBTQ},",
				"          {Suggested Elloree LGBTQ},",
				"          {Suggested Source}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Record Id}),",
				"     columnNaming: '$N$V',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> CreatePivotGenderAndEventTime",
				"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
				"CreatePivotGenderAndEventTime sort(asc({Client LGBTQ}, true)) ~> SortOnLGTBQ",
				"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
				"          {Elloree LGBTQ} = '') ~> AddDerivedEventYearColumn",
				"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
				"          ClientLGBTQ,",
				"          ElloreeLGBTQ),",
				"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
				"TakeLastClientValForRemainingDups select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientLGBTQ},",
				"          {Unique ElloreeLGBTQ}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
				"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
				"     && LGBTQ == {Unique ClientLGBTQ},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {Client LGBTQ} = LGBTQ,",
				"          {Elloree LGBTQ},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested Elloree LGBTQ} = {Unique ElloreeLGBTQ},",
				"          {Record Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
				"     && {Client LGBTQ} == {Unique ClientLGBTQ},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join2",
				"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Elloree LGBTQ} = iif(isNull({Suggested Source}),{Unique ClientLGTBQ},{Suggested Elloree LGBTQ})) ~> derivedColumn1",
				"join2 select(mapColumn(",
				"          {Client LGBTQ},",
				"          {Elloree LGBTQ},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Elloree LGBTQ},",
				"          {Record Id},",
				"          {Unique ClientId},",
				"          {Unique ClientLGTBQ} = {Unique ClientLGBTQ},",
				"          {Unique ElloreeLGTBQ} = {Unique ElloreeLGBTQ}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"aggregate3 select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year},",
				"          Event,",
				"          {Record Id} = {Applicant ID},",
				"          LGBTQ",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
				"AllCoreData select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Worker ID},",
				"          {Event Year},",
				"          Event,",
				"          LGBTQ",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCore",
				"SelectCore, SelectApplicant, selectApplicantDBRecs, selectCoreDBRecs union(byName: true)~> union1",
				"aggregate2 select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Record Id} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          LGBTQ",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
				"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Record Id} = ApplicantId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          LGBTQ),",
				"     TotalRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
				"selectApplicantDBRecsInit select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id},",
				"          {Event Year},",
				"          Event,",
				"          LGBTQ",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
				"DatabaseCoreRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventYear,",
				"          Event,",
				"          LGBTQ),",
				"     MaxWorkerId = max(WorkerId)) ~> aggregate2",
				"Applicant aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year},",
				"          Event,",
				"          {Applicant ID},",
				"          LGBTQ),",
				"     MaxAppl = max({Applicant ID})) ~> aggregate3",
				"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientLGBTQ} = ClientLGBTQ,",
				"          {Count Unique ElloreeLGBTQ} = ElloreeLGBTQ),",
				"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
				"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join(ClientLGBTQ == {Count Unique ClientLGBTQ}",
				"     && ElloreeLGBTQ == {Count Unique ElloreeLGBTQ},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
				"JoinClientIDCountInForMaxFilter select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientLGBTQ} = ClientLGBTQ,",
				"          {Unique ElloreeLGBTQ} = ElloreeLGBTQ,",
				"          ClientIDCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
				"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
				"          {Unique ClientLGBTQ},",
				"          {Unique ElloreeLGBTQ}),",
				"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
				"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientLGBTQ} = {Unique ClientLGBTQ}),",
				"     {Agg Unique ElloreeLGBTQ} = first({Unique ElloreeLGBTQ})) ~> aggregate4",
				"SelectMappingWithMostClients, aggregate4 join({Unique ClientLGBTQ} == {Agg Unique ClientLGBTQ}",
				"     && {Unique ElloreeLGBTQ} == {Agg Unique ElloreeLGBTQ},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
				"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientLGBTQ},",
				"          {Unique ElloreeLGBTQ}),",
				"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
				"LGTBQMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
				"LGTBQMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
				"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
				"          ClientEngagementDt,",
				"          ClientLGBTQ,",
				"          ElloreeLGBTQ),",
				"     RowCount = count(ClientId)) ~> GroupUniqueValues",
				"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
				"     negate:false,",
				"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
				"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
				"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientLGBTQ} = ClientLGBTQ,",
				"          {Unique ElloreeLGBTQ} = ElloreeLGBTQ",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
				"union1 aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id},",
				"          {Event Year},",
				"          Event,",
				"          LGBTQ),",
				"     RowCount = count({Client ID})) ~> RemoveDupRows",
				"SortOnLGTBQ sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['lgbtq_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputWorkinglgtbqMapping",
				"SortOnLGTBQ sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['prep_lgbtq_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputPrepLGTBQMapping"
			]
		}
	}
}