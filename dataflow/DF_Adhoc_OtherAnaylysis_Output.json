{
	"name": "DF_Adhoc_OtherAnaylysis_Output",
	"properties": {
		"folder": {
			"name": "Client/Adhoc"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "etalentOtherCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "T1OtherCore"
				},
				{
					"dataset": {
						"referenceName": "etalentOtherCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "OtherCoreFullPop"
				},
				{
					"dataset": {
						"referenceName": "etalentTmp_OtherAnalysisTbl",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_FactTblFldr",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinT1"
				},
				{
					"name": "SelectCleanup"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          T1_WorkerId as string,",
				"          T1_EventType as string,",
				"          T1_CharVal1 as string,",
				"          T1_CharVal2 as string,",
				"          T1_NumVal1 as double,",
				"          T1_NumVal2 as double,",
				"          T1_DtVal1 as date,",
				"          T1_DtVal2 as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> T1OtherCore",
				"source(output(",
				"          WorkerId as string,",
				"          ClientId as string,",
				"          ClientEngagementDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> OtherCoreFullPop",
				"source(output(",
				"          Id as integer,",
				"          Type as string,",
				"          Year as integer,",
				"          Quarter as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl] where Id=1\"),",
				"     format: 'query') ~> source1",
				"OtherCoreFullPop, T1OtherCore join(WorkerId == T1_WorkerId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinT1",
				"joinT1 select(mapColumn(",
				"          WorkerId,",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          T1_EventType,",
				"          T1_CharVal1,",
				"          T1_CharVal2,",
				"          T1_NumVal1,",
				"          T1_NumVal2,",
				"          T1_DtVal1,",
				"          T1_DtVal2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCleanup",
				"T1OtherCore, source1 join(T1_EventType == Type",
				"     && ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"SelectCleanup sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['TestOtherAnalysisOutput.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}