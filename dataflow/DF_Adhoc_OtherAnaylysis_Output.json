{
	"name": "DF_Adhoc_OtherAnaylysis_Output",
	"properties": {
		"folder": {
			"name": "Client/Adhoc"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "etalentOtherCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "AllOtherCore"
				},
				{
					"dataset": {
						"referenceName": "etalentOtherCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "OtherCoreFullPop"
				},
				{
					"dataset": {
						"referenceName": "etalentTmp_OtherAnalysisTbl",
						"type": "DatasetReference"
					},
					"name": "AllOtherTblAnalysis"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_FactTblFldr",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinT1"
				},
				{
					"name": "SelectCleanup"
				},
				{
					"name": "join1"
				},
				{
					"name": "DerivedAddTypeId"
				},
				{
					"name": "SelectAnalyisTypeOutput"
				},
				{
					"name": "filterT1"
				},
				{
					"name": "filterT2"
				},
				{
					"name": "filterT3"
				},
				{
					"name": "filterT4"
				},
				{
					"name": "TypeT1"
				},
				{
					"name": "TypeT2"
				},
				{
					"name": "TypeT3"
				},
				{
					"name": "TypeT4"
				},
				{
					"name": "selectT1"
				},
				{
					"name": "filterT5"
				},
				{
					"name": "TypeT5"
				},
				{
					"name": "filterT6"
				},
				{
					"name": "TypeT6"
				},
				{
					"name": "filterT7"
				},
				{
					"name": "TypeT7"
				},
				{
					"name": "filterT8"
				},
				{
					"name": "TypeT8"
				},
				{
					"name": "filterT9"
				},
				{
					"name": "TypeT9"
				},
				{
					"name": "filterT10"
				},
				{
					"name": "TypeT10"
				},
				{
					"name": "filterT11"
				},
				{
					"name": "TypeT11"
				},
				{
					"name": "filterT12"
				},
				{
					"name": "TypeT12"
				},
				{
					"name": "filterT13"
				},
				{
					"name": "TypeT13"
				},
				{
					"name": "filterT14"
				},
				{
					"name": "TypeT14"
				},
				{
					"name": "filterT15"
				},
				{
					"name": "TypeT15"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          WorkerId as string,",
				"          Type as string,",
				"          OtherCharVal1 as string,",
				"          OtherCharVal2 as string,",
				"          OtherNumVal1 as double,",
				"          OtherNumVal2 as double,",
				"          OtherDtVal1 as date,",
				"          OtherDtVal2 as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> AllOtherCore",
				"source(output(",
				"          WorkerId as string,",
				"          ClientId as string,",
				"          ClientEngagementDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> OtherCoreFullPop",
				"source(output(",
				"          Id as integer,",
				"          Type as string,",
				"          Year as integer,",
				"          Quarter as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl]\"),",
				"     format: 'query') ~> AllOtherTblAnalysis",
				"OtherCoreFullPop, AllOtherCore join(OtherCoreFullPop@WorkerId == T1_WorkerId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinT1",
				"joinT1 select(mapColumn(",
				"          WorkerId = OtherCoreFullPop@WorkerId,",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          T1_EventType,",
				"          T1_CharVal1,",
				"          T1_CharVal2,",
				"          T1_NumVal1,",
				"          T1_NumVal2,",
				"          T1_DtVal1,",
				"          T1_DtVal2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCleanup",
				"AllOtherCore, TypeT1 join(Type == Type1,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
				"DerivedAddTypeId select(mapColumn(",
				"          Id,",
				"          Type = {Type Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
				"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
				"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
				"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
				"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
				"filterT1 select(mapColumn(",
				"          Type1 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT1",
				"filterT2 select(mapColumn(",
				"          Type2 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT2",
				"filterT3 select(mapColumn(",
				"          Type3 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT3",
				"filterT4 select(mapColumn(",
				"          Type4 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT4",
				"join1 select(mapColumn(",
				"          WorkerId,",
				"          Type,",
				"          OtherCharVal1,",
				"          OtherCharVal2,",
				"          OtherNumVal1,",
				"          OtherNumVal2,",
				"          OtherDtVal1,",
				"          OtherDtVal2",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectT1",
				"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
				"filterT5 select(mapColumn(",
				"          Type5 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT5",
				"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
				"filterT6 select(mapColumn(",
				"          Type6 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT6",
				"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
				"filterT7 select(mapColumn(",
				"          Type7 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT7",
				"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
				"filterT8 select(mapColumn(",
				"          Type8 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT8",
				"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
				"filterT9 select(mapColumn(",
				"          Type9 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT9",
				"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
				"filterT10 select(mapColumn(",
				"          Type10 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT10",
				"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
				"filterT11 select(mapColumn(",
				"          Type11 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT11",
				"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
				"filterT12 select(mapColumn(",
				"          Type12 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT12",
				"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
				"filterT13 select(mapColumn(",
				"          Type13 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT13",
				"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
				"filterT14 select(mapColumn(",
				"          Type14 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT14",
				"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
				"filterT15 select(mapColumn(",
				"          Type15 = Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TypeT15",
				"SelectCleanup sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['TestOtherAnalysisOutput.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}