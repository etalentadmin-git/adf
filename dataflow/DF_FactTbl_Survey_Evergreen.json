{
	"name": "DF_FactTbl_Survey_Evergreen",
	"properties": {
		"folder": {
			"name": "Client/Adhoc"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "etalentPerfRatingHistFactTbl",
						"type": "DatasetReference"
					},
					"name": "PerfRatingHistory"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreYear"
				},
				{
					"dataset": {
						"referenceName": "etalentCorpTitleMapTbl",
						"type": "DatasetReference"
					},
					"name": "LevelMapForEmp"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CorePromo"
				},
				{
					"dataset": {
						"referenceName": "etalentApplicantFactTbl",
						"type": "DatasetReference"
					},
					"name": "Applicant"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "AllCore"
				},
				{
					"dataset": {
						"referenceName": "etalentTalentFactTbl",
						"type": "DatasetReference"
					},
					"name": "Talent"
				},
				{
					"dataset": {
						"referenceName": "etalentOtherCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "OtherCore"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreForSupplement"
				},
				{
					"dataset": {
						"referenceName": "etalentEthnicityMapTbl",
						"type": "DatasetReference"
					},
					"name": "EthnicityMap"
				},
				{
					"dataset": {
						"referenceName": "etalentGenderMapTbl",
						"type": "DatasetReference"
					},
					"name": "GenderMap"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SelectCurrYear"
				},
				{
					"name": "RemoveYearNullRows"
				},
				{
					"name": "SelectEmpLvlMap"
				},
				{
					"name": "SelectEmpTalentTag"
				},
				{
					"name": "CurrYearPromoFilter"
				},
				{
					"name": "Select1PYear"
				},
				{
					"name": "Select2PYear"
				},
				{
					"name": "SelectPromoWorkerID"
				},
				{
					"name": "P1YearPromoFilter"
				},
				{
					"name": "P2YearPromoFilter"
				},
				{
					"name": "selectP2Promo"
				},
				{
					"name": "selectP1Promo"
				},
				{
					"name": "selectCurrPromo"
				},
				{
					"name": "P2Promo"
				},
				{
					"name": "P1Promo"
				},
				{
					"name": "CurrPromo"
				},
				{
					"name": "AggApplicantData"
				},
				{
					"name": "CalcApplicantId"
				},
				{
					"name": "Select5orMoreAppliedApplicant"
				},
				{
					"name": "Select3PYear"
				},
				{
					"name": "P3YearPromoFilter"
				},
				{
					"name": "selectP3Promo"
				},
				{
					"name": "P3Promo"
				},
				{
					"name": "select6"
				},
				{
					"name": "SelectApplColumns"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "GroupWorkerAndMgr"
				},
				{
					"name": "CountMgrByWorker"
				},
				{
					"name": "SelectPrior3Years"
				},
				{
					"name": "RemoveNullsMgrIds"
				},
				{
					"name": "select8"
				},
				{
					"name": "select9"
				},
				{
					"name": "select10"
				},
				{
					"name": "select11"
				},
				{
					"name": "SelectTalentColumns"
				},
				{
					"name": "FilterEngagementSurveyeSat"
				},
				{
					"name": "CalceSatSurveyAvg"
				},
				{
					"name": "derivedSpeedBump8eSat"
				},
				{
					"name": "SelectSpeedbump8"
				},
				{
					"name": "FilterEngagementSurveySafeBelongMatter"
				},
				{
					"name": "CalcBelongSurveyAvg"
				},
				{
					"name": "derivedSpeedBump9Belong"
				},
				{
					"name": "SelectSpeedbump9"
				},
				{
					"name": "FilterEngagementSurveyGrowth"
				},
				{
					"name": "CalcGrowthSurveyAvg"
				},
				{
					"name": "derivedSpeedBump10Growth"
				},
				{
					"name": "SelectSpeedbump10"
				},
				{
					"name": "FilterEngagementSurveyMgrFBkConvo"
				},
				{
					"name": "CalcMgrFBkConvoSurveyAvg"
				},
				{
					"name": "derivedSpeedBump11MgrFBkConvo"
				},
				{
					"name": "SelectSpeedbump11"
				},
				{
					"name": "FilterEngagementSurveyPotential"
				},
				{
					"name": "derivedSpeedBump12Potential"
				},
				{
					"name": "SelectSpeedbump12"
				},
				{
					"name": "FilterEngagementSurveyGoals"
				},
				{
					"name": "SurveyGoalsCu"
				},
				{
					"name": "filter1"
				},
				{
					"name": "SelectSurveyValues"
				},
				{
					"name": "HCTCurrent"
				},
				{
					"name": "HCT1P"
				},
				{
					"name": "HCT2P"
				},
				{
					"name": "WorkerID1P"
				},
				{
					"name": "WorkerID2P"
				},
				{
					"name": "HCTin1P"
				},
				{
					"name": "HCTin2P"
				},
				{
					"name": "JoinElloreeRace"
				},
				{
					"name": "JoinElloreeGender"
				},
				{
					"name": "SelectAllCore"
				},
				{
					"name": "HCTCurrMgr"
				},
				{
					"name": "HCT1PMgr"
				},
				{
					"name": "HCT2PMgr"
				},
				{
					"name": "unionAllWorkerMgr"
				},
				{
					"name": "GroupWorkerMgrCombo"
				},
				{
					"name": "SeleceWorkerMgrCombo"
				},
				{
					"name": "WorkerMgrCount"
				},
				{
					"name": "JoinMgrCount"
				},
				{
					"name": "SelectHCTCleanup"
				},
				{
					"name": "filter2"
				},
				{
					"name": "SurveyGoalsImpactReach1P"
				},
				{
					"name": "filter3"
				},
				{
					"name": "SurveyGoalsSeizeOpp1P"
				},
				{
					"name": "JoinSurveyGoalVal"
				},
				{
					"name": "JoinSurveyGoalImpactSeize"
				},
				{
					"name": "FilterSurveyGoalsSeize1P"
				},
				{
					"name": "FilterSurveyGoalsSeize2P"
				},
				{
					"name": "SurveyGoalsSeizeOpp2P"
				},
				{
					"name": "FilterSurveyGoalsImpactReach1P"
				},
				{
					"name": "FilterSurveyGoalsSeize2PVal"
				},
				{
					"name": "SurveyGoalsImpactReach2P"
				},
				{
					"name": "FilterSurveyGoalsCurr"
				},
				{
					"name": "join3"
				},
				{
					"name": "select12"
				},
				{
					"name": "JoinTalentTag"
				}
			],
			"scriptLines": [
				"parameters{",
				"     SB_BL_Year as string,",
				"     SB_BL_Quarter as string,",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string,",
				"     SB1_MgrLvl as string,",
				"     SB2_MgrTalent as string,",
				"     SB3_MgrExp as string,",
				"     SB4_Promotion as string,",
				"     SB5_Applied5 as string,",
				"     SB6_SilvMedal as string,",
				"     SB7_Mgr3Plus as string,",
				"     SB8_Placeholder as string,",
				"     SB9_Placeholder as string,",
				"     SB10_Placeholder as string,",
				"     SB11_Placeholder as string,",
				"     SB12_Placeholder as string,",
				"     SB13_Placeholder as string,",
				"     SB14_Placeholder as string,",
				"     SB15_Placeholder as string",
				"}",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventYear as integer,",
				"          WorkerId as string,",
				"          LastPerfYear as integer,",
				"          LastPerfRatingDt as date,",
				"          LastClientPerfRating as string,",
				"          LastElloreePerfRating as string,",
				"          LastElloreePerfRatingSortId as integer,",
				"          LastTopTalentInd as string,",
				"          CurrPerfYear as integer,",
				"          CurrPerfRatingDt as date,",
				"          CurrTalentTag as string,",
				"          CurrClientPerfRating as string,",
				"          CurrElloreePerfRating as string,",
				"          CurrElloreePerfRatingSortId as integer,",
				"          CurrTopTalentInd as string,",
				"          P1PerfYear as integer,",
				"          P1PerfRatingDt as date,",
				"          P1ClientPerfRating as string,",
				"          P1ElloreePerfRating as string,",
				"          P1ElloreePerfRatingSortId as integer,",
				"          P1TopTalentInd as string,",
				"          P2PerfYear as integer,",
				"          P2PerfRatingDt as date,",
				"          P2ClientPerfRating as string,",
				"          P2ElloreePerfRating as string,",
				"          P2ElloreePerfRatingSortId as integer,",
				"          P2TopTalentInd as string,",
				"          P3PerfYear as integer,",
				"          P3PerfRatingDt as date,",
				"          P3ClientPerfRating as string,",
				"          P3ElloreePerfRating as string,",
				"          P3ElloreePerfRatingSortId as integer,",
				"          P3TopTalentInd as string,",
				"          LastTalentTagYear as integer,",
				"          LastTalentTag as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> PerfRatingHistory",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
				"     format: 'query') ~> CoreYear",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientCorpTitle as string,",
				"          ClientElloreeCorpTitle as string,",
				"          ElloreeCorpTitle as string,",
				"          ElloreeCorpTitleSortId as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> LevelMapForEmp",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> CorePromo",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ApplicantId as string,",
				"          Source as string,",
				"          ApplType as string,",
				"          InternalWorkerId as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          ApplFinalDisp as string,",
				"          ApplStepBeforeFinalDisp as string,",
				"          ApplRejectedReason as string,",
				"          ApplOther1 as string,",
				"          ApplOther2 as string,",
				"          ApplOther3 as string,",
				"          ApplOther4 as string,",
				"          ApplOther5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> Applicant",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> AllCore",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventYear as integer,",
				"          EventDt as date,",
				"          Event as string,",
				"          EventType as string,",
				"          PerfRating as string,",
				"          PerfRatingDt as date,",
				"          TalentIdentifier1 as string,",
				"          TalentIdentifier2 as string,",
				"          TalentIdentifier3 as string,",
				"          TalentIdentifier4 as string,",
				"          TalentIdentifier5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> Talent",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventDesc as string,",
				"          EventType as string,",
				"          OtherCharVal11 as string,",
				"          OtherCharVal2 as string,",
				"          OtherNumVal1 as double,",
				"          OtherNumVal2 as double,",
				"          OtherDtVal1 as date,",
				"          OtherDtVal2 as date,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> OtherCore",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT'\"),",
				"     format: 'query') ~> CoreForSupplement",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientRace as string,",
				"          ClientHispanicLatinoOrigin as string,",
				"          ElloreeRace as string,",
				"          ElloreeHispanicLatinoOrigin as string,",
				"          ElloreeEthnicGroup as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[EthnicityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> EthnicityMap",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientGender as string,",
				"          ElloreeGender as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[GenderMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> GenderMap",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
				"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
				"LevelMapForEmp select(mapColumn(",
				"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
				"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
				"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
				"PerfRatingHistory select(mapColumn(",
				"          {Emp Perf Rating Worker ID} = WorkerId,",
				"          {Emp Perf Rating Event Year} = EventYear,",
				"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
				"          {Emp Curr Elloree Perf Rating} = CurrElloreePerfRating,",
				"          {Emp P1 Elloree Perf Rating} = P1ElloreePerfRating,",
				"          {Emp P2 Elloree Perf Rating} = P2ElloreePerfRating",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
				"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CurrYearPromoFilter",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
				"CorePromo select(mapColumn(",
				"          {PRO Worker ID} = WorkerId,",
				"          {Event Year} = EventYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
				"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> P1YearPromoFilter",
				"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> P2YearPromoFilter",
				"P2YearPromoFilter select(mapColumn(",
				"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
				"P1YearPromoFilter select(mapColumn(",
				"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
				"CurrYearPromoFilter select(mapColumn(",
				"          {Curr YR Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
				"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
				"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
				"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
				"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
				"          {Event Year}),",
				"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
				"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
				"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
				"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> P3YearPromoFilter",
				"P3YearPromoFilter select(mapColumn(",
				"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
				"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
				"CoreYear select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Event Date} = EventDt,",
				"          EventMonth,",
				"          {Event Quarter} = EventQuarter,",
				"          {Event Year} = EventYear,",
				"          {Event Code} = EventId,",
				"          {Years of Service} = YearsofSrvc,",
				"          {Last Promo Date} = LastPromoDt,",
				"          {Corporate Title} = CorpTitle,",
				"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
				"          EmpCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"Applicant select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          {Requisition ID} = ReqId,",
				"          {Applicant ID} = ApplicantId,",
				"          {Internal Worker ID} = InternalWorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
				"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
				"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
				"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
				"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
				"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
				"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
				"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
				"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
				"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
				"          DirectMgrWorkerId),",
				"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
				"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
				"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
				"AllCore, Select2PYear join(EventYear >= Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> SelectPrior3Years",
				"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
				"aggregate1 select(mapColumn(",
				"          {P3 YR PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"aggregate2 select(mapColumn(",
				"          {P2 YR PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"aggregate3 select(mapColumn(",
				"          {P1 YR PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"aggregate4 select(mapColumn(",
				"          {Curr YR Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"Talent select(mapColumn(",
				"          {Talent WorkerId} = WorkerId,",
				"          {Talent EventYear} = EventYear,",
				"          TalentIdentifier1,",
				"          TalentIdentifier2,",
				"          TalentIdentifier3,",
				"          TalentIdentifier4,",
				"          TalentIdentifier5",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
				"OtherCore filter(EventType=='Engagement Survey - eSat') ~> FilterEngagementSurveyeSat",
				"FilterEngagementSurveyeSat aggregate(groupBy(WorkerId),",
				"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
				"          SumSurveryValues = sum(OtherNumVal1),",
				"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalceSatSurveyAvg",
				"CalceSatSurveyAvg derive(eSatSpeedbump8 = iif(SurveryAvg<82.8, 'Y','N')) ~> derivedSpeedBump8eSat",
				"derivedSpeedBump8eSat select(mapColumn(",
				"          WorkerId,",
				"          eSatSpeedbump8",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump8",
				"OtherCore filter(EventType=='Engagement Survey - Safe_Belong_Matter' && EventDesc=='I can be myself and belong at Equinix.') ~> FilterEngagementSurveySafeBelongMatter",
				"FilterEngagementSurveySafeBelongMatter aggregate(groupBy(WorkerId),",
				"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
				"          SumSurveyValues = sum(OtherNumVal1),",
				"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcBelongSurveyAvg",
				"CalcBelongSurveyAvg derive(BelongSpeedbump9 = iif(SurveryAvg<84.7, 'Y','N')) ~> derivedSpeedBump9Belong",
				"derivedSpeedBump9Belong select(mapColumn(",
				"          WorkerId,",
				"          BelongSpeedbump9",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump9",
				"OtherCore filter(EventType=='Engagement Survey - Growth_Devt') ~> FilterEngagementSurveyGrowth",
				"FilterEngagementSurveyGrowth aggregate(groupBy(WorkerId),",
				"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
				"          SumSurveyValues = sum(OtherNumVal1),",
				"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcGrowthSurveyAvg",
				"CalcGrowthSurveyAvg derive(GrowthSpeedbump10 = iif(SurveryAvg<81.2, 'Y','N')) ~> derivedSpeedBump10Growth",
				"derivedSpeedBump10Growth select(mapColumn(",
				"          WorkerId,",
				"          GrowthSpeedbump10",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump10",
				"OtherCore filter(EventType=='Engagement Survey - Well_Being_Mgr' || EventType=='Engagement Survey - Feedback' || EventType=='Engagement Survey - Quarter_Convo') ~> FilterEngagementSurveyMgrFBkConvo",
				"FilterEngagementSurveyMgrFBkConvo aggregate(groupBy(WorkerId),",
				"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
				"          SumSurveyValues = sum(OtherNumVal1),",
				"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcMgrFBkConvoSurveyAvg",
				"CalcMgrFBkConvoSurveyAvg derive(MgrFBkConvoSpeedbump11 = iif(SurveryAvg<82.5, 'Y','N')) ~> derivedSpeedBump11MgrFBkConvo",
				"derivedSpeedBump11MgrFBkConvo select(mapColumn(",
				"          WorkerId,",
				"          MgrFBkConvoSpeedbump11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump11",
				"OtherCore filter(EventType=='Potential') ~> FilterEngagementSurveyPotential",
				"FilterEngagementSurveyPotential derive(PotentialSpeedbump12 = iif(OtherCharVal11=='At Potential / Well Placed', 'Y','N')) ~> derivedSpeedBump12Potential",
				"derivedSpeedBump12Potential select(mapColumn(",
				"          WorkerId,",
				"          PotentialSpeedbump12,",
				"          {Potential Survey Val} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump12",
				"OtherCore filter(EventType=='Goals') ~> FilterEngagementSurveyGoals",
				"FilterSurveyGoalsCurr select(mapColumn(",
				"          WorkerId,",
				"          {Survey Curr Goals} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SurveyGoalsCu",
				"OtherCore filter(EventType=='Values') ~> filter1",
				"join3 select(mapColumn(",
				"          WorkerId,",
				"          EventDesc,",
				"          EventType,",
				"          {Values Survey Val} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSurveyValues",
				"SelectAllCore, SelectCurrYear join(EventYear == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> HCTCurrent",
				"SelectAllCore, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> HCT1P",
				"SelectAllCore, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> HCT2P",
				"HCT1P select(mapColumn(",
				"          {WorkerId 1P} = WorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> WorkerID1P",
				"HCT2P select(mapColumn(",
				"          {WorkerId 2P} = WorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> WorkerID2P",
				"HCTCurrent, WorkerID1P join(WorkerId == {WorkerId 1P},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> HCTin1P",
				"HCTin1P, WorkerID2P join(WorkerId == {WorkerId 2P},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> HCTin2P",
				"CoreForSupplement, EthnicityMap join(Race == ClientRace",
				"     && HispanicLatinoOrigin == ClientHispanicLatinoOrigin,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinElloreeRace",
				"JoinElloreeRace, GenderMap join(Gender == ClientGender,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinElloreeGender",
				"JoinTalentTag select(mapColumn(",
				"          ClientId = CoreForSupplement@ClientId,",
				"          ClientEngagementDt = CoreForSupplement@ClientEngagementDt,",
				"          WorkerId,",
				"          EventDt,",
				"          EventMonth,",
				"          EventQuarter,",
				"          EventYear,",
				"          Event,",
				"          EventId,",
				"          EventType,",
				"          EventReason,",
				"          WorkerStatus,",
				"          WorkerType,",
				"          JobTitle,",
				"          JobFunction,",
				"          YearsinJob,",
				"          PrevJobTitle,",
				"          PrevJobFunction,",
				"          LastPromoDt,",
				"          OrigHireDt,",
				"          CurrHireDt,",
				"          RehireInd,",
				"          YearsofSrvc,",
				"          YearsofSrvcBand,",
				"          YearsofSrvcBandSortId,",
				"          CorpTitle,",
				"          PrevCorpTitle,",
				"          ManagerInd,",
				"          DirectMgrWorkerId,",
				"          WorkOfficeLoc,",
				"          WorkOfficeCity,",
				"          WorkOfficeState,",
				"          WorkOfficeCountry,",
				"          WorkStrategicLocInd,",
				"          LegacyOrg,",
				"          BusinessGrpLvl1,",
				"          BusinessGrpLvl2,",
				"          BusinessGrpLvl3,",
				"          BusinessGrpLvl4,",
				"          Race,",
				"          HispanicLatinoOrigin,",
				"          Gender,",
				"          Veteran,",
				"          LGTBQ,",
				"          DisabilityInd,",
				"          BirthYear,",
				"          Generation,",
				"          GenerationSortId,",
				"          EmpCount,",
				"          ElloreeRace,",
				"          ElloreeHispanicLatinoOrigin,",
				"          ElloreeGender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAllCore",
				"HCTCurrent select(mapColumn(",
				"          WorkerId,",
				"          DirectMgrWorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> HCTCurrMgr",
				"HCT1P select(mapColumn(",
				"          WorkerId,",
				"          DirectMgrWorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> HCT1PMgr",
				"HCT2P select(mapColumn(",
				"          WorkerId,",
				"          DirectMgrWorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> HCT2PMgr",
				"HCTCurrMgr, HCT1PMgr, HCT2PMgr union(byName: true)~> unionAllWorkerMgr",
				"unionAllWorkerMgr aggregate(groupBy(WorkerId,",
				"          DirectMgrWorkerId),",
				"     RowCount = count(DirectMgrWorkerId)) ~> GroupWorkerMgrCombo",
				"GroupWorkerMgrCombo select(mapColumn(",
				"          WorkerId,",
				"          DirectMgrWorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SeleceWorkerMgrCombo",
				"SeleceWorkerMgrCombo aggregate(groupBy(WorkerId),",
				"     MgrCount = count(DirectMgrWorkerId)) ~> WorkerMgrCount",
				"HCTin2P, WorkerMgrCount join(SelectAllCore@WorkerId == WorkerMgrCount@WorkerId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMgrCount",
				"JoinMgrCount select(mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId = SelectAllCore@WorkerId,",
				"          EventDt,",
				"          EventMonth,",
				"          EventQuarter,",
				"          EventYear,",
				"          Event,",
				"          EventId,",
				"          EventType,",
				"          EventReason,",
				"          WorkerStatus,",
				"          WorkerType,",
				"          JobTitle,",
				"          JobFunction,",
				"          YearsinJob,",
				"          PrevJobTitle,",
				"          PrevJobFunction,",
				"          LastPromoDt,",
				"          OrigHireDt,",
				"          CurrHireDt,",
				"          RehireInd,",
				"          YearsofSrvc,",
				"          YearsofSrvcBand,",
				"          YearsofSrvcBandSortId,",
				"          CorpTitle,",
				"          PrevCorpTitle,",
				"          ManagerInd,",
				"          DirectMgrWorkerId,",
				"          MgrCount,",
				"          WorkOfficeLoc,",
				"          WorkOfficeCity,",
				"          WorkOfficeState,",
				"          WorkOfficeCountry,",
				"          WorkStrategicLocInd,",
				"          LegacyOrg,",
				"          BusinessGrpLvl1,",
				"          BusinessGrpLvl2,",
				"          BusinessGrpLvl3,",
				"          BusinessGrpLvl4,",
				"          Race,",
				"          ElloreeRace,",
				"          HispanicLatinoOrigin,",
				"          Gender,",
				"          ElloreeGender,",
				"          Veteran,",
				"          LGTBQ,",
				"          DisabilityInd,",
				"          BirthYear,",
				"          Generation,",
				"          GenerationSortId,",
				"          EmpCount,",
				"          ElloreeHispanicLatinoOrigin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectHCTCleanup",
				"OtherCore filter(EventType=='Impact - Reach Qtrly Goals') ~> filter2",
				"FilterSurveyGoalsImpactReach1P select(mapColumn(",
				"          WorkerId,",
				"          {Survey 1P Goals (Impact Reach) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SurveyGoalsImpactReach1P",
				"OtherCore filter(EventType=='Impact - Seize Opportunities') ~> filter3",
				"FilterSurveyGoalsSeize1P select(mapColumn(",
				"          WorkerId,",
				"          {Survey 1P Goals (Seize Opp) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SurveyGoalsSeizeOpp1P",
				"SelectHCTCleanup, SurveyGoalsCu join(SelectHCTCleanup@WorkerId == SurveyGoalsCu@WorkerId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSurveyGoalVal",
				"JoinSurveyGoalVal, SurveyGoalsSeizeOpp1P join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinSurveyGoalImpactSeize",
				"filter3, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsSeize1P",
				"filter3, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsSeize2P",
				"FilterSurveyGoalsSeize2P select(mapColumn(",
				"          WorkerId,",
				"          {Survey 2P Goals (Seize Opp) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SurveyGoalsSeizeOpp2P",
				"filter2, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsImpactReach1P",
				"filter2, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsSeize2PVal",
				"FilterSurveyGoalsSeize2PVal select(mapColumn(",
				"          WorkerId,",
				"          {Survey 2P Goals (Impact Reach) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SurveyGoalsImpactReach2P",
				"FilterEngagementSurveyGoals, SelectCurrYear join(EventYear == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsCurr",
				"filter1, SelectCurrYear join(EventYear == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventDt,",
				"          EventMonth,",
				"          EventQuarter,",
				"          EventYear,",
				"          Event,",
				"          EventId,",
				"          EventDesc,",
				"          EventType,",
				"          OtherCharVal11,",
				"          OtherCharVal2,",
				"          OtherNumVal1,",
				"          OtherNumVal2,",
				"          OtherDtVal1,",
				"          OtherDtVal2,",
				"          LoadDt,",
				"          {Client ID},",
				"          MaxCurrYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select12",
				"JoinElloreeGender, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
				"     && EventYear == {Emp Perf Rating Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTalentTag"
			]
		}
	}
}