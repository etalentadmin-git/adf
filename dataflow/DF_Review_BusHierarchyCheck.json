{
	"name": "DF_Review_BusHierarchyCheck",
	"properties": {
		"folder": {
			"name": "Client/Audit Reports"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData1",
					"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData2",
					"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "CoreForHCT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputOrphanHierarchy"
				},
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OuputOrphanAndCurrHrchyCounts"
				},
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputWorkerHierarchyDetail"
				}
			],
			"transformations": [
				{
					"name": "MaxEventDt"
				},
				{
					"name": "CurrentHCTEvent",
					"description": "Join on max HCT event date in order to pull only the Current headcount records"
				},
				{
					"name": "UniqueHierarchyRecords",
					"description": "Select unique hierarchy for current headcount records."
				},
				{
					"name": "SelectUniqueHierarchyCurrHCT",
					"description": "Select key and hierarchy fields."
				},
				{
					"name": "UniqueHierarchyAllEvents"
				},
				{
					"name": "SelectUniqueHierarchyFields"
				},
				{
					"name": "SelectCoreWithNoCurrentHierarchy"
				},
				{
					"name": "PullRecordsWithOrphans",
					"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
				},
				{
					"name": "UniqueWorkerWithOrphanHrchy",
					"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
				},
				{
					"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
				},
				{
					"name": "PullCurrentHierarchyIfExists",
					"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
				},
				{
					"name": "SelectWorkerIDandHierarcy",
					"description": "Select worker ID and hierarchy fields"
				},
				{
					"name": "CreateWorkerCountsbyHierarchy",
					"description": "Create counts for unique orphan and current hierarchy records"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "HCTFilter"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as date 'yyyy-MM-dd',",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as double,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as date 'yyyy-MM-dd',",
				"          {Current Hire Date} as date 'yyyy-MM-dd',",
				"          {Years of Service} as double,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as integer,",
				"          {Last Promo Date} as date 'yyyy-MM-dd',",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as integer,",
				"          EmpCount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData1",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as date 'yyyy-MM-dd',",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as double,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as date 'yyyy-MM-dd',",
				"          {Current Hire Date} as date 'yyyy-MM-dd',",
				"          {Years of Service} as double,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as integer,",
				"          {Last Promo Date} as date 'yyyy-MM-dd',",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as integer,",
				"          EmpCount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData2",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as date 'yyyy-MM-dd',",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as double,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as date 'yyyy-MM-dd',",
				"          {Current Hire Date} as date 'yyyy-MM-dd',",
				"          {Years of Service} as double,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as integer,",
				"          {Last Promo Date} as date 'yyyy-MM-dd',",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as integer,",
				"          EmpCount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CoreForHCT",
				"HCTFilter aggregate(groupBy(EventUnique = Event),",
				"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
				"derivedColumn3, MaxEventDt join({Event Date} == MaxEventDate,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CurrentHCTEvent",
				"CurrentHCTEvent aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
				"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
				"UniqueHierarchyRecords select(mapColumn(",
				"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
				"          {Business Group Level 1 HCT} = {Business Group Level 1},",
				"          {Business Group Level 2 HCT} = {Business Group Level 2}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
				"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
				"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
				"UniqueHierarchyAllEvents select(mapColumn(",
				"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
				"          {Business Group Level 1 ALL} = {Business Group Level 1},",
				"          {Business Group Level 2 ALL} = {Business Group Level 2}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
				"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
				"     negate:true,",
				"     broadcast: 'auto')~> SelectCoreWithNoCurrentHierarchy",
				"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> PullRecordsWithOrphans",
				"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
				"          {Business Group Level 1 Unique} = {Business Group Level 1},",
				"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
				"     each(match(name!='Worker ID'), $$ = first($$)),",
				"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
				"UniqueWorkerWithOrphanHrchy select(mapColumn(",
				"          {Worker ID unique},",
				"          {Business Group Level 1 Unique},",
				"          {Business Group Level 2 Unique}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
				"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
				"PullCurrentHierarchyIfExists select(mapColumn(",
				"          {Worker ID unique},",
				"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
				"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
				"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
				"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
				"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
				"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
				"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
				"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
				"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
				"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
				"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1}, {Business Group Level 2})) ~> derivedColumn2",
				"HCTFilter derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
				"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
				"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
				"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
				"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
			]
		}
	}
}