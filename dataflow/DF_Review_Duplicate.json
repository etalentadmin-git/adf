{
	"name": "DF_Review_Duplicate",
	"properties": {
		"description": "Output Duplicate Review report.  Currently ties to the union csv in blob.",
		"folder": {
			"name": "Client/Create Audit Reports"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "CorePromotions"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_TalentData_File",
						"type": "DatasetReference"
					},
					"name": "Talent"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_JobReq_File",
						"type": "DatasetReference"
					},
					"name": "Requisitions"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_Applicant_File",
						"type": "DatasetReference"
					},
					"name": "Applicants"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "CoreHeadcount"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "CoreTerminations"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "CoreHires"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_OtherCore_File",
						"type": "DatasetReference"
					},
					"name": "Other"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_DivSlate_File",
						"type": "DatasetReference"
					},
					"name": "DivSlates"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "EventDuplicatesReport"
				}
			],
			"transformations": [
				{
					"name": "HeadcountRowCount"
				},
				{
					"name": "HeadcountSumRowsForDups"
				},
				{
					"name": "HctDuplicates"
				},
				{
					"name": "TerminationsRowCount"
				},
				{
					"name": "TerminationsSumRowsForDups"
				},
				{
					"name": "TermDuplicates"
				},
				{
					"name": "union1"
				},
				{
					"name": "HiresRowCount"
				},
				{
					"name": "HiresSumRowsForDups"
				},
				{
					"name": "HireDuplicates"
				},
				{
					"name": "PromotionsRowCount"
				},
				{
					"name": "PromotionsSumRowsForDups"
				},
				{
					"name": "PromoDuplicates"
				},
				{
					"name": "TalentRowCount"
				},
				{
					"name": "TalentSumRowsForDups"
				},
				{
					"name": "TalentDuplicates"
				},
				{
					"name": "RequisitionsRowCount"
				},
				{
					"name": "RequisitionsSumRowsForDups"
				},
				{
					"name": "RequisitionDuplicates"
				},
				{
					"name": "ApplicantRowCount"
				},
				{
					"name": "ApplicantSumRowsForDups"
				},
				{
					"name": "ApplicantDuplicates"
				},
				{
					"name": "PromoFilterOutClientAliasHeaderRow"
				},
				{
					"name": "HeadcountFilter"
				},
				{
					"name": "TerminationFilter"
				},
				{
					"name": "HiresFilter"
				},
				{
					"name": "FinalSelect"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "OtherRowCount"
				},
				{
					"name": "OtherSumRowsForDups"
				},
				{
					"name": "ConcatEventandEventType"
				},
				{
					"name": "OtherDuplicates"
				},
				{
					"name": "SlateRowCount"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "SlateSumRowsForDups"
				},
				{
					"name": "SlateDuplicates"
				},
				{
					"name": "RemoveNullOtherRows"
				},
				{
					"name": "RemoveNullSlateRows"
				},
				{
					"name": "RemoveNullPromoRows"
				},
				{
					"name": "RemoveNullTalentRows"
				},
				{
					"name": "RemoveNullReqRows"
				},
				{
					"name": "RemoveNullApplicantRows"
				},
				{
					"name": "RemoveNullHeadcountRows"
				},
				{
					"name": "RemoveNullTermRows"
				},
				{
					"name": "RemoveNullHireRows"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CorePromotions",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Event Year} as string,",
				"          {Event Date} as string,",
				"          Event as string,",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Performance Rating} as string,",
				"          {Performance Rating Date} as string,",
				"          {Talent Identifier (1)} as string,",
				"          {Talent Identifier (2)} as string,",
				"          {Talent Identifier (3)} as string,",
				"          {Talent Identifier (4)} as string,",
				"          {Talent Identifier (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Talent",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Client Engagement Type} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          EventId as string,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Requisition Type} as string,",
				"          {Posting Date} as string,",
				"          {Requisition Status} as string,",
				"          {Number of Openings} as string,",
				"          {Job Title} as string,",
				"          {Job Function} as string,",
				"          {Corporate Title} as string,",
				"          {Work Office Location} as string,",
				"          {Work Office City} as string,",
				"          {Work Office State} as string,",
				"          {Work Office Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          {Hiring Manager Worker ID} as string,",
				"          {Primary Recruiter Worker ID} as string,",
				"          {Requisition Other (1)} as string,",
				"          {Requisition Other (2)} as string,",
				"          {Requisition Other (3)} as string,",
				"          {Requisition Other (4)} as string,",
				"          {Requisition Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Requisitions",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Applicant ID} as string,",
				"          Source as string,",
				"          {Applicant Type} as string,",
				"          {Internal Worker ID} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Applicant Final Disposition} as string,",
				"          {Applicant Step Before Final Disposition} as string,",
				"          {Applicant Rejected Reason} as string,",
				"          {Applicant Other (1)} as string,",
				"          {Applicant Other (2)} as string,",
				"          {Applicant Other (3)} as string,",
				"          {Applicant Other (4)} as string,",
				"          {Applicant Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Applicants",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CoreHeadcount",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CoreTerminations",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CoreHires",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          {Event ID} as string,",
				"          Event as string,",
				"          {Event (Type)} as string,",
				"          {Event (Desc)} as string,",
				"          {Other (Char Value 1)} as string,",
				"          {Other (Char Value 2)} as string,",
				"          {Other (Num Value 1)} as string,",
				"          {Other (Num Value 2)} as string,",
				"          {Other (Date Value 1)} as string,",
				"          {Other (Date Value 2)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Other",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Requisition ID} as string,",
				"          {Event Year} as string,",
				"          {Candidates StM} as string,",
				"          {Internal Candidates StM} as string,",
				"          {External Candidates StM} as string,",
				"          {Candidates Hired} as string,",
				"          {Internal Candidates Hired} as string,",
				"          {External Candidates Hired} as string,",
				"          {White Candidates StM} as string,",
				"          {Internal White Candidates StM} as string,",
				"          {External White Candidates StM} as string,",
				"          {White Candidates Hired} as string,",
				"          {Internal White Candidates Hired} as string,",
				"          {External White Candidates Hired} as string,",
				"          {Black Candidates StM} as string,",
				"          {Internal Black Candidates StM} as string,",
				"          {External Black Candidates StM} as string,",
				"          {Black Candidates Hired} as string,",
				"          {Internal Black Candidates Hired} as string,",
				"          {External Black Candidates Hired} as string,",
				"          {Latinx Candidates StM} as string,",
				"          {Internal Latinx Candidates StM} as string,",
				"          {External Latinx Candidates StM} as string,",
				"          {Latinx Candidates Hired} as string,",
				"          {Internal Latinx Candidates Hired} as string,",
				"          {External Latinx Candidates Hired} as string,",
				"          {Asian Candidates StM} as string,",
				"          {Internal Asian Candidates StM} as string,",
				"          {External Asian Candidates StM} as string,",
				"          {Asian Candidates Hired} as string,",
				"          {Internal Asian Candidates Hired} as string,",
				"          {External Asian Candidates Hired} as string,",
				"          {2+ Races Candidates StM} as string,",
				"          {Internal 2+ Races Candidates StM} as string,",
				"          {External 2+ Races Candidates StM} as string,",
				"          {2+ Races Candidates Hired} as string,",
				"          {Internal 2+ Races Candidates Hired} as string,",
				"          {External 2+ Races Candidates Hired} as string,",
				"          {Other Candidates StM} as string,",
				"          {Internal Other Candidates StM} as string,",
				"          {External Other Candidates StM} as string,",
				"          {Other Candidates Hired} as string,",
				"          {Internal Other Candidates Hired} as string,",
				"          {External Other Candidates Hired} as string,",
				"          {Male Candidates StM} as string,",
				"          {Internal Male Candidates StM} as string,",
				"          {External Male Candidates StM} as string,",
				"          {Male Candidates Hired} as string,",
				"          {Internal Male Candidates Hired} as string,",
				"          {External Male Candidates Hired} as string,",
				"          {Female Candidates StM} as string,",
				"          {Internal Female Candidates StM} as string,",
				"          {External Female Candidates StM} as string,",
				"          {Female Candidates Hired} as string,",
				"          {Internal Female Candidates Hired} as string,",
				"          {External Female Candidates Hired} as string,",
				"          {Other Gender Candidates StM} as string,",
				"          {Internal Other Gender Candidates StM} as string,",
				"          {External Other Gender Candidates StM} as string,",
				"          {Other Gender Candidates Hired} as string,",
				"          {Internal Other Gender Candidates Hired} as string,",
				"          {External Other Gender Candidates Hired} as string,",
				"          {PoC Candidates StM} as string,",
				"          {Internal PoC Candidates StM} as string,",
				"          {External PoC Candidates StM} as string,",
				"          {PoC  Candidates Hired} as string,",
				"          {Internal PoC  Candidates Hired} as string,",
				"          {External PoC  Candidates Hired} as string,",
				"          {Diverse Candidates StM} as string,",
				"          {Internal Diverse Candidates StM} as string,",
				"          {External Diverse Candidates StM} as string,",
				"          {Diverse Candidates Hired} as string,",
				"          {Internal Diverse Candidates Hired} as string,",
				"          {External Diverse Candidates Hired} as string,",
				"          {Female Not PoC Candidates StM} as string,",
				"          {Internal Female Not PoC Candidates StM} as string,",
				"          {External Female Not PoC Candidates StM} as string,",
				"          {Female Not PoC Candidates Hired} as string,",
				"          {Internal Female Not PoC Candidates Hired} as string,",
				"          {External Female Not PoC Candidates Hired} as string,",
				"          {Female PoC Candidates StM} as string,",
				"          {Internal Female PoC Candidates StM} as string,",
				"          {External Female PoC Candidates StM} as string,",
				"          {Female PoC Candidates Hired} as string,",
				"          {Internal Female PoC Candidates Hired} as string,",
				"          {External Female PoC Candidates Hired} as string,",
				"          {Not Female PoC Candidates StM} as string,",
				"          {Internal Not Female PoC Candidates StM} as string,",
				"          {External Not Female PoC Candidates StM} as string,",
				"          {Not Female PoC Candidates Hired} as string,",
				"          {Internal Not Female PoC Candidates Hired} as string,",
				"          {External Not Female PoC Candidates Hired} as string,",
				"          {Not Female Not PoC Candidates StM} as string,",
				"          {Internal Not Female Not PoC Candidates StM} as string,",
				"          {External Not Female Not PoC Candidates StM} as string,",
				"          {Not Female Not PoC Candidates Hired} as string,",
				"          {Internal Not Female Not PoC Candidates Hired} as string,",
				"          {External Not Female Not PoC Candidates Hired} as string,",
				"          {Diverse Slate} as string,",
				"          {Internal Diverse Slate} as string,",
				"          {External Diverse Slate} as string,",
				"          {No Diverse Slate} as string,",
				"          {Internal No Diverse Slate} as string,",
				"          {External No Diverse Slate} as string,",
				"          {Diverse Hired Slate} as string,",
				"          {Internal Diverse Hired Slate} as string,",
				"          {External Diverse Hired Slate} as string,",
				"          {PoC Slate} as string,",
				"          {Internal PoC Slate} as string,",
				"          {External PoC Slate} as string,",
				"          {No PoC Slate} as string,",
				"          {Internal No PoC Slate} as string,",
				"          {External No PoC Slate} as string,",
				"          {PoC Hired Slate} as string,",
				"          {Internal PoC Hired Slate} as string,",
				"          {External PoC Hired Slate} as string,",
				"          {White Slate} as string,",
				"          {Internal White Slate} as string,",
				"          {External White Slate} as string,",
				"          {No White Slate} as string,",
				"          {Internal No White Slate} as string,",
				"          {External No White Slate} as string,",
				"          {White Hired Slate} as string,",
				"          {Internal White Hired Slate} as string,",
				"          {External White Hired Slate} as string,",
				"          {Black Slate} as string,",
				"          {Internal Black Slate} as string,",
				"          {External Black Slate} as string,",
				"          {No Black Slate} as string,",
				"          {Internal No Black Slate} as string,",
				"          {External No Black Slate} as string,",
				"          {Black Hired Slate} as string,",
				"          {Internal Black Hired Slate} as string,",
				"          {External Black Hired Slate} as string,",
				"          {Latinx Slate} as string,",
				"          {Internal Latinx Slate} as string,",
				"          {External Latinx Slate} as string,",
				"          {No Latinx Slate} as string,",
				"          {Internal No Latinx Slate} as string,",
				"          {External No Latinx Slate} as string,",
				"          {Latinx Hired Slate} as string,",
				"          {Internal Latinx Hired Slate} as string,",
				"          {External Latinx Hired Slate} as string,",
				"          {Asian Slate} as string,",
				"          {Internal Asian Slate} as string,",
				"          {External Asian Slate} as string,",
				"          {No Asian Slate} as string,",
				"          {Internal No Asian Slate} as string,",
				"          {External No Asian Slate} as string,",
				"          {Asian Hired Slate} as string,",
				"          {Internal Asian Hired Slate} as string,",
				"          {External Asian Hired Slate} as string,",
				"          {2+ Races Slate} as string,",
				"          {Internal 2+ Races Slate} as string,",
				"          {External 2+ Races Slate} as string,",
				"          {No 2+ Races Slate} as string,",
				"          {Internal No 2+ Races Slate} as string,",
				"          {External No 2+ Races Slate} as string,",
				"          {2+ Races Hired Slate} as string,",
				"          {Internal 2+ Races Hired Slate} as string,",
				"          {External 2+ Races Hired Slate} as string,",
				"          {Other Race Slate} as string,",
				"          {Internal Other Race Slate} as string,",
				"          {External Other Race Slate} as string,",
				"          {No Other Race Slate} as string,",
				"          {Internal No Other Race Slate} as string,",
				"          {External No Other Race Slate} as string,",
				"          {Other Race Hired Slate} as string,",
				"          {Internal Other Race Hired Slate} as string,",
				"          {External Other Race Hired Slate} as string,",
				"          {Female Slate} as string,",
				"          {Internal Female Slate} as string,",
				"          {External Female Slate} as string,",
				"          {No Female Slate} as string,",
				"          {Internal No Female Slate} as string,",
				"          {External No Female Slate} as string,",
				"          {Female Hired Slate} as string,",
				"          {Internal Female Hired Slate} as string,",
				"          {External Female Hired Slate} as string,",
				"          {Male Slate} as string,",
				"          {Internal Male Slate} as string,",
				"          {External Male Slate} as string,",
				"          {No Male Slate} as string,",
				"          {Internal No Male Slate} as string,",
				"          {External No Male Slate} as string,",
				"          {Male Hired Slate} as string,",
				"          {Internal Male Hired Slate} as string,",
				"          {External Male Hired Slate} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DivSlates",
				"HeadcountFilter aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Worker ID}),",
				"     RowCount = count({Worker ID})) ~> HeadcountRowCount",
				"HeadcountRowCount aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
				"     DuplicateCount = sum(RowCount)) ~> HeadcountSumRowsForDups",
				"RemoveNullHeadcountRows filter(DuplicateCount>1) ~> HctDuplicates",
				"TerminationFilter aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Worker ID}),",
				"     RowCount = count({Worker ID})) ~> TerminationsRowCount",
				"TerminationsRowCount aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
				"     DuplicateCount = sum(RowCount)) ~> TerminationsSumRowsForDups",
				"RemoveNullTermRows filter(DuplicateCount>1) ~> TermDuplicates",
				"HctDuplicates, TermDuplicates, HireDuplicates, PromoDuplicates, TalentDuplicates, RequisitionDuplicates, ApplicantDuplicates, OtherDuplicates, SlateDuplicates union(byName: true)~> union1",
				"HiresFilter aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Worker ID}),",
				"     RowCount = countAll({Worker ID})) ~> HiresRowCount",
				"HiresRowCount aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
				"     DuplicateCount = sum(RowCount)) ~> HiresSumRowsForDups",
				"RemoveNullHireRows filter(DuplicateCount>1) ~> HireDuplicates",
				"PromoFilterOutClientAliasHeaderRow aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Worker ID}),",
				"     RowCount = count({Worker ID})) ~> PromotionsRowCount",
				"PromotionsRowCount aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
				"     DuplicateCount = sum(RowCount)) ~> PromotionsSumRowsForDups",
				"RemoveNullPromoRows filter(DuplicateCount>1) ~> PromoDuplicates",
				"Talent aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Worker ID}),",
				"     RowCount = count({Worker ID})) ~> TalentRowCount",
				"TalentRowCount aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
				"     DuplicateCount = sum(RowCount)) ~> TalentSumRowsForDups",
				"RemoveNullTalentRows filter(DuplicateCount>1) ~> TalentDuplicates",
				"Requisitions aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Requisition ID}),",
				"     RowCount = count({Requisition ID})) ~> RequisitionsRowCount",
				"RequisitionsRowCount aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
				"     DuplicateCount = sum(RowCount)) ~> RequisitionsSumRowsForDups",
				"RemoveNullReqRows filter(DuplicateCount>1) ~> RequisitionDuplicates",
				"Applicants aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Applicant ID},",
				"          {Requisition ID}),",
				"     RowCount = count({Applicant ID})) ~> ApplicantRowCount",
				"ApplicantRowCount aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Applicant ID},",
				"          {Requisition ID}),",
				"     DuplicateCount = sum(RowCount)) ~> ApplicantSumRowsForDups",
				"RemoveNullApplicantRows filter(DuplicateCount>1) ~> ApplicantDuplicates",
				"CorePromotions filter({Event Code}=='PRO') ~> PromoFilterOutClientAliasHeaderRow",
				"CoreHeadcount filter({Event Code}=='HCT') ~> HeadcountFilter",
				"CoreTerminations filter({Event Code}=='TER') ~> TerminationFilter",
				"CoreHires filter({Event Code}=='HIR') ~> HiresFilter",
				"derivedColumn1 select(mapColumn(",
				"          Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)},",
				"          DuplicateCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect",
				"ApplicantSumRowsForDups derive({Record Id (Worker/Req/Applicant)} = toString({Record Id (Worker/Req/Applicant)})) ~> derivedColumn1",
				"union1 sort(asc(Event, true)) ~> sort1",
				"Other aggregate(groupBy(Event,",
				"          {Event (Type)},",
				"          {Event Date},",
				"          {Worker ID}),",
				"     RowCount = countAll({Worker ID})) ~> OtherRowCount",
				"ConcatEventandEventType aggregate(groupBy(Event,",
				"          {Event Date},",
				"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
				"     DuplicateCount = sum(RowCount)) ~> OtherSumRowsForDups",
				"OtherRowCount derive(Event = concat(Event,{Event (Type)})) ~> ConcatEventandEventType",
				"RemoveNullOtherRows filter(DuplicateCount>1) ~> OtherDuplicates",
				"derivedColumn2 aggregate(groupBy(Event,",
				"          {Event Year},",
				"          {Requisition ID}),",
				"     RowCount = countAll({Requisition ID})) ~> SlateRowCount",
				"DivSlates derive(Event = 'Slate') ~> derivedColumn2",
				"SlateRowCount aggregate(groupBy(Event,",
				"          {Event Date} = {Event Year},",
				"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
				"     DuplicateCount = sum(RowCount)) ~> SlateSumRowsForDups",
				"RemoveNullSlateRows filter(DuplicateCount>1) ~> SlateDuplicates",
				"OtherSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullOtherRows",
				"SlateSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullSlateRows",
				"PromotionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullPromoRows",
				"TalentSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTalentRows",
				"RequisitionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullReqRows",
				"FinalSelect filter(!(isNull(Event))) ~> RemoveNullApplicantRows",
				"HeadcountSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHeadcountRows",
				"TerminationsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTermRows",
				"HiresSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHireRows",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Duplicates Review Core.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> EventDuplicatesReport"
			]
		}
	}
}