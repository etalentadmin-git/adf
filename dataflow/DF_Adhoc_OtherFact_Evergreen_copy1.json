{
	"name": "DF_Adhoc_OtherFact_Evergreen_copy1",
	"properties": {
		"folder": {
			"name": "Client/Adhoc"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreYear"
				},
				{
					"dataset": {
						"referenceName": "etalentOtherCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "OtherCore"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SelectCurrYear"
				},
				{
					"name": "RemoveYearNullRows"
				},
				{
					"name": "Select1PYear"
				},
				{
					"name": "Select2PYear"
				},
				{
					"name": "Select3PYear"
				},
				{
					"name": "select6"
				},
				{
					"name": "FilterSurveyValuesCulture"
				},
				{
					"name": "SelectValuesCulture1P"
				},
				{
					"name": "FilterSurveyGoals"
				},
				{
					"name": "SelectGoalsCurr"
				},
				{
					"name": "FilterValues"
				},
				{
					"name": "SelectValuesCurr"
				},
				{
					"name": "filter2"
				},
				{
					"name": "SelectGoalsImpactReach1P"
				},
				{
					"name": "filter3"
				},
				{
					"name": "SelectGoalsSeizeOpp1P"
				},
				{
					"name": "FilterSurveyGoalsSeize1P"
				},
				{
					"name": "FilterSurveyGoalsSeize2P"
				},
				{
					"name": "SelectGoalsSeizeOpp2P"
				},
				{
					"name": "FilterSurveyGoalsImpactReach1P"
				},
				{
					"name": "FilterSurveyGoalsSeize2PVal"
				},
				{
					"name": "SelectGoalsImpactReach2P"
				},
				{
					"name": "FilterSurveyGoalsCurr"
				},
				{
					"name": "FilterSurveyValuesCurr"
				},
				{
					"name": "FilterSurveyValuesCulture1P"
				},
				{
					"name": "FilterSurveyValuesCulture2P"
				},
				{
					"name": "SelectValuesCulture2P"
				},
				{
					"name": "FilterValuesWorksCollab"
				},
				{
					"name": "FilterValuesWorksCollab1PYear"
				},
				{
					"name": "SelectValuesWorksCollab1PYear"
				},
				{
					"name": "FilterValuesWorksCollab2PYear"
				},
				{
					"name": "SelectValuesWorksCollab2PYear"
				},
				{
					"name": "FilterPotential"
				},
				{
					"name": "FilterPotentialCurr"
				},
				{
					"name": "SelectPotentialCurr"
				},
				{
					"name": "FilterPotentialBroaderResp"
				},
				{
					"name": "FilterPotentialBroadResp1P"
				},
				{
					"name": "SelectPotentialBroadResp1P"
				},
				{
					"name": "FilterPotentialBroadResp2P"
				},
				{
					"name": "SelectPotentialBroadResp2P"
				},
				{
					"name": "FilterPotentialLearningInnov"
				},
				{
					"name": "FilterPotentialLearnInnov2P"
				},
				{
					"name": "SelectPotentialLearnInnov2P"
				},
				{
					"name": "FilterPotentialLearnInnov1P"
				},
				{
					"name": "SelectPotentialLearnInnov1P"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string,",
				"     T1_Event_Type as string,",
				"     T1_Event_Year as string,",
				"     T1_Event_Qtr as string,",
				"     T2_Event_Type as string,",
				"     T2_Event_Year as string,",
				"     T2_Event_Qtr as string,",
				"     T3_Event_Type as string,",
				"     T3_Event_Year as string,",
				"     T3_Event_Qtr as string,",
				"     T4_Event_Type as string,",
				"     T4_Event_Year as string,",
				"     T4_Event_Qtr as string,",
				"     T5_Event_Type as string,",
				"     T5_Event_Year as string,",
				"     T5_Event_Qtr as string,",
				"     T6_Event_Type as string,",
				"     T6_Event_Year as string,",
				"     T6_Event_Qtr as string,",
				"     T7_Event_Type as string,",
				"     T7_Event_Year as string,",
				"     T7_Event_Qtr as string,",
				"     T8_Event_Type as string,",
				"     T8_Event_Year as string,",
				"     T8_Event_Qtr as string,",
				"     T9_Event_Type as string,",
				"     T9_Event_Year as string,",
				"     T9_Event_Qtr as string,",
				"     T10_Event_Type as string,",
				"     T10_Event_Year as string,",
				"     T10_Event_Qtr as string,",
				"     T11_Event_Type as string,",
				"     T11_Event_Year as string,",
				"     T11_Event_Qtr as string,",
				"     T12_Event_Type as string,",
				"     T12_Event_Year as string,",
				"     T12_Event_Qtr as string,",
				"     T13_Event_Type as string,",
				"     T13_Event_Year as string,",
				"     T13_Event_Qtr as string,",
				"     T14_Event_Type as string,",
				"     T14_Event_Year as string,",
				"     T14_Event_Qtr as string,",
				"     T15_Event_Type as string,",
				"     T15_Event_Year as string,",
				"     T15_Event_Qtr as string,",
				"     T16_Event_Type as string,",
				"     T16_Event_Year as string,",
				"     T16_Event_Qtr as string,",
				"     T17_Event_Type as string,",
				"     T17_Event_Year as string,",
				"     T17_Event_Qtr as string,",
				"     T18_Event_Type as string,",
				"     T18_Event_Year as string,",
				"     T18_Event_Qtr as string,",
				"     T19_Event_Type as string,",
				"     T19_Event_Year as string,",
				"     T19_Event_Qtr as string,",
				"     T20_Event_Type as string,",
				"     T20_Event_Year as string,",
				"     T20_Event_Qtr as string,",
				"     T21_Event_Type as string,",
				"     T21_Event_Year as string,",
				"     T21_Event_Qtr as string,",
				"     T22_Event_Type as string,",
				"     T22_Event_Year as string,",
				"     T22_Event_Qtr as string,",
				"     T23_Event_Type as string,",
				"     T23_Event_Year as string,",
				"     T23_Event_Qtr as string,",
				"     T24_Event_Type as string,",
				"     T24_Event_Year as string,",
				"     T24_Event_Qtr as string,",
				"     T25_Event_Type as string,",
				"     T25_Event_Year as string,",
				"     T25_Event_Qtr as string,",
				"     T26_Event_Type as string,",
				"     T26_Event_Year as string,",
				"     T26_Event_Qtr as string,",
				"     T27_Event_Type as string,",
				"     T27_Event_Year as string,",
				"     T27_Event_Qtr as string,",
				"     T28_Event_Type as string,",
				"     T28_Event_Year as string,",
				"     T28_Event_Qtr as string,",
				"     T29_Event_Type as string,",
				"     T29_Event_Year as string,",
				"     T29_Event_Qtr as string,",
				"     T30_Event_Type as string,",
				"     T30_Event_Year as string,",
				"     T30_Event_Qtr as string,",
				"     T31_Event_Type as string,",
				"     T31_Event_Year as string,",
				"     T31_Event_Qtr as string,",
				"     T32_Event_Type as string,",
				"     T32_Event_Year as string,",
				"     T32_Event_Qtr as string,",
				"     T33_Event_Type as string,",
				"     T33_Event_Year as string,",
				"     T33_Event_Qtr as string,",
				"     T34_Event_Type as string,",
				"     T34_Event_Year as string,",
				"     T34_Event_Qtr as string,",
				"     T35_Event_Type as string,",
				"     T35_Event_Year as string,",
				"     T35_Event_Qtr as string,",
				"     T36_Event_Type as string,",
				"     T36_Event_Year as string,",
				"     T36_Event_Qtr as string,",
				"     T37_Event_Type as string,",
				"     T37_Event_Year as string,",
				"     T37_Event_Qtr as string,",
				"     T38_Event_Type as string,",
				"     T38_Event_Year as string,",
				"     T38_Event_Qtr as string,",
				"     T39_Event_Type as string,",
				"     T39_Event_Year as string,",
				"     T39_Event_Qtr as string,",
				"     T40_Event_Type as string,",
				"     T40_Event_Year as string,",
				"     T40_Event_Qtr as string",
				"}",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
				"     format: 'query') ~> CoreYear",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventDesc as string,",
				"          EventType as string,",
				"          OtherCharVal11 as string,",
				"          OtherCharVal2 as string,",
				"          OtherNumVal1 as double,",
				"          OtherNumVal2 as double,",
				"          OtherDtVal1 as date,",
				"          OtherDtVal2 as date,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> OtherCore",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
				"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
				"CoreYear select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Event Date} = EventDt,",
				"          EventMonth,",
				"          {Event Quarter} = EventQuarter,",
				"          {Event Year} = EventYear,",
				"          {Event Code} = EventId,",
				"          {Years of Service} = YearsofSrvc,",
				"          {Last Promo Date} = LastPromoDt,",
				"          {Corporate Title} = CorpTitle,",
				"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
				"          EmpCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"OtherCore filter(EventType=='Values - Culture and Values') ~> FilterSurveyValuesCulture",
				"FilterSurveyValuesCulture1P select(mapColumn(",
				"          WorkerId,",
				"          {Values 1P (Culture and Values)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectValuesCulture1P",
				"OtherCore filter(EventType=='Goals') ~> FilterSurveyGoals",
				"FilterSurveyGoalsCurr select(mapColumn(",
				"          WorkerId,",
				"          {Goals Curr} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGoalsCurr",
				"OtherCore filter(EventType=='Values') ~> FilterValues",
				"FilterSurveyValuesCurr select(mapColumn(",
				"          WorkerId,",
				"          {Values Curr} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectValuesCurr",
				"OtherCore filter(EventType=='Impact - Reach Qtrly Goals') ~> filter2",
				"FilterSurveyGoalsImpactReach1P select(mapColumn(",
				"          WorkerId,",
				"          {Goals 1P (Impact Reach) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGoalsImpactReach1P",
				"OtherCore filter(EventType=='Impact - Seize Opportunities') ~> filter3",
				"FilterSurveyGoalsSeize1P select(mapColumn(",
				"          WorkerId,",
				"          {Goals 1P (Seize Opp) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGoalsSeizeOpp1P",
				"filter3, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsSeize1P",
				"filter3, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsSeize2P",
				"FilterSurveyGoalsSeize2P select(mapColumn(",
				"          WorkerId,",
				"          {Goals 2P (Seize Opp) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGoalsSeizeOpp2P",
				"filter2, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsImpactReach1P",
				"filter2, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsSeize2PVal",
				"FilterSurveyGoalsSeize2PVal select(mapColumn(",
				"          WorkerId,",
				"          {Goals 2P (Impact Reach) } = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGoalsImpactReach2P",
				"FilterSurveyGoals, SelectCurrYear join(EventYear == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyGoalsCurr",
				"FilterValues, SelectCurrYear join(EventYear == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyValuesCurr",
				"FilterSurveyValuesCulture, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyValuesCulture1P",
				"FilterSurveyValuesCulture, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterSurveyValuesCulture2P",
				"FilterSurveyValuesCulture2P select(mapColumn(",
				"          WorkerId,",
				"          {Values 2P (Culture and Values)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectValuesCulture2P",
				"OtherCore filter(EventType=='Values - Works collaboratively') ~> FilterValuesWorksCollab",
				"FilterValuesWorksCollab, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterValuesWorksCollab1PYear",
				"FilterValuesWorksCollab1PYear select(mapColumn(",
				"          WorkerId,",
				"          {Values 1P (Works Collaboratively)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectValuesWorksCollab1PYear",
				"FilterValuesWorksCollab, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterValuesWorksCollab2PYear",
				"FilterValuesWorksCollab2PYear select(mapColumn(",
				"          WorkerId,",
				"          {Values 2P (Works Collaboratively)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectValuesWorksCollab2PYear",
				"OtherCore filter(EventType=='Potential') ~> FilterPotential",
				"FilterPotential, SelectCurrYear join(EventYear == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterPotentialCurr",
				"FilterPotentialCurr select(mapColumn(",
				"          WorkerId,",
				"          {Potential Curr} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPotentialCurr",
				"OtherCore filter(EventType=='G&P - Broader Responsibilities') ~> FilterPotentialBroaderResp",
				"FilterPotentialBroaderResp, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterPotentialBroadResp1P",
				"FilterPotentialBroadResp1P select(mapColumn(",
				"          WorkerId,",
				"          {Potential 1P (G&P - Broader Responsibilities)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPotentialBroadResp1P",
				"FilterPotentialBroaderResp, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterPotentialBroadResp2P",
				"FilterPotentialBroadResp2P select(mapColumn(",
				"          WorkerId,",
				"          {Potential 2P (G&P - Broader Responsibilities)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPotentialBroadResp2P",
				"OtherCore filter(EventType=='G&P - Learning and Innovation') ~> FilterPotentialLearningInnov",
				"FilterPotentialLearningInnov, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterPotentialLearnInnov2P",
				"FilterPotentialLearnInnov2P select(mapColumn(",
				"          WorkerId,",
				"          {Potential 2P (G&P - Learning and Innovation)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPotentialLearnInnov2P",
				"FilterPotentialLearningInnov, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FilterPotentialLearnInnov1P",
				"FilterPotentialLearnInnov1P select(mapColumn(",
				"          WorkerId,",
				"          {Potential 1P (G&P - Learning and Innovation)} = OtherCharVal11",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPotentialLearnInnov1P"
			]
		}
	}
}