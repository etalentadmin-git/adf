{
	"name": "DF_Review_PerformanceRating",
	"properties": {
		"description": "This workflow outputs 1 file for review of performance values across events and time periods.",
		"folder": {
			"name": "Client/Audit Reports"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_TalentData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "Source_Mapping_PerformanceRating",
						"type": "DatasetReference"
					},
					"name": "PerformanceMapping"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputPeerformanceReview"
				}
			],
			"transformations": [
				{
					"name": "CreatePivotPerformanceAndEventTime"
				},
				{
					"name": "SortOnEvent"
				},
				{
					"name": "AddPerformanceMapping"
				},
				{
					"name": "SortOnRating"
				},
				{
					"name": "SelectColumns"
				},
				{
					"name": "AddDerivedEventYearColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Event Year} as string,",
				"          {Event Date} as string,",
				"          Event as string,",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Performance Rating} as string,",
				"          {Performance Rating Date} as string,",
				"          {Talent Identifier (1)} as string,",
				"          {Talent Identifier (2)} as string,",
				"          {Talent Identifier (3)} as string,",
				"          {Talent Identifier (4)} as string,",
				"          {Talent Identifier (5)} as string,",
				"          {Salary Range} as string,",
				"          Bonus as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Client Performance Rating} as string,",
				"          {Elloree Performance Rating} as string,",
				"          {Elloree Performance Rating Sort} as string,",
				"          {Suggested Elloree Performance Rating} as string,",
				"          {Suggested Elloree Performane Rating Sort Id} as string,",
				"          {Suggested Source} as string,",
				"          {2017 Talent Assessment} as string,",
				"          {2018 Talent Assessment} as string,",
				"          {2019 Talent Assessment} as string,",
				"          {2020 Talent Assessment} as string,",
				"          {2021 Talent Assessment} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PerformanceMapping",
				"SortOnEvent pivot(groupBy({Performance Rating},",
				"          {Elloree Performance Rating},",
				"          {Elloree Performance Rating Sort},",
				"          {Client ID},",
				"          {Client Engagement Date}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Worker ID}),",
				"     columnNaming: '$N$V',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> CreatePivotPerformanceAndEventTime",
				"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
				"AllCoreData, PerformanceMapping join({Performance Rating} == {Client Performance Rating},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> AddPerformanceMapping",
				"CreatePivotPerformanceAndEventTime sort(asc({Performance Rating}, true),",
				"     asc({Elloree Performance Rating}, true)) ~> SortOnRating",
				"AddPerformanceMapping select(mapColumn(",
				"          {Client ID} = AllCoreData@{Client ID},",
				"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
				"          {Event Year},",
				"          {Event Date},",
				"          Event,",
				"          {Event Type},",
				"          {Worker ID},",
				"          {Performance Rating},",
				"          {Performance Rating Date},",
				"          {Talent Identifier (1)},",
				"          {Talent Identifier (2)},",
				"          {Talent Identifier (3)},",
				"          {Talent Identifier (4)},",
				"          {Talent Identifier (5)},",
				"          {Client ID} = PerformanceMapping@{Client ID},",
				"          {Client Engagement Date} = PerformanceMapping@{Client Engagement Date},",
				"          {Client Performance Rating},",
				"          {Elloree Performance Rating},",
				"          {Elloree Performance Rating Sort},",
				"          {Suggested Elloree Performance Rating},",
				"          {Suggested Elloree Performane Rating Sort Id},",
				"          {Suggested Source},",
				"          {2017 Talent Assessment},",
				"          {2018 Talent Assessment},",
				"          {2019 Talent Assessment},",
				"          {2020 Talent Assessment},",
				"          {2021 Talent Assessment}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
				"SortOnRating sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Dimension Review - Performance.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputPeerformanceReview"
			]
		}
	}
}