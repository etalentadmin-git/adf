{
	"name": "DF_Review_WorkerId",
	"properties": {
		"description": "This workflow takes unique IDs from each core event table and compares to unique worker IDs from all headcount to identify IDs not in headcount.  Results could highlight an issue with ID anonymization.",
		"folder": {
			"name": "Client/Audit Reports"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_Template_Headcount",
						"type": "DatasetReference"
					},
					"name": "Headcount"
				},
				{
					"dataset": {
						"referenceName": "Source_Template_Terminations",
						"type": "DatasetReference"
					},
					"name": "Terminations"
				},
				{
					"dataset": {
						"referenceName": "Source_Template_Promotions",
						"type": "DatasetReference"
					},
					"name": "Promotions"
				},
				{
					"dataset": {
						"referenceName": "Source_Template_TalentAssessment",
						"type": "DatasetReference"
					},
					"name": "Talent"
				},
				{
					"dataset": {
						"referenceName": "Source_Template_Hires",
						"type": "DatasetReference"
					},
					"name": "Hires"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputTotalSummary"
				},
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputTermIDsNotInHeadcount"
				},
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputPromoIDsNotInHeadcount"
				},
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputTalentIDsNotInHeadcount"
				},
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputHireIDsNotInHeadcount"
				}
			],
			"transformations": [
				{
					"name": "SelectUniqueWorkerIDTerminations"
				},
				{
					"name": "SelectAllEmpIDsInTerminations"
				},
				{
					"name": "SelectUniqueEmpIDHeadcount"
				},
				{
					"name": "SelectAllEmpIDsInHeadcount"
				},
				{
					"name": "SelectTermIDsNotInHeadcount"
				},
				{
					"name": "AggregateTermIDsNotInHeadcount"
				},
				{
					"name": "TotalIDsInHeadcount"
				},
				{
					"name": "CombineHeadcountAndTermIDCounts"
				},
				{
					"name": "TagEventCheckForTerms"
				},
				{
					"name": "DisplayTotalTermIDsVSTotalHeadcount"
				},
				{
					"name": "SelectUniqueWorkerIDPromotions"
				},
				{
					"name": "SelectAllEmpIDsInPromotions"
				},
				{
					"name": "SelectPromoIDsNotInHeadcount"
				},
				{
					"name": "AggregatePromoIDsNotInHeadcount"
				},
				{
					"name": "CombineHeadcountAndPromoIDCounts"
				},
				{
					"name": "TagEventCheckForPromos"
				},
				{
					"name": "DisplayTotalPromoIDsVSTotalHeadcount"
				},
				{
					"name": "CombineTotalWorkerIDSummaryAllEvents"
				},
				{
					"name": "SelectUniqueWorkerIDTalent"
				},
				{
					"name": "SelectAllEmpIDsInTalent"
				},
				{
					"name": "SelectTalentIDsNotInHeadcount"
				},
				{
					"name": "AggregateTalentIDsNotInHeadcount"
				},
				{
					"name": "CombineHeadcountAndTalentIDCounts"
				},
				{
					"name": "TagEventCheckForTalent"
				},
				{
					"name": "DisplayTotalTalentIDsVSTotalHeadcount"
				},
				{
					"name": "CountTotalTerms"
				},
				{
					"name": "TotalTermsIdentifier"
				},
				{
					"name": "JoinTotalWorkerIDEventCountsWithSummary"
				},
				{
					"name": "CountTotalPromotions"
				},
				{
					"name": "TotalPromosIdentifier"
				},
				{
					"name": "CountTotalTalent"
				},
				{
					"name": "TotalTalentIdentifier"
				},
				{
					"name": "TotalEventRecords"
				},
				{
					"name": "select1"
				},
				{
					"name": "SelectUniqueWorkerIDHires"
				},
				{
					"name": "SelectAllEmpIDsInHires"
				},
				{
					"name": "SelectHireIDsNotInHeadcount"
				},
				{
					"name": "AggregateHireIDsNotInHeadcount"
				},
				{
					"name": "CombineHeadcountAndHireIDCounts"
				},
				{
					"name": "TagEventCheckForHires"
				},
				{
					"name": "DisplayTotalHireIDsVSTotalHeadcount"
				},
				{
					"name": "CountTotalHires"
				},
				{
					"name": "TotalHireIdentifier"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "filter3"
				},
				{
					"name": "filter4"
				},
				{
					"name": "filter5"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as string,",
				"          {Event Quarter} as string,",
				"          {Event Date} as string,",
				"          {Worker ID} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Legacy Organization} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Last Promo Date} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Headcount",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as string,",
				"          {Event Quarter} as string,",
				"          {Event Date} as string,",
				"          {Event Type} as string,",
				"          {Event Reason} as string,",
				"          {Worker ID} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Last Promo Date} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Terminations",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as string,",
				"          {Event Quarter} as string,",
				"          {Event Date} as string,",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years in Job} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Promotions",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as string,",
				"          {Event Quarter} as string,",
				"          {Event Date} as string,",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Performance Rating} as string,",
				"          {Performance Rating Date} as string,",
				"          {Top Performer} as string,",
				"          {Talent Identifier (1)} as string,",
				"          {Talent Identifier (2)} as string,",
				"          {Talent Identifier (3)} as string,",
				"          {Talent Identifier (4)} as string,",
				"          {Talent Identifier (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Talent",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as string,",
				"          {Event Quarter} as string,",
				"          {Event Date} as string,",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Legacy Organization} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Hires",
				"select3 aggregate(groupBy({Worker ID}),",
				"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTerminations",
				"SelectUniqueWorkerIDTerminations select(mapColumn(",
				"          {Worker ID},",
				"          Event",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTerminations",
				"select2 aggregate(groupBy({Worker ID}),",
				"     each(match(name!='Worker ID'), $$ = first($$)),",
				"     partitionBy('hash', 1)) ~> SelectUniqueEmpIDHeadcount",
				"SelectUniqueEmpIDHeadcount select(mapColumn(",
				"          {Worker ID},",
				"          Event",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHeadcount",
				"SelectAllEmpIDsInTerminations, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTerminations@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
				"     negate:true,",
				"     broadcast: 'left')~> SelectTermIDsNotInHeadcount",
				"SelectTermIDsNotInHeadcount aggregate(groupBy(Event),",
				"     {Total Terminations Not in HCT} = count({Worker ID})) ~> AggregateTermIDsNotInHeadcount",
				"SelectAllEmpIDsInHeadcount aggregate(groupBy(Event),",
				"     {Total Count} = count({Worker ID})) ~> TotalIDsInHeadcount",
				"AggregateTermIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTermIDCounts",
				"CombineHeadcountAndTermIDCounts derive({Event Check} = 'Terminations') ~> TagEventCheckForTerms",
				"TagEventCheckForTerms aggregate(groupBy({Event Check}),",
				"     {Total IDs Not in HCT} = sum({Total Terminations Not in HCT})) ~> DisplayTotalTermIDsVSTotalHeadcount",
				"select4 aggregate(groupBy({Worker ID}),",
				"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDPromotions",
				"SelectUniqueWorkerIDPromotions select(mapColumn(",
				"          {Worker ID},",
				"          Event",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInPromotions",
				"SelectAllEmpIDsInPromotions, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInPromotions@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
				"     negate:true,",
				"     broadcast: 'left')~> SelectPromoIDsNotInHeadcount",
				"SelectPromoIDsNotInHeadcount aggregate(groupBy(Event),",
				"     {Total Promotions Not in HCT} = count({Worker ID})) ~> AggregatePromoIDsNotInHeadcount",
				"AggregatePromoIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndPromoIDCounts",
				"CombineHeadcountAndPromoIDCounts derive({Event Check} = 'Promotions') ~> TagEventCheckForPromos",
				"TagEventCheckForPromos aggregate(groupBy({Event Check}),",
				"     {Total IDs Not in HCT} = sum({Total Promotions Not in HCT}),",
				"          {Total Count} = sum({Total Count})) ~> DisplayTotalPromoIDsVSTotalHeadcount",
				"DisplayTotalTermIDsVSTotalHeadcount, DisplayTotalPromoIDsVSTotalHeadcount, DisplayTotalTalentIDsVSTotalHeadcount, DisplayTotalHireIDsVSTotalHeadcount union(byName: true)~> CombineTotalWorkerIDSummaryAllEvents",
				"select5 aggregate(groupBy({Worker ID}),",
				"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTalent",
				"SelectUniqueWorkerIDTalent select(mapColumn(",
				"          {Worker ID},",
				"          Event",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTalent",
				"SelectAllEmpIDsInTalent, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTalent@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
				"     negate:true,",
				"     broadcast: 'left')~> SelectTalentIDsNotInHeadcount",
				"SelectTalentIDsNotInHeadcount aggregate(groupBy(Event),",
				"     {Total Talent Not in HCT} = count({Worker ID})) ~> AggregateTalentIDsNotInHeadcount",
				"AggregateTalentIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTalentIDCounts",
				"CombineHeadcountAndTalentIDCounts derive({Event Check} = 'Talent') ~> TagEventCheckForTalent",
				"TagEventCheckForTalent aggregate(groupBy({Event Check}),",
				"     {Total IDs Not in HCT} = sum({Total Talent Not in HCT}),",
				"          {Total Count} = sum({Total Count})) ~> DisplayTotalTalentIDsVSTotalHeadcount",
				"SelectAllEmpIDsInTerminations aggregate(groupBy(Event),",
				"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTerms",
				"CountTotalTerms derive({Event Check} = 'Terminations') ~> TotalTermsIdentifier",
				"CombineTotalWorkerIDSummaryAllEvents, TotalEventRecords join(CombineTotalWorkerIDSummaryAllEvents@{Event Check} == TotalEventRecords@{Event Check},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTotalWorkerIDEventCountsWithSummary",
				"SelectAllEmpIDsInPromotions aggregate(groupBy(Event),",
				"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalPromotions",
				"CountTotalPromotions derive({Event Check} = 'Promotions') ~> TotalPromosIdentifier",
				"SelectAllEmpIDsInTalent aggregate(groupBy(Event),",
				"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTalent",
				"CountTotalTalent derive({Event Check} = 'Talent') ~> TotalTalentIdentifier",
				"TotalTermsIdentifier, TotalPromosIdentifier, TotalTalentIdentifier, TotalHireIdentifier union(byName: true)~> TotalEventRecords",
				"JoinTotalWorkerIDEventCountsWithSummary select(mapColumn(",
				"          Event = CombineTotalWorkerIDSummaryAllEvents@{Event Check},",
				"          {Total IDs Not in HCT},",
				"          {Total Unique Worker ID's in Event} = {Total Event Record Count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select6 aggregate(groupBy({Worker ID}),",
				"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDHires",
				"SelectUniqueWorkerIDHires select(mapColumn(",
				"          {Worker ID},",
				"          Event",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHires",
				"SelectAllEmpIDsInHires, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInHires@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
				"     negate:true,",
				"     broadcast: 'auto')~> SelectHireIDsNotInHeadcount",
				"SelectHireIDsNotInHeadcount aggregate(groupBy(Event),",
				"     {Total Hires Not in HCT} = count({Worker ID})) ~> AggregateHireIDsNotInHeadcount",
				"AggregateHireIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndHireIDCounts",
				"CombineHeadcountAndHireIDCounts derive({Event Check} = 'Hire') ~> TagEventCheckForHires",
				"TagEventCheckForHires aggregate(groupBy({Event Check}),",
				"     {Total IDs Not in HCT} = sum({Total Hires Not in HCT}),",
				"          {Total Count} = sum({Total Count})) ~> DisplayTotalHireIDsVSTotalHeadcount",
				"SelectAllEmpIDsInHires aggregate(groupBy(Event),",
				"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalHires",
				"CountTotalHires derive({Event Check} = 'Hire') ~> TotalHireIdentifier",
				"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
				"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
				"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
				"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
				"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter5",
				"derivedColumn1 select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          Event,",
				"          {Worker ID},",
				"          {Worker Status},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Years in Job},",
				"          {Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Legacy Organization},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGTBQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn2 select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          Event,",
				"          {Event Type},",
				"          {Event Reason},",
				"          {Worker ID},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Years in Job},",
				"          {Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGTBQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"derivedColumn3 select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          Event,",
				"          {Event Type},",
				"          {Worker ID},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Corporate Title},",
				"          {Previous Job Title},",
				"          {Previous Job Family/Function},",
				"          {Previous Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Years in Job},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGTBQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"derivedColumn4 select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          Event,",
				"          {Event Type},",
				"          {Worker ID},",
				"          {Performance Rating},",
				"          {Performance Rating Date},",
				"          {Top Performer},",
				"          {Talent Identifier (1)},",
				"          {Talent Identifier (2)},",
				"          {Talent Identifier (3)},",
				"          {Talent Identifier (4)},",
				"          {Talent Identifier (5)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"derivedColumn5 select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          Event,",
				"          {Event Type},",
				"          {Worker ID},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Legacy Organization},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Rehire Indicator},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGTBQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"filter1 derive(Event = 'Headcount') ~> derivedColumn1",
				"filter2 derive(Event = 'Terminations') ~> derivedColumn2",
				"filter3 derive(Event = 'Promotions') ~> derivedColumn3",
				"filter4 derive(Event = 'Talent') ~> derivedColumn4",
				"filter5 derive(Event = 'Hires') ~> derivedColumn5",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Worker ID Review Summary.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputTotalSummary",
				"SelectTermIDsNotInHeadcount sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Worker IDs in Terms Not in HCT.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputTermIDsNotInHeadcount",
				"SelectPromoIDsNotInHeadcount sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Worker IDs in Promos Not in HCT.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputPromoIDsNotInHeadcount",
				"SelectTalentIDsNotInHeadcount sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Worker IDs in Talent Not in HCT.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputTalentIDsNotInHeadcount",
				"SelectHireIDsNotInHeadcount sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Worker IDs in Hires Not in HCT.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputHireIDsNotInHeadcount"
			]
		}
	}
}