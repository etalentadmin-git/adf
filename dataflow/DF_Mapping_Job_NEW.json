{
	"name": "DF_Mapping_Job_NEW",
	"properties": {
		"folder": {
			"name": "Client/Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_Mapping_TRASH",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "etalentCorpTitleMapTbl",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreDB"
				},
				{
					"dataset": {
						"referenceName": "etalentReqFactTbl",
						"type": "DatasetReference"
					},
					"name": "ReqDB"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "etalentJobMapTbl",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "FInalJobReqSelect"
				},
				{
					"name": "union1"
				},
				{
					"name": "select2"
				},
				{
					"name": "FinalClientTableSelections"
				},
				{
					"name": "join2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Elloree Corp Title} as string,",
				"          {Job Function} as string,",
				"          {Job Title} as string,",
				"          {Elloree Job Function} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientCorpTitle as string,",
				"          ClientElloreeCorpTitle as string,",
				"          ElloreeCorpTitle as string,",
				"          ElloreeCorpTitleSortId as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientEngagementType as string,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CoreDB",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientEngagementType as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ReqType as string,",
				"          PostingDt as date,",
				"          ReqStatus as string,",
				"          NumberofOpenings as integer,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          CorpTitle as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          HiringMgrWorkerId as string,",
				"          PrimaryRecruiterWorkerId as string,",
				"          ReqOther1 as string,",
				"          ReqOther2 as string,",
				"          ReqOther3 as string,",
				"          ReqOther4 as string,",
				"          ReqOther5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ReqDB",
				"select3 alterRow(upsertIf(true()),",
				"     deleteIf(isNull(ClientId)),",
				"     deleteIf(isNull(ClientEngagementDt)),",
				"     deleteIf(isNull(JobFunction)),",
				"     deleteIf(isNull(JobTitle)),",
				"     deleteIf(isNull(ElloreeJobFunction))) ~> alterRow1",
				"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
				"source2 select(mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          ClientCorpTitle,",
				"          ElloreeCorpTitle",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 join({Client ID} == ClientId",
				"     && {Client Engagement Date} == ClientEngagementDt",
				"     && {Elloree Corp Title} == ElloreeCorpTitle,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"union1 aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          CorpTitle,",
				"          JobTitle,",
				"          JobFunction),",
				"     ClientIdForQuery = max(ClientId)) ~> aggregate2",
				"ReqDB aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          CorpTitle,",
				"          JobTitle,",
				"          JobFunction),",
				"     ClientIdForQuery = max(ClientId)) ~> aggregate3",
				"aggregate3 select(mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          CorpTitle,",
				"          JobTitle,",
				"          JobFunction",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FInalJobReqSelect",
				"select2, FInalJobReqSelect union(byName: true)~> union1",
				"CoreDB select(mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          CorpTitle,",
				"          JobTitle,",
				"          JobFunction",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"aggregate2 select(mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          CorpTitle,",
				"          JobTitle,",
				"          JobFunction,",
				"          ClientIdForQuery",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalClientTableSelections",
				"join1, FinalClientTableSelections join({Client ID} == FinalClientTableSelections@ClientId",
				"     && {Client Engagement Date} == FinalClientTableSelections@ClientEngagementDt",
				"     && ClientCorpTitle == CorpTitle",
				"     && {Job Title} == JobTitle",
				"     && {Job Function} == JobFunction,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          ClientId = {Client ID},",
				"          ClientEngagementDt = {Client Engagement Date},",
				"          CorpTitle = ClientCorpTitle,",
				"          JobFunction = {Job Function},",
				"          JobTitle = {Job Title},",
				"          ElloreeJobFunction = {Elloree Job Function}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientCorpTitle as string,",
				"          ClientJobTitle as string,",
				"          ClientJobFunction as string,",
				"          ElloreeJobFunction as string,",
				"          LoadDt as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ClientId','ClientEngagementDt','ClientJobTitle','ClientJobFunction','ClientCorpTitle'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          ClientCorpTitle = CorpTitle,",
				"          ClientJobTitle = JobTitle,",
				"          ClientJobFunction = JobFunction,",
				"          ElloreeJobFunction,",
				"          LoadDt",
				"     )) ~> sink1"
			]
		}
	}
}