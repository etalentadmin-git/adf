{
	"name": "DF_Mapping_CorpTitle",
	"properties": {
		"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
		"folder": {
			"name": "Client/Create Mapping Table Files"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "etalentCorpTitleMapTbl",
						"type": "DatasetReference"
					},
					"name": "CorpTitleMappingTableClient"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_JobReq_File",
						"type": "DatasetReference"
					},
					"name": "Requisitions"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseCoreRecords"
				},
				{
					"dataset": {
						"referenceName": "etalentReqFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseReqRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_MappingPrepFldr",
						"type": "DatasetReference"
					},
					"name": "OutputMappingToPrepFldr"
				},
				{
					"dataset": {
						"referenceName": "Source_MappingWorkingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputMappingToWorkingFldr"
				}
			],
			"transformations": [
				{
					"name": "CreatePivotCorpTitleEventTime"
				},
				{
					"name": "SortOnEvent"
				},
				{
					"name": "SortOnCorpTitle"
				},
				{
					"name": "SelectUniqueOtherClientValues"
				},
				{
					"name": "SelectExistingCorpTitleMapping"
				},
				{
					"name": "JoinCurrCorpTitle"
				},
				{
					"name": "select5"
				},
				{
					"name": "join5"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select6"
				},
				{
					"name": "JoinPrevCorpTitle"
				},
				{
					"name": "select7"
				},
				{
					"name": "join6"
				},
				{
					"name": "select8"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "PullCorpTitleValuesNotInCurrTitleField"
				},
				{
					"name": "UnionCurrAndPrevCorpTitleRows"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "SelectCorpTitleColumns"
				},
				{
					"name": "select10"
				},
				{
					"name": "AddReqDerivedForUnion"
				},
				{
					"name": "JoinCoreAndReqRecords"
				},
				{
					"name": "selectCoreDBRecs"
				},
				{
					"name": "selectReqDBRecs"
				},
				{
					"name": "RemoveDups"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "AddReqDBDerivedForUnion"
				},
				{
					"name": "selectReqDBRecsInit"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "GetCountOfClientForUniqueValues"
				},
				{
					"name": "JoinClientIDCountInForMaxFilter"
				},
				{
					"name": "CleanupSelectFields"
				},
				{
					"name": "SelectMappingWithMostClients"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "JoinBackFinalSelectMapping"
				},
				{
					"name": "TakeLastClientValForRemainingDups"
				},
				{
					"name": "NotEqualtoClientID"
				},
				{
					"name": "EqualtoClientId"
				},
				{
					"name": "GroupUniqueValues"
				},
				{
					"name": "selectUniqueClientIDValues"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientCorpTitle as string,",
				"          ClientElloreeCorpTitle as string,",
				"          ElloreeCorpTitle as string,",
				"          ElloreeCorpTitleSortId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CorpTitleMappingTableClient",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          EventId as string,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Requisition Type} as string,",
				"          {Posting Date} as string,",
				"          {Requisition Status} as string,",
				"          {Number of Openings} as string,",
				"          {Job Title} as string,",
				"          {Job Function} as string,",
				"          {Corporate Title} as string,",
				"          {Work Office Location} as string,",
				"          {Work Office City} as string,",
				"          {Work Office State} as string,",
				"          {Work Office Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          {Hiring Manager Worker ID} as string,",
				"          {Primary Recruiter Worker ID} as string,",
				"          {Requisition Other (1)} as string,",
				"          {Requisition Other (2)} as string,",
				"          {Requisition Other (3)} as string,",
				"          {Requisition Other (4)} as string,",
				"          {Requisition Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Requisitions",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseCoreRecords",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ReqType as string,",
				"          PostingDt as date,",
				"          ReqStatus as string,",
				"          NumberofOpenings as integer,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          CorpTitle as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          HiringMgrWorkerId as string,",
				"          PrimaryRecruiterWorkerId as string,",
				"          ReqOther1 as string,",
				"          ReqOther2 as string,",
				"          ReqOther3 as string,",
				"          ReqOther4 as string,",
				"          ReqOther5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseReqRecords",
				"derivedColumn4 pivot(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Client Corporate Title},",
				"          {Elloree Corporate Title},",
				"          {Client Elloree Corporate Title},",
				"          {Elloree Corporate Title Sort},",
				"          {Suggested Elloree Corporate Title},",
				"          {Suggested Client Elloree Corporate Title},",
				"          {Suggested Elloree Corporate Title Sort},",
				"          {Suggested Source}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Worker ID}),",
				"     columnNaming: '$N$V',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> CreatePivotCorpTitleEventTime",
				"derivedColumn5 sort(asc({Event Year}, true)) ~> SortOnEvent",
				"CreatePivotCorpTitleEventTime sort(asc({Client Corporate Title}, true)) ~> SortOnCorpTitle",
				"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientCorpTitle} = ClientCorpTitle,",
				"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
				"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
				"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId),",
				"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
				"TakeLastClientValForRemainingDups select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientCorporateTitle} = {Unique ClientCorpTitle},",
				"          {Unique ClientElloreeCorporateTitle} = {Unique ClientElloreeCorpTitle},",
				"          {Unique ElloreeCorporateTitle} = {Unique ElloreeCorpTitle},",
				"          {Unique ElloreeCorporateTitleSort} = {Unique ElloreeCorpTitleSortId}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectExistingCorpTitleMapping",
				"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
				"     && {Corporate Title} == {Unique ClientCorporateTitle},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCurrCorpTitle",
				"JoinCurrCorpTitle select(mapColumn(",
				"          {Client Corporate Title} = {Corporate Title},",
				"          {Client Elloree Corporate Title},",
				"          {Elloree Corporate Title},",
				"          {Elloree Corporate Title Sort},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested Client Elloree Corporate Title} = {Unique ClientElloreeCorporateTitle},",
				"          {Suggested Elloree Corporate Title} = {Unique ElloreeCorporateTitle},",
				"          {Suggested Elloree Corporate Title Sort} = {Unique ElloreeCorporateTitleSort},",
				"          {Worker ID} = RecordID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
				"     && {Client ID} != {Unique ClientId},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join5",
				"select6 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
				"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
				"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
				"          {Corporate Title (Current or Previous)} = 'Curr Title') ~> derivedColumn2",
				"join5 select(mapColumn(",
				"          {Client Corporate Title},",
				"          {Client Elloree Corporate Title},",
				"          {Elloree Corporate Title},",
				"          {Elloree Corporate Title Sort},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Client Elloree Corporate Title},",
				"          {Suggested Elloree Corporate Title},",
				"          {Suggested Elloree Corporate Title Sort},",
				"          {Worker ID},",
				"          {Unique ClientId},",
				"          {Unique ClientCorporateTitle},",
				"          {Unique ClientElloreeCorporateTitle},",
				"          {Unique ElloreeCorporateTitle},",
				"          {Unique ElloreeCorporateTitleSort}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
				"     && {Previous Corporate Title} == {Unique ClientCorpTitle},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinPrevCorpTitle",
				"JoinPrevCorpTitle select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Client Corporate Title} = {Previous Corporate Title},",
				"          {Elloree Corporate Title},",
				"          {Elloree Corporate Title Sort},",
				"          {Client Elloree Corporate Title},",
				"          {Event and Year},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
				"          {Suggested ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId},",
				"          {Suggested ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
				"          RecordID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
				"     && {Client ID} != {Unique ClientId},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join6",
				"join6 select(mapColumn(",
				"          {Client Corporate Title},",
				"          {Client Elloree Corporate Title},",
				"          {Elloree Corporate Title},",
				"          {Elloree Corporate Title Sort},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Client Elloree Corporate Title} = {Suggested ClientElloreeCorpTitle},",
				"          {Suggested Elloree Corporate Title} = {Suggested ElloreeCorpTitle},",
				"          {Suggested Elloree Corporate Title Sort} = {Suggested ElloreeCorpTitleSortId},",
				"          {Worker ID},",
				"          {Unique ClientId},",
				"          {Unique ClientCorporateTitle},",
				"          {Unique ClientElloreeCorporateTitle},",
				"          {Unique ElloreeCorporateTitle},",
				"          {Unique ElloreeCorporateTitleSort}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select8 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
				"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
				"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
				"          {Corporate Title (Current or Previous)} = 'Prev Title') ~> derivedColumn3",
				"derivedColumn3, derivedColumn2 exists(select8@{Client Corporate Title} == select6@{Client Corporate Title},",
				"     negate:true,",
				"     broadcast: 'both')~> PullCorpTitleValuesNotInCurrTitleField",
				"derivedColumn2, PullCorpTitleValuesNotInCurrTitleField union(byName: true)~> UnionCurrAndPrevCorpTitleRows",
				"UnionCurrAndPrevCorpTitleRows derive({Event and Year} = concat({Event and Year},concat(' ',{Corporate Title (Current or Previous)}))) ~> derivedColumn4",
				"Requisitions select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Corporate Title},",
				"          {Event Year},",
				"          Event,",
				"          RecordID = {Requisition ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleColumns",
				"AllCoreData select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year},",
				"          Event,",
				"          {Corporate Title},",
				"          {Previous Corporate Title},",
				"          RecordID = {Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"SelectCorpTitleColumns derive({Previous Corporate Title} = 'N/A') ~> AddReqDerivedForUnion",
				"select10, AddReqDerivedForUnion, AddReqDBDerivedForUnion, selectCoreDBRecs union(byName: true)~> JoinCoreAndReqRecords",
				"aggregate2 select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          RecordID = WorkerId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          {Corporate Title} = CorpTitle,",
				"          {Previous Corporate Title} = PrevCorpTitle",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
				"selectReqDBRecsInit select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          RecordID = ReqId,",
				"          {Corporate Title} = CorpTitle",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
				"JoinCoreAndReqRecords aggregate(groupBy({Client Engagement Date},",
				"          {Event Year},",
				"          Event,",
				"          {Corporate Title},",
				"          {Previous Corporate Title},",
				"          RecordID),",
				"     {Client ID} = max({Client ID})) ~> RemoveDups",
				"RemoveDups derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
				"          {Elloree Corporate Title} = '',",
				"          {Elloree Corporate Title Sort} = '',",
				"          {Client Elloree Corporate Title} = '') ~> derivedColumn5",
				"selectReqDBRecs derive({Previous Corporate Title} = 'N/A') ~> AddReqDBDerivedForUnion",
				"DatabaseReqRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          EventYear,",
				"          Event,",
				"          ReqId,",
				"          CorpTitle),",
				"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
				"DatabaseCoreRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventYear,",
				"          Event,",
				"          CorpTitle,",
				"          PrevCorpTitle),",
				"     TotWorkers = count(WorkerId)) ~> aggregate2",
				"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientCorpTitle} = {Unique ClientCorpTitle},",
				"          {Count Unique ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
				"          {Count Unique ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
				"          {Count Unique ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId}),",
				"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
				"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientCorpTitle} == {Count Unique ClientCorpTitle}",
				"     && {Unique ClientElloreeCorpTitle} == {Count Unique ClientElloreeCorpTitle}",
				"     && {Unique ElloreeCorpTitle} == {Count Unique ElloreeCorpTitle}",
				"     && {Unique ElloreeCorpTitleSortId} == {Count Unique ElloreeCorpTitleSortId},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
				"JoinClientIDCountInForMaxFilter select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitleSortId},",
				"          ClientIDCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
				"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitleSortId}),",
				"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
				"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientCorpTitle} = {Unique ClientCorpTitle}),",
				"     {Agg Unique ClientElloreeCorpTitle} = first({Unique ClientElloreeCorpTitle}),",
				"          {Agg Unique ElloreeCorpTitle} = first({Unique ElloreeCorpTitle}),",
				"          {Agg Unique ElloreeCorpTitleSortId} = first({Unique ElloreeCorpTitleSortId})) ~> aggregate3",
				"SelectMappingWithMostClients, aggregate3 join({Unique ClientCorpTitle} == {Agg Unique ClientCorpTitle}",
				"     && {Unique ClientElloreeCorpTitle} == {Agg Unique ClientElloreeCorpTitle}",
				"     && {Unique ElloreeCorpTitle} == {Agg Unique ElloreeCorpTitle}",
				"     && {Unique ElloreeCorpTitleSortId} == {Agg Unique ElloreeCorpTitleSortId},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
				"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientCorpTitle},",
				"          {Unique ClientElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitleSortId}),",
				"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
				"CorpTitleMappingTableClient filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
				"CorpTitleMappingTableClient filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
				"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientCorpTitle} = ClientCorpTitle,",
				"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
				"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
				"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId),",
				"     RowCount = count(ClientId)) ~> GroupUniqueValues",
				"GroupUniqueValues select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientCorpTitle},",
				"          {Unique ClientElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitle},",
				"          {Unique ElloreeCorpTitleSortId}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
				"SortOnCorpTitle sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['prep_corp_title_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputMappingToPrepFldr",
				"SortOnCorpTitle sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['corp_title_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputMappingToWorkingFldr"
			]
		}
	}
}