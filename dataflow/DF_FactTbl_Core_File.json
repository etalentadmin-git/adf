{
	"name": "DF_FactTbl_Core_File",
	"properties": {
		"folder": {
			"name": "Client/Fact Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_Template_Headcount",
						"type": "DatasetReference"
					},
					"name": "Headcount"
				},
				{
					"dataset": {
						"referenceName": "Source_Template_Terminations",
						"type": "DatasetReference"
					},
					"name": "Terminations"
				},
				{
					"dataset": {
						"referenceName": "Source_Template_Hires",
						"type": "DatasetReference"
					},
					"name": "Hires"
				},
				{
					"dataset": {
						"referenceName": "Source_Template_Promotions",
						"type": "DatasetReference"
					},
					"name": "Promotions"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_FactTblFldr",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MergeEvents"
				},
				{
					"name": "AddDerived",
					"description": "Add employee count column for aggregations."
				},
				{
					"name": "selectfinal"
				},
				{
					"name": "TagHeadcountEvent"
				},
				{
					"name": "TagTerminationEvent"
				},
				{
					"name": "TagHireEvent"
				},
				{
					"name": "TagPromotionEvent"
				},
				{
					"name": "ConvertNullsForKeyFields"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "filter2"
				},
				{
					"name": "select3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "select4"
				},
				{
					"name": "filter4"
				},
				{
					"name": "select5"
				},
				{
					"name": "CalcNullDates"
				},
				{
					"name": "CalcServiceforNulls"
				},
				{
					"name": "RemoveNullWorkerIdRowsHCT"
				},
				{
					"name": "RemoveNullWorkerIdRowsTER"
				},
				{
					"name": "RemoveNullWorkerIdRowsHIR"
				},
				{
					"name": "RemoveNullWorkerIdRowsPRO"
				},
				{
					"name": "derivedEventMonthQtr"
				},
				{
					"name": "RemoveDuplicates"
				},
				{
					"name": "ReplaceSpecCharHyphen"
				},
				{
					"name": "ReplaceSpecialCharApostrophe"
				},
				{
					"name": "ReplaceSpecialCharacterAccent"
				},
				{
					"name": "ReplaceCharacterUnknown"
				},
				{
					"name": "SetEventQuarter"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string,",
				"     Flow_Qtr1_Start as string",
				"}",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as short,",
				"          {Event Date} as date 'yyyy-MM-dd',",
				"          {Worker ID} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as double,",
				"          {Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Legacy Organization} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as date 'yyyy-MM-dd',",
				"          {Current Hire Date} as date 'yyyy-MM-dd',",
				"          {Years of Service} as double,",
				"          {Last Promo Date} as date 'yyyy-MM-dd',",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Headcount",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as short,",
				"          {Event Date} as date 'yyyy-MM-dd',",
				"          {Event Type} as string,",
				"          {Event Reason} as string,",
				"          {Worker ID} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as double,",
				"          {Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as date 'yyyy-MM-dd',",
				"          {Current Hire Date} as date 'yyyy-MM-dd',",
				"          {Years of Service} as double,",
				"          {Last Promo Date} as date 'yyyy-MM-dd',",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Terminations",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as short,",
				"          {Event Quarter} as integer,",
				"          {Event Date} as date 'yyyy-MM-dd',",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Legacy Organization} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as date 'yyyy-MM-dd',",
				"          {Current Hire Date} as date 'yyyy-MM-dd',",
				"          {Rehire Indicator} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Hires",
				"source(output(",
				"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
				"          {Event Year} as short,",
				"          {Event Quarter} as integer,",
				"          {Event Date} as date 'yyyy-MM-dd',",
				"          {Event Type} as string,",
				"          {Worker ID} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Original Hire Date} as date 'yyyy-MM-dd',",
				"          {Current Hire Date} as date 'yyyy-MM-dd',",
				"          {Years of Service} as double,",
				"          {Years in Job} as double,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as short,",
				"          {Generation Desc} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Promotions",
				"TagHeadcountEvent, TagHireEvent, TagTerminationEvent, TagPromotionEvent union(byName: true)~> MergeEvents",
				"ReplaceCharacterUnknown derive(EmpCount = 1,",
				"          {Generation Desc} = iif(not(isNull({Birth Year})), iif({Birth Year}<1946,'Pre-Boomer (<1946)', iif(between({Birth Year},1946,1964),'Boomer (1946-1964)', \r",
				"iif(between({Birth Year}, 1965, 1978),'Gen X (1965-1978)', \r",
				"iif(between({Birth Year},1979,1996),'Gen Y (1979-1996)', \r",
				"iif({Birth Year}>=1997,'Gen Z (>=1997)','Unknown'))))),{Generation Desc}),",
				"          {Generation Sort ID} = iif({Birth Year}<1946,1,  iif(between({Birth Year},1946,1964),2,  iif(between({Birth Year}, 1965, 1978),3,  iif(between({Birth Year},1979,1996),4,  iif({Birth Year}>=1997,5,6))))),",
				"          {Years of Service Band} = iif(between({Years of Service},0,0.25),'0-3 Months', \r",
				"iif(between({Years of Service},0.26,0.5),'4-6 Months', \r",
				"iif(between({Years of Service},0.51,0.99),'7-11 Months', \r",
				"iif(between({Years of Service},1,1.99),'1-2 Years', \r",
				"iif(between({Years of Service},2,4.99),'2-5 Years', \r",
				"iif(between({Years of Service},5,9.99),'5-10 Years', \r",
				"iif(between({Years of Service},10,14.99),'10-15 Years', \r",
				"iif(between({Years of Service},15,24.99),'15-25 Years', \r",
				"iif({Years of Service}>=25,'25+ Years', 'Unknown'))))))))),",
				"          {Years of Service Sort ID} = iif(between({Years of Service},0,0.25),9, \r",
				"iif(between({Years of Service},0.26,0.5),8, \r",
				"iif(between({Years of Service},0.51,0.99),7, \r",
				"iif(between({Years of Service},1,1.99),6, \r",
				"iif(between({Years of Service},2,4.99),5, \r",
				"iif(between({Years of Service},5,9.99),4, \r",
				"iif(between({Years of Service},10,14.99),3, \r",
				"iif(between({Years of Service},15,24.99),2, \r",
				"iif({Years of Service}>=25,1, 10))))))))),",
				"          {Client ID} = $Flow_Client_Id,",
				"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddDerived",
				"SetEventQuarter select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Worker ID},",
				"          {Event Date},",
				"          EventMonth = {Event Month},",
				"          {Event Quarter},",
				"          {Event Year},",
				"          {Event Code},",
				"          {Event Type},",
				"          Event,",
				"          {Event Reason},",
				"          {Worker Status},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Years in Job},",
				"          {Previous Job Title},",
				"          {Previous Job Family/Function},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Years of Service Band},",
				"          {Years of Service Sort ID},",
				"          {Last Promo Date},",
				"          {Rehire Indicator},",
				"          {Corporate Title},",
				"          {Previous Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Legacy Organization},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGBTQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc},",
				"          {Generation Sort ID},",
				"          EmpCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfinal",
				"select2 derive(Event = 'Headcount',",
				"          {Event Code} = 'HCT') ~> TagHeadcountEvent",
				"select3 derive(Event = 'Termination',",
				"          {Event Code} = 'TER') ~> TagTerminationEvent",
				"select4 derive(Event = 'Hire',",
				"          {Event Code} = 'HIR') ~> TagHireEvent",
				"select5 derive(Event = 'Promotion',",
				"          {Event Code} = 'PRO') ~> TagPromotionEvent",
				"AddDerived derive({Event Type} = iif(isNull({Event Type}),'N/A',{Event Type}),",
				"          {Event Reason} = iif(isNull({Event Reason}),'N/A',{Event Reason}),",
				"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
				"          {Previous Corporate Title} = iif(isNull({Previous Corporate Title}),'N/A',{Previous Corporate Title}),",
				"          {Job Title} = iif(isNull({Job Title}),'N/A',{Job Title}),",
				"          {Job Family/Function} = iif(isNull({Job Family/Function}),'N/A',{Job Family/Function}),",
				"          {Previous Job Title} = iif(isNull({Previous Job Title}),'N/A',{Previous Job Title}),",
				"          {Previous Job Family/Function} = iif(isNull({Previous Job Family/Function}),'N/A',{Previous Job Family/Function}),",
				"          {Rehire Indicator} = iif(isNull({Rehire Indicator}),'N/A',{Rehire Indicator}),",
				"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
				"          {Work City} = iif(isNull({Work City}),'N/A',{Work City}),",
				"          {Work State} = iif(isNull({Work State}),'N/A',{Work State}),",
				"          {Work Country} = iif(isNull({Work Country}),'N/A',{Work Country}),",
				"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
				"          {Direct Manager Worker ID} = iif(isNull({Direct Manager Worker ID}),'N/A',{Direct Manager Worker ID}),",
				"          {Legacy Organization} = iif(isNull({Legacy Organization}),'N/A',{Legacy Organization}),",
				"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
				"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
				"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
				"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4}),",
				"          Race = iif(isNull(Race),'N/A',Race),",
				"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
				"          Gender = iif(isNull(Gender),'N/A',Gender),",
				"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
				"          LGBTQ = iif(isNull(LGBTQ),'N/A',LGBTQ),",
				"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
				"          {Generation Desc} = iif(isNull({Generation Desc}),'N/A',{Generation Desc}),",
				"          {Manager Indicator} = iif(isNull({Manager Indicator}),'N/A',{Manager Indicator})) ~> ConvertNullsForKeyFields",
				"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
				"RemoveNullWorkerIdRowsHCT select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          {Worker ID},",
				"          {Worker Status},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Years in Job},",
				"          {Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Legacy Organization},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Last Promo Date},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGBTQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
				"RemoveNullWorkerIdRowsTER select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          {Event Type},",
				"          {Event Reason},",
				"          {Worker ID},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Years in Job},",
				"          {Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Last Promo Date},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGBTQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
				"RemoveNullWorkerIdRowsHIR select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          {Event Type},",
				"          {Worker ID},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Legacy Organization},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Rehire Indicator},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGBTQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
				"RemoveNullWorkerIdRowsPRO select(mapColumn(",
				"          {Event Year},",
				"          {Event Date},",
				"          {Event Type},",
				"          {Worker ID},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Corporate Title},",
				"          {Previous Job Title},",
				"          {Previous Job Family/Function},",
				"          {Previous Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Years in Job},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGBTQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"MergeEvents derive({Current Hire Date} = iif(isNull({Current Hire Date}),{Original Hire Date},{Current Hire Date})) ~> CalcNullDates",
				"CalcNullDates derive({Years of Service} = round({Years of Service},1),",
				"          {Years in Job} = round({Years in Job},1)) ~> CalcServiceforNulls",
				"filter1 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHCT",
				"filter2 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsTER",
				"filter3 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHIR",
				"filter4 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsPRO",
				"ConvertNullsForKeyFields derive({Event Month} = month({Event Date})) ~> derivedEventMonthQtr",
				"selectfinal aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          EventMonth,",
				"          {Event Quarter},",
				"          {Event Year},",
				"          {Worker ID},",
				"          {Event Date},",
				"          {Event Code},",
				"          {Event Type},",
				"          Event,",
				"          {Event Reason},",
				"          {Worker Status},",
				"          {Worker Type},",
				"          {Job Title},",
				"          {Job Family/Function},",
				"          {Years in Job},",
				"          {Previous Job Title},",
				"          {Previous Job Family/Function},",
				"          {Original Hire Date},",
				"          {Current Hire Date},",
				"          {Years of Service},",
				"          {Years of Service Band},",
				"          {Years of Service Sort ID},",
				"          {Last Promo Date},",
				"          {Rehire Indicator},",
				"          {Corporate Title},",
				"          {Previous Corporate Title},",
				"          {Manager Indicator},",
				"          {Direct Manager Worker ID},",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind},",
				"          {Legacy Organization},",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          Race,",
				"          {Hispanic or Latino Origin},",
				"          Gender,",
				"          {Veteran Ind},",
				"          LGBTQ,",
				"          {Disability Ind},",
				"          {Birth Year},",
				"          {Generation Desc},",
				"          {Generation Sort ID},",
				"          EmpCount),",
				"     RowCount = count({Worker ID})) ~> RemoveDuplicates",
				"CalcServiceforNulls derive({Job Title} = replace({Job Title},\"–\",\"-\")) ~> ReplaceSpecCharHyphen",
				"ReplaceSpecCharHyphen derive({Job Title} = replace({Job Title},\"’\",\"'\")) ~> ReplaceSpecialCharApostrophe",
				"ReplaceSpecialCharApostrophe derive({Job Title} = replace({Job Title},\"ó\",\"o\")) ~> ReplaceSpecialCharacterAccent",
				"ReplaceSpecialCharacterAccent derive({Job Title} = replace({Job Title},\"�\",\"-\")) ~> ReplaceCharacterUnknown",
				"derivedEventMonthQtr derive({Event Quarter} = iif(\r",
				"    (\r",
				"        (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
				"    ) < 3, \r",
				"    1,\r",
				"    iif(\r",
				"        (\r",
				"            (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
				"        ) >= 3 && (\r",
				"            (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
				"        ) < 6, \r",
				"        2,\r",
				"        iif(\r",
				"            (\r",
				"                (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
				"            ) >= 6 && (\r",
				"                (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
				"            ) < 9, \r",
				"            3,\r",
				"            4\r",
				"        )\r",
				"    )\r",
				")) ~> SetEventQuarter",
				"RemoveDuplicates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['CoreFctTbl.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}