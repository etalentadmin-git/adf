{
	"name": "DF_FactTbl_SilverMedalApplicant_File",
	"properties": {
		"folder": {
			"name": "Client/Fact Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_Applicant_File",
						"type": "DatasetReference"
					},
					"name": "Applicant"
				},
				{
					"dataset": {
						"referenceName": "Source_Mapping_Applicant",
						"type": "DatasetReference"
					},
					"name": "ApplicantMap"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_FactTblFldr",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "HiredApplicants"
				},
				{
					"name": "JointoApplicantMap"
				},
				{
					"name": "GroupHiredApplicantsByYear"
				},
				{
					"name": "Interviewed"
				},
				{
					"name": "GroupInterviewedApplicantsandYear"
				},
				{
					"name": "selectApplicants"
				},
				{
					"name": "JoinHires"
				},
				{
					"name": "CalcSilverMedalist"
				},
				{
					"name": "selectColumnsForFactTbl"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Application Date} as string,",
				"          {Applicant ID} as string,",
				"          Source as string,",
				"          {Applicant Type} as string,",
				"          {Internal Worker ID} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Applicant Final Disposition Date} as string,",
				"          {Applicant Final Disposition} as string,",
				"          {Applicant Step Before Final Disposition} as string,",
				"          {Applicant Rejected Reason} as string,",
				"          {Applicant Other (1)} as string,",
				"          {Applicant Other (2)} as string,",
				"          {Applicant Other (3)} as string,",
				"          {Applicant Other (4)} as string,",
				"          {Applicant Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Applicant",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Applicant Final Disposition} as string,",
				"          {Client Applicant Step Before Final Disposition} as string,",
				"          {Client Applicant Rejected Reason} as string,",
				"          {Elloree Applicant Final Disposition} as string,",
				"          {Elloree Applicant Category} as string,",
				"          {Elloree Submitted to Mgr Fl} as string,",
				"          {Suggested Elloree Applicant Final Disposition} as string,",
				"          {Suggested Elloree Applicant Category} as string,",
				"          {Suggested Elloree Submitted to Mgr Fl} as string,",
				"          {Suggested Source} as string,",
				"          {2021 Job Applicant} as string,",
				"          {2022 Job Applicant} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ApplicantMap",
				"JointoApplicantMap filter({Elloree Applicant Final Disposition}=='Hired') ~> HiredApplicants",
				"Applicant, ApplicantMap join({Applicant Final Disposition} == {Client Applicant Final Disposition}",
				"     && {Applicant Step Before Final Disposition} == {Client Applicant Step Before Final Disposition}",
				"     && {Applicant Rejected Reason} == {Client Applicant Rejected Reason}",
				"     && Applicant@{Client ID} == ApplicantMap@{Client ID}",
				"     && Applicant@{Client Engagement Date} == ApplicantMap@{Client Engagement Date},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JointoApplicantMap",
				"HiredApplicants aggregate(groupBy({Hired Client ID} = Applicant@{Client ID},",
				"          {Hired Client Engagement Date} = Applicant@{Client Engagement Date},",
				"          {Hired  Applicant ID} = {Applicant ID},",
				"          {Hired  Event Year} = {Event Year}),",
				"     HiredReqCount = count({Requisition ID})) ~> GroupHiredApplicantsByYear",
				"selectApplicants filter({Elloree Applicant Final Disposition}=='Interviewed') ~> Interviewed",
				"Interviewed aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Applicant ID},",
				"          {Internal Worker ID},",
				"          {Event Year},",
				"          {Requisition ID}),",
				"     InterviewedReqCount = count({Requisition ID})) ~> GroupInterviewedApplicantsandYear",
				"JointoApplicantMap select(mapColumn(",
				"          {Client ID} = Applicant@{Client ID},",
				"          {Client Engagement Date} = Applicant@{Client Engagement Date},",
				"          {Event Year},",
				"          {Event Date},",
				"          Event,",
				"          {Requisition ID},",
				"          {Applicant ID},",
				"          {Internal Worker ID},",
				"          {Elloree Applicant Final Disposition},",
				"          {Elloree Applicant Category},",
				"          {Elloree Submitted to Mgr Fl}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectApplicants",
				"GroupInterviewedApplicantsandYear, GroupHiredApplicantsByYear join({Client ID} == {Hired Client ID}",
				"     && {Client Engagement Date} == {Hired Client Engagement Date}",
				"     && {Applicant ID} == {Hired  Applicant ID}",
				"     && {Event Year} == {Hired  Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinHires",
				"JoinHires derive({Silver Medalist Ind} = iif((HiredReqCount)>=1,'N','Y')) ~> CalcSilverMedalist",
				"CalcSilverMedalist select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year},",
				"          {Applicant ID},",
				"          {Internal Worker ID},",
				"          {Requisition ID},",
				"          {Silver Medalist Ind}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnsForFactTbl",
				"selectColumnsForFactTbl sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['SilverMedalistFactTbl.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}