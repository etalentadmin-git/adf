{
	"name": "DF_Review_Nulls_Applicants",
	"properties": {
		"folder": {
			"name": "Client/Audit Reports"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_Applicant_File",
						"type": "DatasetReference"
					},
					"name": "Applicants"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_AuditFolder",
						"type": "DatasetReference"
					},
					"name": "OutputNullReview"
				}
			],
			"transformations": [
				{
					"name": "IdentifyNulls",
					"description": "Calculate whether a null value exists and assign 1 for count."
				},
				{
					"name": "AggregateNullsByColumn",
					"description": "Count nulls for each column and group by event."
				},
				{
					"name": "unpivotColumnNames",
					"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
				},
				{
					"name": "pivotEvents",
					"description": "Pivot row to show counts by column names grouped by events."
				},
				{
					"name": "derivedColumn1",
					"description": "Pivot to show null counts by column name and grouped by events."
				},
				{
					"name": "ChangeColumnNames",
					"description": "Rename columns to remove 'Null' name tagging."
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as string,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Applicant ID} as string,",
				"          Source as string,",
				"          {Applicant Type} as string,",
				"          {Internal Worker ID} as string,",
				"          {Applicant City} as string,",
				"          {Applicant State} as string,",
				"          {Applicant Country} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Applicant Final Disposition} as string,",
				"          {Applicant Step Before Final Disposition} as string,",
				"          {Applicant Rejected Reason} as string,",
				"          {Applicant Other (1)} as string,",
				"          {Applicant Other (2)} as string,",
				"          {Applicant Other (3)} as string,",
				"          {Applicant Other (4)} as string,",
				"          {Applicant Other (5)} as string,",
				"          RowCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Applicants",
				"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
				"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
				"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
				"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
				"          {Applicant ID - Null} = iif(isNull({Applicant ID}),1,iif({Applicant ID}=='N/A',1,0)),",
				"          {Source - Null} = iif(isNull(Source),1,iif(Source=='N/A',1,0)),",
				"          {Applicant Type - Null} = iif(isNull({Applicant Type}),1,iif({Applicant Type}=='N/A',1,0)),",
				"          {Internal Worker ID - Null} = iif(isNull({Internal Worker ID}),1,iif({Internal Worker ID}=='N/A',1,0)),",
				"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
				"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
				"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
				"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
				"          {LGBTQ - Null} = iif(isNull(LGBTQ),1,iif(LGBTQ=='N/A',1,0)),",
				"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
				"          {Applicant Final Disposition - Null} = iif(isNull({Applicant Final Disposition}),1,iif({Applicant Final Disposition}=='N/A',1,0)),",
				"          {Applicant Step Before Final Disposition - Null} = iif(isNull({Applicant Step Before Final Disposition}),1,iif({Applicant Step Before Final Disposition}=='N/A',1,0)),",
				"          {Applicant Rejected Reason - Null} = iif(isNull({Applicant Rejected Reason}),1,iif({Applicant Rejected Reason}=='N/A',1,0)),",
				"          {Applicant Other (1) - Null} = iif(isNull({Applicant Other (1)}),1,iif({Applicant Other (1)}=='N/A',1,0)),",
				"          {Applicant Other (2) - Null} = iif(isNull({Applicant Other (2)}),1,iif({Applicant Other (2)}=='N/A',1,0)),",
				"          {Applicant Other (3) - Null} = iif(isNull({Applicant Other (3)}),1,iif({Applicant Other (3)}=='N/A',1,0)),",
				"          {Applicant Other (4) - Null} = iif(isNull({Applicant Other (4)}),1,iif({Applicant Other (4)}=='N/A',1,0)),",
				"          {Applicant Other (5) - Null} = iif(isNull({Applicant Other (5)}),1,iif({Applicant Other (5)}=='N/A',1,0)),",
				"          EmpCount = 1,",
				"          {Event Code} = 'APP') ~> IdentifyNulls",
				"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
				"          {Client ID},",
				"          {Client Engagement Date}),",
				"     {Event Year - Null} = sum({Event Year - Null}),",
				"          {Event Date  - Null} = sum({Event Date  - Null}),",
				"          {Event - Null} = sum({Event - Null}),",
				"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
				"          {Applicant ID - Null} = sum({Applicant ID - Null}),",
				"          {Source - Null} = sum({Source - Null}),",
				"          {Applicant Type - Null} = sum({Applicant Type - Null}),",
				"          {Internal Worker ID - Null} = sum({Internal Worker ID - Null}),",
				"          {Race - Null} = sum({Race - Null}),",
				"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
				"          {Gender - Null} = sum({Gender - Null}),",
				"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
				"          {LGBTQ - Null} = sum({LGBTQ - Null}),",
				"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
				"          {Applicant Final Disposition - Null} = sum({Applicant Final Disposition - Null}),",
				"          {Applicant Step Before Final Disposition - Null} = sum({Applicant Step Before Final Disposition - Null}),",
				"          {Applicant Rejected Reason - Null} = sum({Applicant Rejected Reason - Null}),",
				"          {Applicant Other (1) - Null} = sum({Applicant Other (1) - Null}),",
				"          {Applicant Other (2) - Null} = sum({Applicant Other (2) - Null}),",
				"          {Applicant Other (3) - Null} = sum({Applicant Other (3) - Null}),",
				"          {Applicant Other (4) - Null} = sum({Applicant Other (4) - Null}),",
				"          {Applicant Other (5) - Null} = sum({Applicant Other (5) - Null}),",
				"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
				"ChangeColumnNames unpivot(output(",
				"          {Table Columns} as string,",
				"          Total as long",
				"     ),",
				"     ungroupBy({Event Review},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Total Records}),",
				"     lateral: true,",
				"     ignoreNullPivots: false) ~> unpivotColumnNames",
				"derivedColumn1 pivot(groupBy({Event Review},",
				"          {Table Columns},",
				"          {Client ID},",
				"          {Client Engagement Date}),",
				"     pivotBy({Event Review}),",
				"     { Null Total} = sum(Total),",
				"          { Null % of Total} = sum({%}),",
				"     columnNaming: '$V$N',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> pivotEvents",
				"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
				"AggregateNullsByColumn select(mapColumn(",
				"          {Event Review},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year} = {Event Year - Null},",
				"          {Event Date} = {Event Date  - Null},",
				"          Event = {Event - Null},",
				"          {Requisition ID} = {Requisition ID - Null},",
				"          {Applicant ID} = {Applicant ID - Null},",
				"          Source = {Source - Null},",
				"          {Applicant Type} = {Applicant Type - Null},",
				"          {Internal Worker ID} = {Internal Worker ID - Null},",
				"          Race = {Race - Null},",
				"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
				"          Gender = {Gender - Null},",
				"          {Veteran Ind} = {Veteran Ind - Null},",
				"          LGBTQ = {LGBTQ - Null},",
				"          {Disability Ind} = {Disability Ind - Null},",
				"          {Applicant Final Disposition} = {Applicant Final Disposition - Null},",
				"          {Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition - Null},",
				"          {Applicant Rejected Reason} = {Applicant Rejected Reason - Null},",
				"          {Applicant Other (1)} = {Applicant Other (1) - Null},",
				"          {Applicant Other (2)} = {Applicant Other (2) - Null},",
				"          {Applicant Other (3)} = {Applicant Other (3) - Null},",
				"          {Applicant Other (4)} = {Applicant Other (4) - Null},",
				"          {Applicant Other (5)} = {Applicant Other (5) - Null},",
				"          {Total Records}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
				"pivotEvents sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Template - Null Review Applicants.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputNullReview"
			]
		}
	}
}