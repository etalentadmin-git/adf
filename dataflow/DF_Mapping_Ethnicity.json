{
	"name": "DF_Mapping_Ethnicity",
	"properties": {
		"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
		"folder": {
			"name": "Client/Create Mapping Table Files"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "etalentEthnicityMapTbl",
						"type": "DatasetReference"
					},
					"name": "EthnicityMappingTbl"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_Applicant_File",
						"type": "DatasetReference"
					},
					"name": "Applicant"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseCoreRecords"
				},
				{
					"dataset": {
						"referenceName": "etalentApplicantFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseApplicantRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_MappingWorkingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputWorkingEthnicityMapping"
				},
				{
					"dataset": {
						"referenceName": "Source_MappingPrepFldr",
						"type": "DatasetReference"
					},
					"name": "OutputPrepEthnicityMapping"
				}
			],
			"transformations": [
				{
					"name": "CreatePivotEthnicityAndEventTime"
				},
				{
					"name": "SortOnEvent"
				},
				{
					"name": "SortOnEthnicity"
				},
				{
					"name": "AddDerivedEventYearColumn"
				},
				{
					"name": "SelectUniqueRows"
				},
				{
					"name": "SelectWithoutEngagementDt"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select3"
				},
				{
					"name": "SelectApplicant"
				},
				{
					"name": "SelectCore"
				},
				{
					"name": "union1"
				},
				{
					"name": "selectCoreDBRecs"
				},
				{
					"name": "selectApplicantDBRecs"
				},
				{
					"name": "TakeLastClientValForRemainingDups"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "aggregate5"
				},
				{
					"name": "GetCountOfClientForUniqueValues"
				},
				{
					"name": "JoinClientIDCountInForMaxFilter"
				},
				{
					"name": "CleanupSelectFields"
				},
				{
					"name": "SelectMappingWithMostClients"
				},
				{
					"name": "aggregate6"
				},
				{
					"name": "JoinBackFinalSelectMapping"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientRace as string,",
				"          ClientHispanicLatinoOrigin as string,",
				"          ElloreeRace as string,",
				"          ElloreeHispanicLatinoOrigin as string,",
				"          ElloreeEthnicGroup as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EthnicityMappingTbl",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Applicant ID} as string,",
				"          Source as string,",
				"          {Applicant Type} as string,",
				"          {Internal Worker ID} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Applicant Final Disposition} as string,",
				"          {Applicant Step Before Final Disposition} as string,",
				"          {Applicant Rejected Reason} as string,",
				"          {Applicant Other (1)} as string,",
				"          {Applicant Other (2)} as string,",
				"          {Applicant Other (3)} as string,",
				"          {Applicant Other (4)} as string,",
				"          {Applicant Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Applicant",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseCoreRecords",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ApplicantId as string,",
				"          Source as string,",
				"          ApplType as string,",
				"          InternalWorkerId as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          ApplFinalDisp as string,",
				"          ApplStepBeforeFinalDisp as string,",
				"          ApplRejectedReason as string,",
				"          ApplOther1 as string,",
				"          ApplOther2 as string,",
				"          ApplOther3 as string,",
				"          ApplOther4 as string,",
				"          ApplOther5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseApplicantRecords",
				"derivedColumn1 pivot(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Client Race},",
				"          {Client Hispanic or Latino Origin},",
				"          {Elloree Race},",
				"          {Elloree Hispanic or Latino Origin},",
				"          {Suggested Elloree Race},",
				"          {Suggested Elloree Hispanic or Latino Origin},",
				"          {Suggested Source}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Record Id}),",
				"     columnNaming: '$N$V',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
				"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
				"CreatePivotEthnicityAndEventTime sort(asc({Client Race}, true),",
				"     asc({Client Hispanic or Latino Origin}, true)) ~> SortOnEthnicity",
				"union1 derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
				"          {Elloree Race} = '',",
				"          {Elloree Hispanic or Latino Origin} = '',",
				"          {Elloree Ethnic Group} = '') ~> AddDerivedEventYearColumn",
				"EthnicityMappingTbl aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientRace} = ClientRace,",
				"          {Unique ClientHispanicLatinoOrigin} = ClientHispanicLatinoOrigin,",
				"          {Unique ElloreeRace} = ElloreeRace,",
				"          {Unique ElloreeHispanicLatinoOrigin} = ElloreeHispanicLatinoOrigin),",
				"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
				"TakeLastClientValForRemainingDups select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientRace},",
				"          {Unique ClientHispanicLatinoOrigin},",
				"          {Unique ElloreeRace},",
				"          {Unique ElloreeHispanicLatinoOrigin}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
				"SortOnEvent, SelectWithoutEngagementDt join({Client ID} == {Unique ClientId}",
				"     && Race == {Unique ClientRace}",
				"     && {Hispanic or Latino Origin} == {Unique ClientHispanicLatinoOrigin},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {Client Race} = Race,",
				"          {Client Hispanic or Latino Origin} = {Hispanic or Latino Origin},",
				"          {Elloree Race},",
				"          {Elloree Hispanic or Latino Origin},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Elloree Ethnic Group},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested Elloree Race} = {Unique ElloreeRace},",
				"          {Suggested Elloree Hispanic or Latino Origin} = {Unique ElloreeHispanicLatinoOrigin},",
				"          {Record Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, SelectWithoutEngagementDt join({Client Race} == {Unique ClientRace}",
				"     && {Client Hispanic or Latino Origin} == {Unique ClientHispanicLatinoOrigin}",
				"     && {Client ID} != {Unique ClientId},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join2",
				"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Elloree Race} = iif(isNull({Suggested Source}),{Unique ClientRace},{Suggested Elloree Race}),",
				"          {Suggested Elloree Hispanic or Latino Origin} = iif(isNull({Suggested Source}),{Unique ClientHispanicLatinoOrigin},{Suggested Elloree Hispanic or Latino Origin})) ~> derivedColumn1",
				"join2 select(mapColumn(",
				"          {Client Race},",
				"          {Client Hispanic or Latino Origin},",
				"          {Elloree Race},",
				"          {Elloree Hispanic or Latino Origin},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Elloree Ethnic Group},",
				"          {Suggested Source},",
				"          {Suggested Elloree Race},",
				"          {Suggested Elloree Hispanic or Latino Origin},",
				"          {Record Id},",
				"          {Unique ClientId},",
				"          {Unique ClientRace},",
				"          {Unique ClientHispanicLatinoOrigin},",
				"          {Unique ElloreeRace},",
				"          {Unique ElloreeHispanicLatinoOrigin}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"aggregate3 select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year},",
				"          Event,",
				"          {Record Id} = {Applicant ID},",
				"          Race,",
				"          {Hispanic or Latino Origin}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
				"AllCoreData select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Worker ID},",
				"          {Event Year},",
				"          Event,",
				"          Race,",
				"          {Hispanic or Latino Origin}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCore",
				"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
				"aggregate4 select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Record Id} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          Race,",
				"          {Hispanic or Latino Origin} = HispanicLatinoOrigin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
				"aggregate5 aggregate(groupBy({Client Engagement Date} = ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          {Record Id} = ApplicantId,",
				"          Race,",
				"          {Hispanic or Latino Origin} = HispanicLatinoOrigin),",
				"     {Client ID} = max({Client ID})) ~> selectApplicantDBRecs",
				"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientRace},",
				"          {Unique ClientHispanicLatinoOrigin},",
				"          {Unique ElloreeRace},",
				"          {Unique ElloreeHispanicLatinoOrigin}),",
				"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
				"Applicant aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Event Year},",
				"          Event,",
				"          {Applicant ID},",
				"          Race,",
				"          {Hispanic or Latino Origin}),",
				"     MaxClient = max({Client ID})) ~> aggregate3",
				"DatabaseCoreRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          EventYear,",
				"          Event,",
				"          WorkerId,",
				"          Race,",
				"          HispanicLatinoOrigin),",
				"     MaxId = max(WorkerId)) ~> aggregate4",
				"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
				"          ClientEngagementDt,",
				"          EventYear,",
				"          Event,",
				"          ApplicantId,",
				"          Race,",
				"          HispanicLatinoOrigin),",
				"     maxid = max(ApplicantId)) ~> aggregate5",
				"SelectUniqueRows aggregate(groupBy({Count Unique ClientRace} = {Unique ClientRace},",
				"          {Count Unique ClientHispanicLatinoOrigin} = {Unique ClientHispanicLatinoOrigin},",
				"          {Count Unique ElloreeRace} = {Unique ElloreeRace},",
				"          {Count Unique ElloreeHispanicLatinoOrigin} = {Unique ElloreeHispanicLatinoOrigin}),",
				"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
				"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientRace} == {Count Unique ClientRace}",
				"     && {Unique ClientHispanicLatinoOrigin} == {Count Unique ClientHispanicLatinoOrigin}",
				"     && {Unique ElloreeRace} == {Count Unique ElloreeRace}",
				"     && {Unique ElloreeHispanicLatinoOrigin} == {Count Unique ElloreeHispanicLatinoOrigin},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
				"JoinClientIDCountInForMaxFilter select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientRace},",
				"          {Unique ClientHispanicLatinoOrigin},",
				"          {Unique ElloreeRace},",
				"          {Unique ElloreeHispanicLatinoOrigin},",
				"          ClientIDCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
				"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
				"          {Unique ClientRace},",
				"          {Unique ClientHispanicLatinoOrigin},",
				"          {Unique ElloreeRace},",
				"          {Unique ElloreeHispanicLatinoOrigin}),",
				"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
				"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientRace} = {Unique ClientRace},",
				"          {Agg Unique ClientHispanicLatinoOrigin} = {Unique ClientHispanicLatinoOrigin}),",
				"     {Agg Unique ElloreeRace} = first({Unique ElloreeRace}),",
				"          {Agg Unique ElloreeHispanicLatinoOrigin} = first({Unique ElloreeHispanicLatinoOrigin})) ~> aggregate6",
				"SelectMappingWithMostClients, aggregate6 join({Unique ClientRace} == {Agg Unique ClientRace}",
				"     && {Unique ClientHispanicLatinoOrigin} == {Agg Unique ClientHispanicLatinoOrigin}",
				"     && {Unique ElloreeRace} == {Agg Unique ElloreeRace}",
				"     && {Unique ElloreeHispanicLatinoOrigin} == {Agg Unique ElloreeHispanicLatinoOrigin},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
				"SortOnEthnicity sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['ethnicity_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
				"SortOnEthnicity sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['prep_ethnicity_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
			]
		}
	}
}