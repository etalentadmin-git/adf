{
	"name": "DF_Mapping_Location",
	"properties": {
		"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
		"folder": {
			"name": "Client/Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "etalentLocationMapTbl",
						"type": "DatasetReference"
					},
					"name": "LocationMappingTbl"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_JobReq_File",
						"type": "DatasetReference"
					},
					"name": "Requisitions"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseCoreRecords"
				},
				{
					"dataset": {
						"referenceName": "etalentReqFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseReqRecords"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_Applicant_File",
						"type": "DatasetReference"
					},
					"name": "Applicants"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_MappingWorkingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputWorkingEthnicityMapping"
				},
				{
					"dataset": {
						"referenceName": "Source_MappingPrepFldr",
						"type": "DatasetReference"
					},
					"name": "OutputPrepEthnicityMapping"
				}
			],
			"transformations": [
				{
					"name": "CreatePivotLocationAndEventTime"
				},
				{
					"name": "SortOnEvent"
				},
				{
					"name": "SortOnLocation"
				},
				{
					"name": "AddDerivedEventYearColumn"
				},
				{
					"name": "SelectUniqueRows"
				},
				{
					"name": "SelectWithoutEngagementDt"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "SelectFinal"
				},
				{
					"name": "SelectReq"
				},
				{
					"name": "SelectCore"
				},
				{
					"name": "union1"
				},
				{
					"name": "FilterOutNullHCTEventRows"
				},
				{
					"name": "FilterOutNullReqEventRows"
				},
				{
					"name": "selectCoreDBRecs"
				},
				{
					"name": "selectReqDBRecs"
				},
				{
					"name": "selectReqDBRecsInit"
				},
				{
					"name": "selectCoreDBRecsInit"
				},
				{
					"name": "GetCountOfClientForUniqueValues"
				},
				{
					"name": "JoinClientIDCountInForMaxFilter"
				},
				{
					"name": "CleanupSelectFields"
				},
				{
					"name": "SelectMappingWithMostClients"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "JoinBackFinalSelectMapping"
				},
				{
					"name": "TakeLastClientValForRemainingDups"
				},
				{
					"name": "NotEqualtoClientID"
				},
				{
					"name": "EqualtoClientId"
				},
				{
					"name": "GroupUniqueValues"
				},
				{
					"name": "selectUniqueClientIDValues"
				},
				{
					"name": "SelectLastEngagementDt"
				},
				{
					"name": "SelectBasedOnMostRecentClientEngagment"
				},
				{
					"name": "RemoveDupRows"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "SelectAppl"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientWorkOffice as string,",
				"          ClientWorkCity as string,",
				"          ClientWorkState as string,",
				"          ClientWorkCountry as string,",
				"          ClientStrategicLoc as string,",
				"          ElloreeWorkOffice as string,",
				"          ElloreeWorkCity as string,",
				"          ElloreeWorkState as string,",
				"          ElloreeWorkCountry as string,",
				"          ElloreeWorkRegion as string,",
				"          ElloreeStrategicLoc as string,",
				"          ElloreeLocSortId as integer,",
				"          LocationIdentifier1 as string,",
				"          LocationIdentifier2 as string,",
				"          LocationIdentifier3 as string,",
				"          LocationIdentifier4 as string,",
				"          LocationIdentifier5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> LocationMappingTbl",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          EventId as string,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Requisition Type} as string,",
				"          {Posting Date} as string,",
				"          {Requisition Status} as string,",
				"          {Number of Openings} as string,",
				"          {Job Title} as string,",
				"          {Job Function} as string,",
				"          {Corporate Title} as string,",
				"          {Work Office Location} as string,",
				"          {Work Office City} as string,",
				"          {Work Office State} as string,",
				"          {Work Office Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          {Hiring Manager Worker ID} as string,",
				"          {Primary Recruiter Worker ID} as string,",
				"          {Requisition Other (1)} as string,",
				"          {Requisition Other (2)} as string,",
				"          {Requisition Other (3)} as string,",
				"          {Requisition Other (4)} as string,",
				"          {Requisition Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Requisitions",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseCoreRecords",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ReqType as string,",
				"          PostingDt as date,",
				"          ReqStatus as string,",
				"          NumberofOpenings as integer,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          CorpTitle as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          HiringMgrWorkerId as string,",
				"          PrimaryRecruiterWorkerId as string,",
				"          ReqOther1 as string,",
				"          ReqOther2 as string,",
				"          ReqOther3 as string,",
				"          ReqOther4 as string,",
				"          ReqOther5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseReqRecords",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Event Date} as string,",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Application Date} as string,",
				"          {Applicant ID} as string,",
				"          Source as string,",
				"          {Applicant Type} as string,",
				"          {Applicant City} as string,",
				"          {Applicant State} as string,",
				"          {Applicant Country} as string,",
				"          {Internal Worker ID} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Applicant Final Disposition Date} as string,",
				"          {Applicant Final Disposition} as string,",
				"          {Applicant Step Before Final Disposition} as string,",
				"          {Applicant Rejected Reason} as string,",
				"          {Applicant Other (1)} as string,",
				"          {Applicant Other (2)} as string,",
				"          {Applicant Other (3)} as string,",
				"          {Applicant Other (4)} as string,",
				"          {Applicant Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Applicants",
				"derivedColumn1 pivot(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Client Work Office Location},",
				"          {Client Work City},",
				"          {Client Work State},",
				"          {Client Work Country},",
				"          {Client Strategic Work Location Ind},",
				"          {Elloree Work Ofiice},",
				"          {Elloree Work City},",
				"          {Elloree Work State},",
				"          {Elloree Work Country},",
				"          {Elloree Work Region},",
				"          {Elloree Strategic Location},",
				"          {Elloree Location Sort Id},",
				"          {Suggested Elloree Work Office},",
				"          {Suggested Elloree Work City},",
				"          {Suggested Elloree Work State},",
				"          {Suggested Elloree Work Country},",
				"          {Suggested Elloree Work Region},",
				"          {Suggested Elloree Strategic Location},",
				"          {Suggested Elloree Location Sort Id},",
				"          {Suggested Source},",
				"          {Location Identifier 1},",
				"          {Location Identifier 2},",
				"          {Location Identifier 3},",
				"          {Location Identifier 4},",
				"          {Location Identifier 5}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Record Id}),",
				"     columnNaming: '$N$V',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> CreatePivotLocationAndEventTime",
				"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
				"CreatePivotLocationAndEventTime sort(asc({Client Work Office Location}, true),",
				"     asc({Client Work City}, true),",
				"     asc({Client Work State}, true),",
				"     asc({Client Work Country}, true),",
				"     asc({Client Strategic Work Location Ind}, true)) ~> SortOnLocation",
				"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
				"          {Elloree Region} = '',",
				"          {Elloree Work Country} = '',",
				"          {Elloree Work State} = '',",
				"          {Elloree Work City} = '',",
				"          {Elloree Work Ofiice} = '',",
				"          {Elloree Location Sort} = '',",
				"          {Elloree Strategic Location} = '') ~> AddDerivedEventYearColumn",
				"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientWorkOffice} = ClientWorkOffice,",
				"          {Unique ClientWorkCity} = ClientWorkCity,",
				"          {Unique ClientWorkState} = ClientWorkState,",
				"          {Unique ClientWorkCountry} = ClientWorkCountry,",
				"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
				"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
				"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
				"          {Unique ElloreeWorkState} = ElloreeWorkState,",
				"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
				"          {Unique  ElloreeWorkRegion} = ElloreeWorkRegion,",
				"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
				"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
				"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
				"TakeLastClientValForRemainingDups select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientWorkOffice},",
				"          {Unique ClientWorkCity},",
				"          {Unique ClientWorkState},",
				"          {Unique ClientWorkCountry},",
				"          {Unique ClientStrategicLoc},",
				"          {Unique ElloreeWorkCity},",
				"          {Unique ElloreeWorkOffice},",
				"          {Unique ElloreeWorkState},",
				"          {Unique ElloreeWorkCountry},",
				"          {Unique ElloreeRegion} = {Unique  ElloreeWorkRegion},",
				"          {Unique ElloreeStrategicLoc},",
				"          {Unique ElloreeLocSortId}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
				"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
				"     && {Work Office Location} == {Unique ClientWorkOffice}",
				"     && {Work City} == {Unique ClientWorkCity}",
				"     && {Work State} == {Unique ClientWorkState}",
				"     && {Work Country} == {Unique ClientWorkCountry}",
				"     && {Strategic Work Location Ind} == {Unique ClientStrategicLoc},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join1",
				"join1 select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Client Work Office Location} = {Work Office Location},",
				"          {Client Work City} = {Work City},",
				"          {Client Work State} = {Work State},",
				"          {Client Work Country} = {Work Country},",
				"          {Client Strategic Work Location Ind} = {Strategic Work Location Ind},",
				"          {Elloree Work Ofiice},",
				"          {Elloree Work City},",
				"          {Elloree Work State},",
				"          {Elloree Work Country},",
				"          {Elloree Region},",
				"          {Elloree Strategic Location},",
				"          {Elloree Location Sort},",
				"          {Event and Year},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested Elloree Work City} = {Unique ElloreeWorkCity},",
				"          {Suggested Elloree Work Office} = {Unique ElloreeWorkOffice},",
				"          {Suggested Elloree Work State} = {Unique ElloreeWorkState},",
				"          {Suggested Elloree Work Country} = {Unique ElloreeWorkCountry},",
				"          {Suggested Elloree Region} = {Unique ElloreeWorkRegion},",
				"          {Suggested Elloree Strategic Location} = {Unique ElloreeStrategicLoc},",
				"          {Suggested Elloree Location Sort Id} = {Unique ElloreeLocSortId},",
				"          {Record Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, SelectWithoutEngagementDt join({Client Work Office Location} == {Unique ClientWorkOffice}",
				"     && {Client Work City} == {Unique ClientWorkCity}",
				"     && {Client Work State} == {Unique ClientWorkState}",
				"     && {Client Work Country} == {Unique ClientWorkCountry}",
				"     && {Client Strategic Work Location Ind} == {Unique ClientStrategicLoc}",
				"     && {Client ID} != {Unique ClientId},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join2",
				"SelectFinal derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Elloree Work Office} = iif(isNull({Suggested Source}),{Unique ElloreeWorkOffice},{Suggested Elloree Work Office}),",
				"          {Suggested Elloree Work City} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCity},{Suggested Elloree Work City}),",
				"          {Suggested Elloree Work State} = iif(isNull({Suggested Source}),{Unique ElloreeWorkState},{Suggested Elloree Work State}),",
				"          {Suggested Elloree Work Country} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCountry},{Suggested Elloree Work Country}),",
				"          {Suggested Elloree Work Region} = iif(isNull({Suggested Source}),{Unique ElloreeRegion},{Suggested Elloree Work Region}),",
				"          {Suggested Elloree Strategic Location} = iif(isNull({Suggested Source}),{Unique ElloreeStrategicLoc},{Suggested Elloree Strategic Location}),",
				"          {Suggested Elloree Location Sort Id} = iif(isNull({Suggested Source}),{Unique ElloreeLocSortId},{Suggested Elloree Location Sort Id}),",
				"          {Location Identifier 1} = '',",
				"          {Location Identifier 2} = '',",
				"          {Location Identifier 3} = '',",
				"          {Location Identifier 4} = '',",
				"          {Location Identifier 5} = '') ~> derivedColumn1",
				"join2 select(mapColumn(",
				"          {Client Work Office Location},",
				"          {Client Work City},",
				"          {Client Work State},",
				"          {Client Work Country},",
				"          {Client Strategic Work Location Ind},",
				"          {Elloree Work Ofiice},",
				"          {Elloree Work City},",
				"          {Elloree Work State},",
				"          {Elloree Work Country},",
				"          {Elloree Work Region} = {Elloree Region},",
				"          {Elloree Strategic Location},",
				"          {Elloree Location Sort Id} = {Elloree Location Sort},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Elloree Work Office},",
				"          {Suggested Elloree Work City},",
				"          {Suggested Elloree Work State},",
				"          {Suggested Elloree Work Country},",
				"          {Suggested Elloree Work Region} = {Suggested Elloree Region},",
				"          {Suggested Elloree Strategic Location},",
				"          {Suggested Elloree Location Sort Id},",
				"          {Record Id},",
				"          {Unique ClientId},",
				"          {Unique ClientWorkOffice},",
				"          {Unique ClientWorkCity},",
				"          {Unique ClientWorkState},",
				"          {Unique ClientWorkCountry},",
				"          {Unique ClientStrategicLoc},",
				"          {Unique ElloreeWorkOffice},",
				"          {Unique ElloreeWorkCity},",
				"          {Unique ElloreeWorkState},",
				"          {Unique ElloreeWorkCountry},",
				"          {Unique ElloreeRegion},",
				"          {Unique ElloreeStrategicLoc},",
				"          {Unique ElloreeLocSortId}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinal",
				"FilterOutNullReqEventRows select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Requisition ID},",
				"          {Event Year},",
				"          Event,",
				"          {Work Office Location},",
				"          {Work City} = {Work Office City},",
				"          {Work State} = {Work Office State},",
				"          {Work Country} = {Work Office Country},",
				"          {Strategic Work Location Ind}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReq",
				"FilterOutNullHCTEventRows select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Worker ID},",
				"          {Event Year},",
				"          Event,",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCore",
				"SelectCore, SelectReq, SelectAppl, selectCoreDBRecs, selectReqDBRecs union(byName: true)~> union1",
				"AllCoreData filter(not(isNull({Event Code}))) ~> FilterOutNullHCTEventRows",
				"Requisitions filter(not(isNull(Event))) ~> FilterOutNullReqEventRows",
				"selectCoreDBRecsInit select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Record Id} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          {Work Office Location} = WorkOfficeLoc,",
				"          {Work City} = WorkOfficeCity,",
				"          {Work State} = WorkOfficeState,",
				"          {Work Country} = WorkOfficeCountry,",
				"          {Strategic Work Location Ind} = WorkStrategicLocInd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
				"selectReqDBRecsInit select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          {Record Id} = ReqId,",
				"          {Work Office Location} = WorkOfficeLoc,",
				"          {Work City} = WorkOfficeCity,",
				"          {Work State} = WorkOfficeState,",
				"          {Work Country} = WorkOfficeCountry,",
				"          {Strategic Work Location Ind} = WorkStrategicLocInd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
				"DatabaseReqRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          EventYear,",
				"          Event,",
				"          ReqId,",
				"          WorkOfficeLoc,",
				"          WorkOfficeCity,",
				"          WorkOfficeState,",
				"          WorkOfficeCountry,",
				"          WorkStrategicLocInd),",
				"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
				"DatabaseCoreRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventYear,",
				"          Event,",
				"          WorkOfficeLoc,",
				"          WorkOfficeCity,",
				"          WorkOfficeState,",
				"          WorkOfficeCountry,",
				"          WorkStrategicLocInd),",
				"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
				"SelectUniqueRows aggregate(groupBy({Count Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
				"          {Count Unique ClientWorkCity} = {Unique ClientWorkCity},",
				"          {Count Unique ClientWorkState} = {Unique ClientWorkState},",
				"          {Count Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
				"          {Count Unique ClientStrategicLoc} = {Unique ClientStrategicLoc},",
				"          {Count Unique ElloreeWorkOffice} = {Unique ElloreeWorkOffice},",
				"          {Count Unique ElloreeWorkCity} = {Unique ElloreeWorkCity},",
				"          {Count Unique ElloreeWorkState} = {Unique ElloreeWorkState},",
				"          {Count Unique ElloreeWorkCountry} = {Unique ElloreeWorkCountry},",
				"          {Count Unique  ElloreeWorkRegion} = {Unique  ElloreeWorkRegion},",
				"          {Count Unique ElloreeStrategicLoc} = {Unique ElloreeStrategicLoc},",
				"          {Count Unique ElloreeLocSortId} = {Unique ElloreeLocSortId}),",
				"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
				"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ElloreeWorkOffice} == {Count Unique ElloreeWorkOffice}",
				"     && {Unique ElloreeWorkCity} == {Count Unique ElloreeWorkCity}",
				"     && {Unique ElloreeWorkState} == {Count Unique ElloreeWorkState}",
				"     && {Unique ElloreeWorkCountry} == {Count Unique ElloreeWorkCountry}",
				"     && {Unique  ElloreeWorkRegion} == {Count Unique  ElloreeWorkRegion}",
				"     && {Unique ElloreeStrategicLoc} == {Count Unique ElloreeStrategicLoc}",
				"     && {Unique ElloreeLocSortId} == {Count Unique ElloreeLocSortId}",
				"     && {Unique ClientWorkOffice} == {Count Unique ClientWorkOffice}",
				"     && {Unique ClientWorkCity} == {Count Unique ClientWorkCity}",
				"     && {Unique ClientWorkState} == {Count Unique ClientWorkState}",
				"     && {Unique ClientWorkCountry} == {Count Unique ClientWorkCountry}",
				"     && {Unique ClientStrategicLoc} == {Count Unique ClientStrategicLoc},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
				"JoinClientIDCountInForMaxFilter select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientWorkOffice},",
				"          {Unique ClientWorkCity},",
				"          {Unique ClientWorkState},",
				"          {Unique ClientWorkCountry},",
				"          {Unique ClientStrategicLoc},",
				"          {Unique ElloreeWorkOffice},",
				"          {Unique ElloreeWorkCity},",
				"          {Unique ElloreeWorkState},",
				"          {Unique ElloreeWorkCountry},",
				"          {Unique  ElloreeWorkRegion},",
				"          {Unique ElloreeStrategicLoc},",
				"          {Unique ElloreeLocSortId},",
				"          ClientIDCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
				"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
				"          {Unique ClientWorkOffice},",
				"          {Unique ClientWorkCity},",
				"          {Unique ClientWorkState},",
				"          {Unique ClientWorkCountry},",
				"          {Unique ClientStrategicLoc},",
				"          {Unique ElloreeWorkOffice},",
				"          {Unique ElloreeWorkCity},",
				"          {Unique ElloreeWorkState},",
				"          {Unique ElloreeWorkCountry},",
				"          {Unique  ElloreeWorkRegion},",
				"          {Unique ElloreeStrategicLoc},",
				"          {Unique ElloreeLocSortId}),",
				"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
				"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
				"          {Agg Unique ClientWorkCity} = {Unique ClientWorkCity},",
				"          {Agg Unique ClientWorkState} = {Unique ClientWorkState},",
				"          {Agg Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
				"          {Agg Unique ClientStrategicLoc} = {Unique ClientStrategicLoc}),",
				"     {Agg Unique ElloreeWorkOffice} = first({Unique ElloreeWorkOffice}),",
				"          {Agg Unique ElloreeWorkCity} = first({Unique ElloreeWorkCity}),",
				"          {Agg Unique ElloreeWorkState} = first({Unique ElloreeWorkState}),",
				"          {Agg Unique ElloreeWorkCountry} = first({Unique ElloreeWorkCountry}),",
				"          {Agg Unique ElloreeWorkRegion} = first({Unique  ElloreeWorkRegion}),",
				"          {Agg Unique ElloreeStrategicLoc} = first({Unique ElloreeStrategicLoc}),",
				"          {Agg Unique ElloreeLocSortId} = first({Unique ElloreeLocSortId})) ~> aggregate1",
				"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeWorkOffice} == {Agg Unique ElloreeWorkOffice}",
				"     && {Unique ElloreeWorkCity} == {Agg Unique ElloreeWorkCity}",
				"     && {Unique ElloreeWorkState} == {Agg Unique ElloreeWorkState}",
				"     && {Unique ElloreeWorkCountry} == {Agg Unique ElloreeWorkCountry}",
				"     && {Unique  ElloreeWorkRegion} == {Agg Unique ElloreeWorkRegion}",
				"     && {Unique ElloreeStrategicLoc} == {Agg Unique ElloreeStrategicLoc}",
				"     && {Unique ElloreeLocSortId} == {Agg Unique ElloreeLocSortId}",
				"     && {Unique ClientWorkOffice} == {Agg Unique ClientWorkOffice}",
				"     && {Unique ClientWorkCity} == {Agg Unique ClientWorkCity}",
				"     && {Unique ClientWorkState} == {Agg Unique ClientWorkState}",
				"     && {Unique ClientWorkCountry} == {Agg Unique ClientWorkCountry}",
				"     && {Unique ClientStrategicLoc} == {Agg Unique ClientStrategicLoc},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
				"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientWorkOffice},",
				"          {Unique ClientWorkCity},",
				"          {Unique ClientWorkState},",
				"          {Unique ClientWorkCountry},",
				"          {Unique ClientStrategicLoc},",
				"          {Unique ElloreeWorkOffice},",
				"          {Unique ElloreeWorkCity},",
				"          {Unique ElloreeWorkState},",
				"          {Unique ElloreeWorkCountry},",
				"          {Unique  ElloreeWorkRegion},",
				"          {Unique ElloreeStrategicLoc},",
				"          {Unique ElloreeLocSortId}),",
				"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
				"LocationMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
				"LocationMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
				"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
				"          ClientEngagementDt,",
				"          {Unique ClientWorkOffice} = ClientWorkOffice,",
				"          {Unique ClientWorkCity} = ClientWorkCity,",
				"          {Unique ClientWorkState} = ClientWorkState,",
				"          {Unique ClientWorkCountry} = ClientWorkCountry,",
				"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
				"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
				"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
				"          {Unique ElloreeWorkState} = ElloreeWorkState,",
				"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
				"          {Unique ElloreeWorkRegion} = ElloreeWorkRegion,",
				"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
				"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
				"     RowCount = count(ClientId)) ~> GroupUniqueValues",
				"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientWorkOffice},",
				"          {Unique ClientWorkCity},",
				"          {Unique ClientWorkState},",
				"          {Unique ClientWorkCountry},",
				"          {Unique ClientStrategicLoc},",
				"          {Unique ElloreeWorkOffice},",
				"          {Unique ElloreeWorkCity},",
				"          {Unique ElloreeWorkState},",
				"          {Unique ElloreeWorkCountry},",
				"          {Unique ElloreeWorkRegion},",
				"          {Unique ElloreeStrategicLoc},",
				"          {Unique ElloreeLocSortId}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
				"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
				"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
				"     negate:false,",
				"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
				"union1 aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id},",
				"          {Event Year},",
				"          Event,",
				"          {Work Office Location},",
				"          {Work City},",
				"          {Work State},",
				"          {Work Country},",
				"          {Strategic Work Location Ind}),",
				"     RowCount = count({Client ID})) ~> RemoveDupRows",
				"Applicants aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Applicant ID},",
				"          {Event Year},",
				"          Event,",
				"          {Applicant City},",
				"          {Applicant State},",
				"          {Applicant Country}),",
				"     MaxId = max({Applicant ID})) ~> aggregate2",
				"derivedColumn2 select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Applicant ID},",
				"          {Event Year},",
				"          Event,",
				"          {Work Office Location},",
				"          {Work City} = {Applicant City},",
				"          {Work State} = {Applicant State},",
				"          {Work Country} = {Applicant Country},",
				"          {Strategic Work Location Ind}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAppl",
				"aggregate2 derive({Strategic Work Location Ind} = \"N/A\",",
				"          {Work Office Location} = \"N/A\") ~> derivedColumn2",
				"SortOnLocation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['location_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
				"SortOnLocation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['prep_location_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
			]
		}
	}
}