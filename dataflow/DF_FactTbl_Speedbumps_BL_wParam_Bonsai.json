{
	"name": "DF_FactTbl_Speedbumps_BL_wParam_Bonsai",
	"properties": {
		"folder": {
			"name": "Client/Fact Tables/Speedbumps Fact Table Files"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreFact"
				},
				{
					"dataset": {
						"referenceName": "etalentSilverMedalistFactTbl",
						"type": "DatasetReference"
					},
					"name": "SilverMedalist"
				},
				{
					"dataset": {
						"referenceName": "etalentPerfRatingHistFactTbl",
						"type": "DatasetReference"
					},
					"name": "PerfRatingHistory"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreYear"
				},
				{
					"dataset": {
						"referenceName": "etalentCorpTitleMapTbl",
						"type": "DatasetReference"
					},
					"name": "LevelMapForEmp"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CorePromo"
				},
				{
					"dataset": {
						"referenceName": "etalentApplicantFactTbl",
						"type": "DatasetReference"
					},
					"name": "Applicant"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "AllCore"
				},
				{
					"dataset": {
						"referenceName": "etalentTalentFactTbl",
						"type": "DatasetReference"
					},
					"name": "Talent"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "CoreWorkerIDandEventYr"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_FactTblFldr",
						"type": "DatasetReference"
					},
					"name": "OutputSpeedbumpsFactTbl"
				}
			],
			"transformations": [
				{
					"name": "JoinPerformance"
				},
				{
					"name": "SelectCurrYear"
				},
				{
					"name": "RemoveYearNullRows"
				},
				{
					"name": "SelectCoreForMgrPopulation"
				},
				{
					"name": "SelectEmpLvlMap"
				},
				{
					"name": "SelectEmpTalentTag"
				},
				{
					"name": "JoinLevel"
				},
				{
					"name": "join2"
				},
				{
					"name": "selectMgrData"
				},
				{
					"name": "CurrYearPromoFilter"
				},
				{
					"name": "Select1PYear"
				},
				{
					"name": "Select2PYear"
				},
				{
					"name": "SelectPromoWorkerID"
				},
				{
					"name": "P1YearPromoFilter"
				},
				{
					"name": "P2YearPromoFilter"
				},
				{
					"name": "selectP2Promo"
				},
				{
					"name": "selectP1Promo"
				},
				{
					"name": "selectCurrPromo"
				},
				{
					"name": "P2Promo"
				},
				{
					"name": "P1Promo"
				},
				{
					"name": "CurrPromo"
				},
				{
					"name": "JoinCurrPromo"
				},
				{
					"name": "JoinP2Promo"
				},
				{
					"name": "JoinP1Promo"
				},
				{
					"name": "CalcSpeedBumps"
				},
				{
					"name": "AggregateSilverMedalists"
				},
				{
					"name": "JoinApplicant"
				},
				{
					"name": "SelectSilverMedalists"
				},
				{
					"name": "AggApplicantData"
				},
				{
					"name": "CalcApplicantId"
				},
				{
					"name": "Join5OrMoreApplied"
				},
				{
					"name": "Select5orMoreAppliedApplicant"
				},
				{
					"name": "select4"
				},
				{
					"name": "DerivedApplIntWorkerID"
				},
				{
					"name": "Select3PYear"
				},
				{
					"name": "P3YearPromoFilter"
				},
				{
					"name": "selectP3Promo"
				},
				{
					"name": "P3Promo"
				},
				{
					"name": "JoinP3Promo"
				},
				{
					"name": "select6"
				},
				{
					"name": "SelectApplColumns"
				},
				{
					"name": "select7"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "GroupWorkerAndMgr"
				},
				{
					"name": "CountMgrByWorker"
				},
				{
					"name": "SelectPrior3Years"
				},
				{
					"name": "RemoveNullsMgrIds"
				},
				{
					"name": "Join3YrWorkerMgrCount"
				},
				{
					"name": "select8"
				},
				{
					"name": "select9"
				},
				{
					"name": "select10"
				},
				{
					"name": "select11"
				},
				{
					"name": "SelectTalentColumns"
				},
				{
					"name": "JoinTalentIdentifiers"
				},
				{
					"name": "Workers1P"
				},
				{
					"name": "selectWorkers1P"
				},
				{
					"name": "Workers2P"
				},
				{
					"name": "selectWorkers2P"
				},
				{
					"name": "WorkersIn1Pand2P"
				},
				{
					"name": "WorkersTenure3Yrs"
				},
				{
					"name": "Join3YrWorkerFlag"
				},
				{
					"name": "WorkersIn1Pand2PandCurr"
				},
				{
					"name": "WorkersCurr"
				}
			],
			"scriptLines": [
				"parameters{",
				"     SB_BL_Year as string,",
				"     SB_BL_Quarter as string,",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string,",
				"     SB1_MgrLvl as string,",
				"     SB2_MgrTalent as string,",
				"     SB3_MgrExp as string,",
				"     SB4_Promotion as string,",
				"     SB5_Applied5 as string,",
				"     SB6_SilvMedal as string,",
				"     SB7_Mgr3Plus as string,",
				"     SB8_Placeholder as string,",
				"     SB9_Placeholder as string,",
				"     SB10_Placeholder as string,",
				"     SB11_Placeholder as string,",
				"     SB12_Placeholder as string,",
				"     SB13_Placeholder as string,",
				"     SB14_Placeholder as string,",
				"     SB15_Placeholder as string",
				"}",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
				"     format: 'query') ~> CoreFact",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventYear as integer,",
				"          ReqId as string,",
				"          ApplId as string,",
				"          IntWorkerId as string,",
				"          SilverMedalistInd as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> SilverMedalist",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventYear as integer,",
				"          WorkerId as string,",
				"          LastPerfYear as integer,",
				"          LastPerfRatingDt as date,",
				"          LastClientPerfRating as string,",
				"          LastElloreePerfRating as string,",
				"          LastElloreePerfRatingSortId as integer,",
				"          LastTopTalentInd as string,",
				"          CurrPerfYear as integer,",
				"          CurrPerfRatingDt as date,",
				"          CurrTalentTag as string,",
				"          CurrClientPerfRating as string,",
				"          CurrElloreePerfRating as string,",
				"          CurrElloreePerfRatingSortId as integer,",
				"          CurrTopTalentInd as string,",
				"          P1PerfYear as integer,",
				"          P1PerfRatingDt as date,",
				"          P1ClientPerfRating as string,",
				"          P1ElloreePerfRating as string,",
				"          P1ElloreePerfRatingSortId as integer,",
				"          P1TopTalentInd as string,",
				"          P2PerfYear as integer,",
				"          P2PerfRatingDt as date,",
				"          P2ClientPerfRating as string,",
				"          P2ElloreePerfRating as string,",
				"          P2ElloreePerfRatingSortId as integer,",
				"          P2TopTalentInd as string,",
				"          P3PerfYear as integer,",
				"          P3PerfRatingDt as date,",
				"          P3ClientPerfRating as string,",
				"          P3ElloreePerfRating as string,",
				"          P3ElloreePerfRatingSortId as integer,",
				"          P3TopTalentInd as string,",
				"          LastTalentTagYear as integer,",
				"          LastTalentTag as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> PerfRatingHistory",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
				"     format: 'query') ~> CoreYear",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientCorpTitle as string,",
				"          ClientElloreeCorpTitle as string,",
				"          ElloreeCorpTitle as string,",
				"          ElloreeCorpTitleSortId as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> LevelMapForEmp",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> CorePromo",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ApplicantId as string,",
				"          Source as string,",
				"          ApplType as string,",
				"          InternalWorkerId as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          ApplFinalDisp as string,",
				"          ApplStepBeforeFinalDisp as string,",
				"          ApplRejectedReason as string,",
				"          ApplOther1 as string,",
				"          ApplOther2 as string,",
				"          ApplOther3 as string,",
				"          ApplOther4 as string,",
				"          ApplOther5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> Applicant",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
				"     format: 'query') ~> AllCore",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventYear as integer,",
				"          EventDt as date,",
				"          Event as string,",
				"          EventType as string,",
				"          PerfRating as string,",
				"          PerfRatingDt as date,",
				"          TalentIdentifier1 as string,",
				"          TalentIdentifier2 as string,",
				"          TalentIdentifier3 as string,",
				"          TalentIdentifier4 as string,",
				"          TalentIdentifier5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> Talent",
				"source(output(",
				"          WorkerId as string,",
				"          EventYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select WorkerId, EventYear from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' group by WorkerId, EventYear\"),",
				"     format: 'query') ~> CoreWorkerIDandEventYr",
				"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
				"     && EventYear == {Emp Perf Rating Event Year},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinPerformance",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
				"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
				"Join5OrMoreApplied select(mapColumn(",
				"          {Client ID} = CoreFact@ClientId,",
				"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Core Event Id} = EventId,",
				"          {Core Event Date} = EventDt,",
				"          EventQuarter,",
				"          {Event Year} = EventYear,",
				"          {Years of Service} = YearsofSrvc,",
				"          LegacyOrg,",
				"          {Elloree Corporate Title} = ElloreeCorpTitle,",
				"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
				"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
				"          {Curr Top Talent Ind} = {Emp Perf Rating Curr Top Talent Ind},",
				"          {P1 Top Talent Ind} = {Emp Perf Rating P1 Top Talent Ind},",
				"          {P2 Top Talent Ind} = {Emp Perf Rating P2 Top Talent Ind},",
				"          ManagerInd,",
				"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
				"          CoreLastPromoDt = LastPromoDt,",
				"          {Curr Promo},",
				"          {P2 Promo} = {P1 Promo},",
				"          {P1 Promo} = {P2 Promo},",
				"          {P3 Promo},",
				"          {Silver Medalist Ind},",
				"          {Applicant Five or More},",
				"          TalentIdentifier1,",
				"          TalentIdentifier2,",
				"          TalentIdentifier3,",
				"          TalentIdentifier4,",
				"          TalentIdentifier5",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
				"LevelMapForEmp select(mapColumn(",
				"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
				"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
				"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
				"PerfRatingHistory select(mapColumn(",
				"          {Emp Perf Rating Worker ID} = WorkerId,",
				"          {Emp Perf Rating Event Year} = EventYear,",
				"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
				"          {Emp Perf Rating Curr Top Talent Ind} = CurrTopTalentInd,",
				"          {Emp Perf Rating P1 Top Talent Ind} = P1TopTalentInd,",
				"          {Emp Perf Rating P2 Top Talent Ind} = P2TopTalentInd",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
				"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinLevel",
				"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"SelectCoreForMgrPopulation select(mapColumn(",
				"          {Mgr Worker ID} = {Worker ID},",
				"          {Mgr Years of Service} = {Years of Service},",
				"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
				"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
				"          {Mgr Curr Talent Tag} = {Curr Talent Tag},",
				"          {Mgr LegacyOrg} = LegacyOrg",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMgrData",
				"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CurrYearPromoFilter",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
				"CorePromo select(mapColumn(",
				"          {PRO Worker ID} = WorkerId,",
				"          {Event Year} = EventYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
				"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> P1YearPromoFilter",
				"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> P2YearPromoFilter",
				"P2YearPromoFilter select(mapColumn(",
				"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
				"P1YearPromoFilter select(mapColumn(",
				"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
				"CurrYearPromoFilter select(mapColumn(",
				"          {Curr YR Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
				"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
				"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
				"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
				"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCurrPromo",
				"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinP2Promo",
				"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinP1Promo",
				"Join3YrWorkerFlag derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y',iif({3YrWorker}=='Y','Y','N')),",
				"          {Speedbump Worker Status} = 'Active',",
				"          {Speedbump 1 Name} = 'Mgr Level',",
				"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
				"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
				"          {Speedbump 2 Name} = 'Mgr Top Talent',",
				"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
				"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
				"          {Speedbump 3 Name} = 'Mgr Experience',",
				"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
				"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
				"          {Speedbump 4 Name} = 'Promotion History',",
				"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
				"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
				"iif({Years of Service}>=5,\r",
				"iif({Elloree Corporate Title Sort}==1, 'N',\r",
				"iif({Elloree Corporate Title Sort}==2, 'N',\r",
				"iif({Curr Promo}=='Y','N',\r",
				"iif({P1 Promo}=='Y','N',\r",
				"iif({P2 Promo}=='Y','N',\r",
				"iif(isNull(CoreLastPromoDt),'Y',\r",
				"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y'))))))),'N'),'N'),",
				"          {Speedbump 5 Name} = 'Applied Roles',",
				"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
				"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
				"          {Speedbump 6 Name} = 'Silver Medalist',",
				"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
				"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
				"          {Speedbump 7 Name} = '3+ Managers',",
				"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
				"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
				"          {Speedbump 8 Name} = 'Individual Contributor',",
				"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (senior talent) ',",
				"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',\r",
				"iif({Elloree Corporate Title Sort}<=4,\r",
				"iif(ManagerInd=='N','Y','N'),'N'),'N'),",
				"          {Speedbump 9 Name} = '9 Box Rating',",
				"          {Speedbump 9 Desc} = '9 Box Value (Talent Identifier #1 in our Data) =Talent Risk (1), Inconsistent (3), Too New to Rate or Wrong in Role (6) or NO 9 Box Value Exists ',",
				"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',\r",
				"iif(TalentIdentifier1=='1','Y',\r",
				"iif(TalentIdentifier1=='3','Y',\r",
				"iif(TalentIdentifier1=='6','Y',\r",
				"iif(isNull(TalentIdentifier1),'Y','N')))),\r",
				"'N'),",
				"          {Speedbump 10 Name} = 'Flight Risk',",
				"          {Speedbump 10 Desc} = '(Flight Risk Info) 3 of 4 criteria met. (1)No promo in last 3 yrs. (2)Yrs of Svc MDir/Prt>10, Sr Mgr/Mgr>5, Other>3. (3)Wkr or Mgr was acq. (4)Top perf. in 2021/22 not 23',",
				"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif((\r",
				"iif({Years of Service}>=5,\r",
				"iif({Elloree Corporate Title Sort}==1, 0,\r",
				"iif({Elloree Corporate Title Sort}==2, 0,\r",
				"iif({Curr Promo}=='Y',0,\r",
				"iif({P1 Promo}=='Y',0,\r",
				"iif({P2 Promo}=='Y',0,\r",
				"iif(isNull(CoreLastPromoDt),1,\r",
				"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,0,1))))))),0)\r",
				"+\r",
				"iif((iif({Years of Service}>10,iif({Elloree Corporate Title Sort}==1,1,0),0)+\r",
				"iif({Years of Service}>10,iif({Elloree Corporate Title Sort}==2,1,0),0)+\r",
				"iif({Years of Service}>5,iif({Elloree Corporate Title Sort}==3,1,0),0)+\r",
				"iif({Years of Service}>5,iif({Elloree Corporate Title Sort}==4,1,0),0)+\r",
				"iif({Years of Service}>3,iif({Elloree Corporate Title Sort}>4,1,0),0))>0,1,0)\r",
				"+\r",
				"iif((iif(isNull(LegacyOrg),0,iif(LegacyOrg=='Non-Merger',0,iif(LegacyOrg=='N/A',0,1))))+(iif(isNull({Mgr LegacyOrg}),0,iif({Mgr LegacyOrg}=='Non-Merger',0,iif({Mgr LegacyOrg}=='N/A',0,1))))>0,1,0)\r",
				"+\r",
				"iif({Curr Top Talent Ind}=='Y',0,iif({P1 Top Talent Ind}=='Y',iif({P2 Top Talent Ind}=='Y',1,0),0)))>=3,'Flight Risk','Non-Flight Risk'),'N'),",
				"          {Speedbump 11 Name} = 'Speedbump 11',",
				"          {Speedbump 11 Desc} = 'N/A',",
				"          {Speedbump 11 Flag} = 'N/A',",
				"          {Speedbump 12 Name} = 'Speedbump 12',",
				"          {Speedbump 12 Desc} = 'N/A',",
				"          {Speedbump 12 Flag} = 'N/A',",
				"          {Speedbump 13 Name} = 'Speedbump 13',",
				"          {Speedbump 13 Desc} = 'N/A',",
				"          {Speedbump 13 Flag} = 'N/A',",
				"          {Speedbump 14 Name} = 'Speedbump 14',",
				"          {Speedbump 14 Desc} = 'N/A',",
				"          {Speedbump 14 Flag} = 'N/A',",
				"          {Speedbump 15 Name} = 'Speedbump 15',",
				"          {Speedbump 15 Desc} = 'N/A',",
				"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
				"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
				"          {Event Year},",
				"          {Silver Medalist Ind}),",
				"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
				"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
				"     && EventYear <= {Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> JoinApplicant",
				"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
				"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
				"          {Event Year}),",
				"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
				"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
				"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
				"     && EventYear == AggApplicantData@{Event Year},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> Join5OrMoreApplied",
				"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
				"CalcSpeedBumps select(mapColumn(",
				"          {Client ID} = SelectCoreForMgrPopulation@{Client ID},",
				"          {Client Engagement Date},",
				"          {Event Quarter} = EventQuarter,",
				"          {Event Year},",
				"          {Core Event Id},",
				"          {Core Event Quarter} = EventQuarter,",
				"          {Core Event Date},",
				"          {Worker ID},",
				"          {Speedbump Worker Status},",
				"          {Speedbump Population Ind},",
				"          {Speedbump 1 Name},",
				"          {Speedbump 1 Desc},",
				"          {Speedbump 1 Flag},",
				"          {Speedbump 2 Name},",
				"          {Speedbump 2 Desc},",
				"          {Speedbump 2 Flag},",
				"          {Speedbump 3 Name},",
				"          {Speedbump 3 Desc},",
				"          {Speedbump 3 Flag},",
				"          {Speedbump 4 Name},",
				"          {Speedbump 4 Desc},",
				"          {Speedbump 4 Flag},",
				"          {Speedbump 5 Name},",
				"          {Speedbump 5 Desc},",
				"          {Speedbump 5 Flag},",
				"          {Speedbump 6 Name},",
				"          {Speedbump 6 Desc},",
				"          {Speedbump 6 Flag},",
				"          {Speedbump 7 Name},",
				"          {Speedbump 7 Desc},",
				"          {Speedbump 7 Flag},",
				"          {Speedbump 8 Name},",
				"          {Speedbump 8 Desc},",
				"          {Speedbump 8 Flag},",
				"          {Speedbump 9 Name},",
				"          {Speedbump 9 Desc},",
				"          {Speedbump 9 Flag},",
				"          {Speedbump 10 Name},",
				"          {Speedbump 10 Desc},",
				"          {Speedbump 10 Flag},",
				"          {Speedbump 11 Name},",
				"          {Speedbump 11 Desc},",
				"          {Speedbump 11 Flag},",
				"          {Speedbump 12 Name},",
				"          {Speedbump 12 Desc},",
				"          {Speedbump 12 Flag},",
				"          {Speedbump 13 Name},",
				"          {Speedbump 13 Desc},",
				"          {Speedbump 13 Flag},",
				"          {Speedbump 14 Name},",
				"          {Speedbump 14 Desc},",
				"          {Speedbump 14 Flag},",
				"          {Speedbump 15 Name},",
				"          {Speedbump 15 Desc},",
				"          {Speedbump 15 Flag}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select4",
				"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
				"RemoveYearNullRows aggregate(groupBy({Client ID}),",
				"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
				"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> P3YearPromoFilter",
				"P3YearPromoFilter select(mapColumn(",
				"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
				"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
				"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinP3Promo",
				"CoreYear select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Worker ID} = WorkerId,",
				"          {Event Date} = EventDt,",
				"          EventMonth,",
				"          {Event Quarter} = EventQuarter,",
				"          {Event Year} = EventYear,",
				"          {Event Code} = EventId,",
				"          {Years of Service} = YearsofSrvc,",
				"          {Last Promo Date} = LastPromoDt,",
				"          {Corporate Title} = CorpTitle,",
				"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
				"          EmpCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"Applicant select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          {Requisition ID} = ReqId,",
				"          {Applicant ID} = ApplicantId,",
				"          {Internal Worker ID} = InternalWorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
				"SilverMedalist select(mapColumn(",
				"          ClientId,",
				"          ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          {Requisition ID} = ReqId,",
				"          {Applicant ID} = ApplId,",
				"          {Internal Worker ID} = IntWorkerId,",
				"          {Silver Medalist Ind} = SilverMedalistInd,",
				"          LoadDt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
				"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
				"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
				"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
				"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
				"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
				"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
				"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
				"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
				"          DirectMgrWorkerId),",
				"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
				"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
				"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
				"AllCore, Select2PYear join(EventYear >= Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> SelectPrior3Years",
				"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
				"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
				"aggregate1 select(mapColumn(",
				"          {P3 YR PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"aggregate2 select(mapColumn(",
				"          {P2 YR PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select9",
				"aggregate3 select(mapColumn(",
				"          {P1 YR PRO Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"aggregate4 select(mapColumn(",
				"          {Curr YR Worker ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select11",
				"Talent select(mapColumn(",
				"          {Talent WorkerId} = WorkerId,",
				"          {Talent EventYear} = EventYear,",
				"          TalentIdentifier1,",
				"          TalentIdentifier2,",
				"          TalentIdentifier3,",
				"          TalentIdentifier4,",
				"          TalentIdentifier5",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
				"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
				"     && EventYear == {Talent EventYear},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinTalentIdentifiers",
				"CoreWorkerIDandEventYr, Select1PYear join(EventYear == Max1PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Workers1P",
				"Workers1P select(mapColumn(",
				"          WorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWorkers1P",
				"CoreWorkerIDandEventYr, Select2PYear join(EventYear == Max2PYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Workers2P",
				"Workers2P select(mapColumn(",
				"          WorkerId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWorkers2P",
				"selectWorkers1P, selectWorkers2P exists(selectWorkers1P@WorkerId == selectWorkers2P@WorkerId,",
				"     negate:false,",
				"     broadcast: 'both')~> WorkersIn1Pand2P",
				"WorkersIn1Pand2PandCurr derive({3YrWorker} = \"Y\") ~> WorkersTenure3Yrs",
				"Join3YrWorkerMgrCount, WorkersTenure3Yrs join({Worker ID} == WorkerId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Join3YrWorkerFlag",
				"WorkersCurr, WorkersIn1Pand2P exists(CoreWorkerIDandEventYr@WorkerId == selectWorkers1P@WorkerId,",
				"     negate:false,",
				"     broadcast: 'auto')~> WorkersIn1Pand2PandCurr",
				"CoreWorkerIDandEventYr, SelectCurrYear join(EventYear == MaxCurrYear,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> WorkersCurr",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
			]
		}
	}
}