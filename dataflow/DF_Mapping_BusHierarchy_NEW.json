{
	"name": "DF_Mapping_BusHierarchy_NEW",
	"properties": {
		"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
		"folder": {
			"name": "Client/Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "etalentBusHierarchyMapTbl",
						"type": "DatasetReference"
					},
					"name": "HierarchyMappingTbl"
				},
				{
					"dataset": {
						"referenceName": "Source_FactTbl_JobReq_File",
						"type": "DatasetReference"
					},
					"name": "Requisitions"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseCoreRecords"
				},
				{
					"dataset": {
						"referenceName": "etalentReqFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseReqRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_MappingWorkingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputWorkingHierarchyMapping"
				},
				{
					"dataset": {
						"referenceName": "Source_MappingPrepFldr",
						"type": "DatasetReference"
					},
					"name": "OutputPrepHierarchyMapping"
				}
			],
			"transformations": [
				{
					"name": "pivot1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "sort4"
				},
				{
					"name": "sort5"
				},
				{
					"name": "SelectUniqueRows"
				},
				{
					"name": "SelectWithoutEngagementDt"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "SelectFinal1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "SelectReqRecords"
				},
				{
					"name": "SelectCoreRecords"
				},
				{
					"name": "union1"
				},
				{
					"name": "SetEvent"
				},
				{
					"name": "selectCoreDBRecs"
				},
				{
					"name": "selectReqDBRecs"
				},
				{
					"name": "CollapsePossibleDuplicateRows"
				},
				{
					"name": "selectReqDBRecsInit"
				},
				{
					"name": "selectCoreDBRecsInit"
				},
				{
					"name": "GetCountOfClientForUniqueValues"
				},
				{
					"name": "JoinClientIDCountInForMaxFilter"
				},
				{
					"name": "CleanupSelectFields"
				},
				{
					"name": "SelectMappingWithMostClients"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "JoinBackFinalSelectMapping"
				},
				{
					"name": "TakeLastClientValForRemainingDups"
				},
				{
					"name": "GroupUniqueValues"
				},
				{
					"name": "EqualtoClientId"
				},
				{
					"name": "NotEqualtoClientID"
				},
				{
					"name": "selectUniqueClientIDValues"
				},
				{
					"name": "SelectLastEngagementDt"
				},
				{
					"name": "SelectBasedOnMostRecentClientEngagment"
				},
				{
					"name": "filterBaseYear"
				},
				{
					"name": "filterBaseYearPlus1"
				},
				{
					"name": "filterBaseYearPlus2"
				},
				{
					"name": "filterBaseYearPlus3"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "selectUniqueWorkers"
				},
				{
					"name": "joinB0"
				},
				{
					"name": "selectB3Hierarchy"
				},
				{
					"name": "selectB2Hierarchy"
				},
				{
					"name": "selectB1Hierarchy"
				},
				{
					"name": "selectB0Hierarchy"
				},
				{
					"name": "joinB1"
				},
				{
					"name": "joinB2"
				},
				{
					"name": "joinB3"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as date,",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientBusGrpLvl1 as string,",
				"          ClientBusGrpLvl2 as string,",
				"          ClientBusGrpLvl3 as string,",
				"          ClientBusGrpLvl4 as string,",
				"          ElloreeBusGrpLvl1 as string,",
				"          ElloreeBusGrpLvl2 as string,",
				"          ElloreeBusGrpLvl3 as string,",
				"          ElloreeBusGrpLvl4 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> HierarchyMappingTbl",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Event Date} as date,",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          EventId as string,",
				"          Event as string,",
				"          {Requisition ID} as string,",
				"          {Requisition Type} as string,",
				"          {Posting Date} as string,",
				"          {Requisition Status} as string,",
				"          {Number of Openings} as string,",
				"          {Job Title} as string,",
				"          {Job Function} as string,",
				"          {Corporate Title} as string,",
				"          {Work Office Location} as string,",
				"          {Work Office City} as string,",
				"          {Work Office State} as string,",
				"          {Work Office Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          {Hiring Manager Worker ID} as string,",
				"          {Primary Recruiter Worker ID} as string,",
				"          {Requisition Other (1)} as string,",
				"          {Requisition Other (2)} as string,",
				"          {Requisition Other (3)} as string,",
				"          {Requisition Other (4)} as string,",
				"          {Requisition Other (5)} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Requisitions",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerStatus as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          RehireInd as string,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGTBQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseCoreRecords",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          ReqId as string,",
				"          ReqType as string,",
				"          PostingDt as date,",
				"          ReqStatus as string,",
				"          NumberofOpenings as integer,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          CorpTitle as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          HiringMgrWorkerId as string,",
				"          PrimaryRecruiterWorkerId as string,",
				"          ReqOther1 as string,",
				"          ReqOther2 as string,",
				"          ReqOther3 as string,",
				"          ReqOther4 as string,",
				"          ReqOther5 as string,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseReqRecords",
				"derivedColumn2 pivot(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Client Business Group Level 1},",
				"          {Client Business Group Level 2},",
				"          {Client Business Group Level 3},",
				"          {Client Business Group Level 4},",
				"          {Elloree Business Group Level 1},",
				"          {Elloree Business Group Level 2},",
				"          {Elloree Business Group Level 3},",
				"          {Elloree Business Group Level 4},",
				"          {Suggested Elloree Business Group Level 1},",
				"          {Suggested Elloree Business Group Level 2},",
				"          {Suggested Elloree Business Group Level 3},",
				"          {Suggested Elloree Business Group Level 4},",
				"          {Suggested Source}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Record Id}),",
				"     columnNaming: '$N$V',",
				"     lateral: true,",
				"     partitionBy('hash', 1)) ~> pivot1",
				"CollapsePossibleDuplicateRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
				"          {Elloree Business Group Level 1} = '',",
				"          {Elloree Business Group Level 2} = '',",
				"          {Elloree Business Group Level 3} = '',",
				"          {Elloree Business Group Level 4} = '',",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"derivedColumn1 sort(asc({Event and Year}, true)) ~> sort4",
				"pivot1 sort(asc({Client Business Group Level 1}, true),",
				"     asc({Client Business Group Level 2}, true),",
				"     asc({Client Business Group Level 3}, true),",
				"     asc({Client Business Group Level 4}, true)) ~> sort5",
				"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
				"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
				"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
				"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
				"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
				"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
				"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
				"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4),",
				"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
				"TakeLastClientValForRemainingDups select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientBusGrpLvl2},",
				"          {Unique ClientBusGrpLvl3},",
				"          {Unique ClientBusGrpLvl4},",
				"          {Unique ElloreeBusGrpLvl1},",
				"          {Unique ElloreeBusGrpLvl2},",
				"          {Unique ElloreeBusGrpLvl3},",
				"          {Unique ElloreeBusGrpLvl4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
				"sort4, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
				"     && {Business Group Level 1} == {Unique ClientBusGrpLvl1}",
				"     && {Business Group Level 2} == {Unique ClientBusGrpLvl2}",
				"     && {Business Group Level 3} == {Unique ClientBusGrpLvl3}",
				"     && {Business Group Level 4} == {Unique ClientBusGrpLvl4},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {Client Business Group Level 1} = {Business Group Level 1},",
				"          {Client Business Group Level 2} = {Business Group Level 2},",
				"          {Client Business Group Level 3} = {Business Group Level 3},",
				"          {Client Business Group Level 4} = {Business Group Level 4},",
				"          {Elloree Business Group Level 1},",
				"          {Elloree Business Group Level 2},",
				"          {Elloree Business Group Level 3},",
				"          {Elloree Business Group Level 4},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested Elloree Business Group Level 1} = {Unique ElloreeBusGrpLvl1},",
				"          {Suggested Elloree Business Group Level 2} = {Unique ElloreeBusGrpLvl2},",
				"          {Suggested Elloree Business Group Level 3} = {Unique ElloreeBusGrpLvl3},",
				"          {Suggested Elloree Business Group Level 4} = {Unique ElloreeBusGrpLvl4},",
				"          {Record Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
				"     && {Client Business Group Level 1} == {Unique ClientBusGrpLvl1}",
				"     && {Client Business Group Level 2} == {Unique ClientBusGrpLvl2}",
				"     && {Client Business Group Level 3} == {Unique ClientBusGrpLvl3}",
				"     && {Client Business Group Level 4} == {Unique ClientBusGrpLvl4},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join2",
				"join2 select(mapColumn(",
				"          {Client Business Group Level 1},",
				"          {Client Business Group Level 2},",
				"          {Client Business Group Level 3},",
				"          {Client Business Group Level 4},",
				"          {Elloree Business Group Level 1},",
				"          {Elloree Business Group Level 2},",
				"          {Elloree Business Group Level 3},",
				"          {Elloree Business Group Level 4},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Elloree Business Group Level 1},",
				"          {Suggested Elloree Business Group Level 2},",
				"          {Suggested Elloree Business Group Level 3},",
				"          {Suggested Elloree Business Group Level 4},",
				"          {Record Id},",
				"          {Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientBusGrpLvl2},",
				"          {Unique ClientBusGrpLvl3},",
				"          {Unique ClientBusGrpLvl4},",
				"          {Unique ElloreeBusGrpLvl1},",
				"          {Unique ElloreeBusGrpLvl2},",
				"          {Unique ElloreeBusGrpLvl3},",
				"          {Unique ElloreeBusGrpLvl4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinal1",
				"SelectFinal1 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Elloree Business Group Level 1} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl1},{Suggested Elloree Business Group Level 1}),",
				"          {Suggested Elloree Business Group Level 2} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl2},{Suggested Elloree Business Group Level 2}),",
				"          {Suggested Elloree Business Group Level 3} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl3},{Suggested Elloree Business Group Level 3}),",
				"          {Suggested Elloree Business Group Level 4} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl4},{Suggested Elloree Business Group Level 4})) ~> derivedColumn2",
				"SetEvent select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Requisition ID},",
				"          {Event Year},",
				"          Event,",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqRecords",
				"AllCoreData select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Worker ID},",
				"          {Event Year},",
				"          Event,",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
				"SelectCoreRecords, SelectReqRecords, selectReqDBRecs, selectCoreDBRecs union(byName: true)~> union1",
				"Requisitions derive(Event = 'Requisition') ~> SetEvent",
				"selectCoreDBRecsInit select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Record Id} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          {Business Group Level 1} = BusinessGrpLvl1,",
				"          {Business Group Level 2} = BusinessGrpLvl2,",
				"          {Business Group Level 3} = BusinessGrpLvl3,",
				"          {Business Group Level 4} = BusinessGrpLvl4",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
				"selectReqDBRecsInit select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          {Record Id} = ReqId,",
				"          {Business Group Level 1} = BusinessGrpLvl1,",
				"          {Business Group Level 2} = BusinessGrpLvl2,",
				"          {Business Group Level 3} = BusinessGrpLvl3,",
				"          {Business Group Level 4} = BusinessGrpLvl4",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
				"union1 aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id},",
				"          {Event Year},",
				"          Event,",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4}),",
				"     TotalRecCount = count({Record Id})) ~> CollapsePossibleDuplicateRows",
				"DatabaseReqRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          EventYear,",
				"          Event,",
				"          ReqId,",
				"          BusinessGrpLvl1,",
				"          BusinessGrpLvl2,",
				"          BusinessGrpLvl3,",
				"          BusinessGrpLvl4),",
				"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
				"DatabaseCoreRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventYear,",
				"          Event,",
				"          BusinessGrpLvl1,",
				"          BusinessGrpLvl3,",
				"          BusinessGrpLvl2,",
				"          BusinessGrpLvl4),",
				"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
				"SelectUniqueRows aggregate(groupBy({Count Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
				"          {Count Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
				"          {Count Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
				"          {Count Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4},",
				"          {Count Unique ElloreeBusGrpLvl1} = {Unique ElloreeBusGrpLvl1},",
				"          {Count Unique ElloreeBusGrpLvl2} = {Unique ElloreeBusGrpLvl2},",
				"          {Count Unique ElloreeBusGrpLvl3} = {Unique ElloreeBusGrpLvl3},",
				"          {Count Unique ElloreeBusGrpLvl4} = {Unique ElloreeBusGrpLvl4}),",
				"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
				"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientBusGrpLvl1} == {Count Unique ClientBusGrpLvl1}",
				"     && {Unique ClientBusGrpLvl2} == {Count Unique ClientBusGrpLvl2}",
				"     && {Unique ClientBusGrpLvl3} == {Count Unique ClientBusGrpLvl3}",
				"     && {Unique ClientBusGrpLvl4} == {Count Unique ClientBusGrpLvl4}",
				"     && {Unique ElloreeBusGrpLvl1} == {Count Unique ElloreeBusGrpLvl1}",
				"     && {Unique ElloreeBusGrpLvl2} == {Count Unique ElloreeBusGrpLvl2}",
				"     && {Unique ElloreeBusGrpLvl3} == {Count Unique ElloreeBusGrpLvl3}",
				"     && {Unique ElloreeBusGrpLvl4} == {Count Unique ElloreeBusGrpLvl4},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
				"JoinClientIDCountInForMaxFilter select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientBusGrpLvl2},",
				"          {Unique ClientBusGrpLvl3},",
				"          {Unique ClientBusGrpLvl4},",
				"          {Unique ElloreeBusGrpLvl1},",
				"          {Unique ElloreeBusGrpLvl2},",
				"          {Unique ElloreeBusGrpLvl3},",
				"          {Unique ElloreeBusGrpLvl4},",
				"          ClientIDCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
				"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientBusGrpLvl2},",
				"          {Unique ClientBusGrpLvl3},",
				"          {Unique ClientBusGrpLvl4},",
				"          {Unique ElloreeBusGrpLvl1},",
				"          {Unique ElloreeBusGrpLvl2},",
				"          {Unique ElloreeBusGrpLvl3},",
				"          {Unique ElloreeBusGrpLvl4}),",
				"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
				"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
				"          {Agg Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
				"          {Agg Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
				"          {Agg Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4}),",
				"     {Agg Unique ElloreeBusGrpLvl1} = first({Unique ElloreeBusGrpLvl1}),",
				"          {Agg Unique ElloreeBusGrpLvl2} = first({Unique ElloreeBusGrpLvl2}),",
				"          {Agg Unique ElloreeBusGrpLvl3} = first({Unique ElloreeBusGrpLvl3}),",
				"          {Agg Unique ElloreeBusGrpLvl4} = first({Unique ElloreeBusGrpLvl4})) ~> aggregate1",
				"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeBusGrpLvl1} == {Agg Unique ElloreeBusGrpLvl1}",
				"     && {Unique ElloreeBusGrpLvl2} == {Agg Unique ElloreeBusGrpLvl2}",
				"     && {Unique ElloreeBusGrpLvl3} == {Agg Unique ElloreeBusGrpLvl3}",
				"     && {Unique ElloreeBusGrpLvl4} == {Agg Unique ElloreeBusGrpLvl4}",
				"     && {Unique ClientBusGrpLvl1} == {Agg Unique ClientBusGrpLvl1}",
				"     && {Unique ClientBusGrpLvl2} == {Agg Unique ClientBusGrpLvl2}",
				"     && {Unique ClientBusGrpLvl3} == {Agg Unique ClientBusGrpLvl3}",
				"     && {Unique ClientBusGrpLvl4} == {Agg Unique ClientBusGrpLvl4},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
				"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientBusGrpLvl1},",
				"          {Unique ClientBusGrpLvl2},",
				"          {Unique ClientBusGrpLvl3},",
				"          {Unique ClientBusGrpLvl4},",
				"          {Unique ElloreeBusGrpLvl1},",
				"          {Unique ElloreeBusGrpLvl2},",
				"          {Unique ElloreeBusGrpLvl3},",
				"          {Unique ElloreeBusGrpLvl4}),",
				"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
				"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
				"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
				"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
				"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
				"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
				"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
				"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
				"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4,",
				"          ClientEngagementDt),",
				"     RowCount = count(ClientId)) ~> GroupUniqueValues",
				"HierarchyMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
				"HierarchyMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
				"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientBusGrpLvl1},",
				"          {Unique ClientBusGrpLvl2},",
				"          {Unique ClientBusGrpLvl3},",
				"          {Unique ClientBusGrpLvl4},",
				"          {Unique ElloreeBusGrpLvl1},",
				"          {Unique ElloreeBusGrpLvl2},",
				"          {Unique ElloreeBusGrpLvl3},",
				"          {Unique ElloreeBusGrpLvl4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
				"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
				"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
				"     negate:false,",
				"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
				"union1 filter({Event Year}==2021 && Event=='Headcount') ~> filterBaseYear",
				"union1 filter({Event Year}==2022 && Event=='Headcount') ~> filterBaseYearPlus1",
				"union1 filter({Event Year}==2023 && Event=='Headcount') ~> filterBaseYearPlus2",
				"union1 filter({Event Year}==2024 && Event=='Headcount') ~> filterBaseYearPlus3",
				"union1 aggregate(groupBy({Record Id}),",
				"     {Record Count} = count({Record Id})) ~> aggregate2",
				"aggregate2 select(mapColumn(",
				"          {Worker Id} = {Record Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUniqueWorkers",
				"selectUniqueWorkers, selectB0Hierarchy join({Worker Id} == {B0 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinB0",
				"filterBaseYearPlus3 select(mapColumn(",
				"          {B3 - Worker Id} = {Record Id},",
				"          {B3 - Event Year} = {Event Year},",
				"          {B3 - Business Group Level 1} = {Business Group Level 1},",
				"          {B3 - Business Group Level 2} = {Business Group Level 2},",
				"          {B3 - Business Group Level 3} = {Business Group Level 3},",
				"          {B3 - Business Group Level 4} = {Business Group Level 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB3Hierarchy",
				"filterBaseYearPlus2 select(mapColumn(",
				"          {B2 - Worker Id} = {Record Id},",
				"          {B2 - Event Year} = {Event Year},",
				"          {B2 - Business Group Level 1} = {Business Group Level 1},",
				"          {B2 - Business Group Level 2} = {Business Group Level 2},",
				"          {B2 - Business Group Level 3} = {Business Group Level 3},",
				"          {B2 - Business Group Level 4} = {Business Group Level 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB2Hierarchy",
				"filterBaseYearPlus1 select(mapColumn(",
				"          {B1 - Worker Id} = {Record Id},",
				"          {B1 - Event Year} = {Event Year},",
				"          {B1 - Business Group Level 1} = {Business Group Level 1},",
				"          {B1 - Business Group Level 2} = {Business Group Level 2},",
				"          {B1 - Business Group Level 3} = {Business Group Level 3},",
				"          {B1 - Business Group Level 4} = {Business Group Level 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB1Hierarchy",
				"filterBaseYear select(mapColumn(",
				"          {B0 - Worker Id} = {Record Id},",
				"          {B0 - Event Year} = {Event Year},",
				"          {B0 - Business Group Level 1} = {Business Group Level 1},",
				"          {B0 - Business Group Level 2} = {Business Group Level 2},",
				"          {B0 - Business Group Level 3} = {Business Group Level 3},",
				"          {B0 - Business Group Level 4} = {Business Group Level 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB0Hierarchy",
				"joinB0, selectB1Hierarchy join({Worker Id} == {B1 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinB1",
				"joinB1, selectB2Hierarchy join({Worker Id} == {B2 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinB2",
				"joinB2, selectB3Hierarchy join({Worker Id} == {B3 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinB3",
				"joinB3 select(mapColumn(",
				"          {Worker Id},",
				"          {B0 - Event Year},",
				"          {B0 - Business Group Level 1},",
				"          {B0 - Business Group Level 2},",
				"          {B0 - Business Group Level 3},",
				"          {B0 - Business Group Level 4},",
				"          {B1 - Event Year},",
				"          {B1 - Business Group Level 1},",
				"          {B1 - Business Group Level 2},",
				"          {B1 - Business Group Level 3},",
				"          {B1 - Business Group Level 4},",
				"          {B2 - Event Year},",
				"          {B2 - Business Group Level 1},",
				"          {B2 - Business Group Level 2},",
				"          {B2 - Business Group Level 3},",
				"          {B2 - Business Group Level 4},",
				"          {B3 - Event Year},",
				"          {B3 - Business Group Level 1},",
				"          {B3 - Business Group Level 2},",
				"          {B3 - Business Group Level 3},",
				"          {B3 - Business Group Level 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive({B0 Hierarchy} = concat(concat(concat({B0 - Business Group Level 1},{B0 - Business Group Level 2}),{B0 - Business Group Level 3}),{B0 - Business Group Level 4}),",
				"          {B1 Hierarchy} = concat(concat(concat({B1 - Business Group Level 1},{B1 - Business Group Level 2}),{B1 - Business Group Level 3}),{B1 - Business Group Level 4}),",
				"          {B2 Hierarchy} = concat(concat(concat({B2 - Business Group Level 1},{B2 - Business Group Level 2}),{B2 - Business Group Level 3}),{B2 - Business Group Level 4}),",
				"          {B3 Hierarchy} = concat(concat(concat({B3 - Business Group Level 1},{B3 - Business Group Level 2}),{B3 - Business Group Level 3}),{B3 - Business Group Level 4})) ~> derivedColumn3",
				"sort5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['business_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputWorkingHierarchyMapping",
				"sort5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['prep_business_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputPrepHierarchyMapping"
			]
		}
	}
}