{
	"name": "DF_Mapping_BusHierarchy_NEW",
	"properties": {
		"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
		"folder": {
			"name": "Client/Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SelectCoreRecords"
				},
				{
					"name": "filterBaseYear"
				},
				{
					"name": "filterBaseYearPlus1"
				},
				{
					"name": "filterBaseYearPlus2"
				},
				{
					"name": "filterBaseYearPlus3"
				},
				{
					"name": "selectB3Hierarchy"
				},
				{
					"name": "selectB2Hierarchy"
				},
				{
					"name": "selectB1Hierarchy"
				},
				{
					"name": "selectB0Hierarchy"
				},
				{
					"name": "filterAllHCT"
				},
				{
					"name": "UniqueWorkerIds"
				},
				{
					"name": "selectWorkerIds"
				},
				{
					"name": "joinEachHCTYearB0"
				},
				{
					"name": "joinEachHCTYearB1"
				},
				{
					"name": "joinEachHCTYearB2"
				},
				{
					"name": "joinEachHCTYearB3"
				},
				{
					"name": "derivedCreateHierarchyCodes"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Engagement Type} as string,",
				"          {Worker ID} as string,",
				"          {Event Date} as date,",
				"          EventMonth as integer,",
				"          {Event Quarter} as integer,",
				"          {Event Year} as short,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Status} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Family/Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Family/Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Rehire Indicator} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGTBQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"AllCoreData select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Worker ID},",
				"          {Event Year},",
				"          Event,",
				"          {Business Group Level 1},",
				"          {Business Group Level 2},",
				"          {Business Group Level 3},",
				"          {Business Group Level 4},",
				"          {Job Title}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
				"SelectCoreRecords filter({Event Year}==2021 && Event=='Headcount') ~> filterBaseYear",
				"SelectCoreRecords filter({Event Year}==2022 && Event=='Headcount') ~> filterBaseYearPlus1",
				"SelectCoreRecords filter({Event Year}==2023 && Event=='Headcount') ~> filterBaseYearPlus2",
				"SelectCoreRecords filter({Event Year}==2024 && Event=='Headcount') ~> filterBaseYearPlus3",
				"filterBaseYearPlus3 select(mapColumn(",
				"          {Yr 3 - Worker Id} = {Record Id},",
				"          {Yr 3 - Event Year} = {Event Year},",
				"          {Yr 3 - Business Group Level 1} = {Business Group Level 1},",
				"          {Yr 3 - Business Group Level 2} = {Business Group Level 2},",
				"          {Yr 3 - Business Group Level 3} = {Business Group Level 3},",
				"          {Yr 3 - Business Group Level 4} = {Business Group Level 4},",
				"          {Yr 3 - Job Title} = {Job Title}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB3Hierarchy",
				"filterBaseYearPlus2 select(mapColumn(",
				"          {Yr 2 - Worker Id} = {Record Id},",
				"          {Yr 2 - Event Year} = {Event Year},",
				"          {Yr 2 - Business Group Level 1} = {Business Group Level 1},",
				"          {Yr 2 - Business Group Level 2} = {Business Group Level 2},",
				"          {Yr 2 - Business Group Level 3} = {Business Group Level 3},",
				"          {Yr 2 - Business Group Level 4} = {Business Group Level 4},",
				"          {Yr 2 - Job Title} = {Job Title}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB2Hierarchy",
				"filterBaseYearPlus1 select(mapColumn(",
				"          {Yr 1 - Worker Id} = {Record Id},",
				"          {Yr 1 - Event Year} = {Event Year},",
				"          {Yr 1 - Business Group Level 1} = {Business Group Level 1},",
				"          {Yr 1 - Business Group Level 2} = {Business Group Level 2},",
				"          {Yr 1 - Business Group Level 3} = {Business Group Level 3},",
				"          {Yr 1 - Business Group Level 4} = {Business Group Level 4},",
				"          {Yr 1 - Job Title} = {Job Title}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB1Hierarchy",
				"filterBaseYear select(mapColumn(",
				"          {Yr 0 - Worker Id} = {Record Id},",
				"          {Yr 0 - Event Year} = {Event Year},",
				"          {Yr 0 - Business Group Level 1} = {Business Group Level 1},",
				"          {Yr 0 - Business Group Level 2} = {Business Group Level 2},",
				"          {Yr 0 - Business Group Level 3} = {Business Group Level 3},",
				"          {Yr 0 - Business Group Level 4} = {Business Group Level 4},",
				"          {Yr 0 - Job Title} = {Job Title}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectB0Hierarchy",
				"SelectCoreRecords filter(Event=='Headcount') ~> filterAllHCT",
				"filterAllHCT aggregate(groupBy({Worker Id} = {Record Id}),",
				"     {Record Count} = count({Record Id})) ~> UniqueWorkerIds",
				"UniqueWorkerIds select(mapColumn(",
				"          {Worker Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWorkerIds",
				"selectWorkerIds, selectB0Hierarchy join({Worker Id} == {Yr 0 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEachHCTYearB0",
				"joinEachHCTYearB0, selectB1Hierarchy join({Worker Id} == {Yr 1 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEachHCTYearB1",
				"joinEachHCTYearB1, selectB2Hierarchy join({Worker Id} == {Yr 2 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEachHCTYearB2",
				"joinEachHCTYearB2, selectB3Hierarchy join({Worker Id} == {Yr 3 - Worker Id},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEachHCTYearB3",
				"joinEachHCTYearB3 derive({B0 - Hierarchy Code} = concat(concat(concat({Yr 0 - Business Group Level 1}, {Yr 0 - Business Group Level 2}),{Yr 0 - Business Group Level 3}),{Yr 0 - Business Group Level 4}),",
				"          {B1 - Hierarchy Code} = concat(concat(concat({Yr 1 - Business Group Level 1}, {Yr 1 - Business Group Level 2}),{Yr 1 - Business Group Level 3}),{Yr 1 - Business Group Level 4}),",
				"          {B2 - Hierarchy Code} = concat(concat(concat({Yr 2 - Business Group Level 1}, {Yr 2 - Business Group Level 2}),{Yr 2 - Business Group Level 3}),{Yr 2 - Business Group Level 4}),",
				"          {B3 - Hierarchy Code} = concat(concat(concat({Yr 3 - Business Group Level 1}, {Yr 3 - Business Group Level 2}),{Yr 3 - Business Group Level 3}),{Yr 3 - Business Group Level 4}),",
				"          {Yr 0 to Yr 1 Lvl 1 Change} = iif({Yr 0 - Business Group Level 1}=={Yr 1 - Business Group Level 1},'N','Y'),",
				"          {Yr 0 to Yr 1 Lvl 2 Change} = iif({Yr 0 - Business Group Level 2}=={Yr 1 - Business Group Level 2},'N','Y'),",
				"          {Yr 0 to Yr 1 Lvl 3 Change} = iif({Yr 0 - Business Group Level 3}=={Yr 1 - Business Group Level 3},'N','Y'),",
				"          {Yr 0 to Yr 1 Lvl 4 Change} = iif({Yr 0 - Business Group Level 4}=={Yr 1 - Business Group Level 4},'N','Y'),",
				"          {Yr 1 to Yr 2 Lvl 1 Change} = iif({Yr 1 - Business Group Level 1}=={Yr 2 - Business Group Level 1},'N','Y'),",
				"          {Yr 1 to Yr 2 Lvl 2 Change} = iif({Yr 1 - Business Group Level 2}=={Yr 2 - Business Group Level 2},'N','Y'),",
				"          {Yr 1 to Yr 2 Lvl 3 Change} = iif({Yr 1 - Business Group Level 3}=={Yr 2 - Business Group Level 3},'N','Y'),",
				"          {Yr 1 to Yr 2 Lvl 4 Change} = iif({Yr 1 - Business Group Level 4}=={Yr 2 - Business Group Level 4},'N','Y'),",
				"          {Yr 2 to Yr 3 Lvl 1 Change} = iif({Yr 2 - Business Group Level 1}=={Yr 3 - Business Group Level 1},'N','Y'),",
				"          {Yr 2 to Yr 3 Lvl 2 Change} = iif({Yr 2 - Business Group Level 2}=={Yr 3 - Business Group Level 2},'N','Y'),",
				"          {Yr 2 to Yr 3 Lvl 3 Change} = iif({Yr 2 - Business Group Level 3}=={Yr 3 - Business Group Level 3},'N','Y'),",
				"          {Yr 2 to Yr 3 Lvl 4 Change} = iif({Yr 2 - Business Group Level 4}=={Yr 3 - Business Group Level 4},'N','Y')) ~> derivedCreateHierarchyCodes"
			]
		}
	}
}