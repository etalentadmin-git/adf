{
	"name": "DF_Mapping_Event",
	"properties": {
		"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
		"folder": {
			"name": "Client/Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_FactTbl_AllCoreData_File",
						"type": "DatasetReference"
					},
					"name": "AllCoreData"
				},
				{
					"dataset": {
						"referenceName": "etalentEventMapTbl",
						"type": "DatasetReference"
					},
					"name": "EventMappingTbl"
				},
				{
					"dataset": {
						"referenceName": "etalentCoreFactTbl",
						"type": "DatasetReference"
					},
					"name": "DatabaseCoreRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Source_MappingFldr",
						"type": "DatasetReference"
					},
					"name": "OutputPrepEventMapping"
				}
			],
			"transformations": [
				{
					"name": "CreatePivotEventAndEventTime"
				},
				{
					"name": "SortOnEventAndYear"
				},
				{
					"name": "SortOnEvent"
				},
				{
					"name": "UniqueRows"
				},
				{
					"name": "SelectWithoutEngagementDt"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "SelectFinal"
				},
				{
					"name": "selectCoreDBRecs"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select2"
				},
				{
					"name": "union1"
				},
				{
					"name": "selectCoreDBRecsInit"
				},
				{
					"name": "GetCountOfClientForUniqueValues"
				},
				{
					"name": "JoinClientIDCountInForMaxFilter"
				},
				{
					"name": "CleanupSelectFields"
				},
				{
					"name": "SelectMappingWithMostClients"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "JoinBackFinalSelectMapping"
				},
				{
					"name": "TakeLastClientValForRemainingDups"
				},
				{
					"name": "NotEqualtoClientID"
				},
				{
					"name": "EqualtoClientId"
				},
				{
					"name": "GroupUniqueValues"
				},
				{
					"name": "SelectBasedOnMostRecentClientEngagment"
				},
				{
					"name": "SelectLastEngagementDt"
				},
				{
					"name": "selectUniqueClientIDValues"
				},
				{
					"name": "RemoveDupRow"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Flow_Client_Id as string,",
				"     Flow_Client_Dt as string",
				"}",
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          EventMonth as string,",
				"          {Event Quarter} as string,",
				"          {Event Year} as short,",
				"          {Worker ID} as string,",
				"          {Event Date} as string,",
				"          {Event Code} as string,",
				"          {Event Type} as string,",
				"          Event as string,",
				"          {Event Reason} as string,",
				"          {Worker Type} as string,",
				"          {Job Title} as string,",
				"          {Job Function} as string,",
				"          {Years in Job} as string,",
				"          {Previous Job Title} as string,",
				"          {Previous Job Function} as string,",
				"          {Original Hire Date} as string,",
				"          {Current Hire Date} as string,",
				"          {Years of Service} as string,",
				"          {Years of Service Band} as string,",
				"          {Years of Service Sort ID} as string,",
				"          {Last Promo Date} as string,",
				"          {Corporate Title} as string,",
				"          {Previous Corporate Title} as string,",
				"          {Manager Indicator} as string,",
				"          {Direct Manager Worker ID} as string,",
				"          {Work Office Location} as string,",
				"          {Work City} as string,",
				"          {Work State} as string,",
				"          {Work Country} as string,",
				"          {Strategic Work Location Ind} as string,",
				"          {Legacy Organization} as string,",
				"          {Business Group Level 1} as string,",
				"          {Business Group Level 2} as string,",
				"          {Business Group Level 3} as string,",
				"          {Business Group Level 4} as string,",
				"          Race as string,",
				"          {Hispanic or Latino Origin} as string,",
				"          Gender as string,",
				"          {Veteran Ind} as string,",
				"          LGBTQ as string,",
				"          {Disability Ind} as string,",
				"          {Birth Year} as string,",
				"          {Generation Desc} as string,",
				"          {Generation Sort ID} as string,",
				"          EmpCount as string,",
				"          RowCount as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AllCoreData",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientEvent as string,",
				"          ClientEventType as string,",
				"          ClientEventReason as string,",
				"          ElloreeEvent as string,",
				"          ElloreeEventType as string,",
				"          ElloreeEventReason as string,",
				"          ElloreeTermReason as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EventMappingTbl",
				"source(output(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          WorkerId as string,",
				"          EventDt as date,",
				"          EventMonth as integer,",
				"          EventQuarter as integer,",
				"          EventYear as integer,",
				"          Event as string,",
				"          EventId as string,",
				"          EventType as string,",
				"          EventReason as string,",
				"          WorkerType as string,",
				"          JobTitle as string,",
				"          JobFunction as string,",
				"          YearsinJob as double,",
				"          PrevJobTitle as string,",
				"          PrevJobFunction as string,",
				"          LastPromoDt as date,",
				"          OrigHireDt as date,",
				"          CurrHireDt as date,",
				"          YearsofSrvc as double,",
				"          YearsofSrvcBand as string,",
				"          YearsofSrvcBandSortId as integer,",
				"          CorpTitle as string,",
				"          PrevCorpTitle as string,",
				"          ManagerInd as string,",
				"          DirectMgrWorkerId as string,",
				"          WorkOfficeLoc as string,",
				"          WorkOfficeCity as string,",
				"          WorkOfficeState as string,",
				"          WorkOfficeCountry as string,",
				"          WorkStrategicLocInd as string,",
				"          LegacyOrg as string,",
				"          BusinessGrpLvl1 as string,",
				"          BusinessGrpLvl2 as string,",
				"          BusinessGrpLvl3 as string,",
				"          BusinessGrpLvl4 as string,",
				"          Race as string,",
				"          HispanicLatinoOrigin as string,",
				"          Gender as string,",
				"          Veteran as string,",
				"          LGBTQ as string,",
				"          DisabilityInd as string,",
				"          BirthYear as integer,",
				"          Generation as string,",
				"          GenerationSortId as integer,",
				"          EmpCount as integer,",
				"          LoadDt as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
				"     format: 'query') ~> DatabaseCoreRecords",
				"derivedColumn1 pivot(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Client Event},",
				"          {Client Event Type},",
				"          {Client Event Reason},",
				"          {Elloree Event},",
				"          {Elloree Event Type},",
				"          {Elloree Event Reason},",
				"          {Elloree Termination Reason},",
				"          {Suggested Elloree Event},",
				"          {Suggested Elloree Event Type},",
				"          {Suggested Elloree Event Reason},",
				"          {Suggested Elloree Termination Reason},",
				"          {Suggested Source}),",
				"     pivotBy({Event and Year}),",
				"     {} = count({Record Id}),",
				"     columnNaming: '$N$V',",
				"     lateral: false,",
				"     partitionBy('hash', 1)) ~> CreatePivotEventAndEventTime",
				"RemoveDupRow sort(asc({Event Year}, true)) ~> SortOnEventAndYear",
				"CreatePivotEventAndEventTime sort(asc({Client Event}, true),",
				"     asc({Client Event Type}, true),",
				"     asc({Client Event Reason}, true)) ~> SortOnEvent",
				"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
				"          {Unique ClientEvent} = ClientEvent,",
				"          {Unique ClientEventType} = ClientEventType,",
				"          {Unique ClientEventReason} = ClientEventReason,",
				"          {Unique ElloreeEvent} = ElloreeEvent,",
				"          {Unique ElloreeEventType} = ElloreeEventType,",
				"          {Unique ElloreeEventReason} = ElloreeEventReason,",
				"          {Unique ElloreeTermReason} = ElloreeTermReason),",
				"     ClientEngagementDt = last(ClientEngagementDt)) ~> UniqueRows",
				"TakeLastClientValForRemainingDups select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientEvent},",
				"          {Unique ClientEventType},",
				"          {Unique ClientEventReason},",
				"          {Unique ElloreeEvent},",
				"          {Unique ElloreeEventType},",
				"          {Unique ElloreeEventReason},",
				"          {Unique ElloreeTermReason}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
				"SortOnEventAndYear, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
				"     && Event == {Unique ClientEvent}",
				"     && {Event Type} == {Unique ClientEventType}",
				"     && {Event Reason} == {Unique ClientEventReason},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"derivedColumn2 select(mapColumn(",
				"          {Client Event} = Event,",
				"          {Client Event Type} = {Event Type},",
				"          {Client Event Reason} = {Event Reason},",
				"          {Elloree Event},",
				"          {Elloree Event Type},",
				"          {Elloree Event Reason},",
				"          {Elloree Termination Reason},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source} = {Unique ClientId},",
				"          {Suggested Elloree Event} = {Unique ElloreeEvent},",
				"          {Suggested Elloree Event Type} = {Unique ElloreeEventType},",
				"          {Suggested Elloree Event Reason} = {Unique ElloreeEventReason},",
				"          {Suggested Elloree Termination Reason} = {Unique ElloreeTermReason},",
				"          {Record Id}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, SelectWithoutEngagementDt join({Client Event} == {Unique ClientEvent}",
				"     && {Client Event Type} == {Unique ClientEventType}",
				"     && {Client Event Reason} == {Unique ClientEventReason}",
				"     && {Client ID} != {Unique ClientId},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'both')~> join2",
				"SelectFinal derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
				"          {Suggested Elloree Event} = iif(isNull({Suggested Source}),{Unique ElloreeEvent},{Suggested Elloree Event}),",
				"          {Suggested Elloree Event Type} = iif(isNull({Suggested Source}),{Unique ClientEventType},{Suggested Elloree Event Type}),",
				"          {Suggested Elloree Event Reason} = iif(isNull({Suggested Source}),{Unique ClientEventReason},{Suggested Elloree Event Reason}),",
				"          {Suggested Elloree Termination Reason} = iif(isNull({Suggested Source}),{Unique ElloreeTermReason},{Suggested Elloree Termination Reason})) ~> derivedColumn1",
				"join2 select(mapColumn(",
				"          {Client Event},",
				"          {Client Event Type},",
				"          {Client Event Reason},",
				"          {Elloree Event},",
				"          {Elloree Event Type},",
				"          {Elloree Event Reason},",
				"          {Elloree Termination Reason},",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Event and Year},",
				"          {Suggested Source},",
				"          {Suggested Elloree Event},",
				"          {Suggested Elloree Event Type},",
				"          {Suggested Elloree Event Reason},",
				"          {Suggested Elloree Termination Reason},",
				"          {Record Id},",
				"          {Unique ClientId},",
				"          {Unique ClientEvent},",
				"          {Unique ClientEventType},",
				"          {Unique ClientEventReason},",
				"          {Unique ElloreeEvent},",
				"          {Unique ElloreeEventType},",
				"          {Unique ElloreeEventReason},",
				"          {Unique ElloreeTermReason}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinal",
				"selectCoreDBRecsInit select(mapColumn(",
				"          {Client ID} = ClientId,",
				"          {Client Engagement Date} = ClientEngagementDt,",
				"          {Record Id} = WorkerId,",
				"          {Event Year} = EventYear,",
				"          Event,",
				"          {Event Type} = EventType,",
				"          {Event Reason} = EventReason",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
				"join1 derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
				"          {Elloree Event} = '',",
				"          {Elloree Event Type} = '',",
				"          {Elloree Event Reason} = '',",
				"          {Elloree Termination Reason} = '') ~> derivedColumn2",
				"AllCoreData select(mapColumn(",
				"          {Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id} = {Worker ID},",
				"          {Event Year},",
				"          {Event Type},",
				"          Event,",
				"          {Event Reason}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, selectCoreDBRecs union(byName: true)~> union1",
				"DatabaseCoreRecords aggregate(groupBy(ClientId,",
				"          ClientEngagementDt,",
				"          WorkerId,",
				"          EventYear,",
				"          EventType,",
				"          EventReason,",
				"          Event),",
				"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
				"UniqueRows aggregate(groupBy({Count Unique ClientEvent} = {Unique ClientEvent},",
				"          {Count Unique ClientEventType} = {Unique ClientEventType},",
				"          {Count Unique ClientEventReason} = {Unique ClientEventReason},",
				"          {Count Unique ElloreeEvent} = {Unique ElloreeEvent},",
				"          {Count Unique ElloreeEventType} = {Unique ElloreeEventType},",
				"          {Count Unique ElloreeEventReason} = {Unique ElloreeEventReason},",
				"          {Count Unique ElloreeTermReason} = {Unique ElloreeTermReason}),",
				"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
				"UniqueRows, GetCountOfClientForUniqueValues join({Unique ClientEvent} == {Count Unique ClientEvent}",
				"     && {Unique ClientEventType} == {Count Unique ClientEventType}",
				"     && {Unique ClientEventReason} == {Count Unique ClientEventReason}",
				"     && {Unique ElloreeEvent} == {Count Unique ElloreeEvent}",
				"     && {Unique ElloreeEventType} == {Count Unique ElloreeEventType}",
				"     && {Unique ElloreeEventReason} == {Count Unique ElloreeEventReason}",
				"     && {Unique ElloreeTermReason} == {Count Unique ElloreeTermReason},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
				"JoinClientIDCountInForMaxFilter select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientEvent},",
				"          {Unique ClientEventType},",
				"          {Unique ClientEventReason},",
				"          {Unique ElloreeEvent},",
				"          {Unique ElloreeEventType},",
				"          {Unique ElloreeEventReason},",
				"          {Unique ElloreeTermReason},",
				"          ClientIDCount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
				"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
				"          {Unique ClientEvent},",
				"          {Unique ClientEventType},",
				"          {Unique ClientEventReason},",
				"          {Unique ElloreeEvent},",
				"          {Unique ElloreeEventType},",
				"          {Unique ElloreeEventReason},",
				"          {Unique ElloreeTermReason}),",
				"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
				"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientEvent} = {Unique ClientEvent},",
				"          {Agg Unique ClientEventType} = {Unique ClientEventType},",
				"          {Agg Unique ClientEventReason} = {Unique ClientEventReason}),",
				"     {Agg Unique ElloreeEvent} = first({Unique ElloreeEvent}),",
				"          {Agg Unique ElloreeEventType} = first({Unique ElloreeEventType}),",
				"          {Agg Unique ElloreeEventReason} = first({Unique ElloreeEventReason}),",
				"          {Agg Unique ElloreeTermReason} = first({Unique ElloreeTermReason})) ~> aggregate1",
				"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeEvent} == {Agg Unique ElloreeEvent}",
				"     && {Unique ElloreeEventType} == {Agg Unique ElloreeEventType}",
				"     && {Unique ElloreeEventReason} == {Agg Unique ElloreeEventReason}",
				"     && {Unique ElloreeTermReason} == {Agg Unique ElloreeTermReason}",
				"     && {Unique ClientEvent} == {Agg Unique ClientEvent}",
				"     && {Unique ClientEventType} == {Agg Unique ClientEventType}",
				"     && {Unique ClientEventReason} == {Agg Unique ClientEventReason}",
				"     && {Unique ElloreeEvent} == {Agg Unique ElloreeEvent},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
				"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientEvent},",
				"          {Unique ClientEventType},",
				"          {Unique ClientEventReason},",
				"          {Unique ElloreeEvent},",
				"          {Unique ElloreeEventType},",
				"          {Unique ElloreeEventReason},",
				"          {Unique ElloreeTermReason}),",
				"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
				"EventMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
				"EventMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
				"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
				"          ClientEngagementDt,",
				"          {Unique ClientEvent} = ClientEvent,",
				"          {Unique ClientEventType} = ClientEventType,",
				"          {Unique ClientEventReason} = ClientEventReason,",
				"          {Unique ElloreeEvent} = ElloreeEvent,",
				"          {Unique ElloreeEventType} = ElloreeEventType,",
				"          {Unique ElloreeEventReason} = ElloreeEventReason,",
				"          {Unique ElloreeTermReason} = ElloreeTermReason),",
				"     RowCount = count(ClientId)) ~> GroupUniqueValues",
				"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
				"     negate:false,",
				"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
				"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
				"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
				"          {Unique ClientId},",
				"          {Unique ClientEvent},",
				"          {Unique ClientEventType},",
				"          {Unique ClientEventReason},",
				"          {Unique ElloreeEvent},",
				"          {Unique ElloreeEventType},",
				"          {Unique ElloreeEventReason},",
				"          {Unique ElloreeTermReason}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
				"union1 aggregate(groupBy({Client ID},",
				"          {Client Engagement Date},",
				"          {Record Id},",
				"          {Event Year},",
				"          {Event Type},",
				"          Event,",
				"          {Event Reason}),",
				"     RowCount = count({Client ID})) ~> RemoveDupRow",
				"SortOnEvent sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string,",
				"          Column_15 as string,",
				"          Column_16 as string,",
				"          Column_17 as string,",
				"          Column_18 as string,",
				"          Column_19 as string,",
				"          Column_20 as string,",
				"          Column_21 as string,",
				"          Column_22 as string,",
				"          Column_23 as string,",
				"          Column_24 as string,",
				"          Column_25 as string,",
				"          Column_26 as string,",
				"          Column_27 as string,",
				"          Column_28 as string",
				"     ),",
				"     partitionFileNames:['prep_event_mapping.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputPrepEventMapping"
			]
		}
	}
}