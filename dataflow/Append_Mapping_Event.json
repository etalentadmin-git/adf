{
	"name": "Append_Mapping_Event",
	"properties": {
		"folder": {
			"name": "Client/Database/Load Mapping Tables"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Source_Mapping_Event",
						"type": "DatasetReference"
					},
					"name": "Event"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "etalentEventMapTbl",
						"type": "DatasetReference"
					},
					"name": "AppendEventMapping"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "AlterColumnNamesforMap"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Client ID} as string,",
				"          {Client Engagement Date} as date 'MM/dd/yyyy',",
				"          {Client Event} as string,",
				"          {Client Event Type} as string,",
				"          {Client Event Reason} as string,",
				"          {Elloree Event} as string,",
				"          {Elloree Event Type} as string,",
				"          {Elloree Event Reason} as string,",
				"          {Elloree Termination Reason} as string,",
				"          {Suggested Elloree Event} as string,",
				"          {Suggested Elloree Event Type} as string,",
				"          {Suggested Elloree Event Reason} as string,",
				"          {Suggested Elloree Termination Reason} as string,",
				"          {Suggested Source} as string,",
				"          {2019 Headcount} as string,",
				"          {2020 Headcount} as string,",
				"          {2020 Hire} as string,",
				"          {2020 Promo} as string,",
				"          {2020 Term} as string,",
				"          {2021 Headcount} as string,",
				"          {2021 Hire} as string,",
				"          {2021 Promo} as string,",
				"          {2021 Term} as string,",
				"          {2022 Headcount} as string,",
				"          {2022 Hire} as string,",
				"          {2022 Promo} as string,",
				"          {2022 Term} as string,",
				"          {2023 Promo} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Event",
				"Event alterRow(upsertIf(true()),",
				"     deleteIf(isNull({Client ID})),",
				"     deleteIf(isNull({Client Engagement Date})),",
				"     deleteIf(isNull({Elloree Event})),",
				"     deleteIf(isNull({Elloree Event Type})),",
				"     deleteIf(isNull({Elloree Event Reason})),",
				"     deleteIf(isNull({Elloree Termination Reason}))) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          ClientId = {Client ID},",
				"          ClientEngagementDt = {Client Engagement Date},",
				"          ClientEvent = {Client Event},",
				"          ElloreeEvent = {Elloree Event},",
				"          ClientEventType = {Client Event Type},",
				"          ElloreeEventType = {Elloree Event Type},",
				"          ClientEventReason = {Client Event Reason},",
				"          ElloreeEventReason = {Elloree Event Reason},",
				"          ElloreeTermReason = {Elloree Termination Reason}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
				"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ClientId as string,",
				"          ClientEngagementDt as date,",
				"          ClientEvent as string,",
				"          ClientEventType as string,",
				"          ClientEventReason as string,",
				"          ElloreeEvent as string,",
				"          ElloreeEventType as string,",
				"          ElloreeEventReason as string,",
				"          ElloreeTermReason as string,",
				"          LoadDt as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ClientId','ClientEngagementDt','ClientEvent','ClientEventType','ClientEventReason'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AppendEventMapping"
			]
		}
	}
}