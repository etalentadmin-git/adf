{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_WorkerId_HCT_Compare')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "HCTFilter"
						},
						{
							"name": "MaxYear"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "MaxYearMinus1"
						},
						{
							"name": "MaxYearMinus2"
						},
						{
							"name": "MaxYearMinus3"
						},
						{
							"name": "MaxYearMinus4"
						},
						{
							"name": "SelectWorkerAndYear"
						},
						{
							"name": "TotalWorkersMaxYear"
						},
						{
							"name": "JoinMaxMinus1"
						},
						{
							"name": "TotalWorkersMaxYearMinus1"
						},
						{
							"name": "JoinMaxMinus2"
						},
						{
							"name": "TotalWorkersMaxYearMinus2"
						},
						{
							"name": "JoinMaxMinus3"
						},
						{
							"name": "TotalWorkersMaxYearMinus3"
						},
						{
							"name": "JoinMaxMinus4"
						},
						{
							"name": "TotalWorkersMaxYearMinus4"
						},
						{
							"name": "JoinMaxMinus1forCompare"
						},
						{
							"name": "selectMax"
						},
						{
							"name": "selectMaxMinus1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinMaxMinus2forCompare"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "selectMaxMinus2"
						},
						{
							"name": "JoinMaxMinus3forCompare"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "selectMaxMinus3"
						},
						{
							"name": "JoinMaxMinus4forCompare"
						},
						{
							"name": "selectMaxMinus4"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "JoinTotalMax"
						},
						{
							"name": "FinalSelectMaxCompare"
						},
						{
							"name": "JoinTotal1P"
						},
						{
							"name": "FinalSelect1PCompare"
						},
						{
							"name": "JoinTotal2P"
						},
						{
							"name": "FinalSelect2PCompare"
						},
						{
							"name": "JoinTotal3P"
						},
						{
							"name": "FinalSelect3PCompare"
						},
						{
							"name": "MaxYearMinus5"
						},
						{
							"name": "JoinMaxMinus5"
						},
						{
							"name": "selectMaxMinus5"
						},
						{
							"name": "TotalWorkersMaxYearMinus5"
						},
						{
							"name": "JoinMaxMinus5forCompare"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinTotal4P"
						},
						{
							"name": "FinalSelect4PCompare"
						},
						{
							"name": "CalcMaxPercent"
						},
						{
							"name": "Calc1PPercent"
						},
						{
							"name": "Calc2PPercent"
						},
						{
							"name": "Calc3PPercent"
						},
						{
							"name": "Calc4PPercent"
						},
						{
							"name": "union1"
						},
						{
							"name": "TERFilter"
						},
						{
							"name": "JoinFilterMaxTER"
						},
						{
							"name": "JoinFilter1PTER"
						},
						{
							"name": "JoinFilter2PTER"
						},
						{
							"name": "JoinFilter3PTER"
						},
						{
							"name": "JoinFilter4PTER"
						},
						{
							"name": "SelectTERColumns"
						},
						{
							"name": "MaxTERExist5PHC"
						},
						{
							"name": "Terminations4PCount"
						},
						{
							"name": "MaxTERExist4PHC"
						},
						{
							"name": "Terminations3PCount"
						},
						{
							"name": "MaxTERExist3PHC"
						},
						{
							"name": "Terminations2PCount"
						},
						{
							"name": "MaxTERExist2PHC"
						},
						{
							"name": "Terminations1PCount"
						},
						{
							"name": "MaxTERExist1PHC"
						},
						{
							"name": "TerminationsMaxCount"
						},
						{
							"name": "JoinMaxTERCount"
						},
						{
							"name": "FinalSelect1P"
						},
						{
							"name": "Join1PTERCount"
						},
						{
							"name": "FinalSelect2P"
						},
						{
							"name": "Join2PTERCount"
						},
						{
							"name": "FinalSelect3P"
						},
						{
							"name": "Join3PTERCount"
						},
						{
							"name": "FinalSelect4P"
						},
						{
							"name": "Join4PTERCount"
						},
						{
							"name": "FinalSelect5P"
						},
						{
							"name": "HIRFilter"
						},
						{
							"name": "SelectHIRColumns"
						},
						{
							"name": "JoinFilterMaxHIR"
						},
						{
							"name": "HireMaxCount"
						},
						{
							"name": "MaxHIRExistMaxHC"
						},
						{
							"name": "JoinFilter1PHIR"
						},
						{
							"name": "HIR1PExist1PHC"
						},
						{
							"name": "Hire1PCount"
						},
						{
							"name": "JoinFilter2PHIR"
						},
						{
							"name": "HIR2PExist2PHC"
						},
						{
							"name": "Hire2PCount"
						},
						{
							"name": "JoinFilter3PHIR"
						},
						{
							"name": "HIR3PExist3PHC"
						},
						{
							"name": "Hire3PCount"
						},
						{
							"name": "JoinFilter4PHIR"
						},
						{
							"name": "HIR4PExist4PHC"
						},
						{
							"name": "Hire4PCount"
						},
						{
							"name": "Join4PHIRCount"
						},
						{
							"name": "Join3PHIRCount"
						},
						{
							"name": "Join2PHIRCount"
						},
						{
							"name": "Join1PHIRCount"
						},
						{
							"name": "JoinMaxHIRCount"
						},
						{
							"name": "SelectCoreDBFields"
						},
						{
							"name": "UnionWithCoreDB"
						},
						{
							"name": "RemoveDupsCore"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as integer,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CoreDB",
						"RemoveDupsCore filter({Event Code}=='HCT') ~> filter1",
						"RemoveDupsCore filter({Event Code}=='HCT') ~> HCTFilter",
						"filter1 aggregate({Event Year Last} = max({Event Year})) ~> MaxYear",
						"SelectWorkerAndYear, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMax",
						"filter1 aggregate({Event Year -1} = max({Event Year})-1) ~> MaxYearMinus1",
						"filter1 aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
						"filter1 aggregate({Event Year -3} = max({Event Year})-3) ~> MaxYearMinus3",
						"filter1 aggregate({Event Year -4} = max({Event Year})-4) ~> MaxYearMinus4",
						"HCTFilter select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerAndYear",
						"JoinMax aggregate(groupBy({Event Year Last}),",
						"     {Total Max} = count({Worker ID})) ~> TotalWorkersMaxYear",
						"SelectWorkerAndYear, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus1",
						"JoinMaxMinus1 aggregate(groupBy({Event Year -1}),",
						"     {Total Max -1} = count({Worker ID})) ~> TotalWorkersMaxYearMinus1",
						"SelectWorkerAndYear, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus2",
						"JoinMaxMinus2 aggregate(groupBy({Event Year -2}),",
						"     TotalWorkersMaxYearMinus2 = count({Worker ID})) ~> TotalWorkersMaxYearMinus2",
						"SelectWorkerAndYear, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus3",
						"JoinMaxMinus3 aggregate(groupBy({Event Year -3}),",
						"     TotalWorkersMaxYearMinus3 = count({Worker ID})) ~> TotalWorkersMaxYearMinus3",
						"SelectWorkerAndYear, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus4",
						"JoinMaxMinus4 aggregate(groupBy({Event Year -4}),",
						"     TotalWorkersMaxYearMinus4 = count({Worker ID})) ~> TotalWorkersMaxYearMinus4",
						"selectMax, selectMaxMinus1 join({Max Worker ID} == {1P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus1forCompare",
						"JoinMax select(mapColumn(",
						"          {Max Client ID} = {Client ID},",
						"          {Max Client Engagement Date} = {Client Engagement Date},",
						"          {Max Worker ID} = {Worker ID},",
						"          {Max Event Year} = {Event Year},",
						"          {Event Year Last}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMax",
						"JoinMaxMinus1 select(mapColumn(",
						"          {1P Client ID} = {Client ID},",
						"          {1P Client Engagement Date} = {Client Engagement Date},",
						"          {1P Worker ID} = {Worker ID},",
						"          {1P Event Year} = {Event Year},",
						"          {Event Year -1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus1",
						"JoinMaxMinus1forCompare aggregate(groupBy({Client ID} = {Max Client ID},",
						"          {Client Engagement Date} = {Max Client Engagement Date},",
						"          {1P Event Year},",
						"          {Max Event Year}),",
						"     {Total 1P HCT in Latest HCT} = count({1P Worker ID})) ~> aggregate1",
						"selectMaxMinus1, selectMaxMinus2 join({1P Worker ID} == {2P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus2forCompare",
						"JoinMaxMinus2forCompare aggregate(groupBy({Client ID} = {1P Client ID},",
						"          {Client Engagement Date} = {1P Client Engagement Date},",
						"          {2P Event Year},",
						"          {1P Event Year}),",
						"     {Total Max -2 in Max -1} = count({2P Worker ID})) ~> aggregate2",
						"JoinMaxMinus2 select(mapColumn(",
						"          {2P Client ID} = {Client ID},",
						"          {2P Client Engagement Date} = {Client Engagement Date},",
						"          {2P Worker ID} = {Worker ID},",
						"          {2P Event Year} = {Event Year},",
						"          {Event Year -2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus2",
						"selectMaxMinus2, selectMaxMinus3 join({2P Worker ID} == {3P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus3forCompare",
						"JoinMaxMinus3forCompare aggregate(groupBy({Client ID} = {2P Client ID},",
						"          {Client Engagement Date} = {2P Client Engagement Date},",
						"          {3P Event Year},",
						"          {2P Event Year}),",
						"     {Total Max -3 in Max -2} = count({3P Worker ID})) ~> aggregate3",
						"JoinMaxMinus3 select(mapColumn(",
						"          {3P Client ID} = {Client ID},",
						"          {3P Client Engagement Date} = {Client Engagement Date},",
						"          {3P Worker ID} = {Worker ID},",
						"          {3P Event Year} = {Event Year},",
						"          {Event Year -3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus3",
						"selectMaxMinus3, selectMaxMinus4 join({3P Worker ID} == {4P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus4forCompare",
						"JoinMaxMinus4 select(mapColumn(",
						"          {4P Client ID} = {Client ID},",
						"          {4P Client Engagement Date} = {Client Engagement Date},",
						"          {4P Worker ID} = {Worker ID},",
						"          {4P Event Year} = {Event Year},",
						"          {Event Year -4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus4",
						"JoinMaxMinus4forCompare aggregate(groupBy({Client ID} = {3P Client ID},",
						"          {Client Engagement Date} = {3P Client Engagement Date},",
						"          {4P Event Year},",
						"          {3P Event Year}),",
						"     {Total Max -4 in Max -3} = count({4P Worker ID})) ~> aggregate4",
						"aggregate1, TotalWorkersMaxYear join({Max Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinTotalMax",
						"JoinTotalMax select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {1P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total 1P HCT in Latest HCT},",
						"          {Compare Yr} = {Event Year Last},",
						"          {Compare Yr HCT} = {Total Max}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectMaxCompare",
						"aggregate2, TotalWorkersMaxYearMinus1 join({1P Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal1P",
						"JoinTotal1P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {2P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -2 in Max -1},",
						"          {Compare Yr} = {Event Year -1},",
						"          {Compare Yr HCT} = {Total Max -1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect1PCompare",
						"aggregate3, TotalWorkersMaxYearMinus2 join({2P Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal2P",
						"JoinTotal2P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {3P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -3 in Max -2},",
						"          {Compare Yr} = {Event Year -2},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect2PCompare",
						"aggregate4, TotalWorkersMaxYearMinus3 join({3P Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal3P",
						"JoinTotal3P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {4P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -4 in Max -3},",
						"          {Compare Yr} = {Event Year -3},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect3PCompare",
						"filter1 aggregate({Event Year -5} = max({Event Year})-5) ~> MaxYearMinus5",
						"SelectWorkerAndYear, MaxYearMinus5 join({Event Year} == {Event Year -5},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus5",
						"JoinMaxMinus5 select(mapColumn(",
						"          {5P Client ID} = {Client ID},",
						"          {5P Client Engagement Date} = {Client Engagement Date},",
						"          {5P Worker ID} = {Worker ID},",
						"          {5P Event Year} = {Event Year},",
						"          {Event Year -5}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus5",
						"JoinMaxMinus5 aggregate(TotalWorkersMaxYearMinus5 = count({Worker ID})) ~> TotalWorkersMaxYearMinus5",
						"selectMaxMinus4, selectMaxMinus5 join({4P Worker ID} == {5P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus5forCompare",
						"JoinMaxMinus5forCompare aggregate(groupBy({Client ID} = {4P Client ID},",
						"          {Client Engagement Date} = {4P Client Engagement Date},",
						"          {5P Event Year},",
						"          {4P Event Year}),",
						"     {Total Max -5 in Max -4} = count({4P Worker ID})) ~> aggregate5",
						"aggregate5, TotalWorkersMaxYearMinus4 join({4P Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal4P",
						"JoinTotal4P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {5P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -5 in Max -4},",
						"          {Compare Yr} = {Event Year -4},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect4PCompare",
						"FinalSelect1P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> CalcMaxPercent",
						"FinalSelect2P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc1PPercent",
						"FinalSelect3P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc2PPercent",
						"FinalSelect4P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc3PPercent",
						"FinalSelect5P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc4PPercent",
						"Calc4PPercent, Calc3PPercent, Calc2PPercent, Calc1PPercent, CalcMaxPercent union(byName: true)~> union1",
						"SelectTERColumns filter({Event Code}=='TER') ~> TERFilter",
						"TERFilter, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilterMaxTER",
						"TERFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter1PTER",
						"TERFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter2PTER",
						"TERFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter3PTER",
						"TERFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter4PTER",
						"RemoveDupsCore select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTERColumns",
						"JoinFilter4PTER, selectMaxMinus5 exists({Worker ID} == {5P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist5PHC",
						"MaxTERExist5PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations4PCount",
						"JoinFilter3PTER, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist4PHC",
						"MaxTERExist4PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations3PCount",
						"JoinFilter2PTER, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist3PHC",
						"MaxTERExist3PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations2PCount",
						"JoinFilter1PTER, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist2PHC",
						"MaxTERExist2PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations1PCount",
						"JoinFilterMaxTER, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist1PHC",
						"MaxTERExist1PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> TerminationsMaxCount",
						"FinalSelectMaxCompare, TerminationsMaxCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinMaxTERCount",
						"JoinMaxHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect1P",
						"FinalSelect1PCompare, Terminations1PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join1PTERCount",
						"Join1PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect2P",
						"FinalSelect2PCompare, Terminations2PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join2PTERCount",
						"Join2PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect3P",
						"FinalSelect3PCompare, Terminations3PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join3PTERCount",
						"Join3PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect4P",
						"FinalSelect4PCompare, Terminations4PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join4PTERCount",
						"Join4PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect5P",
						"SelectHIRColumns filter({Event Code}=='HIR') ~> HIRFilter",
						"RemoveDupsCore select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHIRColumns",
						"HIRFilter, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilterMaxHIR",
						"MaxHIRExistMaxHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> HireMaxCount",
						"JoinFilterMaxHIR, selectMax exists({Worker ID} == {Max Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> MaxHIRExistMaxHC",
						"HIRFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilter1PHIR",
						"JoinFilter1PHIR, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR1PExist1PHC",
						"HIR1PExist1PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire1PCount",
						"HIRFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilter2PHIR",
						"JoinFilter2PHIR, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR2PExist2PHC",
						"HIR2PExist2PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire2PCount",
						"HIRFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter3PHIR",
						"JoinFilter3PHIR, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR3PExist3PHC",
						"HIR3PExist3PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire3PCount",
						"HIRFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter4PHIR",
						"JoinFilter4PHIR, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR4PExist4PHC",
						"HIR4PExist4PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire4PCount",
						"Join4PTERCount, Hire4PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join4PHIRCount",
						"Join3PTERCount, Hire3PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join3PHIRCount",
						"Join2PTERCount, Hire2PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join2PHIRCount",
						"Join1PTERCount, Hire1PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join1PHIRCount",
						"JoinMaxTERCount, HireMaxCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinMaxHIRCount",
						"CoreDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreDBFields",
						"Core, SelectCoreDBFields union(byName: true)~> UnionWithCoreDB",
						"UnionWithCoreDB aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          {Event Code},",
						"          {Worker ID}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDupsCore",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs HCT Compare Over Time.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_TemplateTbl_PrepOtherAnalysis_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreTable"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "EventYearCurr"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "EventYearP1"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "EventYearP2"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "EventYearP3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputCurrTemplatePrep"
						},
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputP1TemplatePrep"
						},
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputP2TemplatePrep"
						},
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputP3TemplatePrep"
						}
					],
					"transformations": [
						{
							"name": "joinCurr"
						},
						{
							"name": "selectCurrColumns"
						},
						{
							"name": "joinP1"
						},
						{
							"name": "selectP1Columns"
						},
						{
							"name": "joinP2"
						},
						{
							"name": "selectP2Columns"
						},
						{
							"name": "joinP3"
						},
						{
							"name": "selectP3Columns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select EventType as Type, EventYear as Year, EventQuarter as Quarter from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By EventType, EventYear, EventQuarter\"),",
						"     format: 'query') ~> OtherCoreTable",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select MAX(EventYear) as Year from [dbo].[OtherCoreFactTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EventYearCurr",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select MAX(EventYear)-1 as Year from [dbo].[OtherCoreFactTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EventYearP1",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select MAX(EventYear)-2 as Year from [dbo].[OtherCoreFactTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EventYearP2",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select MAX(EventYear)-3 as Year from [dbo].[OtherCoreFactTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EventYearP3",
						"OtherCoreTable, EventYearCurr join(OtherCoreTable@Year == EventYearCurr@Year,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCurr",
						"joinCurr select(mapColumn(",
						"          Type,",
						"          Year = OtherCoreTable@Year,",
						"          Quarter",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrColumns",
						"OtherCoreTable, EventYearP1 join(OtherCoreTable@Year == EventYearP1@Year,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinP1",
						"joinP1 select(mapColumn(",
						"          Type,",
						"          Year = OtherCoreTable@Year,",
						"          Quarter",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Columns",
						"OtherCoreTable, EventYearP2 join(OtherCoreTable@Year == EventYearP2@Year,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinP2",
						"joinP2 select(mapColumn(",
						"          Type,",
						"          Year = OtherCoreTable@Year,",
						"          Quarter",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Columns",
						"OtherCoreTable, EventYearP3 join(OtherCoreTable@Year == EventYearP3@Year,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinP3",
						"joinP3 select(mapColumn(",
						"          Type,",
						"          Year = OtherCoreTable@Year,",
						"          Quarter,",
						"          Year = EventYearP3@Year",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Columns",
						"selectCurrColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreTableAnalysis_TemplatePrep_Curr.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputCurrTemplatePrep",
						"selectP1Columns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreTableAnalysis_TemplatePrep_P1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputP1TemplatePrep",
						"selectP2Columns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreTableAnalysis_TemplatePrep_P2.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputP2TemplatePrep",
						"selectP3Columns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreTableAnalysis_TemplatePrep_P3.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputP3TemplatePrep"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantFact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantFact",
						"ApplicantFact alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_ApplicantStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplStatusFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantStatus",
						"ApplicantStatus alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Client')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "ClientTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[ClientTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ClientTbl",
						"ClientTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DivSlateFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASlateFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DivSlateFactTbl",
						"DivSlateFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"OtherCoreFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingHistFactTbl",
						"PerfRatingHistFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "Requisition"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Requisition",
						"Requisition alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalistFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> SilverMedalistFactTbl",
						"SilverMedalistFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> SpeedbumpsFactTbl",
						"SpeedbumpsFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Talent')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "TalentFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> TalentFactTbl",
						"TalentFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_YearRef')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "YearRefTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[YearRefTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> YearRefTbl",
						"YearRefTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_OtherCoreAnalysis_Curr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Analysis Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisCurrTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisCurrTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          Curr_DataCollectionYear as integer,",
						"          Curr_DataCollectionQuarter as integer,",
						"          Curr_EventYear as integer,",
						"          Curr_T1Type as string,",
						"          Curr_T1OtherCharVal1 as string,",
						"          Curr_T1OtherCharVal2 as string,",
						"          Curr_T1OtherNumVal1 as double,",
						"          Curr_T1OtherNumVal2 as double,",
						"          Curr_T1OtherDtVal1 as date,",
						"          Curr_T1OtherDtVal2 as date,",
						"          Curr_T2Type as string,",
						"          Curr_T2OtherCharVal1 as string,",
						"          Curr_T2OtherCharVal2 as string,",
						"          Curr_T2OtherNumVal1 as double,",
						"          Curr_T2OtherNumVal2 as double,",
						"          Curr_T2OtherDtVal1 as date,",
						"          Curr_T2OtherDtVal2 as date,",
						"          Curr_T3Type as string,",
						"          Curr_T3OtherCharVal1 as string,",
						"          Curr_T3OtherCharVal2 as string,",
						"          Curr_T3OtherNumVal1 as double,",
						"          Curr_T3OtherNumVal2 as double,",
						"          Curr_T3OtherDtVal1 as date,",
						"          Curr_T3OtherDtVal2 as date,",
						"          Curr_T4Type as string,",
						"          Curr_T4OtherCharVal1 as string,",
						"          Curr_T4OtherCharVal2 as string,",
						"          Curr_T4OtherNumVal1 as double,",
						"          Curr_T4OtherNumVal2 as double,",
						"          Curr_T4OtherDtVal1 as date,",
						"          Curr_T4OtherDtVal2 as date,",
						"          Curr_T5Type as string,",
						"          Curr_T5OtherCharVal1 as string,",
						"          Curr_T5OtherCharVal2 as string,",
						"          Curr_T5OtherNumVal1 as double,",
						"          Curr_T5OtherNumVal2 as double,",
						"          Curr_T5OtherDtVal1 as date,",
						"          Curr_T5OtherDtVal2 as date,",
						"          Curr_T6Type as string,",
						"          Curr_T6OtherCharVal1 as string,",
						"          Curr_T6OtherCharVal2 as string,",
						"          Curr_T6OtherNumVal1 as double,",
						"          Curr_T6OtherNumVal2 as double,",
						"          Curr_T6OtherDtVal1 as date,",
						"          Curr_T6OtherDtVal2 as date,",
						"          Curr_T7Type as string,",
						"          Curr_T7OtherCharVal1 as string,",
						"          Curr_T7OtherCharVal2 as string,",
						"          Curr_T7OtherNumVal1 as double,",
						"          Curr_T7OtherNumVal2 as double,",
						"          Curr_T7OtherDtVal1 as date,",
						"          Curr_T7OtherDtVal2 as date,",
						"          Curr_T8Type as string,",
						"          Curr_T8OtherCharVal1 as string,",
						"          Curr_T8OtherCharVal2 as string,",
						"          Curr_T8OtherNumVal1 as double,",
						"          Curr_T8OtherNumVal2 as double,",
						"          Curr_T8OtherDtVal1 as date,",
						"          Curr_T8OtherDtVal2 as date,",
						"          Curr_T9Type as string,",
						"          Curr_T9OtherCharVal1 as string,",
						"          Curr_T9OtherCharVal2 as string,",
						"          Curr_T9OtherNumVal1 as double,",
						"          Curr_T9OtherNumVal2 as double,",
						"          Curr_T9OtherDtVal1 as date,",
						"          Curr_T9OtherDtVal2 as date,",
						"          Curr_T10Type as string,",
						"          Curr_T10OtherCharVal1 as string,",
						"          Curr_T10OtherCharVal2 as string,",
						"          Curr_T10OtherNumVal1 as double,",
						"          Curr_T10OtherNumVal2 as double,",
						"          Curr_T10OtherDtVal1 as date,",
						"          Curr_T10OtherDtVal2 as date,",
						"          Curr_T11Type as string,",
						"          Curr_T11OtherCharVal1 as string,",
						"          Curr_T11OtherCharVal2 as string,",
						"          Curr_T11OtherNumVal1 as double,",
						"          Curr_T11OtherNumVal2 as double,",
						"          Curr_T11OtherDtVal1 as date,",
						"          Curr_T11OtherDtVal2 as date,",
						"          Curr_T12Type as string,",
						"          Curr_T12OtherCharVal1 as string,",
						"          Curr_T12OtherCharVal2 as string,",
						"          Curr_T12OtherNumVal1 as double,",
						"          Curr_T12OtherNumVal2 as double,",
						"          Curr_T12OtherDtVal1 as date,",
						"          Curr_T12OtherDtVal2 as date,",
						"          Curr_T13Type as string,",
						"          Curr_T13OtherCharVal1 as string,",
						"          Curr_T13OtherCharVal2 as string,",
						"          Curr_T13OtherNumVal1 as double,",
						"          Curr_T13OtherNumVal2 as double,",
						"          Curr_T13OtherDtVal1 as date,",
						"          Curr_T13OtherDtVal2 as date,",
						"          Curr_T14Type as string,",
						"          Curr_T14OtherCharVal1 as string,",
						"          Curr_T14OtherCharVal2 as string,",
						"          Curr_T14OtherNumVal1 as double,",
						"          Curr_T14OtherNumVal2 as double,",
						"          Curr_T14OtherDtVal1 as date,",
						"          Curr_T14OtherDtVal2 as date,",
						"          Curr_T15Type as string,",
						"          Curr_T15OtherCharVal1 as string,",
						"          Curr_T15OtherCharVal2 as string,",
						"          Curr_T15OtherNumVal1 as double,",
						"          Curr_T15OtherNumVal2 as double,",
						"          Curr_T15OtherDtVal1 as date,",
						"          Curr_T15OtherDtVal2 as date,",
						"          Curr_T16Type as string,",
						"          Curr_T16OtherCharVal1 as string,",
						"          Curr_T16OtherCharVal2 as string,",
						"          Curr_T16OtherNumVal1 as double,",
						"          Curr_T16OtherNumVal2 as double,",
						"          Curr_T16OtherDtVal1 as date,",
						"          Curr_T16OtherDtVal2 as date,",
						"          Curr_T17Type as string,",
						"          Curr_T17OtherCharVal1 as string,",
						"          Curr_T17OtherCharVal2 as string,",
						"          Curr_T17OtherNumVal1 as double,",
						"          Curr_T17OtherNumVal2 as double,",
						"          Curr_T17OtherDtVal1 as date,",
						"          Curr_T17OtherDtVal2 as date,",
						"          Curr_T18Type as string,",
						"          Curr_T18OtherCharVal1 as string,",
						"          Curr_T18OtherCharVal2 as string,",
						"          Curr_T18OtherNumVal1 as double,",
						"          Curr_T18OtherNumVal2 as double,",
						"          Curr_T18OtherDtVal1 as date,",
						"          Curr_T18OtherDtVal2 as date,",
						"          Curr_T19Type as string,",
						"          Curr_T19OtherCharVal1 as string,",
						"          Curr_T19OtherCharVal2 as string,",
						"          Curr_T19OtherNumVal1 as double,",
						"          Curr_T19OtherNumVal2 as double,",
						"          Curr_T19OtherDtVal1 as date,",
						"          Curr_T19OtherDtVal2 as date,",
						"          Curr_T20Type as string,",
						"          Curr_T20OtherCharVal1 as string,",
						"          Curr_T20OtherCharVal2 as string,",
						"          Curr_T20OtherNumVal1 as double,",
						"          Curr_T20OtherNumVal2 as double,",
						"          Curr_T20OtherDtVal1 as date,",
						"          Curr_T20OtherDtVal2 as date,",
						"          Curr_T21Type as string,",
						"          Curr_T21OtherCharVal1 as string,",
						"          Curr_T21OtherCharVal2 as string,",
						"          Curr_T21OtherNumVal1 as double,",
						"          Curr_T21OtherNumVal2 as double,",
						"          Curr_T21OtherDtVal1 as date,",
						"          Curr_T21OtherDtVal2 as date,",
						"          Curr_T22Type as string,",
						"          Curr_T22OtherCharVal1 as string,",
						"          Curr_T22OtherCharVal2 as string,",
						"          Curr_T22OtherNumVal1 as double,",
						"          Curr_T22OtherNumVal2 as double,",
						"          Curr_T22OtherDtVal1 as date,",
						"          Curr_T22OtherDtVal2 as date,",
						"          Curr_T23Type as string,",
						"          Curr_T23OtherCharVal1 as string,",
						"          Curr_T23OtherCharVal2 as string,",
						"          Curr_T23OtherNumVal1 as double,",
						"          Curr_T23OtherNumVal2 as double,",
						"          Curr_T23OtherDtVal1 as date,",
						"          Curr_T23OtherDtVal2 as date,",
						"          Curr_T24Type as string,",
						"          Curr_T24OtherCharVal1 as string,",
						"          Curr_T24OtherCharVal2 as string,",
						"          Curr_T24OtherNumVal1 as double,",
						"          Curr_T24OtherNumVal2 as double,",
						"          Curr_T24OtherDtVal1 as date,",
						"          Curr_T24OtherDtVal2 as date,",
						"          Curr_T25Type as string,",
						"          Curr_T25OtherCharVal1 as string,",
						"          Curr_T25OtherCharVal2 as string,",
						"          Curr_T25OtherNumVal1 as double,",
						"          Curr_T25OtherNumVal2 as double,",
						"          Curr_T25OtherDtVal1 as date,",
						"          Curr_T25OtherDtVal2 as date,",
						"          Curr_T26Type as string,",
						"          Curr_T26OtherCharVal1 as string,",
						"          Curr_T26OtherCharVal2 as string,",
						"          Curr_T26OtherNumVal1 as double,",
						"          Curr_T26OtherNumVal2 as double,",
						"          Curr_T26OtherDtVal1 as date,",
						"          Curr_T26OtherDtVal2 as date,",
						"          Curr_T27Type as string,",
						"          Curr_T27OtherCharVal1 as string,",
						"          Curr_T27OtherCharVal2 as string,",
						"          Curr_T27OtherNumVal1 as double,",
						"          Curr_T27OtherNumVal2 as double,",
						"          Curr_T27OtherDtVal1 as date,",
						"          Curr_T27OtherDtVal2 as date,",
						"          Curr_T28Type as string,",
						"          Curr_T28OtherCharVal1 as string,",
						"          Curr_T28OtherCharVal2 as string,",
						"          Curr_T28OtherNumVal1 as double,",
						"          Curr_T28OtherNumVal2 as double,",
						"          Curr_T28OtherDtVal1 as date,",
						"          Curr_T28OtherDtVal2 as date,",
						"          Curr_T29Type as string,",
						"          Curr_T29OtherCharVal1 as string,",
						"          Curr_T29OtherCharVal2 as string,",
						"          Curr_T29OtherNumVal1 as double,",
						"          Curr_T29OtherNumVal2 as double,",
						"          Curr_T29OtherDtVal1 as date,",
						"          Curr_T29OtherDtVal2 as date,",
						"          Curr_T30Type as string,",
						"          Curr_T30OtherCharVal1 as string,",
						"          Curr_T30OtherCharVal2 as string,",
						"          Curr_T30OtherNumVal1 as double,",
						"          Curr_T30OtherNumVal2 as double,",
						"          Curr_T30OtherDtVal1 as date,",
						"          Curr_T30OtherDtVal2 as date,",
						"          Curr_T31Type as string,",
						"          Curr_T31OtherCharVal1 as string,",
						"          Curr_T31OtherCharVal2 as string,",
						"          Curr_T31OtherNumVal1 as double,",
						"          Curr_T31OtherNumVal2 as double,",
						"          Curr_T31OtherDtVal1 as date,",
						"          Curr_T31OtherDtVal2 as date,",
						"          Curr_T32Type as string,",
						"          Curr_T32OtherCharVal1 as string,",
						"          Curr_T32OtherCharVal2 as string,",
						"          Curr_T32OtherNumVal1 as double,",
						"          Curr_T32OtherNumVal2 as double,",
						"          Curr_T32OtherDtVal1 as date,",
						"          Curr_T32OtherDtVal2 as date,",
						"          Curr_T33Type as string,",
						"          Curr_T33OtherCharVal1 as string,",
						"          Curr_T33OtherCharVal2 as string,",
						"          Curr_T33OtherNumVal1 as double,",
						"          Curr_T33OtherNumVal2 as double,",
						"          Curr_T33OtherDtVal1 as date,",
						"          Curr_T33OtherDtVal2 as date,",
						"          Curr_T34Type as string,",
						"          Curr_T34OtherCharVal1 as string,",
						"          Curr_T34OtherCharVal2 as string,",
						"          Curr_T34OtherNumVal1 as double,",
						"          Curr_T34OtherNumVal2 as double,",
						"          Curr_T34OtherDtVal1 as date,",
						"          Curr_T34OtherDtVal2 as date,",
						"          Curr_T35Type as string,",
						"          Curr_T35OtherCharVal1 as string,",
						"          Curr_T35OtherCharVal2 as string,",
						"          Curr_T35OtherNumVal1 as double,",
						"          Curr_T35OtherNumVal2 as double,",
						"          Curr_T35OtherDtVal1 as date,",
						"          Curr_T35OtherDtVal2 as date,",
						"          Curr_T36Type as string,",
						"          Curr_T36OtherCharVal1 as string,",
						"          Curr_T36OtherCharVal2 as string,",
						"          Curr_T36OtherNumVal1 as double,",
						"          Curr_T36OtherNumVal2 as double,",
						"          Curr_T36OtherDtVal1 as date,",
						"          Curr_T36OtherDtVal2 as date,",
						"          Curr_T37Type as string,",
						"          Curr_T37OtherCharVal1 as string,",
						"          Curr_T37OtherCharVal2 as string,",
						"          Curr_T37OtherNumVal1 as double,",
						"          Curr_T37OtherNumVal2 as double,",
						"          Curr_T37OtherDtVal1 as date,",
						"          Curr_T37OtherDtVal2 as date,",
						"          Curr_T38Type as string,",
						"          Curr_T38OtherCharVal1 as string,",
						"          Curr_T38OtherCharVal2 as string,",
						"          Curr_T38OtherNumVal1 as double,",
						"          Curr_T38OtherNumVal2 as double,",
						"          Curr_T38OtherDtVal1 as date,",
						"          Curr_T38OtherDtVal2 as date,",
						"          Curr_T39Type as string,",
						"          Curr_T39OtherCharVal1 as string,",
						"          Curr_T39OtherCharVal2 as string,",
						"          Curr_T39OtherNumVal1 as double,",
						"          Curr_T39OtherNumVal2 as double,",
						"          Curr_T39OtherDtVal1 as date,",
						"          Curr_T39OtherDtVal2 as date,",
						"          Curr_T40Type as string,",
						"          Curr_T40OtherCharVal1 as string,",
						"          Curr_T40OtherCharVal2 as string,",
						"          Curr_T40OtherNumVal1 as double,",
						"          Curr_T40OtherNumVal2 as double,",
						"          Curr_T40OtherDtVal1 as date,",
						"          Curr_T40OtherDtVal2 as date,",
						"          Curr_T41Type as string,",
						"          Curr_T41OtherCharVal1 as string,",
						"          Curr_T41OtherCharVal2 as string,",
						"          Curr_T41OtherNumVal1 as double,",
						"          Curr_T41OtherNumVal2 as double,",
						"          Curr_T41OtherDtVal1 as date,",
						"          Curr_T41OtherDtVal2 as date,",
						"          Curr_T42Type as string,",
						"          Curr_T42OtherCharVal1 as string,",
						"          Curr_T42OtherCharVal2 as string,",
						"          Curr_T42OtherNumVal1 as double,",
						"          Curr_T42OtherNumVal2 as double,",
						"          Curr_T42OtherDtVal1 as date,",
						"          Curr_T42OtherDtVal2 as date,",
						"          Curr_T43Type as string,",
						"          Curr_T43OtherCharVal1 as string,",
						"          Curr_T43OtherCharVal2 as string,",
						"          Curr_T43OtherNumVal1 as double,",
						"          Curr_T43OtherNumVal2 as double,",
						"          Curr_T43OtherDtVal1 as date,",
						"          Curr_T43OtherDtVal2 as date,",
						"          Curr_T44Type as string,",
						"          Curr_T44OtherCharVal1 as string,",
						"          Curr_T44OtherCharVal2 as string,",
						"          Curr_T44OtherNumVal1 as double,",
						"          Curr_T44OtherNumVal2 as double,",
						"          Curr_T44OtherDtVal1 as date,",
						"          Curr_T44OtherDtVal2 as date,",
						"          Curr_T45Type as string,",
						"          Curr_T45OtherCharVal1 as string,",
						"          Curr_T45OtherCharVal2 as string,",
						"          Curr_T45OtherNumVal1 as double,",
						"          Curr_T45OtherNumVal2 as double,",
						"          Curr_T45OtherDtVal1 as date,",
						"          Curr_T45OtherDtVal2 as date,",
						"          Curr_T46Type as string,",
						"          Curr_T46OtherCharVal1 as string,",
						"          Curr_T46OtherCharVal2 as string,",
						"          Curr_T46OtherNumVal1 as double,",
						"          Curr_T46OtherNumVal2 as double,",
						"          Curr_T46OtherDtVal1 as date,",
						"          Curr_T46OtherDtVal2 as date,",
						"          Curr_T47Type as string,",
						"          Curr_T47OtherCharVal1 as string,",
						"          Curr_T47OtherCharVal2 as string,",
						"          Curr_T47OtherNumVal1 as double,",
						"          Curr_T47OtherNumVal2 as double,",
						"          Curr_T47OtherDtVal1 as date,",
						"          Curr_T47OtherDtVal2 as date,",
						"          Curr_T48Type as string,",
						"          Curr_T48OtherCharVal1 as string,",
						"          Curr_T48OtherCharVal2 as string,",
						"          Curr_T48OtherNumVal1 as double,",
						"          Curr_T48OtherNumVal2 as double,",
						"          Curr_T48OtherDtVal1 as date,",
						"          Curr_T48OtherDtVal2 as date,",
						"          Curr_T49Type as string,",
						"          Curr_T49OtherCharVal1 as string,",
						"          Curr_T49OtherCharVal2 as string,",
						"          Curr_T49OtherNumVal1 as double,",
						"          Curr_T49OtherNumVal2 as double,",
						"          Curr_T49OtherDtVal1 as date,",
						"          Curr_T49OtherDtVal2 as date,",
						"          Curr_T50Type as string,",
						"          Curr_T50OtherCharVal1 as string,",
						"          Curr_T50OtherCharVal2 as string,",
						"          Curr_T50OtherNumVal1 as double,",
						"          Curr_T50OtherNumVal2 as double,",
						"          Curr_T50OtherDtVal1 as date,",
						"          Curr_T50OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreAnalysisCurrTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"OtherCoreFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          Curr_DataCollectionYear as integer,",
						"          Curr_DataCollectionQuarter as integer,",
						"          Curr_EventYear as integer,",
						"          Curr_T1Type as string,",
						"          Curr_T1OtherCharVal1 as string,",
						"          Curr_T1OtherCharVal2 as string,",
						"          Curr_T1OtherNumVal1 as double,",
						"          Curr_T1OtherNumVal2 as double,",
						"          Curr_T1OtherDtVal1 as date,",
						"          Curr_T1OtherDtVal2 as date,",
						"          Curr_T2Type as string,",
						"          Curr_T2OtherCharVal1 as string,",
						"          Curr_T2OtherCharVal2 as string,",
						"          Curr_T2OtherNumVal1 as double,",
						"          Curr_T2OtherNumVal2 as double,",
						"          Curr_T2OtherDtVal1 as date,",
						"          Curr_T2OtherDtVal2 as date,",
						"          Curr_T3Type as string,",
						"          Curr_T3OtherCharVal1 as string,",
						"          Curr_T3OtherCharVal2 as string,",
						"          Curr_T3OtherNumVal1 as double,",
						"          Curr_T3OtherNumVal2 as double,",
						"          Curr_T3OtherDtVal1 as date,",
						"          Curr_T3OtherDtVal2 as date,",
						"          Curr_T4Type as string,",
						"          Curr_T4OtherCharVal1 as string,",
						"          Curr_T4OtherCharVal2 as string,",
						"          Curr_T4OtherNumVal1 as double,",
						"          Curr_T4OtherNumVal2 as double,",
						"          Curr_T4OtherDtVal1 as date,",
						"          Curr_T4OtherDtVal2 as date,",
						"          Curr_T5Type as string,",
						"          Curr_T5OtherCharVal1 as string,",
						"          Curr_T5OtherCharVal2 as string,",
						"          Curr_T5OtherNumVal1 as double,",
						"          Curr_T5OtherNumVal2 as double,",
						"          Curr_T5OtherDtVal1 as date,",
						"          Curr_T5OtherDtVal2 as date,",
						"          Curr_T6Type as string,",
						"          Curr_T6OtherCharVal1 as string,",
						"          Curr_T6OtherCharVal2 as string,",
						"          Curr_T6OtherNumVal1 as double,",
						"          Curr_T6OtherNumVal2 as double,",
						"          Curr_T6OtherDtVal1 as date,",
						"          Curr_T6OtherDtVal2 as date,",
						"          Curr_T7Type as string,",
						"          Curr_T7OtherCharVal1 as string,",
						"          Curr_T7OtherCharVal2 as string,",
						"          Curr_T7OtherNumVal1 as double,",
						"          Curr_T7OtherNumVal2 as double,",
						"          Curr_T7OtherDtVal1 as date,",
						"          Curr_T7OtherDtVal2 as date,",
						"          Curr_T8Type as string,",
						"          Curr_T8OtherCharVal1 as string,",
						"          Curr_T8OtherCharVal2 as string,",
						"          Curr_T8OtherNumVal1 as double,",
						"          Curr_T8OtherNumVal2 as double,",
						"          Curr_T8OtherDtVal1 as date,",
						"          Curr_T8OtherDtVal2 as date,",
						"          Curr_T9Type as string,",
						"          Curr_T9OtherCharVal1 as string,",
						"          Curr_T9OtherCharVal2 as string,",
						"          Curr_T9OtherNumVal1 as double,",
						"          Curr_T9OtherNumVal2 as double,",
						"          Curr_T9OtherDtVal1 as date,",
						"          Curr_T9OtherDtVal2 as date,",
						"          Curr_T10Type as string,",
						"          Curr_T10OtherCharVal1 as string,",
						"          Curr_T10OtherCharVal2 as string,",
						"          Curr_T10OtherNumVal1 as double,",
						"          Curr_T10OtherNumVal2 as double,",
						"          Curr_T10OtherDtVal1 as date,",
						"          Curr_T10OtherDtVal2 as date,",
						"          Curr_T11Type as string,",
						"          Curr_T11OtherCharVal1 as string,",
						"          Curr_T11OtherCharVal2 as string,",
						"          Curr_T11OtherNumVal1 as double,",
						"          Curr_T11OtherNumVal2 as double,",
						"          Curr_T11OtherDtVal1 as date,",
						"          Curr_T11OtherDtVal2 as date,",
						"          Curr_T12Type as string,",
						"          Curr_T12OtherCharVal1 as string,",
						"          Curr_T12OtherCharVal2 as string,",
						"          Curr_T12OtherNumVal1 as double,",
						"          Curr_T12OtherNumVal2 as double,",
						"          Curr_T12OtherDtVal1 as date,",
						"          Curr_T12OtherDtVal2 as date,",
						"          Curr_T13Type as string,",
						"          Curr_T13OtherCharVal1 as string,",
						"          Curr_T13OtherCharVal2 as string,",
						"          Curr_T13OtherNumVal1 as double,",
						"          Curr_T13OtherNumVal2 as double,",
						"          Curr_T13OtherDtVal1 as date,",
						"          Curr_T13OtherDtVal2 as date,",
						"          Curr_T14Type as string,",
						"          Curr_T14OtherCharVal1 as string,",
						"          Curr_T14OtherCharVal2 as string,",
						"          Curr_T14OtherNumVal1 as double,",
						"          Curr_T14OtherNumVal2 as double,",
						"          Curr_T14OtherDtVal1 as date,",
						"          Curr_T14OtherDtVal2 as date,",
						"          Curr_T15Type as string,",
						"          Curr_T15OtherCharVal1 as string,",
						"          Curr_T15OtherCharVal2 as string,",
						"          Curr_T15OtherNumVal1 as double,",
						"          Curr_T15OtherNumVal2 as double,",
						"          Curr_T15OtherDtVal1 as date,",
						"          Curr_T15OtherDtVal2 as date,",
						"          Curr_T16Type as string,",
						"          Curr_T16OtherCharVal1 as string,",
						"          Curr_T16OtherCharVal2 as string,",
						"          Curr_T16OtherNumVal1 as double,",
						"          Curr_T16OtherNumVal2 as double,",
						"          Curr_T16OtherDtVal1 as date,",
						"          Curr_T16OtherDtVal2 as date,",
						"          Curr_T17Type as string,",
						"          Curr_T17OtherCharVal1 as string,",
						"          Curr_T17OtherCharVal2 as string,",
						"          Curr_T17OtherNumVal1 as double,",
						"          Curr_T17OtherNumVal2 as double,",
						"          Curr_T17OtherDtVal1 as date,",
						"          Curr_T17OtherDtVal2 as date,",
						"          Curr_T18Type as string,",
						"          Curr_T18OtherCharVal1 as string,",
						"          Curr_T18OtherCharVal2 as string,",
						"          Curr_T18OtherNumVal1 as double,",
						"          Curr_T18OtherNumVal2 as double,",
						"          Curr_T18OtherDtVal1 as date,",
						"          Curr_T18OtherDtVal2 as date,",
						"          Curr_T19Type as string,",
						"          Curr_T19OtherCharVal1 as string,",
						"          Curr_T19OtherCharVal2 as string,",
						"          Curr_T19OtherNumVal1 as double,",
						"          Curr_T19OtherNumVal2 as double,",
						"          Curr_T19OtherDtVal1 as date,",
						"          Curr_T19OtherDtVal2 as date,",
						"          Curr_T20Type as string,",
						"          Curr_T20OtherCharVal1 as string,",
						"          Curr_T20OtherCharVal2 as string,",
						"          Curr_T20OtherNumVal1 as double,",
						"          Curr_T20OtherNumVal2 as double,",
						"          Curr_T20OtherDtVal1 as date,",
						"          Curr_T20OtherDtVal2 as date,",
						"          Curr_T21Type as string,",
						"          Curr_T21OtherCharVal1 as string,",
						"          Curr_T21OtherCharVal2 as string,",
						"          Curr_T21OtherNumVal1 as double,",
						"          Curr_T21OtherNumVal2 as double,",
						"          Curr_T21OtherDtVal1 as date,",
						"          Curr_T21OtherDtVal2 as date,",
						"          Curr_T22Type as string,",
						"          Curr_T22OtherCharVal1 as string,",
						"          Curr_T22OtherCharVal2 as string,",
						"          Curr_T22OtherNumVal1 as double,",
						"          Curr_T22OtherNumVal2 as double,",
						"          Curr_T22OtherDtVal1 as date,",
						"          Curr_T22OtherDtVal2 as date,",
						"          Curr_T23Type as string,",
						"          Curr_T23OtherCharVal1 as string,",
						"          Curr_T23OtherCharVal2 as string,",
						"          Curr_T23OtherNumVal1 as double,",
						"          Curr_T23OtherNumVal2 as double,",
						"          Curr_T23OtherDtVal1 as date,",
						"          Curr_T23OtherDtVal2 as date,",
						"          Curr_T24Type as string,",
						"          Curr_T24OtherCharVal1 as string,",
						"          Curr_T24OtherCharVal2 as string,",
						"          Curr_T24OtherNumVal1 as double,",
						"          Curr_T24OtherNumVal2 as double,",
						"          Curr_T24OtherDtVal1 as date,",
						"          Curr_T24OtherDtVal2 as date,",
						"          Curr_T25Type as string,",
						"          Curr_T25OtherCharVal1 as string,",
						"          Curr_T25OtherCharVal2 as string,",
						"          Curr_T25OtherNumVal1 as double,",
						"          Curr_T25OtherNumVal2 as double,",
						"          Curr_T25OtherDtVal1 as date,",
						"          Curr_T25OtherDtVal2 as date,",
						"          Curr_T26Type as string,",
						"          Curr_T26OtherCharVal1 as string,",
						"          Curr_T26OtherCharVal2 as string,",
						"          Curr_T26OtherNumVal1 as double,",
						"          Curr_T26OtherNumVal2 as double,",
						"          Curr_T26OtherDtVal1 as date,",
						"          Curr_T26OtherDtVal2 as date,",
						"          Curr_T27Type as string,",
						"          Curr_T27OtherCharVal1 as string,",
						"          Curr_T27OtherCharVal2 as string,",
						"          Curr_T27OtherNumVal1 as double,",
						"          Curr_T27OtherNumVal2 as double,",
						"          Curr_T27OtherDtVal1 as date,",
						"          Curr_T27OtherDtVal2 as date,",
						"          Curr_T28Type as string,",
						"          Curr_T28OtherCharVal1 as string,",
						"          Curr_T28OtherCharVal2 as string,",
						"          Curr_T28OtherNumVal1 as double,",
						"          Curr_T28OtherNumVal2 as double,",
						"          Curr_T28OtherDtVal1 as date,",
						"          Curr_T28OtherDtVal2 as date,",
						"          Curr_T29Type as string,",
						"          Curr_T29OtherCharVal1 as string,",
						"          Curr_T29OtherCharVal2 as string,",
						"          Curr_T29OtherNumVal1 as double,",
						"          Curr_T29OtherNumVal2 as double,",
						"          Curr_T29OtherDtVal1 as date,",
						"          Curr_T29OtherDtVal2 as date,",
						"          Curr_T30Type as string,",
						"          Curr_T30OtherCharVal1 as string,",
						"          Curr_T30OtherCharVal2 as string,",
						"          Curr_T30OtherNumVal1 as double,",
						"          Curr_T30OtherNumVal2 as double,",
						"          Curr_T30OtherDtVal1 as date,",
						"          Curr_T30OtherDtVal2 as date,",
						"          Curr_T31Type as string,",
						"          Curr_T31OtherCharVal1 as string,",
						"          Curr_T31OtherCharVal2 as string,",
						"          Curr_T31OtherNumVal1 as double,",
						"          Curr_T31OtherNumVal2 as double,",
						"          Curr_T31OtherDtVal1 as date,",
						"          Curr_T31OtherDtVal2 as date,",
						"          Curr_T32Type as string,",
						"          Curr_T32OtherCharVal1 as string,",
						"          Curr_T32OtherCharVal2 as string,",
						"          Curr_T32OtherNumVal1 as double,",
						"          Curr_T32OtherNumVal2 as double,",
						"          Curr_T32OtherDtVal1 as date,",
						"          Curr_T32OtherDtVal2 as date,",
						"          Curr_T33Type as string,",
						"          Curr_T33OtherCharVal1 as string,",
						"          Curr_T33OtherCharVal2 as string,",
						"          Curr_T33OtherNumVal1 as double,",
						"          Curr_T33OtherNumVal2 as double,",
						"          Curr_T33OtherDtVal1 as date,",
						"          Curr_T33OtherDtVal2 as date,",
						"          Curr_T34Type as string,",
						"          Curr_T34OtherCharVal1 as string,",
						"          Curr_T34OtherCharVal2 as string,",
						"          Curr_T34OtherNumVal1 as double,",
						"          Curr_T34OtherNumVal2 as double,",
						"          Curr_T34OtherDtVal1 as date,",
						"          Curr_T34OtherDtVal2 as date,",
						"          Curr_T35Type as string,",
						"          Curr_T35OtherCharVal1 as string,",
						"          Curr_T35OtherCharVal2 as string,",
						"          Curr_T35OtherNumVal1 as double,",
						"          Curr_T35OtherNumVal2 as double,",
						"          Curr_T35OtherDtVal1 as date,",
						"          Curr_T35OtherDtVal2 as date,",
						"          Curr_T36Type as string,",
						"          Curr_T36OtherCharVal1 as string,",
						"          Curr_T36OtherCharVal2 as string,",
						"          Curr_T36OtherNumVal1 as double,",
						"          Curr_T36OtherNumVal2 as double,",
						"          Curr_T36OtherDtVal1 as date,",
						"          Curr_T36OtherDtVal2 as date,",
						"          Curr_T37Type as string,",
						"          Curr_T37OtherCharVal1 as string,",
						"          Curr_T37OtherCharVal2 as string,",
						"          Curr_T37OtherNumVal1 as double,",
						"          Curr_T37OtherNumVal2 as double,",
						"          Curr_T37OtherDtVal1 as date,",
						"          Curr_T37OtherDtVal2 as date,",
						"          Curr_T38Type as string,",
						"          Curr_T38OtherCharVal1 as string,",
						"          Curr_T38OtherCharVal2 as string,",
						"          Curr_T38OtherNumVal1 as double,",
						"          Curr_T38OtherNumVal2 as double,",
						"          Curr_T38OtherDtVal1 as date,",
						"          Curr_T38OtherDtVal2 as date,",
						"          Curr_T39Type as string,",
						"          Curr_T39OtherCharVal1 as string,",
						"          Curr_T39OtherCharVal2 as string,",
						"          Curr_T39OtherNumVal1 as double,",
						"          Curr_T39OtherNumVal2 as double,",
						"          Curr_T39OtherDtVal1 as date,",
						"          Curr_T39OtherDtVal2 as date,",
						"          Curr_T40Type as string,",
						"          Curr_T40OtherCharVal1 as string,",
						"          Curr_T40OtherCharVal2 as string,",
						"          Curr_T40OtherNumVal1 as double,",
						"          Curr_T40OtherNumVal2 as double,",
						"          Curr_T40OtherDtVal1 as date,",
						"          Curr_T40OtherDtVal2 as date,",
						"          Curr_T41Type as string,",
						"          Curr_T41OtherCharVal1 as string,",
						"          Curr_T41OtherCharVal2 as string,",
						"          Curr_T41OtherNumVal1 as double,",
						"          Curr_T41OtherNumVal2 as double,",
						"          Curr_T41OtherDtVal1 as date,",
						"          Curr_T41OtherDtVal2 as date,",
						"          Curr_T42Type as string,",
						"          Curr_T42OtherCharVal1 as string,",
						"          Curr_T42OtherCharVal2 as string,",
						"          Curr_T42OtherNumVal1 as double,",
						"          Curr_T42OtherNumVal2 as double,",
						"          Curr_T42OtherDtVal1 as date,",
						"          Curr_T42OtherDtVal2 as date,",
						"          Curr_T43Type as string,",
						"          Curr_T43OtherCharVal1 as string,",
						"          Curr_T43OtherCharVal2 as string,",
						"          Curr_T43OtherNumVal1 as double,",
						"          Curr_T43OtherNumVal2 as double,",
						"          Curr_T43OtherDtVal1 as date,",
						"          Curr_T43OtherDtVal2 as date,",
						"          Curr_T44Type as string,",
						"          Curr_T44OtherCharVal1 as string,",
						"          Curr_T44OtherCharVal2 as string,",
						"          Curr_T44OtherNumVal1 as double,",
						"          Curr_T44OtherNumVal2 as double,",
						"          Curr_T44OtherDtVal1 as date,",
						"          Curr_T44OtherDtVal2 as date,",
						"          Curr_T45Type as string,",
						"          Curr_T45OtherCharVal1 as string,",
						"          Curr_T45OtherCharVal2 as string,",
						"          Curr_T45OtherNumVal1 as double,",
						"          Curr_T45OtherNumVal2 as double,",
						"          Curr_T45OtherDtVal1 as date,",
						"          Curr_T45OtherDtVal2 as date,",
						"          Curr_T46Type as string,",
						"          Curr_T46OtherCharVal1 as string,",
						"          Curr_T46OtherCharVal2 as string,",
						"          Curr_T46OtherNumVal1 as double,",
						"          Curr_T46OtherNumVal2 as double,",
						"          Curr_T46OtherDtVal1 as date,",
						"          Curr_T46OtherDtVal2 as date,",
						"          Curr_T47Type as string,",
						"          Curr_T47OtherCharVal1 as string,",
						"          Curr_T47OtherCharVal2 as string,",
						"          Curr_T47OtherNumVal1 as double,",
						"          Curr_T47OtherNumVal2 as double,",
						"          Curr_T47OtherDtVal1 as date,",
						"          Curr_T47OtherDtVal2 as date,",
						"          Curr_T48Type as string,",
						"          Curr_T48OtherCharVal1 as string,",
						"          Curr_T48OtherCharVal2 as string,",
						"          Curr_T48OtherNumVal1 as double,",
						"          Curr_T48OtherNumVal2 as double,",
						"          Curr_T48OtherDtVal1 as date,",
						"          Curr_T48OtherDtVal2 as date,",
						"          Curr_T49Type as string,",
						"          Curr_T49OtherCharVal1 as string,",
						"          Curr_T49OtherCharVal2 as string,",
						"          Curr_T49OtherNumVal1 as double,",
						"          Curr_T49OtherNumVal2 as double,",
						"          Curr_T49OtherDtVal1 as date,",
						"          Curr_T49OtherDtVal2 as date,",
						"          Curr_T50Type as string,",
						"          Curr_T50OtherCharVal1 as string,",
						"          Curr_T50OtherCharVal2 as string,",
						"          Curr_T50OtherNumVal1 as double,",
						"          Curr_T50OtherNumVal2 as double,",
						"          Curr_T50OtherDtVal1 as date,",
						"          Curr_T50OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"OtherCoreFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Speedbmps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "Speedbumps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> Speedbumps",
						"Speedbumps alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt','EventQuarter','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_SB_Year as string,",
						"     Flow_SB_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> SpeedbumpsFactTbl",
						"SpeedbumpsFactTbl alterRow(deleteIf(EventQuarter==toInteger($Flow_SB_Quarter)),",
						"     deleteIf(EventYear==toInteger($Flow_SB_Year))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt','EventQuarter','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantFlowMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantFlowMap",
						"ApplicantFlowMap alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		}
	]
}