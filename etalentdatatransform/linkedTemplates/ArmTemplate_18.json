{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_DivSlate_File",
								"type": "DatasetReference"
							},
							"name": "DivSlate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendDivSlateFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveNullRows"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Requisition ID} as string,",
						"          {Event Year} as short,",
						"          {Candidates StM} as integer,",
						"          {Internal Candidates StM} as integer,",
						"          {External Candidates StM} as integer,",
						"          {Candidates Hired} as integer,",
						"          {Internal Candidates Hired} as integer,",
						"          {External Candidates Hired} as integer,",
						"          {White Candidates StM} as integer,",
						"          {Internal White Candidates StM} as integer,",
						"          {External White Candidates StM} as integer,",
						"          {White Candidates Hired} as integer,",
						"          {Internal White Candidates Hired} as integer,",
						"          {External White Candidates Hired} as integer,",
						"          {Black Candidates StM} as integer,",
						"          {Internal Black Candidates StM} as integer,",
						"          {External Black Candidates StM} as integer,",
						"          {Black Candidates Hired} as integer,",
						"          {Internal Black Candidates Hired} as integer,",
						"          {External Black Candidates Hired} as integer,",
						"          {Latinx Candidates StM} as integer,",
						"          {Internal Latinx Candidates StM} as integer,",
						"          {External Latinx Candidates StM} as integer,",
						"          {Latinx Candidates Hired} as integer,",
						"          {Internal Latinx Candidates Hired} as integer,",
						"          {External Latinx Candidates Hired} as integer,",
						"          {Asian Candidates StM} as integer,",
						"          {Internal Asian Candidates StM} as integer,",
						"          {External Asian Candidates StM} as integer,",
						"          {Asian Candidates Hired} as integer,",
						"          {Internal Asian Candidates Hired} as integer,",
						"          {External Asian Candidates Hired} as integer,",
						"          {2+ Races Candidates StM} as integer,",
						"          {Internal 2+ Races Candidates StM} as integer,",
						"          {External 2+ Races Candidates StM} as integer,",
						"          {2+ Races Candidates Hired} as integer,",
						"          {Internal 2+ Races Candidates Hired} as integer,",
						"          {External 2+ Races Candidates Hired} as integer,",
						"          {Other Candidates StM} as integer,",
						"          {Internal Other Candidates StM} as integer,",
						"          {External Other Candidates StM} as integer,",
						"          {Other Candidates Hired} as integer,",
						"          {Internal Other Candidates Hired} as integer,",
						"          {External Other Candidates Hired} as integer,",
						"          {Male Candidates StM} as integer,",
						"          {Internal Male Candidates StM} as integer,",
						"          {External Male Candidates StM} as integer,",
						"          {Male Candidates Hired} as integer,",
						"          {Internal Male Candidates Hired} as integer,",
						"          {External Male Candidates Hired} as integer,",
						"          {Female Candidates StM} as integer,",
						"          {Internal Female Candidates StM} as integer,",
						"          {External Female Candidates StM} as integer,",
						"          {Female Candidates Hired} as integer,",
						"          {Internal Female Candidates Hired} as integer,",
						"          {External Female Candidates Hired} as integer,",
						"          {Other Gender Candidates StM} as integer,",
						"          {Internal Other Gender Candidates StM} as integer,",
						"          {External Other Gender Candidates StM} as integer,",
						"          {Other Gender Candidates Hired} as integer,",
						"          {Internal Other Gender Candidates Hired} as integer,",
						"          {External Other Gender Candidates Hired} as integer,",
						"          {PoC Candidates StM} as integer,",
						"          {Internal PoC Candidates StM} as integer,",
						"          {External PoC Candidates StM} as integer,",
						"          {PoC  Candidates Hired} as integer,",
						"          {Internal PoC  Candidates Hired} as integer,",
						"          {External PoC  Candidates Hired} as integer,",
						"          {Diverse Candidates StM} as integer,",
						"          {Internal Diverse Candidates StM} as integer,",
						"          {External Diverse Candidates StM} as integer,",
						"          {Diverse Candidates Hired} as integer,",
						"          {Internal Diverse Candidates Hired} as integer,",
						"          {External Diverse Candidates Hired} as integer,",
						"          {Female Not PoC Candidates StM} as integer,",
						"          {Internal Female Not PoC Candidates StM} as integer,",
						"          {External Female Not PoC Candidates StM} as integer,",
						"          {Female Not PoC Candidates Hired} as integer,",
						"          {Internal Female Not PoC Candidates Hired} as integer,",
						"          {External Female Not PoC Candidates Hired} as integer,",
						"          {Female PoC Candidates StM} as integer,",
						"          {Internal Female PoC Candidates StM} as integer,",
						"          {External Female PoC Candidates StM} as integer,",
						"          {Female PoC Candidates Hired} as integer,",
						"          {Internal Female PoC Candidates Hired} as integer,",
						"          {External Female PoC Candidates Hired} as integer,",
						"          {Not Female PoC Candidates StM} as integer,",
						"          {Internal Not Female PoC Candidates StM} as integer,",
						"          {External Not Female PoC Candidates StM} as integer,",
						"          {Not Female PoC Candidates Hired} as integer,",
						"          {Internal Not Female PoC Candidates Hired} as integer,",
						"          {External Not Female PoC Candidates Hired} as integer,",
						"          {Not Female Not PoC Candidates StM} as integer,",
						"          {Internal Not Female Not PoC Candidates StM} as integer,",
						"          {External Not Female Not PoC Candidates StM} as integer,",
						"          {Not Female Not PoC Candidates Hired} as integer,",
						"          {Internal Not Female Not PoC Candidates Hired} as integer,",
						"          {External Not Female Not PoC Candidates Hired} as integer,",
						"          {Diverse Slate} as string,",
						"          {Internal Diverse Slate} as string,",
						"          {External Diverse Slate} as string,",
						"          {No Diverse Slate} as string,",
						"          {Internal No Diverse Slate} as string,",
						"          {External No Diverse Slate} as string,",
						"          {Diverse Hired Slate} as string,",
						"          {Internal Diverse Hired Slate} as string,",
						"          {External Diverse Hired Slate} as string,",
						"          {PoC Slate} as string,",
						"          {Internal PoC Slate} as string,",
						"          {External PoC Slate} as string,",
						"          {No PoC Slate} as string,",
						"          {Internal No PoC Slate} as string,",
						"          {External No PoC Slate} as string,",
						"          {PoC Hired Slate} as string,",
						"          {Internal PoC Hired Slate} as string,",
						"          {External PoC Hired Slate} as string,",
						"          {White Slate} as string,",
						"          {Internal White Slate} as string,",
						"          {External White Slate} as string,",
						"          {No White Slate} as string,",
						"          {Internal No White Slate} as string,",
						"          {External No White Slate} as string,",
						"          {White Hired Slate} as string,",
						"          {Internal White Hired Slate} as string,",
						"          {External White Hired Slate} as string,",
						"          {Black Slate} as string,",
						"          {Internal Black Slate} as string,",
						"          {External Black Slate} as string,",
						"          {No Black Slate} as string,",
						"          {Internal No Black Slate} as string,",
						"          {External No Black Slate} as string,",
						"          {Black Hired Slate} as string,",
						"          {Internal Black Hired Slate} as string,",
						"          {External Black Hired Slate} as string,",
						"          {Latinx Slate} as string,",
						"          {Internal Latinx Slate} as string,",
						"          {External Latinx Slate} as string,",
						"          {No Latinx Slate} as string,",
						"          {Internal No Latinx Slate} as string,",
						"          {External No Latinx Slate} as string,",
						"          {Latinx Hired Slate} as string,",
						"          {Internal Latinx Hired Slate} as string,",
						"          {External Latinx Hired Slate} as string,",
						"          {Asian Slate} as string,",
						"          {Internal Asian Slate} as string,",
						"          {External Asian Slate} as string,",
						"          {No Asian Slate} as string,",
						"          {Internal No Asian Slate} as string,",
						"          {External No Asian Slate} as string,",
						"          {Asian Hired Slate} as string,",
						"          {Internal Asian Hired Slate} as string,",
						"          {External Asian Hired Slate} as string,",
						"          {2+ Races Slate} as string,",
						"          {Internal 2+ Races Slate} as string,",
						"          {External 2+ Races Slate} as string,",
						"          {No 2+ Races Slate} as string,",
						"          {Internal No 2+ Races Slate} as string,",
						"          {External No 2+ Races Slate} as string,",
						"          {2+ Races Hired Slate} as string,",
						"          {Internal 2+ Races Hired Slate} as string,",
						"          {External 2+ Races Hired Slate} as string,",
						"          {Other Race Slate} as string,",
						"          {Internal Other Race Slate} as string,",
						"          {External Other Race Slate} as string,",
						"          {No Other Race Slate} as string,",
						"          {Internal No Other Race Slate} as string,",
						"          {External No Other Race Slate} as string,",
						"          {Other Race Hired Slate} as string,",
						"          {Internal Other Race Hired Slate} as string,",
						"          {External Other Race Hired Slate} as string,",
						"          {Female Slate} as string,",
						"          {Internal Female Slate} as string,",
						"          {External Female Slate} as string,",
						"          {No Female Slate} as string,",
						"          {Internal No Female Slate} as string,",
						"          {External No Female Slate} as string,",
						"          {Female Hired Slate} as string,",
						"          {Internal Female Hired Slate} as string,",
						"          {External Female Hired Slate} as string,",
						"          {Male Slate} as string,",
						"          {Internal Male Slate} as string,",
						"          {External Male Slate} as string,",
						"          {No Male Slate} as string,",
						"          {Internal No Male Slate} as string,",
						"          {External No Male Slate} as string,",
						"          {Male Hired Slate} as string,",
						"          {Internal Male Hired Slate} as string,",
						"          {External Male Hired Slate} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DivSlate",
						"RemoveNullRows alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Candidates StM},",
						"          {Internal Candidates StM},",
						"          {External Candidates StM},",
						"          {Candidates Hired},",
						"          {Internal Candidates Hired},",
						"          {External Candidates Hired},",
						"          {White Candidates StM},",
						"          {Internal White Candidates StM},",
						"          {External White Candidates StM},",
						"          {White Candidates Hired},",
						"          {Internal White Candidates Hired},",
						"          {External White Candidates Hired},",
						"          {Black Candidates StM},",
						"          {Internal Black Candidates StM},",
						"          {External Black Candidates StM},",
						"          {Black Candidates Hired},",
						"          {Internal Black Candidates Hired},",
						"          {External Black Candidates Hired},",
						"          {Latinx Candidates StM},",
						"          {Internal Latinx Candidates StM},",
						"          {External Latinx Candidates StM},",
						"          {Latinx Candidates Hired},",
						"          {Internal Latinx Candidates Hired},",
						"          {External Latinx Candidates Hired},",
						"          {Asian Candidates StM},",
						"          {Internal Asian Candidates StM},",
						"          {External Asian Candidates StM},",
						"          {Asian Candidates Hired},",
						"          {Internal Asian Candidates Hired},",
						"          {External Asian Candidates Hired},",
						"          {2+ Races Candidates StM},",
						"          {Internal 2+ Races Candidates StM},",
						"          {External 2+ Races Candidates StM},",
						"          {2+ Races Candidates Hired},",
						"          {Internal 2+ Races Candidates Hired},",
						"          {External 2+ Races Candidates Hired},",
						"          {Other Candidates StM},",
						"          {Internal Other Candidates StM},",
						"          {External Other Candidates StM},",
						"          {Other Candidates Hired},",
						"          {Internal Other Candidates Hired},",
						"          {External Other Candidates Hired},",
						"          {Male Candidates StM},",
						"          {Internal Male Candidates StM},",
						"          {External Male Candidates StM},",
						"          {Male Candidates Hired},",
						"          {Internal Male Candidates Hired},",
						"          {External Male Candidates Hired},",
						"          {Female Candidates StM},",
						"          {Internal Female Candidates StM},",
						"          {External Female Candidates StM},",
						"          {Female Candidates Hired},",
						"          {Internal Female Candidates Hired},",
						"          {External Female Candidates Hired},",
						"          {Other Gender Candidates StM},",
						"          {Internal Other Gender Candidates StM},",
						"          {External Other Gender Candidates StM},",
						"          {Other Gender Candidates Hired},",
						"          {Internal Other Gender Candidates Hired},",
						"          {External Other Gender Candidates Hired},",
						"          {PoC Candidates StM},",
						"          {Internal PoC Candidates StM},",
						"          {External PoC Candidates StM},",
						"          {PoC  Candidates Hired},",
						"          {Internal PoC  Candidates Hired},",
						"          {External PoC  Candidates Hired},",
						"          {Diverse Candidates StM},",
						"          {Internal Diverse Candidates StM},",
						"          {External Diverse Candidates StM},",
						"          {Diverse Candidates Hired},",
						"          {Internal Diverse Candidates Hired},",
						"          {External Diverse Candidates Hired},",
						"          {Female Not PoC Candidates StM},",
						"          {Internal Female Not PoC Candidates StM},",
						"          {External Female Not PoC Candidates StM},",
						"          {Female Not PoC Candidates Hired},",
						"          {Internal Female Not PoC Candidates Hired},",
						"          {External Female Not PoC Candidates Hired},",
						"          {Female PoC Candidates StM},",
						"          {Internal Female PoC Candidates StM},",
						"          {External Female PoC Candidates StM},",
						"          {Female PoC Candidates Hired},",
						"          {Internal Female PoC Candidates Hired},",
						"          {External Female PoC Candidates Hired},",
						"          {Not Female PoC Candidates StM},",
						"          {Internal Not Female PoC Candidates StM},",
						"          {External Not Female PoC Candidates StM},",
						"          {Not Female PoC Candidates Hired},",
						"          {Internal Not Female PoC Candidates Hired},",
						"          {External Not Female PoC Candidates Hired},",
						"          {Not Female Not PoC Candidates StM},",
						"          {Internal Not Female Not PoC Candidates StM},",
						"          {External Not Female Not PoC Candidates StM},",
						"          {Not Female Not PoC Candidates Hired},",
						"          {Internal Not Female Not PoC Candidates Hired},",
						"          {External Not Female Not PoC Candidates Hired},",
						"          {Diverse Slate},",
						"          {Internal Diverse Slate},",
						"          {External Diverse Slate},",
						"          {No Diverse Slate},",
						"          {Internal No Diverse Slate},",
						"          {External No Diverse Slate},",
						"          {Diverse Hired Slate},",
						"          {Internal Diverse Hired Slate},",
						"          {External Diverse Hired Slate},",
						"          {PoC Slate},",
						"          {Internal PoC Slate},",
						"          {External PoC Slate},",
						"          {No PoC Slate},",
						"          {Internal No PoC Slate},",
						"          {External No PoC Slate},",
						"          {PoC Hired Slate},",
						"          {Internal PoC Hired Slate},",
						"          {External PoC Hired Slate},",
						"          {White Slate},",
						"          {Internal White Slate},",
						"          {External White Slate},",
						"          {No White Slate},",
						"          {Internal No White Slate},",
						"          {External No White Slate},",
						"          {White Hired Slate},",
						"          {Internal White Hired Slate},",
						"          {External White Hired Slate},",
						"          {Black Slate},",
						"          {Internal Black Slate},",
						"          {External Black Slate},",
						"          {No Black Slate},",
						"          {Internal No Black Slate},",
						"          {External No Black Slate},",
						"          {Black Hired Slate},",
						"          {Internal Black Hired Slate},",
						"          {External Black Hired Slate},",
						"          {Latinx Slate},",
						"          {Internal Latinx Slate},",
						"          {External Latinx Slate},",
						"          {No Latinx Slate},",
						"          {Internal No Latinx Slate},",
						"          {External No Latinx Slate},",
						"          {Latinx Hired Slate},",
						"          {Internal Latinx Hired Slate},",
						"          {External Latinx Hired Slate},",
						"          {Asian Slate},",
						"          {Internal Asian Slate},",
						"          {External Asian Slate},",
						"          {No Asian Slate},",
						"          {Internal No Asian Slate},",
						"          {External No Asian Slate},",
						"          {Asian Hired Slate},",
						"          {Internal Asian Hired Slate},",
						"          {External Asian Hired Slate},",
						"          {2+ Races Slate},",
						"          {Internal 2+ Races Slate},",
						"          {External 2+ Races Slate},",
						"          {No 2+ Races Slate},",
						"          {Internal No 2+ Races Slate},",
						"          {External No 2+ Races Slate},",
						"          {2+ Races Hired Slate},",
						"          {Internal 2+ Races Hired Slate},",
						"          {External 2+ Races Hired Slate},",
						"          {Other Race Slate},",
						"          {Internal Other Race Slate},",
						"          {External Other Race Slate},",
						"          {No Other Race Slate},",
						"          {Internal No Other Race Slate},",
						"          {External No Other Race Slate},",
						"          {Other Race Hired Slate},",
						"          {Internal Other Race Hired Slate},",
						"          {External Other Race Hired Slate},",
						"          {Female Slate},",
						"          {Internal Female Slate},",
						"          {External Female Slate},",
						"          {No Female Slate},",
						"          {Internal No Female Slate},",
						"          {External No Female Slate},",
						"          {Female Hired Slate},",
						"          {Internal Female Hired Slate},",
						"          {External Female Hired Slate},",
						"          {Male Slate},",
						"          {Internal Male Slate},",
						"          {External Male Slate},",
						"          {No Male Slate},",
						"          {Internal No Male Slate},",
						"          {External No Male Slate},",
						"          {Male Hired Slate},",
						"          {Internal Male Hired Slate},",
						"          {External Male Hired Slate}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"DivSlate filter(!(isNull({Requisition ID}))) ~> RemoveNullRows",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          ReqId = {Requisition ID},",
						"          CandStM = {Candidates StM},",
						"          IntCandStM = {Internal Candidates StM},",
						"          ExtCandStM = {External Candidates StM},",
						"          CandHired = {Candidates Hired},",
						"          IntCandHired = {Internal Candidates Hired},",
						"          ExtCandHired = {External Candidates Hired},",
						"          WhiteCandStM = {White Candidates StM},",
						"          IntWhiteCandStM = {Internal White Candidates StM},",
						"          ExtWhiteCandStM = {External White Candidates StM},",
						"          WhiteCandHired = {White Candidates Hired},",
						"          IntWhiteCandHired = {Internal White Candidates Hired},",
						"          ExtWhiteCandHired = {External White Candidates Hired},",
						"          BlackCandStM = {Black Candidates StM},",
						"          IntBlackCandStM = {Internal Black Candidates StM},",
						"          ExtBlackCandStM = {External Black Candidates StM},",
						"          BlackCandHired = {Black Candidates Hired},",
						"          IntBlackCandHired = {Internal Black Candidates Hired},",
						"          ExtBlackCandHired = {External Black Candidates Hired},",
						"          LatinxCandStM = {Latinx Candidates StM},",
						"          IntLatinxCandStM = {Internal Latinx Candidates StM},",
						"          ExtLatinxCandStM = {External Latinx Candidates StM},",
						"          LatinxCandHired = {Latinx Candidates Hired},",
						"          IntLatinxCandHired = {Internal Latinx Candidates Hired},",
						"          ExtLatinxCandHired = {External Latinx Candidates Hired},",
						"          AsianCandStM = {Asian Candidates StM},",
						"          IntAsianCandStM = {Internal Asian Candidates StM},",
						"          ExtAsianCandStM = {External Asian Candidates StM},",
						"          AsianCandHired = {Asian Candidates Hired},",
						"          IntAsianCandHired = {Internal Asian Candidates Hired},",
						"          ExtAsianCandHired = {External Asian Candidates Hired},",
						"          TwoPlusRacesCandStM = {2+ Races Candidates StM},",
						"          IntTwoPlusRacesCandStM = {Internal 2+ Races Candidates StM},",
						"          ExtTwoPlusRacesCandStM = {External 2+ Races Candidates StM},",
						"          TwoPlusRacesCandHired = {2+ Races Candidates Hired},",
						"          IntTwoPlusRacesCandHired = {Internal 2+ Races Candidates Hired},",
						"          ExtTwoPlusRacesCandHired = {External 2+ Races Candidates Hired},",
						"          OtherCandStM = {Other Candidates StM},",
						"          IntOtherCandStM = {Internal Other Candidates StM},",
						"          ExtOtherCandStM = {External Other Candidates StM},",
						"          OtherCandHired = {Other Candidates Hired},",
						"          IntOtherCandHired = {Internal Other Candidates Hired},",
						"          ExtOtherCandHired = {External Other Candidates Hired},",
						"          MaleCandStM = {Male Candidates StM},",
						"          IntMaleCandStM = {Internal Male Candidates StM},",
						"          ExtMaleCandStM = {External Male Candidates StM},",
						"          MaleCandHired = {Male Candidates Hired},",
						"          IntMaleCandHired = {Internal Male Candidates Hired},",
						"          ExtMaleCandHired = {External Male Candidates Hired},",
						"          FemaleCandStM = {Female Candidates StM},",
						"          IntFemaleCandStM = {Internal Female Candidates StM},",
						"          ExtFemaleCandStM = {External Female Candidates StM},",
						"          FemaleCandHired = {Female Candidates Hired},",
						"          IntFemaleCandHired = {Internal Female Candidates Hired},",
						"          ExtFemaleCandHired = {External Female Candidates Hired},",
						"          OtherGenderCandStM = {Other Gender Candidates StM},",
						"          IntOtherGenderCandStM = {Internal Other Gender Candidates StM},",
						"          ExtOtherGenderCandStM = {External Other Gender Candidates StM},",
						"          OtherGenderCandHired = {Other Gender Candidates Hired},",
						"          IntOtherGenderCandHired = {Internal Other Gender Candidates Hired},",
						"          ExtOtherGenderCandHired = {External Other Gender Candidates Hired},",
						"          PoCCandStM = {PoC Candidates StM},",
						"          IntPoCCandStM = {Internal PoC Candidates StM},",
						"          ExtPoCCandStM = {External PoC Candidates StM},",
						"          PoCCandHired = {PoC  Candidates Hired},",
						"          IntPoCCandHired = {Internal PoC  Candidates Hired},",
						"          ExtPoCCandHired = {External PoC  Candidates Hired},",
						"          DiverseCandStM = {Diverse Candidates StM},",
						"          IntDiverseCandStM = {Internal Diverse Candidates StM},",
						"          ExtDiverseCandStM = {External Diverse Candidates StM},",
						"          DiverseCandHired = {Diverse Candidates Hired},",
						"          IntDiverseCandHired = {Internal Diverse Candidates Hired},",
						"          ExtDiverseCandHired = {External Diverse Candidates Hired},",
						"          FemaleNotPoCCandStM = {Female Not PoC Candidates StM},",
						"          IntFemaleNotPoCCandStM = {Internal Female Not PoC Candidates StM},",
						"          ExtFemaleNotPoCCandStM = {External Female Not PoC Candidates StM},",
						"          FemaleNotPoCCandHired = {Female Not PoC Candidates Hired},",
						"          IntFemaleNotPoCCandHired = {Internal Female Not PoC Candidates Hired},",
						"          ExtFemaleNotPoCCandHired = {External Female Not PoC Candidates Hired},",
						"          FemalePoCCandStM = {Female PoC Candidates StM},",
						"          IntFemalePoCCandStM = {Internal Female PoC Candidates StM},",
						"          ExtFemalePoCCandStM = {External Female PoC Candidates StM},",
						"          FemalePoCCandHired = {Female PoC Candidates Hired},",
						"          IntFemalePoCCandHired = {Internal Female PoC Candidates Hired},",
						"          ExtFemalePoCCandHired = {External Female PoC Candidates Hired},",
						"          NotFemalePoCCandStM = {Not Female PoC Candidates StM},",
						"          IntNotFemalePoCCandStM = {Internal Not Female PoC Candidates StM},",
						"          ExtNotFemalePoCCandStM = {External Not Female PoC Candidates StM},",
						"          NotFemaleNotPoCCandHired = {Not Female PoC Candidates Hired},",
						"          IntNotFemaleNotPoCCandHired = {Internal Not Female PoC Candidates Hired},",
						"          ExtNotFemaleNotPoCCandHired = {External Not Female PoC Candidates Hired},",
						"          NotFemaleNotPoCCandStM = {Not Female Not PoC Candidates StM},",
						"          IntNotFemaleNotPoCCandStM = {Internal Not Female Not PoC Candidates StM},",
						"          ExtNotFemaleNotPoCCandStM = {External Not Female Not PoC Candidates StM},",
						"          NotFemalePoCCandHired = {Not Female Not PoC Candidates Hired},",
						"          IntNotFemalePoCCandHired = {Internal Not Female Not PoC Candidates Hired},",
						"          ExtNotFemalePoCCandHired = {External Not Female Not PoC Candidates Hired},",
						"          DiverseSlate = {Diverse Slate},",
						"          IntDiverseSlate = {Internal Diverse Slate},",
						"          ExtDiverseSlate = {External Diverse Slate},",
						"          NoDiverseSlate = {No Diverse Slate},",
						"          IntNoDiverseSlate = {Internal No Diverse Slate},",
						"          ExtNoDiverseSlate = {External No Diverse Slate},",
						"          DiverseHiredSlate = {Diverse Hired Slate},",
						"          IntDiverseHiredSlate = {Internal Diverse Hired Slate},",
						"          ExtDiverseHiredSlate = {External Diverse Hired Slate},",
						"          PoCSlate = {PoC Slate},",
						"          IntPoCSlate = {Internal PoC Slate},",
						"          ExtPoCSlate = {External PoC Slate},",
						"          NoPoCSlate = {No PoC Slate},",
						"          IntNoPoCSlate = {Internal No PoC Slate},",
						"          ExtNoPoCSlate = {External No PoC Slate},",
						"          PoCHiredSlate = {PoC Hired Slate},",
						"          IntPoCHiredSlate = {Internal PoC Hired Slate},",
						"          ExtPoCHiredSlate = {External PoC Hired Slate},",
						"          WhiteSlate = {White Slate},",
						"          IntWhiteSlate = {Internal White Slate},",
						"          ExtWhiteSlate = {External White Slate},",
						"          NoWhiteSlate = {No White Slate},",
						"          IntNoWhiteSlate = {Internal No White Slate},",
						"          ExtNoWhiteSlate = {External No White Slate},",
						"          WhiteHiredSlate = {White Hired Slate},",
						"          IntWhiteHiredSlate = {Internal White Hired Slate},",
						"          ExtWhiteHiredSlate = {External White Hired Slate},",
						"          BlackSlate = {Black Slate},",
						"          IntBlackSlate = {Internal Black Slate},",
						"          ExtBlackSlate = {External Black Slate},",
						"          NoBlackSlate = {No Black Slate},",
						"          IntNoBlackSlate = {Internal No Black Slate},",
						"          ExtNoBlackSlate = {External No Black Slate},",
						"          BlackHiredSlate = {Black Hired Slate},",
						"          IntBlackHiredSlate = {Internal Black Hired Slate},",
						"          ExtBlackHiredSlate = {External Black Hired Slate},",
						"          LatinxSlate = {Latinx Slate},",
						"          IntLatinxSlate = {Internal Latinx Slate},",
						"          ExtLatinxSlate = {External Latinx Slate},",
						"          NoLatinxSlate = {No Latinx Slate},",
						"          IntNoLatinxSlate = {Internal No Latinx Slate},",
						"          ExtNoLatinxSlate = {External No Latinx Slate},",
						"          LatinxHiredSlate = {Latinx Hired Slate},",
						"          IntLatinxHiredSlate = {Internal Latinx Hired Slate},",
						"          ExtLatinxHiredSlate = {External Latinx Hired Slate},",
						"          AsianSlate = {Asian Slate},",
						"          IntAsianSlate = {Internal Asian Slate},",
						"          ExtAsianSlate = {External Asian Slate},",
						"          NoAsianSlate = {No Asian Slate},",
						"          IntNoAsianSlate = {Internal No Asian Slate},",
						"          ExtNoAsianSlate = {External No Asian Slate},",
						"          AsianHiredSlate = {Asian Hired Slate},",
						"          IntAsianHiredSlate = {Internal Asian Hired Slate},",
						"          ExtAsianHiredSlate = {External Asian Hired Slate},",
						"          TwoPlusRacesSlate = {2+ Races Slate},",
						"          IntTwoPlusRacesSlate = {Internal 2+ Races Slate},",
						"          ExtTwoPlusRacesSlate = {External 2+ Races Slate},",
						"          NoTwoPlusRacesSlate = {No 2+ Races Slate},",
						"          IntNoTwoPlusRacesSlate = {Internal No 2+ Races Slate},",
						"          ExtNoTwoPlusRacesSlate = {External No 2+ Races Slate},",
						"          TwoPlusRacesHiredSlate = {2+ Races Hired Slate},",
						"          IntTwoPlusRacesHiredSlate = {Internal 2+ Races Hired Slate},",
						"          ExtTwoPlusRacesHiredSlate = {External 2+ Races Hired Slate},",
						"          OtherRaceSlate = {Other Race Slate},",
						"          IntOtherRaceSlate = {Internal Other Race Slate},",
						"          ExtOtherRaceSlate = {External Other Race Slate},",
						"          NoOtherRaceSlate = {No Other Race Slate},",
						"          IntNoOtherRaceSlate = {Internal No Other Race Slate},",
						"          ExtNoOtherRaceSlate = {External No Other Race Slate},",
						"          OtherRaceHiredSlate = {Other Race Hired Slate},",
						"          IntOtherRaceHiredSlate = {Internal Other Race Hired Slate},",
						"          ExtOtherRaceHiredSlate = {External Other Race Hired Slate},",
						"          FemaleSlate = {Female Slate},",
						"          IntFemaleSlate = {Internal Female Slate},",
						"          ExtFemaleSlate = {External Female Slate},",
						"          NoFemaleSlate = {No Female Slate},",
						"          IntNoFemaleSlate = {Internal No Female Slate},",
						"          ExtNoFemaleSlate = {External No Female Slate},",
						"          FemaleHiredSlate = {Female Hired Slate},",
						"          IntFemaleHiredSlate = {Internal Female Hired Slate},",
						"          ExtFemaleHiredSlate = {External Female Hired Slate},",
						"          MaleSlate = {Male Slate},",
						"          IntMaleSlate = {Internal Male Slate},",
						"          ExtMaleSlate = {External Male Slate},",
						"          NoMaleSlate = {No Male Slate},",
						"          IntNoMaleSlate = {Internal No Male Slate},",
						"          ExtNoMaleSlate = {External No Male Slate},",
						"          MaleHiredSlate = {Male Hired Slate},",
						"          IntMaleHiredSlate = {Internal Male Hired Slate},",
						"          ExtMaleHiredSlate = {External Male Hired Slate},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendDivSlateFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendOtherFactTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OtherNullRecordOutput"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as double,",
						"          {Other (Num Value 2)} as double,",
						"          {Other (Date Value 1)} as date,",
						"          {Other (Date Value 2)} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"Other alterRow(deleteIf(isNull({Worker ID})),",
						"     upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Year})),",
						"     deleteIf(isNull({Event (Type)}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          WorkerId = {Worker ID},",
						"          EventDt = {Event Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId = {Event ID},",
						"          EventType = {Event (Type)},",
						"          EventDesc = {Event (Desc)},",
						"          OtherCharVal1 = {Other (Char Value 1)},",
						"          OtherCharVal2 = {Other (Char Value 2)},",
						"          OtherNumVal1 = {Other (Num Value 1)},",
						"          OtherNumVal2 = {Other (Num Value 2)},",
						"          OtherDtVal1 = {Other (Date Value 1)},",
						"          OtherDtVal2 = {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(WorkerId = iif(isNull(WorkerId),'N/A',WorkerId),",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 filter(WorkerId!='N/A') ~> filter1",
						"derivedColumn1 filter(WorkerId=='N/A') ~> filter2",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventYear','EventType','EventDesc','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventDesc,",
						"          EventType,",
						"          OtherCharVal11 = OtherCharVal1,",
						"          OtherCharVal2,",
						"          OtherNumVal1,",
						"          OtherNumVal2,",
						"          OtherDtVal1,",
						"          OtherDtVal2,",
						"          LoadDt",
						"     )) ~> AppendOtherFactTbl",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Other Core Fact Table Load - Reject Records.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OtherNullRecordOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "PerRatingHistory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendTalentMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date,",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as short,",
						"          {Curr Performance Rating Date} as date,",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as integer,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as short,",
						"          {P1 Performance Rating Date} as date,",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as integer,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as short,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as date,",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as integer,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as short,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as date,",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as integer,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerRatingHistory",
						"PerRatingHistory alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Worker ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          WorkerId = {Worker ID},",
						"          LastPerfYear = {Last Performance Year},",
						"          LastPerfRatingDt = {Last Performance Rating Date},",
						"          LastClientPerfRating = {Last Client Performance Rating},",
						"          LastElloreePerfRating = {Last Elloree Performance Rating},",
						"          LastElloreePerfRatingSortId = {Last Elloree Performance Rating Sort Id},",
						"          LastTopTalentInd = {Last Top Talent Ind},",
						"          CurrPerfYear = {Curr Performance Year},",
						"          CurrPerfRatingDt = {Curr Performance Rating Date},",
						"          CurrTalentTag = {Curr Talent Tag},",
						"          CurrClientPerfRating = {Curr Client Performance Rating},",
						"          CurrElloreePerfRating = {Curr Elloree Performance Rating},",
						"          CurrElloreePerfRatingSortId = {Curr Elloree Performance Rating Sort Id},",
						"          CurrTopTalentInd = {Curr Top Talent Ind},",
						"          P1PerfYear = {P1 Performance Year},",
						"          P1PerfRatingDt = {P1 Performance Rating Date},",
						"          P1ClientPerfRating = {P1 Client Performance Rating},",
						"          P1ElloreePerfRating = {P1 Elloree Performance Rating},",
						"          P1ElloreePerfRatingSortId = {P1 Elloree Performance Rating Sort Id},",
						"          P1TopTalentInd = {P1 Top Talent Ind},",
						"          P2PerfYear = {P2 Performance Year},",
						"          P2PerfRatingDt = {P2 Performance Rating Date},",
						"          P2ClientPerfRating = {P2 Client Performance Rating},",
						"          P2ElloreePerfRating = {P2 Elloree Performance Rating},",
						"          P2ElloreePerfRatingSortId = {P2 Elloree Performance Rating Sort Id},",
						"          P2TopTalentInd = {P2 Top Talent Ind},",
						"          P3PerfYear = {P3 Performance Year},",
						"          P3PerfRatingDt = {P3 Performance Rating Date},",
						"          P3ClientPerfRating = {P3 Client Performance Rating},",
						"          P3ElloreePerfRating = {P3 Elloree Performance Rating},",
						"          P3ElloreePerfRatingSortId = {P3 Elloree Performance Rating Sort Id},",
						"          P3TopTalentInd = {P3 Top Talent Ind},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"AlterColumnNamesforMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          WorkerId,",
						"          LastPerfYear,",
						"          LastPerfRatingDt,",
						"          LastClientPerfRating,",
						"          LastElloreePerfRating,",
						"          LastElloreePerfRatingSortId,",
						"          LastTopTalentInd,",
						"          CurrPerfYear,",
						"          CurrPerfRatingDt,",
						"          CurrTalentTag,",
						"          CurrClientPerfRating,",
						"          CurrElloreePerfRating,",
						"          CurrElloreePerfRatingSortId,",
						"          CurrTopTalentInd,",
						"          P1PerfYear,",
						"          P1PerfRatingDt,",
						"          P1ClientPerfRating,",
						"          P1ElloreePerfRating,",
						"          P1ElloreePerfRatingSortId,",
						"          P1TopTalentInd,",
						"          P2PerfYear,",
						"          P2PerfRatingDt,",
						"          P2ClientPerfRating,",
						"          P2ElloreePerfRating,",
						"          P2ElloreePerfRatingSortId,",
						"          P2TopTalentInd,",
						"          P3PerfYear,",
						"          P3PerfRatingDt,",
						"          P3ClientPerfRating,",
						"          P3ElloreePerfRating,",
						"          P3ElloreePerfRatingSortId,",
						"          P3TopTalentInd,",
						"          LoadDt",
						"     )) ~> AppendTalentMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "addLoadDt"
						},
						{
							"name": "RestrictFieldColumnLength"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date 'yyyy-MM-dd',",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull(Event)),",
						"     deleteIf(isNull({Requisition ID}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventDt = {Event Date},",
						"          EventQuarter = {Event Quarter},",
						"          EventMonth,",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId,",
						"          ReqId = {Requisition ID},",
						"          ReqType = {Requisition Type},",
						"          PostingDt = {Posting Date},",
						"          ReqStatus = {Requisition Status},",
						"          NumberofOpenings = {Number of Openings},",
						"          JobTitle = {Job Title},",
						"          JobFunction = {Job Function},",
						"          CorpTitle = {Corporate Title},",
						"          WorkOfficeLoc = {Work Office Location},",
						"          WorkOfficeCity = {Work Office City},",
						"          WorkOfficeState = {Work Office State},",
						"          WorkOfficeCountry = {Work Office Country},",
						"          WorkStrategicLocInd = {Strategic Work Location Ind},",
						"          BusinessGrpLvl1 = {Business Group Level 1},",
						"          BusinessGrpLvl2 = {Business Group Level 2},",
						"          BusinessGrpLvl3 = {Business Group Level 3},",
						"          BusinessGrpLvl4 = {Business Group Level 4},",
						"          HiringMgrWorkerId = {Hiring Manager Worker ID},",
						"          PrimaryRecruiterWorkerId = {Primary Recruiter Worker ID},",
						"          ReqOther1 = {Requisition Other (1)},",
						"          ReqOther2 = {Requisition Other (2)},",
						"          ReqOther3 = {Requisition Other (3)},",
						"          ReqOther4 = {Requisition Other (4)},",
						"          ReqOther5 = {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> addLoadDt",
						"addLoadDt derive(JobTitle = left(JobTitle,100)) ~> RestrictFieldColumnLength",
						"RestrictFieldColumnLength sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          ReqId,",
						"          ReqType,",
						"          PostingDt,",
						"          ReqStatus,",
						"          NumberofOpenings,",
						"          JobTitle,",
						"          JobFunction,",
						"          CorpTitle,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          HiringMgrWorkerId,",
						"          PrimaryRecruiterWorkerId,",
						"          ReqOther1,",
						"          ReqOther2,",
						"          ReqOther3,",
						"          ReqOther4,",
						"          ReqOther5,",
						"          LoadDt",
						"     )) ~> AppendReqFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_SilverMedalist_File",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendSilverMedalistFAct"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Event Year} as short,",
						"          {Applicant ID} as string,",
						"          {Internal Worker ID} as string,",
						"          {Requisition ID} as string,",
						"          {Silver Medalist Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SilverMedalist",
						"SilverMedalist alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Year})),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Applicant ID}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          ApplId = {Applicant ID},",
						"          IntWorkerId = {Internal Worker ID},",
						"          ReqId = {Requisition ID},",
						"          SilverMedalistInd = {Silver Medalist Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventYear','ReqId','ApplId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendSilverMedalistFAct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Speedbumps_File",
								"type": "DatasetReference"
							},
							"name": "Speedbumps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Core Event Id} as string,",
						"          {Core Event Quarter} as integer,",
						"          {Core Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Speedbump Worker Status} as string,",
						"          {Speedbump Population Ind} as string,",
						"          {Speedbump 1 Name} as string,",
						"          {Speedbump 1 Desc} as string,",
						"          {Speedbump 1 Flag} as string,",
						"          {Speedbump 2 Name} as string,",
						"          {Speedbump 2 Desc} as string,",
						"          {Speedbump 2 Flag} as string,",
						"          {Speedbump 3 Name} as string,",
						"          {Speedbump 3 Desc} as string,",
						"          {Speedbump 3 Flag} as string,",
						"          {Speedbump 4 Name} as string,",
						"          {Speedbump 4 Desc} as string,",
						"          {Speedbump 4 Flag} as string,",
						"          {Speedbump 5 Name} as string,",
						"          {Speedbump 5 Desc} as string,",
						"          {Speedbump 5 Flag} as string,",
						"          {Speedbump 6 Name} as string,",
						"          {Speedbump 6 Desc} as string,",
						"          {Speedbump 6 Flag} as string,",
						"          {Speedbump 7 Name} as string,",
						"          {Speedbump 7 Desc} as string,",
						"          {Speedbump 7 Flag} as string,",
						"          {Speedbump 8 Name} as string,",
						"          {Speedbump 8 Desc} as string,",
						"          {Speedbump 8 Flag} as string,",
						"          {Speedbump 9 Name} as string,",
						"          {Speedbump 9 Desc} as string,",
						"          {Speedbump 9 Flag} as string,",
						"          {Speedbump 10 Name} as string,",
						"          {Speedbump 10 Desc} as string,",
						"          {Speedbump 10 Flag} as string,",
						"          {Speedbump 11 Name} as string,",
						"          {Speedbump 11 Desc} as string,",
						"          {Speedbump 11 Flag} as string,",
						"          {Speedbump 12 Name} as string,",
						"          {Speedbump 12 Desc} as string,",
						"          {Speedbump 12 Flag} as string,",
						"          {Speedbump 13 Name} as string,",
						"          {Speedbump 13 Desc} as string,",
						"          {Speedbump 13 Flag} as string,",
						"          {Speedbump 14 Name} as string,",
						"          {Speedbump 14 Desc} as string,",
						"          {Speedbump 14 Flag} as string,",
						"          {Speedbump 15 Name} as string,",
						"          {Speedbump 15 Desc} as string,",
						"          {Speedbump 15 Flag} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Speedbumps",
						"Speedbumps alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Worker ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          CoreEventId = {Core Event Id},",
						"          CoreEventQuarter = {Core Event Quarter},",
						"          CoreEventDate = {Core Event Date},",
						"          WorkerId = {Worker ID},",
						"          SpeedbumnpWorkerStatus = {Speedbump Worker Status},",
						"          SpeedbumpPopulationInd = {Speedbump Population Ind},",
						"          Speedbump1Name = {Speedbump 1 Name},",
						"          Speedbump1Desc = {Speedbump 1 Desc},",
						"          Speedbump1Flag = {Speedbump 1 Flag},",
						"          Speedbump2Name = {Speedbump 2 Name},",
						"          Speedbump2Desc = {Speedbump 2 Desc},",
						"          Speedbump2Flag = {Speedbump 2 Flag},",
						"          Speedbump3Name = {Speedbump 3 Name},",
						"          Speedbump3Desc = {Speedbump 3 Desc},",
						"          Speedbump3Flag = {Speedbump 3 Flag},",
						"          Speedbump4Name = {Speedbump 4 Name},",
						"          Speedbump4Desc = {Speedbump 4 Desc},",
						"          Speedbump4Flag = {Speedbump 4 Flag},",
						"          Speedbump5Name = {Speedbump 5 Name},",
						"          Speedbump5Desc = {Speedbump 5 Desc},",
						"          Speedbump5Flag = {Speedbump 5 Flag},",
						"          Speedbump6Name = {Speedbump 6 Name},",
						"          Speedbump6Desc = {Speedbump 6 Desc},",
						"          Speedbump6Flag = {Speedbump 6 Flag},",
						"          Speedbump7Name = {Speedbump 7 Name},",
						"          Speedbump7Desc = {Speedbump 7 Desc},",
						"          Speedbump7Flag = {Speedbump 7 Flag},",
						"          Speedbump8Name = {Speedbump 8 Name},",
						"          Speedbump8Desc = {Speedbump 8 Desc},",
						"          Speedbump8Flag = {Speedbump 8 Flag},",
						"          Speedbump9Name = {Speedbump 9 Name},",
						"          Speedbump9Desc = {Speedbump 9 Desc},",
						"          Speedbump9Flag = {Speedbump 9 Flag},",
						"          Speedbump10Name = {Speedbump 10 Name},",
						"          Speedbump10Desc = {Speedbump 10 Desc},",
						"          Speedbump10Flag = {Speedbump 10 Flag},",
						"          Speedbump11Name = {Speedbump 11 Name},",
						"          Speedbump11Desc = {Speedbump 11 Desc},",
						"          Speedbump11Flag = {Speedbump 11 Flag},",
						"          Speedbump12Name = {Speedbump 12 Name},",
						"          Speedbump12Desc = {Speedbump 12 Desc},",
						"          Speedbump12Flag = {Speedbump 12 Flag},",
						"          Speedbump13Name = {Speedbump 13 Name},",
						"          Speedbump13Desc = {Speedbump 13 Desc},",
						"          Speedbump13Flag = {Speedbump 13 Flag},",
						"          Speedbump14Name = {Speedbump 14 Name},",
						"          Speedbump14Desc = {Speedbump 14 Desc},",
						"          Speedbump14Flag = {Speedbump 14 Flag},",
						"          Speedbump15Name = {Speedbump 15 Name},",
						"          Speedbump15Desc = {Speedbump 15 Desc},",
						"          Speedbump15Flag = {Speedbump 15 Flag},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','EventYear','EventQuarter'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventQuarter,",
						"          EventYear,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate,",
						"          WorkerId,",
						"          SpeedbumnpWorkerStatus,",
						"          SpeedbumpPopulationInd,",
						"          Speedbump1Name,",
						"          Speedbump1Desc,",
						"          Speedbump1Flag,",
						"          Speedbump2Name,",
						"          Speedbump2Desc,",
						"          Speedbump2Flag,",
						"          Speedbump3Name,",
						"          Speedbump3Desc,",
						"          Speedbump3Flag,",
						"          Speedbump4Name,",
						"          Speedbump4Desc,",
						"          Speedbump4Flag,",
						"          Speedbump5Name,",
						"          Speedbump5Desc,",
						"          Speedbump5Flag,",
						"          Speedbump6Name,",
						"          Speedbump6Desc,",
						"          Speedbump6Flag,",
						"          Speedbump7Name,",
						"          Speedbump7Desc,",
						"          Speedbump7Flag,",
						"          Speedbump8Name,",
						"          Speedbump8Desc,",
						"          Speedbump8Flag,",
						"          Speedbump9Name,",
						"          Speedbump9Desc,",
						"          Speedbump9Flag,",
						"          Speedbump10Name,",
						"          Speedbump10Desc,",
						"          Speedbump10Flag,",
						"          Speedbump11Name,",
						"          Speedbump11Desc,",
						"          Speedbump11Flag,",
						"          Speedbump12Name,",
						"          Speedbump12Desc,",
						"          Speedbump12Flag,",
						"          Speedbump13Name,",
						"          Speedbump13Desc,",
						"          Speedbump13Flag,",
						"          Speedbump14Name,",
						"          Speedbump14Desc,",
						"          Speedbump14Flag,",
						"          Speedbump15Name,",
						"          Speedbump15Desc,",
						"          Speedbump15Flag,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Talent')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendTalentMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as date,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string,",
						"          {Salary Range} as string,",
						"          Bonus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"Talent alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Performance Rating}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          EventDt = {Event Date},",
						"          Event,",
						"          EventType = {Event Type},",
						"          WorkerId = {Worker ID},",
						"          PerfRating = {Performance Rating},",
						"          PerfRatingDt = {Performance Rating Date},",
						"          TalentIdentifier1 = {Talent Identifier (1)},",
						"          TalentIdentifier2 = {Talent Identifier (2)},",
						"          TalentIdentifier3 = {Talent Identifier (3)},",
						"          TalentIdentifier4 = {Talent Identifier (4)},",
						"          TalentIdentifier5 = {Talent Identifier (5)},",
						"          {Salary Range},",
						"          Bonus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(Event = 'PER',",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date,",
						"          SalaryRange as string,",
						"          Bonus as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','PerfRating'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendTalentMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_YearRef')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_YearRef_File",
								"type": "DatasetReference"
							},
							"name": "YearRef"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "AppendYearRef"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          CurrEventYear as short,",
						"          P1EventYear as short,",
						"          P2EventYear as short,",
						"          P3EventYear as short,",
						"          P4EventYear as short,",
						"          P5EventYear as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> YearRef",
						"YearRef alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date}))) ~> alterRow1",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          CurEventYear = CurrEventYear,",
						"          P1EventYear,",
						"          P2EventYear,",
						"          P3EventYear,",
						"          P4EventYear,",
						"          P5EventYear,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"AlterColumnNamesforMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendYearRef"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ApplicantFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantFlowMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendApplicantFlowMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantFlowMapping",
						"ApplicantFlowMapping alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Applicant Final Disposition})),",
						"     deleteIf(isNull({Client Applicant Step Before Final Disposition})),",
						"     deleteIf(isNull({Client Applicant Rejected Reason})),",
						"     deleteIf(isNull({Elloree Applicant Final Disposition})),",
						"     deleteIf(isNull({Elloree Applicant Category})),",
						"     deleteIf(isNull({Elloree Submitted to Mgr Fl}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientApplFinalDisp = {Client Applicant Final Disposition},",
						"          ClientApplStepBeforeFinalDisp = {Client Applicant Step Before Final Disposition},",
						"          ClientApplRejectedReason = {Client Applicant Rejected Reason},",
						"          ElloreeApplFinalDisp = {Elloree Applicant Final Disposition},",
						"          ElloreeApplCategory = {Elloree Applicant Category},",
						"          ElloreeSubmittedtoMgrFl = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientApplFinalDisp','ClientApplStepBeforeFinalDisp','ClientApplRejectedReason'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendApplicantFlowMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "BusHierarchy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendBusHierarchyMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BusHierarchy",
						"BusHierarchy alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Business Group Level 1})),",
						"     deleteIf(isNull({Elloree Business Group Level 2})),",
						"     deleteIf(isNull({Elloree Business Group Level 3})),",
						"     deleteIf(isNull({Elloree Business Group Level 4}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientBusGrpLvl1 = {Client Business Group Level 1},",
						"          ElloreeBusGrpLvl1 = {Elloree Business Group Level 1},",
						"          ClientBusGrpLvl2 = {Client Business Group Level 2},",
						"          ElloreeBusGrpLvl2 = {Elloree Business Group Level 2},",
						"          ClientBusGrpLvl3 = {Client Business Group Level 3},",
						"          ElloreeBusGrpLvl3 = {Elloree Business Group Level 3},",
						"          ClientBusGrpLvl4 = {Client Business Group Level 4},",
						"          ElloreeBusGrpLvl4 = {Elloree Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientBusGrpLvl1','ClientBusGrpLvl2','ClientBusGrpLvl3','ClientBusGrpLvl4'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendBusHierarchyMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_CorpTitle",
								"type": "DatasetReference"
							},
							"name": "CorpTitle"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendCorpTitleMappingToDB"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Corporate Title} as string,",
						"          {Elloree Corporate Title} as string,",
						"          {Client Elloree Corporate Title} as string,",
						"          {Elloree Corporate Title Sort} as string,",
						"          {Suggested Elloree Corporate Title} as string,",
						"          {Suggested Client Elloree Corporate Title} as string,",
						"          {Suggested Elloree Corporate Title Sort} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount Curr Title} as string,",
						"          {2017 Headcount Prev Title} as string,",
						"          {2018 Headcount Curr Title} as string,",
						"          {2018 Headcount Prev Title} as string,",
						"          {2018 Hire Curr Title} as string,",
						"          {2018 Hire Prev Title} as string,",
						"          {2018 Promo Curr Title} as string,",
						"          {2018 Promo Prev Title} as string,",
						"          {2018 Term Curr Title} as string,",
						"          {2018 Term Prev Title} as string,",
						"          {2019 Headcount Curr Title} as string,",
						"          {2019 Headcount Prev Title} as string,",
						"          {2019 Hire Curr Title} as string,",
						"          {2019 Hire Prev Title} as string,",
						"          {2019 Promo Curr Title} as string,",
						"          {2019 Promo Prev Title} as string,",
						"          {2019 Term Curr Title} as string,",
						"          {2019 Term Prev Title} as string,",
						"          {2020 Headcount Curr Title} as string,",
						"          {2020 Headcount Prev Title} as string,",
						"          {2020 Hire Curr Title} as string,",
						"          {2020 Hire Prev Title} as string,",
						"          {2020 Promo Curr Title} as string,",
						"          {2020 Promo Prev Title} as string,",
						"          {2020 Term Curr Title} as string,",
						"          {2020 Term Prev Title} as string,",
						"          {2021 Headcount Curr Title} as string,",
						"          {2021 Headcount Prev Title} as string,",
						"          {2021 Hire Curr Title} as string,",
						"          {2021 Hire Prev Title} as string,",
						"          {2021 Promo Curr Title} as string,",
						"          {2021 Promo Prev Title} as string,",
						"          {2021 Term Curr Title} as string,",
						"          {2021 Term Prev Title} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorpTitle",
						"CorpTitle alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Corporate Title})),",
						"     deleteIf(isNull({Elloree Corporate Title Sort}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientCorpTitle = {Client Corporate Title},",
						"          ClientElloreeCorpTitle = {Client Elloree Corporate Title},",
						"          ElloreeCorpTitle = {Elloree Corporate Title},",
						"          ElloreeCorpTitleSortId = {Elloree Corporate Title Sort},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientCorpTitle'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendCorpTitleMappingToDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Disability",
								"type": "DatasetReference"
							},
							"name": "Disability"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Disability Ind} as string,",
						"          {Elloree Disability Ind} as string,",
						"          {Suggested Elloree Disability Ind} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Disability",
						"Disability alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Disability Ind})),",
						"     deleteIf(isNull({Elloree Disability Ind}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientDisabilityInd = {Client Disability Ind},",
						"          ElloreeDisabilityInd = {Elloree Disability Ind},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientDisabilityInd'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "Ethnicity"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Ethnicity",
						"Ethnicity alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Race})),",
						"     deleteIf(isNull({Elloree Hispanic or Latino Origin}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientRace = {Client Race},",
						"          ClientHispanicLatinoOrigin = {Client Hispanic or Latino Origin},",
						"          ElloreeRace = {Elloree Race},",
						"          ElloreeHispanicLatinoOrigin = {Elloree Hispanic or Latino Origin},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientRace','ClientHispanicLatinoOrigin'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendEthnicityMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Event",
								"type": "DatasetReference"
							},
							"name": "Event"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendEventMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Event} as string,",
						"          {Client Event Type} as string,",
						"          {Client Event Reason} as string,",
						"          {Elloree Event} as string,",
						"          {Elloree Event Type} as string,",
						"          {Elloree Event Reason} as string,",
						"          {Elloree Termination Reason} as string,",
						"          {Suggested Elloree Event} as string,",
						"          {Suggested Elloree Event Type} as string,",
						"          {Suggested Elloree Event Reason} as string,",
						"          {Suggested Elloree Termination Reason} as string,",
						"          {Suggested Source} as string,",
						"          {2019 Headcount} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string,",
						"          {2022 Headcount} as string,",
						"          {2022 Hire} as string,",
						"          {2022 Promo} as string,",
						"          {2022 Term} as string,",
						"          {2023 Promo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Event",
						"Event alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Event})),",
						"     deleteIf(isNull({Elloree Event Type})),",
						"     deleteIf(isNull({Elloree Event Reason})),",
						"     deleteIf(isNull({Elloree Termination Reason}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientEvent = {Client Event},",
						"          ElloreeEvent = {Elloree Event},",
						"          ClientEventType = {Client Event Type},",
						"          ElloreeEventType = {Elloree Event Type},",
						"          ClientEventReason = {Client Event Reason},",
						"          ElloreeEventReason = {Elloree Event Reason},",
						"          ElloreeTermReason = {Elloree Termination Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientEvent','ClientEventType','ClientEventReason'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendEventMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "Gender"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Gender",
						"Gender alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Gender})),",
						"     deleteIf(isNull({Elloree Gender}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientGender = {Client Gender},",
						"          ElloreeGender = {Elloree Gender},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientGender'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Job')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Job",
								"type": "DatasetReference"
							},
							"name": "JobFunctionMappingFile"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMappingTable"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "BusHierarchyMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentJobMapReviewTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectCorpTitleMapping"
						},
						{
							"name": "CollapseForUniqueRows"
						},
						{
							"name": "selectCoreTableFields"
						},
						{
							"name": "FinalClientTableSelections"
						},
						{
							"name": "RemoveDuplicatesForBusLvl1"
						},
						{
							"name": "LookupCorpTitle"
						},
						{
							"name": "LookupBusHier"
						},
						{
							"name": "LookupJobFunctionMap"
						},
						{
							"name": "SelectMatchFields"
						},
						{
							"name": "SelectMappingOutput"
						},
						{
							"name": "RemoveNullMapping"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          ElloreeBusGrpLvl1 as string,",
						"          {Elloree Corporate Title} as string,",
						"          {Client Job Title} as string,",
						"          {Client Job Function} as string,",
						"          {Elloree Job Function} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobFunctionMappingFile",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CorpTitleMappingTable",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BusHierarchyMapping",
						"CorpTitleMappingTable select(mapColumn(",
						"          {CorpTitle Map ClientId} = ClientId,",
						"          {CorpTitle Map ClientEngagementDt} = ClientEngagementDt,",
						"          {CorpTitle Map ClientCorpTitle} = ClientCorpTitle,",
						"          {CorpTitle Map ElloreeCorpTitle} = ElloreeCorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleMapping",
						"SelectMappingOutput aggregate(groupBy(ClientEngagementDt,",
						"          ClientBusGrpLvl1,",
						"          ClientCorpTitle,",
						"          ClientJobTitle,",
						"          ClientJobFunction,",
						"          ElloreeJobFunction),",
						"     ClientId = max(ClientId)) ~> CollapseForUniqueRows",
						"CoreDB select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          JobTitle,",
						"          JobFunction,",
						"          CorpTitle,",
						"          BusinessGrpLvl1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreTableFields",
						"CollapseForUniqueRows select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientBusGrpLvl1,",
						"          ClientCorpTitle,",
						"          ClientJobTitle,",
						"          ClientJobFunction,",
						"          ElloreeJobFunction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalClientTableSelections",
						"BusHierarchyMapping aggregate(groupBy({Bus Map ClientId} = ClientId,",
						"          {Bus Map ClientEngagementDt} = ClientEngagementDt,",
						"          {Bus Map ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Bus Map ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1),",
						"     CountLOB = count(ClientBusGrpLvl1)) ~> RemoveDuplicatesForBusLvl1",
						"selectCoreTableFields, SelectCorpTitleMapping lookup(ClientId == {CorpTitle Map ClientId}",
						"     && ClientEngagementDt == {CorpTitle Map ClientEngagementDt}",
						"     && CorpTitle == {CorpTitle Map ClientCorpTitle},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCorpTitle",
						"LookupCorpTitle, RemoveDuplicatesForBusLvl1 lookup(ClientId == {Bus Map ClientId}",
						"     && ClientEngagementDt == {Bus Map ClientEngagementDt}",
						"     && BusinessGrpLvl1 == {Bus Map ClientBusGrpLvl1},",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupBusHier",
						"SelectMatchFields, JobFunctionMappingFile lookup(ClientId == {Client ID}",
						"     && ClientEngagementDt == {Client Engagement Date}",
						"     && ElloreeCorpTitle == {Elloree Corporate Title}",
						"     && JobTitle == {Client Job Title}",
						"     && JobFunction == {Client Job Function}",
						"     && SelectMatchFields@ElloreeBusGrpLvl1 == JobFunctionMappingFile@ElloreeBusGrpLvl1,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupJobFunctionMap",
						"LookupBusHier select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          JobTitle,",
						"          JobFunction,",
						"          CorpTitle,",
						"          BusinessGrpLvl1,",
						"          ElloreeCorpTitle = {CorpTitle Map ElloreeCorpTitle},",
						"          ElloreeBusGrpLvl1 = {Bus Map ElloreeBusGrpLvl1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMatchFields",
						"LookupJobFunctionMap select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientBusGrpLvl1 = BusinessGrpLvl1,",
						"          ClientCorpTitle = CorpTitle,",
						"          ClientJobTitle = JobTitle,",
						"          ClientJobFunction = JobFunction,",
						"          ElloreeJobFunction = {Elloree Job Function}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMappingOutput",
						"FinalClientTableSelections filter(!isNull(ElloreeJobFunction)) ~> RemoveNullMapping",
						"RemoveNullMapping alterRow(upsertIf(true()),",
						"     deleteIf(isNull(ClientId)),",
						"     deleteIf(isNull(ClientEngagementDt)),",
						"     deleteIf(isNull(ClientBusGrpLvl1)),",
						"     deleteIf(isNull(ClientCorpTitle)),",
						"     deleteIf(isNull(ClientJobTitle)),",
						"     deleteIf(isNull(ClientJobFunction)),",
						"     deleteIf(isNull(ElloreeJobFunction))) ~> alterRow2",
						"alterRow2 derive(LoadDt = currentDate()) ~> derivedColumn3",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientCorpTitle as string,",
						"          ClientJobTitle as string,",
						"          ClientJobFunction as string,",
						"          ElloreeJobFunction as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientBusGrpLvl1','ClientCorpTitle','ClientJobTitle','ClientJobFunction'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Job_DELETE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Job",
								"type": "DatasetReference"
							},
							"name": "Job"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentJobMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Job Function} as string,",
						"          {Client Job Title} as string,",
						"          {Elloree Job Function} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Job",
						"Job alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Job Function})),",
						"     deleteIf(isNull({Client Job Title})),",
						"     deleteIf(isNull({Elloree Job Function}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientJobFunction = {Client Job Function},",
						"          ClientJobTitle = {Client Job Title},",
						"          ElloreeJobFunction = {Elloree Job Function},",
						"          ClientId = {Client ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientJobTitle as string,",
						"          ClientJobFunction as string,",
						"          ElloreeJobFunction as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientJobFunction','ClientJobTitle'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Job_Review_Temp_DELETE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Job_Temp_DELETE",
								"type": "DatasetReference"
							},
							"name": "JobFunctionMappingFile"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMappingTable"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "ReqDB"
						},
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "BusLvlMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AddLoadDt"
						},
						{
							"name": "SelectCorpTitleMapping"
						},
						{
							"name": "JoinCorpTitle"
						},
						{
							"name": "CollapseForUniqueRows"
						},
						{
							"name": "CollapseForUniqueReqRows"
						},
						{
							"name": "FInalJobReqSelect"
						},
						{
							"name": "UnionJobReqTbl"
						},
						{
							"name": "selectCoreTableFields"
						},
						{
							"name": "FinalClientTableSelections"
						},
						{
							"name": "SelectOnlyValidCorpTitleJobLOBCombinations"
						},
						{
							"name": "SelectFinalFields"
						},
						{
							"name": "CollapseRows"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectBusLvlMapping"
						},
						{
							"name": "JoinBusTitle"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Elloree Bus Grp Lvl1} as string,",
						"          {Elloree Corporate Title} as string,",
						"          {Client Job Function} as string,",
						"          {Client Job Title} as string,",
						"          {Elloree Job Function} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobFunctionMappingFile",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CorpTitleMappingTable",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BusLvlMapping",
						"SelectFinalFields alterRow(upsertIf(true()),",
						"     deleteIf(isNull(ClientId)),",
						"     deleteIf(isNull(ClientEngagementDt)),",
						"     deleteIf(isNull(ClientBusGrpLvl1)),",
						"     deleteIf(isNull(ClientCorpTitle)),",
						"     deleteIf(isNull(ClientJobFunction)),",
						"     deleteIf(isNull(ClientJobTitle)),",
						"     deleteIf(isNull(ElloreeJobFunction))) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate()) ~> AddLoadDt",
						"CorpTitleMappingTable select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientCorpTitle,",
						"          ElloreeCorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleMapping",
						"JobFunctionMappingFile, SelectCorpTitleMapping join({Client ID} == ClientId",
						"     && {Client Engagement Date} == ClientEngagementDt",
						"     && {Elloree Corporate Title} == ElloreeCorpTitle,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCorpTitle",
						"UnionJobReqTbl aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction),",
						"     ClientIdForQuery = max(ClientId)) ~> CollapseForUniqueRows",
						"ReqDB aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction),",
						"     ClientIdForQuery = max(ClientId)) ~> CollapseForUniqueReqRows",
						"CollapseForUniqueReqRows select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FInalJobReqSelect",
						"selectCoreTableFields, FInalJobReqSelect union(byName: true)~> UnionJobReqTbl",
						"CoreDB select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreTableFields",
						"CollapseForUniqueRows select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction,",
						"          ClientIdForQuery",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalClientTableSelections",
						"JoinBusTitle, FinalClientTableSelections join({Client ID} == FinalClientTableSelections@ClientId",
						"     && {Client Engagement Date} == FinalClientTableSelections@ClientEngagementDt",
						"     && ClientBusGrpLvl1 == BusinessGrpLvl1",
						"     && ClientCorpTitle == CorpTitle",
						"     && {Client Job Title} == JobTitle",
						"     && {Client Job Function} == JobFunction,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SelectOnlyValidCorpTitleJobLOBCombinations",
						"CollapseRows select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientBusGrpLvl1,",
						"          ClientCorpTitle,",
						"          ClientJobFunction = {Client Job Function},",
						"          ClientJobTitle = {Client Job Title},",
						"          ElloreeJobFunction = {Elloree Job Function}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalFields",
						"derivedColumn2 aggregate(groupBy({Client Engagement Date},",
						"          ClientBusGrpLvl1,",
						"          ClientCorpTitle,",
						"          {Client Job Function},",
						"          {Client Job Title},",
						"          {Elloree Job Function}),",
						"     {Client ID} = max({Client ID})) ~> CollapseRows",
						"SelectOnlyValidCorpTitleJobLOBCombinations derive({Client Job Title} = trim({Client Job Title}),",
						"          {Client Job Function} = trim({Client Job Function}),",
						"          ClientCorpTitle = trim(ClientCorpTitle)) ~> derivedColumn2",
						"BusLvlMapping select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientBusGrpLvl1,",
						"          ElloreeBusGrpLvl1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBusLvlMapping",
						"JoinCorpTitle, SelectBusLvlMapping join({Client ID} == SelectBusLvlMapping@ClientId",
						"     && {Elloree Bus Grp Lvl1} == ElloreeBusGrpLvl1",
						"     && {Client Engagement Date} == SelectBusLvlMapping@ClientEngagementDt,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBusTitle",
						"AddLoadDt filter(ClientJobTitle == 'Casa Sauza Financial Analyst') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['test_mapping_ouptut.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     format: 'table') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Job_Review_Temp_copy1_DELETE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Job_Temp_DELETE",
								"type": "DatasetReference"
							},
							"name": "JobFunctionMappingFile"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMappingTable"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "ReqDB"
						},
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "BusLvlMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "AddLoadDt"
						},
						{
							"name": "SelectCorpTitleMapping"
						},
						{
							"name": "JoinCorpTitle"
						},
						{
							"name": "CollapseForUniqueRows"
						},
						{
							"name": "CollapseForUniqueReqRows"
						},
						{
							"name": "FInalJobReqSelect"
						},
						{
							"name": "UnionJobReqTbl"
						},
						{
							"name": "selectCoreTableFields"
						},
						{
							"name": "FinalClientTableSelections"
						},
						{
							"name": "SelectOnlyValidCorpTitleJobLOBCombinations"
						},
						{
							"name": "SelectFinalFields"
						},
						{
							"name": "CollapseRows"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectBusLvlMapping"
						},
						{
							"name": "JoinBusTitle"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Elloree Bus Grp Lvl1} as string,",
						"          {Elloree Corporate Title} as string,",
						"          {Client Job Function} as string,",
						"          {Client Job Title} as string,",
						"          {Elloree Job Function} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobFunctionMappingFile",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CorpTitleMappingTable",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BusLvlMapping",
						"SelectFinalFields derive(LoadDt = currentDate()) ~> AddLoadDt",
						"CorpTitleMappingTable select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientCorpTitle,",
						"          ElloreeCorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleMapping",
						"JobFunctionMappingFile, SelectCorpTitleMapping join({Client ID} == ClientId",
						"     && {Client Engagement Date} == ClientEngagementDt",
						"     && {Elloree Corporate Title} == ElloreeCorpTitle,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCorpTitle",
						"UnionJobReqTbl aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction),",
						"     ClientIdForQuery = max(ClientId)) ~> CollapseForUniqueRows",
						"ReqDB aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction),",
						"     ClientIdForQuery = max(ClientId)) ~> CollapseForUniqueReqRows",
						"CollapseForUniqueReqRows select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FInalJobReqSelect",
						"selectCoreTableFields, FInalJobReqSelect union(byName: true)~> UnionJobReqTbl",
						"CoreDB select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreTableFields",
						"CollapseForUniqueRows select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          BusinessGrpLvl1,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction,",
						"          ClientIdForQuery",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalClientTableSelections",
						"JoinBusTitle, FinalClientTableSelections join({Client ID} == FinalClientTableSelections@ClientId",
						"     && {Client Engagement Date} == FinalClientTableSelections@ClientEngagementDt",
						"     && ClientBusGrpLvl1 == BusinessGrpLvl1",
						"     && ClientCorpTitle == CorpTitle",
						"     && {Client Job Title} == JobTitle",
						"     && {Client Job Function} == JobFunction,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SelectOnlyValidCorpTitleJobLOBCombinations",
						"CollapseRows select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientBusGrpLvl1,",
						"          ClientCorpTitle,",
						"          ClientJobFunction = {Client Job Function},",
						"          ClientJobTitle = {Client Job Title},",
						"          ElloreeJobFunction = {Elloree Job Function}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalFields",
						"derivedColumn2 aggregate(groupBy({Client Engagement Date},",
						"          ClientBusGrpLvl1,",
						"          ClientCorpTitle,",
						"          {Client Job Function},",
						"          {Client Job Title},",
						"          {Elloree Job Function}),",
						"     {Client ID} = max({Client ID})) ~> CollapseRows",
						"SelectOnlyValidCorpTitleJobLOBCombinations derive({Client Job Title} = trim({Client Job Title}),",
						"          {Client Job Function} = trim({Client Job Function}),",
						"          ClientCorpTitle = trim(ClientCorpTitle)) ~> derivedColumn2",
						"BusLvlMapping select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientBusGrpLvl1,",
						"          ElloreeBusGrpLvl1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBusLvlMapping",
						"JoinCorpTitle, SelectBusLvlMapping join({Client ID} == SelectBusLvlMapping@ClientId",
						"     && {Elloree Bus Grp Lvl1} == ElloreeBusGrpLvl1",
						"     && {Client Engagement Date} == SelectBusLvlMapping@ClientEngagementDt,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBusTitle",
						"AddLoadDt sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['test_mapping_ouptut.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_LGBTQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_LGBTQ",
								"type": "DatasetReference"
							},
							"name": "LGBTQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client LGBTQ} as string,",
						"          {Elloree LGBTQ} as string,",
						"          {Suggested Elloree LGBTQ} as string,",
						"          {Suggested Source} as string,",
						"          {2020 Headcount} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promotion} as string,",
						"          {2021 Termination} as string,",
						"          {2022 Headcount} as string,",
						"          {2022 Hire} as string,",
						"          {2022 Job Applicant} as string,",
						"          {2022 Promotion} as string,",
						"          {2022 Termination} as string,",
						"          {2023 Headcount} as string,",
						"          {2023 Hire} as string,",
						"          {2023 Job Applicant} as string,",
						"          {2023 Promotion} as string,",
						"          {2023 Termination} as string,",
						"          {2024 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LGBTQ",
						"LGBTQ alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client LGBTQ})),",
						"     deleteIf(isNull({Elloree LGBTQ}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientLGBTQ = {Client LGBTQ},",
						"          ElloreeLGBTQ = {Elloree LGBTQ},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGBTQ as string,",
						"          ElloreeLGBTQ as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientLGBTQ'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientLGBTQ,",
						"          ElloreeLGBTQ,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}