{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		},
		"AzureBlobStorage_privateendpoint1_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8c75286-36f4-4235-9586-3729760f19d5/resourceGroups/etalentdatabase/providers/Microsoft.Storage/storageAccounts/etalent1storage"
		},
		"AzureBlobStorage_privateendpoint1_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureBlobStorage_privateendpoint2_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8c75286-36f4-4235-9586-3729760f19d5/resourceGroups/etalentdatabase/providers/Microsoft.Storage/storageAccounts/etalent2storage"
		},
		"AzureBlobStorage_privateendpoint2_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureBlobStorage_pythonStorage_privateendpoint1_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/a8c75286-36f4-4235-9586-3729760f19d5/resourceGroups/etalentdatabase/providers/Microsoft.Storage/storageAccounts/pythonteststorage1"
		},
		"AzureBlobStorage_pythonStorage_privateendpoint1_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureBlob_Etalent1Storage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://etalent1storage.blob.core.windows.net/"
		},
		"AzureBlob_Etalent2Storage_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://etalent2storage.blob.core.windows.net/"
		},
		"AzureBlob_pythonteststorage1_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://pythonteststorage1.blob.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/etalentReqTypeMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientReqType",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeReqType",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TAReqTypeMapTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentSilverMedalistFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Silver Medalist Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReqId",
						"type": "nvarchar"
					},
					{
						"name": "ApplId",
						"type": "nvarchar"
					},
					{
						"name": "IntWorkerId",
						"type": "nvarchar"
					},
					{
						"name": "SilverMedalistInd",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TASilverMedalistFactTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentSpeedbumpsFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "EventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CoreEventId",
						"type": "nvarchar"
					},
					{
						"name": "CoreEventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CoreEventDate",
						"type": "date"
					},
					{
						"name": "WorkerId",
						"type": "nvarchar"
					},
					{
						"name": "SpeedbumnpWorkerStatus",
						"type": "nvarchar"
					},
					{
						"name": "SpeedbumpPopulationInd",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump1Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump1Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump1Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump2Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump2Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump2Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump3Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump3Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump3Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump4Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump4Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump4Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump5Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump5Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump5Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump6Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump6Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump6Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump7Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump7Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump7Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump8Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump8Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump8Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump9Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump9Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump9Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump10Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump10Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump10Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump11Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump11Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump11Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump12Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump12Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump12Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump13Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump13Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump13Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump14Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump14Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump14Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump15Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump15Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump15Flag",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SpeedbumpsFactTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentTagIdentifierTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to TagIdentifierTbl",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TagIdentifier",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TagIdentifierTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentTalentFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Talent Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "WorkerId",
						"type": "nvarchar"
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDt",
						"type": "date"
					},
					{
						"name": "Event",
						"type": "nvarchar"
					},
					{
						"name": "EventType",
						"type": "nvarchar"
					},
					{
						"name": "PerfRating",
						"type": "nvarchar"
					},
					{
						"name": "PerfRatingDt",
						"type": "date"
					},
					{
						"name": "TalentIdentifier1",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier2",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier3",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier4",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier5",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					},
					{
						"name": "SalaryRange",
						"type": "nvarchar"
					},
					{
						"name": "Bonus",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TalentFactTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentUSCensusSummaryTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/US Census"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Census_Year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_City",
						"type": "nvarchar"
					},
					{
						"name": "Census_State",
						"type": "nvarchar"
					},
					{
						"name": "Census_Country",
						"type": "nvarchar"
					},
					{
						"name": "Census_MSA",
						"type": "nvarchar"
					},
					{
						"name": "Census_Region",
						"type": "nvarchar"
					},
					{
						"name": "Census_Total",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_Male",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_Female",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_White",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_Black",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_Hispanic",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_Asian",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_OtherRace",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_PoC",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_TwoPlusRaces",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_AmerIndAlaskaNat",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_NatHawaiianOtherPacIsl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Census_SomeOtherRace",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_Total",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_Male",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_Female",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_White",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_Black",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_Hispanic",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_Asian",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_OtherRace",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_PoC",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_TwoPlusRaces",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_AmerIndAlaskaNat",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_NatHawaiianOtherPacIsl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MSA_SomeOtherRace",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_Total",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_Male",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_Female",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_White",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_Black",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_Hispanic",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_Asian",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_OtherRace",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_PoC",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_TwoPlusRaces",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_AmerIndAlaskaNat",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_NatHawaiianOtherPacIsl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "State_SomeOtherRace",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_Total",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_Male",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_Female",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_White",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_Black",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_Hispanic",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_Asian",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_OtherRace",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_PoC",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_TwoPlusRaces",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_AmerIndAlaskaNat",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_NatHawaiianOtherPacIsl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "US_SomeOtherRace",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "USCensusSummaryTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentVeteranMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to veteran mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientVeteran",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeVeteran",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VeteranMapTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentYearRefTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "CurEventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P1EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P2EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P3EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P4EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P5EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "YearRefTbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Central US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 10,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorage_privateendpoint1')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorage_privateendpoint1_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorage_privateendpoint1_properties_groupId')]"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorage_privateendpoint2')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorage_privateendpoint2_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorage_privateendpoint2_properties_groupId')]"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorage_pythonStorage_privateendpoint1')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorage_pythonStorage_privateendpoint1_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorage_pythonStorage_privateendpoint1_properties_groupId')]"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob_Etalent1Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service for standard blob storage access ",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlob_Etalent1Storage_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob_Etalent2Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service for premium etalent2storage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlob_Etalent2Storage_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "BlockBlobStorage"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob_pythonteststorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlob_pythonteststorage1_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendApplStatusFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplStatusFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> ApplStatus",
						"ApplStatus alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','ReqId','ApplId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ApplId,",
						"          ReqId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Applicants,",
						"          WhiteAppl,",
						"          BlackAppl,",
						"          LatinxAppl,",
						"          AsianAppl,",
						"          TwoorMoreAppl,",
						"          OtherAppl,",
						"          DNSIDAppl,",
						"          PoCAppl,",
						"          FemaleAppl,",
						"          MaleAppl,",
						"          OtherGenderAppl,",
						"          DNSIDGenderAppl,",
						"          DiverseAppl,",
						"          ApplRejected,",
						"          ApplWithdrew,",
						"          Candidates,",
						"          CandRejectedHR,",
						"          CandStM,",
						"          CandRejectedHM,",
						"          CandInterviewed,",
						"          CandHired,",
						"          CandWithdrew,",
						"          LoadDt",
						"     )) ~> AppendApplStatusFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date,",
						"          ApplicantCity as string,",
						"          ApplicantState as string,",
						"          ApplicantCountry as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Applicant",
						"Applicant alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          LoadDt = currentDate()) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date,",
						"          ApplicantCity as string,",
						"          ApplicantState as string,",
						"          ApplicantCountry as string,",
						"          ApplDt as date,",
						"          ApplFinalDispDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ApplicantId','ReqId','EventDt','EventId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendCoreFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendCoreFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DivSlate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendDivSlateFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASlateFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> DivSlate",
						"DivSlate alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          ReqId,",
						"          CandStM,",
						"          IntCandStM,",
						"          ExtCandStM,",
						"          CandHired,",
						"          IntCandHired,",
						"          ExtCandHired,",
						"          WhiteCandStM,",
						"          IntWhiteCandStM,",
						"          ExtWhiteCandStM,",
						"          WhiteCandHired,",
						"          IntWhiteCandHired,",
						"          ExtWhiteCandHired,",
						"          BlackCandStM,",
						"          IntBlackCandStM,",
						"          ExtBlackCandStM,",
						"          BlackCandHired,",
						"          IntBlackCandHired,",
						"          ExtBlackCandHired,",
						"          LatinxCandStM,",
						"          IntLatinxCandStM,",
						"          ExtLatinxCandStM,",
						"          LatinxCandHired,",
						"          IntLatinxCandHired,",
						"          ExtLatinxCandHired,",
						"          AsianCandStM,",
						"          IntAsianCandStM,",
						"          ExtAsianCandStM,",
						"          AsianCandHired,",
						"          IntAsianCandHired,",
						"          ExtAsianCandHired,",
						"          TwoPlusRacesCandStM,",
						"          IntTwoPlusRacesCandStM,",
						"          ExtTwoPlusRacesCandStM,",
						"          TwoPlusRacesCandHired,",
						"          IntTwoPlusRacesCandHired,",
						"          ExtTwoPlusRacesCandHired,",
						"          OtherCandStM,",
						"          IntOtherCandStM,",
						"          ExtOtherCandStM,",
						"          OtherCandHired,",
						"          IntOtherCandHired,",
						"          ExtOtherCandHired,",
						"          MaleCandStM,",
						"          IntMaleCandStM,",
						"          ExtMaleCandStM,",
						"          MaleCandHired,",
						"          IntMaleCandHired,",
						"          ExtMaleCandHired,",
						"          FemaleCandStM,",
						"          IntFemaleCandStM,",
						"          ExtFemaleCandStM,",
						"          FemaleCandHired,",
						"          IntFemaleCandHired,",
						"          ExtFemaleCandHired,",
						"          OtherGenderCandStM,",
						"          IntOtherGenderCandStM,",
						"          ExtOtherGenderCandStM,",
						"          OtherGenderCandHired,",
						"          IntOtherGenderCandHired,",
						"          ExtOtherGenderCandHired,",
						"          PoCCandStM,",
						"          IntPoCCandStM,",
						"          ExtPoCCandStM,",
						"          PoCCandHired,",
						"          IntPoCCandHired,",
						"          ExtPoCCandHired,",
						"          DiverseCandStM,",
						"          IntDiverseCandStM,",
						"          ExtDiverseCandStM,",
						"          DiverseCandHired,",
						"          IntDiverseCandHired,",
						"          ExtDiverseCandHired,",
						"          FemalePoCCandStM,",
						"          IntFemalePoCCandStM,",
						"          ExtFemalePoCCandStM,",
						"          FemalePoCCandHired,",
						"          IntFemalePoCCandHired,",
						"          ExtFemalePoCCandHired,",
						"          FemaleNotPoCCandStM,",
						"          IntFemaleNotPoCCandStM,",
						"          ExtFemaleNotPoCCandStM,",
						"          FemaleNotPoCCandHired,",
						"          IntFemaleNotPoCCandHired,",
						"          ExtFemaleNotPoCCandHired,",
						"          NotFemalePoCCandStM,",
						"          IntNotFemalePoCCandStM,",
						"          ExtNotFemalePoCCandStM,",
						"          NotFemalePoCCandHired,",
						"          IntNotFemalePoCCandHired,",
						"          ExtNotFemalePoCCandHired,",
						"          NotFemaleNotPoCCandStM,",
						"          IntNotFemaleNotPoCCandStM,",
						"          ExtNotFemaleNotPoCCandStM,",
						"          NotFemaleNotPoCCandHired,",
						"          IntNotFemaleNotPoCCandHired,",
						"          ExtNotFemaleNotPoCCandHired,",
						"          DiverseSlate,",
						"          IntDiverseSlate,",
						"          ExtDiverseSlate,",
						"          NoDiverseSlate,",
						"          IntNoDiverseSlate,",
						"          ExtNoDiverseSlate,",
						"          DiverseHiredSlate,",
						"          IntDiverseHiredSlate,",
						"          ExtDiverseHiredSlate,",
						"          PoCSlate,",
						"          IntPoCSlate,",
						"          ExtPoCSlate,",
						"          NoPoCSlate,",
						"          IntNoPoCSlate,",
						"          ExtNoPoCSlate,",
						"          PoCHiredSlate,",
						"          IntPoCHiredSlate,",
						"          ExtPoCHiredSlate,",
						"          WhiteSlate,",
						"          IntWhiteSlate,",
						"          ExtWhiteSlate,",
						"          NoWhiteSlate,",
						"          IntNoWhiteSlate,",
						"          ExtNoWhiteSlate,",
						"          WhiteHiredSlate,",
						"          IntWhiteHiredSlate,",
						"          ExtWhiteHiredSlate,",
						"          BlackSlate,",
						"          IntBlackSlate,",
						"          ExtBlackSlate,",
						"          NoBlackSlate,",
						"          IntNoBlackSlate,",
						"          ExtNoBlackSlate,",
						"          BlackHiredSlate,",
						"          IntBlackHiredSlate,",
						"          ExtBlackHiredSlate,",
						"          LatinxSlate,",
						"          IntLatinxSlate,",
						"          ExtLatinxSlate,",
						"          NoLatinxSlate,",
						"          IntNoLatinxSlate,",
						"          ExtNoLatinxSlate,",
						"          LatinxHiredSlate,",
						"          IntLatinxHiredSlate,",
						"          ExtLatinxHiredSlate,",
						"          AsianSlate,",
						"          IntAsianSlate,",
						"          ExtAsianSlate,",
						"          NoAsianSlate,",
						"          IntNoAsianSlate,",
						"          ExtNoAsianSlate,",
						"          AsianHiredSlate,",
						"          IntAsianHiredSlate,",
						"          ExtAsianHiredSlate,",
						"          TwoPlusRacesSlate,",
						"          IntTwoPlusRacesSlate,",
						"          ExtTwoPlusRacesSlate,",
						"          NoTwoPlusRacesSlate,",
						"          IntNoTwoPlusRacesSlate,",
						"          ExtNoTwoPlusRacesSlate,",
						"          TwoPlusRacesHiredSlate,",
						"          IntTwoPlusRacesHiredSlate,",
						"          ExtTwoPlusRacesHiredSlate,",
						"          OtherRaceSlate,",
						"          IntOtherRaceSlate,",
						"          ExtOtherRaceSlate,",
						"          NoOtherRaceSlate,",
						"          IntNoOtherRaceSlate,",
						"          ExtNoOtherRaceSlate,",
						"          OtherRaceHiredSlate,",
						"          IntOtherRaceHiredSlate,",
						"          ExtOtherRaceHiredSlate,",
						"          FemaleSlate,",
						"          IntFemaleSlate,",
						"          ExtFemaleSlate,",
						"          NoFemaleSlate,",
						"          IntNoFemaleSlate,",
						"          ExtNoFemaleSlate,",
						"          FemaleHiredSlate,",
						"          IntFemaleHiredSlate,",
						"          ExtFemaleHiredSlate,",
						"          MaleSlate,",
						"          IntMaleSlate,",
						"          ExtMaleSlate,",
						"          NoMaleSlate,",
						"          IntNoMaleSlate,",
						"          ExtNoMaleSlate,",
						"          MaleHiredSlate,",
						"          IntMaleHiredSlate,",
						"          ExtMaleHiredSlate,",
						"          LoadDt",
						"     )) ~> AppendDivSlateFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendOtherFactTbl"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Other",
						"Other alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventYear','EventType','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendOtherFactTbl"
					]
				}
			},
			"dependsOn": []
		}
	]
}