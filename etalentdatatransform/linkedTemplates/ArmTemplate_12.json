{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "Gender"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Gender",
						"Gender alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Gender})),",
						"     deleteIf(isNull({Elloree Gender}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientGender = {Client Gender},",
						"          ElloreeGender = {Elloree Gender},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientGender'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Gender_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "Gender"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[GenderMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Gender",
						"Gender alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientGender'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Job')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Job",
								"type": "DatasetReference"
							},
							"name": "Job"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentJobMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Job Function} as string,",
						"          {Client Job Title} as string,",
						"          {Elloree Job Function} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Job",
						"Job alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Job Function})),",
						"     deleteIf(isNull({Client Job Title})),",
						"     deleteIf(isNull({Elloree Job Function}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientJobFunction = {Client Job Function},",
						"          ClientJobTitle = {Client Job Title},",
						"          ElloreeJobFunction = {Elloree Job Function},",
						"          ClientId = {Client ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientJobTitle as string,",
						"          ClientJobFunction as string,",
						"          ElloreeJobFunction as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientJobFunction','ClientJobTitle'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Job_Review')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Job",
								"type": "DatasetReference"
							},
							"name": "JobFunctionMappingFile"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMappingTable"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "ReqDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentJobMapReviewTbl",
								"type": "DatasetReference"
							},
							"name": "LoadJobMappingtoJobMappingReviewTbl"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AddLoadDt"
						},
						{
							"name": "SelectCorpTitleMapping"
						},
						{
							"name": "JoinCorpTitle"
						},
						{
							"name": "CollapseForUniqueRows"
						},
						{
							"name": "CollapseForUniqueReqRows"
						},
						{
							"name": "FInalJobReqSelect"
						},
						{
							"name": "UnionJobReqTbl"
						},
						{
							"name": "selectCoreTableFields"
						},
						{
							"name": "FinalClientTableSelections"
						},
						{
							"name": "SelectOnlyValidCorpTitleJobCombinations"
						},
						{
							"name": "SelectFinalFields"
						},
						{
							"name": "CollapseRows"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Elloree Corporate Title} as string,",
						"          {Client Job Title} as string,",
						"          {Client Job Function} as string,",
						"          {Elloree Job Function} as string,",
						"          {Suggested Elloree Job Function} as string,",
						"          {Suggested Source} as string,",
						"          {2020 Headcount Curr Function} as string,",
						"          {2020 Headcount Prev Function} as string,",
						"          {2020 Hire Curr Function} as string,",
						"          {2020 Hire Prev Function} as string,",
						"          {2020 Promotion Curr Function} as string,",
						"          {2020 Promotion Prev Function} as string,",
						"          {2020 Termination Curr Function} as string,",
						"          {2020 Termination Prev Function} as string,",
						"          {2021 Headcount Curr Function} as string,",
						"          {2021 Headcount Prev Function} as string,",
						"          {2021 Hire Curr Function} as string,",
						"          {2021 Hire Prev Function} as string,",
						"          {2021 Promotion Curr Function} as string,",
						"          {2021 Promotion Prev Function} as string,",
						"          {2021 Termination Curr Function} as string,",
						"          {2021 Termination Prev Function} as string,",
						"          {2022 Headcount Curr Function} as string,",
						"          {2022 Headcount Prev Function} as string,",
						"          {2022 Hire Curr Function} as string,",
						"          {2022 Hire Prev Function} as string,",
						"          {2022 Promotion Curr Function} as string,",
						"          {2022 Promotion Prev Function} as string,",
						"          {2022 Requisition Curr Function} as string,",
						"          {2022 Requisition Prev Function} as string,",
						"          {2022 Termination Curr Function} as string,",
						"          {2022 Termination Prev Function} as string,",
						"          {2023 Headcount Curr Function} as string,",
						"          {2023 Headcount Prev Function} as string,",
						"          {2023 Hire Curr Function} as string,",
						"          {2023 Hire Prev Function} as string,",
						"          {2023 Promotion Curr Function} as string,",
						"          {2023 Promotion Prev Function} as string,",
						"          {2023 Requisition Curr Function} as string,",
						"          {2023 Requisition Prev Function} as string,",
						"          {2023 Termination Curr Function} as string,",
						"          {2023 Termination Prev Function} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobFunctionMappingFile",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CorpTitleMappingTable",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ReqDB",
						"SelectFinalFields alterRow(upsertIf(true()),",
						"     deleteIf(isNull(ClientId)),",
						"     deleteIf(isNull(ClientEngagementDt)),",
						"     deleteIf(isNull(JobFunction)),",
						"     deleteIf(isNull(JobTitle)),",
						"     deleteIf(isNull(ElloreeJobFunction))) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate()) ~> AddLoadDt",
						"CorpTitleMappingTable select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientCorpTitle,",
						"          ElloreeCorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleMapping",
						"JobFunctionMappingFile, SelectCorpTitleMapping join({Client ID} == ClientId",
						"     && {Client Engagement Date} == ClientEngagementDt",
						"     && {Elloree Corporate Title} == ElloreeCorpTitle,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCorpTitle",
						"UnionJobReqTbl aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction),",
						"     ClientIdForQuery = max(ClientId)) ~> CollapseForUniqueRows",
						"ReqDB aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction),",
						"     ClientIdForQuery = max(ClientId)) ~> CollapseForUniqueReqRows",
						"CollapseForUniqueReqRows select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FInalJobReqSelect",
						"selectCoreTableFields, FInalJobReqSelect union(byName: true)~> UnionJobReqTbl",
						"CoreDB select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreTableFields",
						"CollapseForUniqueRows select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          CorpTitle,",
						"          JobTitle,",
						"          JobFunction,",
						"          ClientIdForQuery",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalClientTableSelections",
						"JoinCorpTitle, FinalClientTableSelections join({Client ID} == FinalClientTableSelections@ClientId",
						"     && {Client Engagement Date} == FinalClientTableSelections@ClientEngagementDt",
						"     && ClientCorpTitle == CorpTitle",
						"     && {Client Job Title} == JobTitle",
						"     && {Client Job Function} == JobFunction,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SelectOnlyValidCorpTitleJobCombinations",
						"CollapseRows select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          CorpTitle = ClientCorpTitle,",
						"          JobFunction = {Client Job Function},",
						"          JobTitle = {Client Job Title},",
						"          ElloreeJobFunction = {Elloree Job Function}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalFields",
						"derivedColumn2 aggregate(groupBy({Client Engagement Date},",
						"          ClientCorpTitle,",
						"          {Client Job Function},",
						"          {Client Job Title},",
						"          {Elloree Job Function}),",
						"     {Client ID} = max({Client ID})) ~> CollapseRows",
						"SelectOnlyValidCorpTitleJobCombinations derive({Client Job Title} = trim({Client Job Title}),",
						"          {Client Job Function} = trim({Client Job Function}),",
						"          ClientCorpTitle = trim(ClientCorpTitle)) ~> derivedColumn2",
						"AddLoadDt sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientJobTitle as string,",
						"          ClientJobFunction as string,",
						"          ElloreeJobFunction as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientJobTitle','ClientJobFunction','ClientCorpTitle'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientCorpTitle = CorpTitle,",
						"          ClientJobTitle = JobTitle,",
						"          ClientJobFunction = JobFunction,",
						"          ElloreeJobFunction,",
						"          LoadDt",
						"     )) ~> LoadJobMappingtoJobMappingReviewTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_LGBTQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_LGTBQ",
								"type": "DatasetReference"
							},
							"name": "LGTBQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client LGTBQ} as string,",
						"          {Elloree LGTBQ} as string,",
						"          {Suggested Elloree LGTBQ} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LGTBQ",
						"LGTBQ alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client LGTBQ})),",
						"     deleteIf(isNull({Elloree LGTBQ}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientLGTBQ = {Client LGTBQ},",
						"          ElloreeLGTBQ = {Elloree LGTBQ},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientLGTBQ'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientLGTBQ,",
						"          ElloreeLGTBQ,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_LGBTQ_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "LGTBQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LGTBQMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> LGTBQ",
						"LGTBQ alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientLGTBQ'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientLGTBQ,",
						"          ElloreeLGTBQ,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Location",
								"type": "DatasetReference"
							},
							"name": "Location"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendLocationMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Work Office Location} as string,",
						"          {Client Work City} as string,",
						"          {Client Work State} as string,",
						"          {Client Work Country} as string,",
						"          {Client Strategic Work Location Ind} as string,",
						"          {Elloree Work Ofiice} as string,",
						"          {Elloree Work City} as string,",
						"          {Elloree Work State} as string,",
						"          {Elloree Work Country} as string,",
						"          {Elloree Work Region} as string,",
						"          {Elloree Strategic Location} as string,",
						"          {Elloree Location Sort Id} as string,",
						"          {Suggested Elloree Work Office} as string,",
						"          {Suggested Elloree Work City} as string,",
						"          {Suggested Elloree Work State} as string,",
						"          {Suggested Elloree Work Country} as string,",
						"          {Suggested Elloree Work Region} as string,",
						"          {Suggested Elloree Strategic Location} as string,",
						"          {Suggested Elloree Location Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {Location Identifier 1} as string,",
						"          {Location Identifier 2} as string,",
						"          {Location Identifier 3} as string,",
						"          {Location Identifier 4} as string,",
						"          {Location Identifier 5} as string,",
						"          {2019 Headcount} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promotion} as string,",
						"          {2020 Termination} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promotion} as string,",
						"          {2021 Requisition} as string,",
						"          {2021 Termination} as string,",
						"          {2022 Headcount} as string,",
						"          {2022 Hire} as string,",
						"          {2022 Promotion} as string,",
						"          {2022 Requisition} as string,",
						"          {2022 Termination} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Location",
						"Location alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Work Region})),",
						"     deleteIf(isNull({Elloree Work Country})),",
						"     deleteIf(isNull({Elloree Work State})),",
						"     deleteIf(isNull({Elloree Work City})),",
						"     deleteIf(isNull({Elloree Work Ofiice})),",
						"     deleteIf(isNull({Elloree Location Sort Id}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientWorkOffice = {Client Work Office Location},",
						"          ClientWorkCity = {Client Work City},",
						"          ClientWorkState = {Client Work State},",
						"          ClientWorkCountry = {Client Work Country},",
						"          ClientStrategicLoc = {Client Strategic Work Location Ind},",
						"          ElloreeWorkOfiice = {Elloree Work Ofiice},",
						"          ElloreeWorkCity = {Elloree Work City},",
						"          ElloreeWorkState = {Elloree Work State},",
						"          ElloreeWorkCountry = {Elloree Work Country},",
						"          ElloreeWorkRegion = {Elloree Work Region},",
						"          ElloreeStrategicLoc = {Elloree Strategic Location},",
						"          ElloreeLocSortId = {Elloree Location Sort Id},",
						"          LocationIdentifier1 = {Location Identifier 1},",
						"          LocationIdentifier2 = {Location Identifier 2},",
						"          LocationIdentifier3 = {Location Identifier 3},",
						"          LocationIdentifier4 = {Location Identifier 4},",
						"          LocationIdentifier5 = {Location Identifier 5}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LocationIdentifier1 as string,",
						"          LocationIdentifier2 as string,",
						"          LocationIdentifier3 as string,",
						"          LocationIdentifier4 as string,",
						"          LocationIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientWorkOffice','ClientWorkCountry','ClientWorkState','ClientWorkCity','ClientStrategicLoc'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientWorkOffice,",
						"          ClientWorkCity,",
						"          ClientWorkState,",
						"          ClientWorkCountry,",
						"          ClientStrategicLoc,",
						"          ElloreeWorkOffice = ElloreeWorkOfiice,",
						"          ElloreeWorkCity,",
						"          ElloreeWorkState,",
						"          ElloreeWorkCountry,",
						"          ElloreeWorkRegion,",
						"          ElloreeStrategicLoc,",
						"          ElloreeLocSortId,",
						"          LocationIdentifier1,",
						"          LocationIdentifier2,",
						"          LocationIdentifier3,",
						"          LocationIdentifier4,",
						"          LocationIdentifier5,",
						"          LoadDt",
						"     )) ~> AppendLocationMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Location_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "Location"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendLocationMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LocationMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Location",
						"Location alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LocationIdentifier1 as string,",
						"          LocationIdentifier2 as string,",
						"          LocationIdentifier3 as string,",
						"          LocationIdentifier4 as string,",
						"          LocationIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientWorkOffice','ClientWorkCountry','ClientWorkState','ClientWorkCity','ClientStrategicLoc'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendLocationMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_PerformanceRating",
								"type": "DatasetReference"
							},
							"name": "Performance"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendPerformanceMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Performance Rating} as string,",
						"          {Elloree Performance Rating} as string,",
						"          {Elloree Performance Rating Sort} as string,",
						"          {Suggested Elloree Performance Rating} as string,",
						"          {Suggested Elloree Performane Rating Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Talent Assessment} as string,",
						"          {2018 Talent Assessment} as string,",
						"          {2019 Talent Assessment} as string,",
						"          {2020 Talent Assessment} as string,",
						"          {2021 Talent Assessment} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Performance",
						"Performance alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Performance Rating})),",
						"     deleteIf(isNull({Elloree Performance Rating})),",
						"     deleteIf(isNull({Elloree Performance Rating Sort}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientPerfRating = {Client Performance Rating},",
						"          ElloreePerfRating = {Elloree Performance Rating},",
						"          ElloreePerfRatingSortId = {Elloree Performance Rating Sort},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientPerfRating'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendPerformanceMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_PerformanceRating_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "Performance"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendPerformanceMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Performance",
						"Performance alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientPerfRating'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendPerformanceMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_ReqStatus",
								"type": "DatasetReference"
							},
							"name": "RequisitionStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Requisition Status} as string,",
						"          {Elloree Requisition Status} as string,",
						"          {Suggested Elloree Requisition Status} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Requisition} as string,",
						"          {2022 Requisition} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RequisitionStatus",
						"RequisitionStatus alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Requisition Status})),",
						"     deleteIf(isNull({Elloree Requisition Status}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientReqStatus = {Client Requisition Status},",
						"          ElloreeReqStatus = {Elloree Requisition Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqStatus_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "RequisitionStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqStatusMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> RequisitionStatus",
						"RequisitionStatus alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_ReqType",
								"type": "DatasetReference"
							},
							"name": "RequisitionType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Requisition Type} as string,",
						"          {Elloree Requisition Type} as string,",
						"          {Suggested Elloree Requisition Type} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Requisition} as string,",
						"          {2022 Job Requisition} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RequisitionType",
						"RequisitionType alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Requisition Type})),",
						"     deleteIf(isNull({Elloree Requisition Type}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientReqType = {Client Requisition Type},",
						"          ElloreeReqType = {Elloree Requisition Type}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqType_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "RequisitionType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTypeMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> RequisitionType",
						"RequisitionType alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Veteran",
								"type": "DatasetReference"
							},
							"name": "Veteran"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Veteran} as string,",
						"          {Elloree Veteran} as string,",
						"          {Suggested Elloree Veteran} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Veteran",
						"Veteran alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Veteran})),",
						"     deleteIf(isNull({Elloree Veteran}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientVeteran = {Client Veteran},",
						"          ElloreeVeteran = {Elloree Veteran},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientVeteran'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Veteran_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "Veteran"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[VeteranMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Veteran",
						"Veteran alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientVeteran'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Tbl_Client')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "SourceCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "LoadClientInfo"
						}
					],
					"transformations": [
						{
							"name": "RemoveNull"
						},
						{
							"name": "GroupClientInfo"
						},
						{
							"name": "AssignDerivedColumns"
						},
						{
							"name": "SelectFinalOutput"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_EngagementType as string,",
						"     Flow_Client_Desc as string,",
						"     Flow_Client_Sector as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCore",
						"SourceCore filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNull",
						"RemoveNull aggregate(groupBy({Client Engagement Date}),",
						"     ClientId = max({Client ID})) ~> GroupClientInfo",
						"GroupClientInfo derive(ClientDesc = $Flow_Client_Desc,",
						"          ClientEngagementType = $Flow_Client_EngagementType,",
						"          ClientSector = $Flow_Client_Sector,",
						"          LoadDt = currentDate()) ~> AssignDerivedColumns",
						"alterRow2 select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientEngagementType,",
						"          ClientSector,",
						"          ClientDesc,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"AssignDerivedColumns alterRow(upsertIf(true())) ~> alterRow2",
						"SelectFinalOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientEngagementType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientEngagementType,",
						"          ClientSector,",
						"          ClientDesc,",
						"          LoadDt",
						"     ),",
						"     partitionBy('hash', 1)) ~> LoadClientInfo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Tbl_Client_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "SourceCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "LoadClientInfo"
						}
					],
					"transformations": [
						{
							"name": "AssignDerivedColumns"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[ClientTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> SourceCore",
						"SourceCore derive(ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          LoadDt = currentDate()) ~> AssignDerivedColumns",
						"AssignDerivedColumns alterRow(upsertIf(true())) ~> alterRow2",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientEngagementType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> LoadClientInfo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Tbl_OthCoreAnalysisRef')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Analysis Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_Curr",
								"type": "DatasetReference"
							},
							"name": "SourceAnalysisRefOtherCoreCurr"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_1P",
								"type": "DatasetReference"
							},
							"name": "SourceAnalysisRefOtherCore1P"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_2P",
								"type": "DatasetReference"
							},
							"name": "SourceAnalysisRefOtherCore2P"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_3P",
								"type": "DatasetReference"
							},
							"name": "SourceAnalysisRefOtherCore3P"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "AppendOtherCoreAnalysisTmp"
						}
					],
					"transformations": [
						{
							"name": "AssignDerivedColumns"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "unionAllTimePeriods"
						},
						{
							"name": "RemoveNullTypes"
						},
						{
							"name": "SelectFinalOutput"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Collection_Year as string,",
						"     Flow_Collection_Quarter as string",
						"}",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceAnalysisRefOtherCoreCurr",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceAnalysisRefOtherCore1P",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceAnalysisRefOtherCore2P",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceAnalysisRefOtherCore3P",
						"RemoveNullTypes derive(ClientId = $Flow_Client_Id,",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          DataCollectionYear = toInteger($Flow_Collection_Year),",
						"          DataCollectionQuarter = toInteger($Flow_Collection_Quarter),",
						"          Type = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type),",
						"          LoadDt = currentDate()) ~> AssignDerivedColumns",
						"SelectFinalOutput alterRow(upsertIf(true())) ~> alterRow2",
						"SourceAnalysisRefOtherCoreCurr, SourceAnalysisRefOtherCore1P, SourceAnalysisRefOtherCore2P, SourceAnalysisRefOtherCore3P union(byName: true)~> unionAllTimePeriods",
						"unionAllTimePeriods filter(Type!='N/A') ~> RemoveNullTypes",
						"AssignDerivedColumns select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          DataCollectionYear,",
						"          DataCollectionQuarter,",
						"          Type,",
						"          Notes,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          Type as string,",
						"          DataCollectionYear as integer,",
						"          DataCollectionQuarter as integer,",
						"          Notes as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','DataCollectionYear','DataCollectionQuarter','Type'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          Type,",
						"          DataCollectionYear,",
						"          DataCollectionQuarter,",
						"          Notes,",
						"          LoadDt",
						"     )) ~> AppendOtherCoreAnalysisTmp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Tbl_OthCoreAnalysis_Curr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Analysis Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Analysis_OtherCore_Curr",
								"type": "DatasetReference"
							},
							"name": "SourceAnalysisRefOtherCoreCurr"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisCurrTbl",
								"type": "DatasetReference"
							},
							"name": "LoadOtherCoreAnalysisCurr"
						}
					],
					"transformations": [
						{
							"name": "AssignDerivedColumns"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "SelectFinalOutput"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Collection_Year as string,",
						"     Flow_Collection_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          Curr_DataCollectionYear as integer,",
						"          Curr_DataCollectionQuarter as integer,",
						"          Curr_EventYear as integer,",
						"          Curr_T1Type as string,",
						"          Curr_T1OtherCharVal1 as string,",
						"          Curr_T1OtherCharVal2 as string,",
						"          Curr_T1OtherNumVal1 as double,",
						"          Curr_T1OtherNumVal2 as double,",
						"          Curr_T1OtherDtVal1 as date,",
						"          Curr_T1OtherDtVal2 as date,",
						"          Curr_T2Type as string,",
						"          Curr_T2OtherCharVal1 as string,",
						"          Curr_T2OtherCharVal2 as string,",
						"          Curr_T2OtherNumVal1 as double,",
						"          Curr_T2OtherNumVal2 as double,",
						"          Curr_T2OtherDtVal1 as date,",
						"          Curr_T2OtherDtVal2 as date,",
						"          Curr_T3Type as string,",
						"          Curr_T3OtherCharVal1 as string,",
						"          Curr_T3OtherCharVal2 as string,",
						"          Curr_T3OtherNumVal1 as double,",
						"          Curr_T3OtherNumVal2 as double,",
						"          Curr_T3OtherDtVal1 as date,",
						"          Curr_T3OtherDtVal2 as date,",
						"          Curr_T4Type as string,",
						"          Curr_T4OtherCharVal1 as string,",
						"          Curr_T4OtherCharVal2 as string,",
						"          Curr_T4OtherNumVal1 as double,",
						"          Curr_T4OtherNumVal2 as double,",
						"          Curr_T4OtherDtVal1 as date,",
						"          Curr_T4OtherDtVal2 as date,",
						"          Curr_T5Type as string,",
						"          Curr_T5OtherCharVal1 as string,",
						"          Curr_T5OtherCharVal2 as string,",
						"          Curr_T5OtherNumVal1 as double,",
						"          Curr_T5OtherNumVal2 as double,",
						"          Curr_T5OtherDtVal1 as date,",
						"          Curr_T5OtherDtVal2 as date,",
						"          Curr_T6Type as string,",
						"          Curr_T6OtherCharVal1 as string,",
						"          Curr_T6OtherCharVal2 as string,",
						"          Curr_T6OtherNumVal1 as double,",
						"          Curr_T6OtherNumVal2 as double,",
						"          Curr_T6OtherDtVal1 as date,",
						"          Curr_T6OtherDtVal2 as date,",
						"          Curr_T7Type as string,",
						"          Curr_T7OtherCharVal1 as string,",
						"          Curr_T7OtherCharVal2 as string,",
						"          Curr_T7OtherNumVal1 as double,",
						"          Curr_T7OtherNumVal2 as double,",
						"          Curr_T7OtherDtVal1 as date,",
						"          Curr_T7OtherDtVal2 as date,",
						"          Curr_T8Type as string,",
						"          Curr_T8OtherCharVal1 as string,",
						"          Curr_T8OtherCharVal2 as string,",
						"          Curr_T8OtherNumVal1 as double,",
						"          Curr_T8OtherNumVal2 as double,",
						"          Curr_T8OtherDtVal1 as date,",
						"          Curr_T8OtherDtVal2 as date,",
						"          Curr_T9Type as string,",
						"          Curr_T9OtherCharVal1 as string,",
						"          Curr_T9OtherCharVal2 as string,",
						"          Curr_T9OtherNumVal1 as double,",
						"          Curr_T9OtherNumVal2 as double,",
						"          Curr_T9OtherDtVal1 as date,",
						"          Curr_T9OtherDtVal2 as date,",
						"          Curr_T10Type as string,",
						"          Curr_T10OtherCharVal1 as string,",
						"          Curr_T10OtherCharVal2 as string,",
						"          Curr_T10OtherNumVal1 as double,",
						"          Curr_T10OtherNumVal2 as double,",
						"          Curr_T10OtherDtVal1 as date,",
						"          Curr_T10OtherDtVal2 as date,",
						"          Curr_T11Type as string,",
						"          Curr_T11OtherCharVal1 as string,",
						"          Curr_T11OtherCharVal2 as string,",
						"          Curr_T11OtherNumVal1 as double,",
						"          Curr_T11OtherNumVal2 as double,",
						"          Curr_T11OtherDtVal1 as date,",
						"          Curr_T11OtherDtVal2 as date,",
						"          Curr_T12Type as string,",
						"          Curr_T12OtherCharVal1 as string,",
						"          Curr_T12OtherCharVal2 as string,",
						"          Curr_T12OtherNumVal1 as double,",
						"          Curr_T12OtherNumVal2 as double,",
						"          Curr_T12OtherDtVal1 as date,",
						"          Curr_T12OtherDtVal2 as date,",
						"          Curr_T13Type as string,",
						"          Curr_T13OtherCharVal1 as string,",
						"          Curr_T13OtherCharVal2 as string,",
						"          Curr_T13OtherNumVal1 as double,",
						"          Curr_T13OtherNumVal2 as double,",
						"          Curr_T13OtherDtVal1 as date,",
						"          Curr_T13OtherDtVal2 as date,",
						"          Curr_T14Type as string,",
						"          Curr_T14OtherCharVal1 as string,",
						"          Curr_T14OtherCharVal2 as string,",
						"          Curr_T14OtherNumVal1 as double,",
						"          Curr_T14OtherNumVal2 as double,",
						"          Curr_T14OtherDtVal1 as date,",
						"          Curr_T14OtherDtVal2 as date,",
						"          Curr_T15Type as string,",
						"          Curr_T15OtherCharVal1 as string,",
						"          Curr_T15OtherCharVal2 as string,",
						"          Curr_T15OtherNumVal1 as double,",
						"          Curr_T15OtherNumVal2 as double,",
						"          Curr_T15OtherDtVal1 as date,",
						"          Curr_T15OtherDtVal2 as date,",
						"          Curr_T16Type as string,",
						"          Curr_T16OtherCharVal1 as string,",
						"          Curr_T16OtherCharVal2 as string,",
						"          Curr_T16OtherNumVal1 as double,",
						"          Curr_T16OtherNumVal2 as double,",
						"          Curr_T16OtherDtVal1 as date,",
						"          Curr_T16OtherDtVal2 as date,",
						"          Curr_T17Type as string,",
						"          Curr_T17OtherCharVal1 as string,",
						"          Curr_T17OtherCharVal2 as string,",
						"          Curr_T17OtherNumVal1 as double,",
						"          Curr_T17OtherNumVal2 as double,",
						"          Curr_T17OtherDtVal1 as date,",
						"          Curr_T17OtherDtVal2 as date,",
						"          Curr_T18Type as string,",
						"          Curr_T18OtherCharVal1 as string,",
						"          Curr_T18OtherCharVal2 as string,",
						"          Curr_T18OtherNumVal1 as double,",
						"          Curr_T18OtherNumVal2 as double,",
						"          Curr_T18OtherDtVal1 as date,",
						"          Curr_T18OtherDtVal2 as date,",
						"          Curr_T19Type as string,",
						"          Curr_T19OtherCharVal1 as string,",
						"          Curr_T19OtherCharVal2 as string,",
						"          Curr_T19OtherNumVal1 as double,",
						"          Curr_T19OtherNumVal2 as double,",
						"          Curr_T19OtherDtVal1 as date,",
						"          Curr_T19OtherDtVal2 as date,",
						"          Curr_T20Type as string,",
						"          Curr_T20OtherCharVal1 as string,",
						"          Curr_T20OtherCharVal2 as string,",
						"          Curr_T20OtherNumVal1 as double,",
						"          Curr_T20OtherNumVal2 as double,",
						"          Curr_T20OtherDtVal1 as date,",
						"          Curr_T20OtherDtVal2 as date,",
						"          Curr_T21Type as string,",
						"          Curr_T21OtherCharVal1 as string,",
						"          Curr_T21OtherCharVal2 as string,",
						"          Curr_T21OtherNumVal1 as double,",
						"          Curr_T21OtherNumVal2 as double,",
						"          Curr_T21OtherDtVal1 as date,",
						"          Curr_T21OtherDtVal2 as date,",
						"          Curr_T22Type as string,",
						"          Curr_T22OtherCharVal1 as string,",
						"          Curr_T22OtherCharVal2 as string,",
						"          Curr_T22OtherNumVal1 as double,",
						"          Curr_T22OtherNumVal2 as double,",
						"          Curr_T22OtherDtVal1 as date,",
						"          Curr_T22OtherDtVal2 as date,",
						"          Curr_T23Type as string,",
						"          Curr_T23OtherCharVal1 as string,",
						"          Curr_T23OtherCharVal2 as string,",
						"          Curr_T23OtherNumVal1 as double,",
						"          Curr_T23OtherNumVal2 as double,",
						"          Curr_T23OtherDtVal1 as date,",
						"          Curr_T23OtherDtVal2 as date,",
						"          Curr_T24Type as string,",
						"          Curr_T24OtherCharVal1 as string,",
						"          Curr_T24OtherCharVal2 as string,",
						"          Curr_T24OtherNumVal1 as double,",
						"          Curr_T24OtherNumVal2 as double,",
						"          Curr_T24OtherDtVal1 as date,",
						"          Curr_T24OtherDtVal2 as date,",
						"          Curr_T25Type as string,",
						"          Curr_T25OtherCharVal1 as string,",
						"          Curr_T25OtherCharVal2 as string,",
						"          Curr_T25OtherNumVal1 as double,",
						"          Curr_T25OtherNumVal2 as double,",
						"          Curr_T25OtherDtVal1 as date,",
						"          Curr_T25OtherDtVal2 as date,",
						"          Curr_T26Type as string,",
						"          Curr_T26OtherCharVal1 as string,",
						"          Curr_T26OtherCharVal2 as string,",
						"          Curr_T26OtherNumVal1 as double,",
						"          Curr_T26OtherNumVal2 as double,",
						"          Curr_T26OtherDtVal1 as date,",
						"          Curr_T26OtherDtVal2 as date,",
						"          Curr_T27Type as string,",
						"          Curr_T27OtherCharVal1 as string,",
						"          Curr_T27OtherCharVal2 as string,",
						"          Curr_T27OtherNumVal1 as double,",
						"          Curr_T27OtherNumVal2 as double,",
						"          Curr_T27OtherDtVal1 as date,",
						"          Curr_T27OtherDtVal2 as date,",
						"          Curr_T28Type as string,",
						"          Curr_T28OtherCharVal1 as string,",
						"          Curr_T28OtherCharVal2 as string,",
						"          Curr_T28OtherNumVal1 as double,",
						"          Curr_T28OtherNumVal2 as double,",
						"          Curr_T28OtherDtVal1 as date,",
						"          Curr_T28OtherDtVal2 as date,",
						"          Curr_T29Type as string,",
						"          Curr_T29OtherCharVal1 as string,",
						"          Curr_T29OtherCharVal2 as string,",
						"          Curr_T29OtherNumVal1 as double,",
						"          Curr_T29OtherNumVal2 as double,",
						"          Curr_T29OtherDtVal1 as date,",
						"          Curr_T29OtherDtVal2 as date,",
						"          Curr_T30Type as string,",
						"          Curr_T30OtherCharVal1 as string,",
						"          Curr_T30OtherCharVal2 as string,",
						"          Curr_T30OtherNumVal1 as double,",
						"          Curr_T30OtherNumVal2 as double,",
						"          Curr_T30OtherDtVal1 as date,",
						"          Curr_T30OtherDtVal2 as date,",
						"          Curr_T31Type as string,",
						"          Curr_T31OtherCharVal1 as string,",
						"          Curr_T31OtherCharVal2 as string,",
						"          Curr_T31OtherNumVal1 as double,",
						"          Curr_T31OtherNumVal2 as double,",
						"          Curr_T31OtherDtVal1 as date,",
						"          Curr_T31OtherDtVal2 as date,",
						"          Curr_T32Type as string,",
						"          Curr_T32OtherCharVal1 as string,",
						"          Curr_T32OtherCharVal2 as string,",
						"          Curr_T32OtherNumVal1 as double,",
						"          Curr_T32OtherNumVal2 as double,",
						"          Curr_T32OtherDtVal1 as date,",
						"          Curr_T32OtherDtVal2 as date,",
						"          Curr_T33Type as string,",
						"          Curr_T33OtherCharVal1 as string,",
						"          Curr_T33OtherCharVal2 as string,",
						"          Curr_T33OtherNumVal1 as double,",
						"          Curr_T33OtherNumVal2 as double,",
						"          Curr_T33OtherDtVal1 as date,",
						"          Curr_T33OtherDtVal2 as date,",
						"          Curr_T34Type as string,",
						"          Curr_T34OtherCharVal1 as string,",
						"          Curr_T34OtherCharVal2 as string,",
						"          Curr_T34OtherNumVal1 as double,",
						"          Curr_T34OtherNumVal2 as double,",
						"          Curr_T34OtherDtVal1 as date,",
						"          Curr_T34OtherDtVal2 as date,",
						"          Curr_T35Type as string,",
						"          Curr_T35OtherCharVal1 as string,",
						"          Curr_T35OtherCharVal2 as string,",
						"          Curr_T35OtherNumVal1 as double,",
						"          Curr_T35OtherNumVal2 as double,",
						"          Curr_T35OtherDtVal1 as date,",
						"          Curr_T35OtherDtVal2 as date,",
						"          Curr_T36Type as string,",
						"          Curr_T36OtherCharVal1 as string,",
						"          Curr_T36OtherCharVal2 as string,",
						"          Curr_T36OtherNumVal1 as double,",
						"          Curr_T36OtherNumVal2 as double,",
						"          Curr_T36OtherDtVal1 as date,",
						"          Curr_T36OtherDtVal2 as date,",
						"          Curr_T37Type as string,",
						"          Curr_T37OtherCharVal1 as string,",
						"          Curr_T37OtherCharVal2 as string,",
						"          Curr_T37OtherNumVal1 as double,",
						"          Curr_T37OtherNumVal2 as double,",
						"          Curr_T37OtherDtVal1 as date,",
						"          Curr_T37OtherDtVal2 as date,",
						"          Curr_T38Type as string,",
						"          Curr_T38OtherCharVal1 as string,",
						"          Curr_T38OtherCharVal2 as string,",
						"          Curr_T38OtherNumVal1 as double,",
						"          Curr_T38OtherNumVal2 as double,",
						"          Curr_T38OtherDtVal1 as date,",
						"          Curr_T38OtherDtVal2 as date,",
						"          Curr_T39Type as string,",
						"          Curr_T39OtherCharVal1 as string,",
						"          Curr_T39OtherCharVal2 as string,",
						"          Curr_T39OtherNumVal1 as double,",
						"          Curr_T39OtherNumVal2 as double,",
						"          Curr_T39OtherDtVal1 as date,",
						"          Curr_T39OtherDtVal2 as date,",
						"          Curr_T40Type as string,",
						"          Curr_T40OtherCharVal1 as string,",
						"          Curr_T40OtherCharVal2 as string,",
						"          Curr_T40OtherNumVal1 as double,",
						"          Curr_T40OtherNumVal2 as double,",
						"          Curr_T40OtherDtVal1 as date,",
						"          Curr_T40OtherDtVal2 as date,",
						"          Curr_T41Type as string,",
						"          Curr_T41OtherCharVal1 as string,",
						"          Curr_T41OtherCharVal2 as string,",
						"          Curr_T41OtherNumVal1 as double,",
						"          Curr_T41OtherNumVal2 as double,",
						"          Curr_T41OtherDtVal1 as date,",
						"          Curr_T41OtherDtVal2 as date,",
						"          Curr_T42Type as string,",
						"          Curr_T42OtherCharVal1 as string,",
						"          Curr_T42OtherCharVal2 as string,",
						"          Curr_T42OtherNumVal1 as double,",
						"          Curr_T42OtherNumVal2 as double,",
						"          Curr_T42OtherDtVal1 as date,",
						"          Curr_T42OtherDtVal2 as date,",
						"          Curr_T43Type as string,",
						"          Curr_T43OtherCharVal1 as string,",
						"          Curr_T43OtherCharVal2 as string,",
						"          Curr_T43OtherNumVal1 as double,",
						"          Curr_T43OtherNumVal2 as double,",
						"          Curr_T43OtherDtVal1 as date,",
						"          Curr_T43OtherDtVal2 as date,",
						"          Curr_T44Type as string,",
						"          Curr_T44OtherCharVal1 as string,",
						"          Curr_T44OtherCharVal2 as string,",
						"          Curr_T44OtherNumVal1 as double,",
						"          Curr_T44OtherNumVal2 as double,",
						"          Curr_T44OtherDtVal1 as date,",
						"          Curr_T44OtherDtVal2 as date,",
						"          Curr_T45Type as string,",
						"          Curr_T45OtherCharVal1 as string,",
						"          Curr_T45OtherCharVal2 as string,",
						"          Curr_T45OtherNumVal1 as double,",
						"          Curr_T45OtherNumVal2 as double,",
						"          Curr_T45OtherDtVal1 as date,",
						"          Curr_T45OtherDtVal2 as date,",
						"          Curr_T46Type as string,",
						"          Curr_T46OtherCharVal1 as string,",
						"          Curr_T46OtherCharVal2 as string,",
						"          Curr_T46OtherNumVal1 as double,",
						"          Curr_T46OtherNumVal2 as double,",
						"          Curr_T46OtherDtVal1 as date,",
						"          Curr_T46OtherDtVal2 as date,",
						"          Curr_T47Type as string,",
						"          Curr_T47OtherCharVal1 as string,",
						"          Curr_T47OtherCharVal2 as string,",
						"          Curr_T47OtherNumVal1 as double,",
						"          Curr_T47OtherNumVal2 as double,",
						"          Curr_T47OtherDtVal1 as date,",
						"          Curr_T47OtherDtVal2 as date,",
						"          Curr_T48Type as string,",
						"          Curr_T48OtherCharVal1 as string,",
						"          Curr_T48OtherCharVal2 as string,",
						"          Curr_T48OtherNumVal1 as double,",
						"          Curr_T48OtherNumVal2 as double,",
						"          Curr_T48OtherDtVal1 as date,",
						"          Curr_T48OtherDtVal2 as date,",
						"          Curr_T49Type as string,",
						"          Curr_T49OtherCharVal1 as string,",
						"          Curr_T49OtherCharVal2 as string,",
						"          Curr_T49OtherNumVal1 as double,",
						"          Curr_T49OtherNumVal2 as double,",
						"          Curr_T49OtherDtVal1 as date,",
						"          Curr_T49OtherDtVal2 as date,",
						"          Curr_T50Type as string,",
						"          Curr_T50OtherCharVal1 as string,",
						"          Curr_T50OtherCharVal2 as string,",
						"          Curr_T50OtherNumVal1 as double,",
						"          Curr_T50OtherNumVal2 as double,",
						"          Curr_T50OtherDtVal1 as date,",
						"          Curr_T50OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceAnalysisRefOtherCoreCurr",
						"SourceAnalysisRefOtherCoreCurr derive(LoadDt = currentDate()) ~> AssignDerivedColumns",
						"SelectFinalOutput alterRow(upsertIf(true())) ~> alterRow2",
						"AssignDerivedColumns select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          Curr_DataCollectionYear,",
						"          Curr_DataCollectionQuarter,",
						"          Curr_EventYear,",
						"          Curr_T1Type,",
						"          Curr_T1OtherCharVal1,",
						"          Curr_T1OtherCharVal2,",
						"          Curr_T1OtherNumVal1,",
						"          Curr_T1OtherNumVal2,",
						"          Curr_T1OtherDtVal1,",
						"          Curr_T1OtherDtVal2,",
						"          Curr_T2Type,",
						"          Curr_T2OtherCharVal1,",
						"          Curr_T2OtherCharVal2,",
						"          Curr_T2OtherNumVal1,",
						"          Curr_T2OtherNumVal2,",
						"          Curr_T2OtherDtVal1,",
						"          Curr_T2OtherDtVal2,",
						"          Curr_T3Type,",
						"          Curr_T3OtherCharVal1,",
						"          Curr_T3OtherCharVal2,",
						"          Curr_T3OtherNumVal1,",
						"          Curr_T3OtherNumVal2,",
						"          Curr_T3OtherDtVal1,",
						"          Curr_T3OtherDtVal2,",
						"          Curr_T4Type,",
						"          Curr_T4OtherCharVal1,",
						"          Curr_T4OtherCharVal2,",
						"          Curr_T4OtherNumVal1,",
						"          Curr_T4OtherNumVal2,",
						"          Curr_T4OtherDtVal1,",
						"          Curr_T4OtherDtVal2,",
						"          Curr_T5Type,",
						"          Curr_T5OtherCharVal1,",
						"          Curr_T5OtherCharVal2,",
						"          Curr_T5OtherNumVal1,",
						"          Curr_T5OtherNumVal2,",
						"          Curr_T5OtherDtVal1,",
						"          Curr_T5OtherDtVal2,",
						"          Curr_T6Type,",
						"          Curr_T6OtherCharVal1,",
						"          Curr_T6OtherCharVal2,",
						"          Curr_T6OtherNumVal1,",
						"          Curr_T6OtherNumVal2,",
						"          Curr_T6OtherDtVal1,",
						"          Curr_T6OtherDtVal2,",
						"          Curr_T7Type,",
						"          Curr_T7OtherCharVal1,",
						"          Curr_T7OtherCharVal2,",
						"          Curr_T7OtherNumVal1,",
						"          Curr_T7OtherNumVal2,",
						"          Curr_T7OtherDtVal1,",
						"          Curr_T7OtherDtVal2,",
						"          Curr_T8Type,",
						"          Curr_T8OtherCharVal1,",
						"          Curr_T8OtherCharVal2,",
						"          Curr_T8OtherNumVal1,",
						"          Curr_T8OtherNumVal2,",
						"          Curr_T8OtherDtVal1,",
						"          Curr_T8OtherDtVal2,",
						"          Curr_T9Type,",
						"          Curr_T9OtherCharVal1,",
						"          Curr_T9OtherCharVal2,",
						"          Curr_T9OtherNumVal1,",
						"          Curr_T9OtherNumVal2,",
						"          Curr_T9OtherDtVal1,",
						"          Curr_T9OtherDtVal2,",
						"          Curr_T10Type,",
						"          Curr_T10OtherCharVal1,",
						"          Curr_T10OtherCharVal2,",
						"          Curr_T10OtherNumVal1,",
						"          Curr_T10OtherNumVal2,",
						"          Curr_T10OtherDtVal1,",
						"          Curr_T10OtherDtVal2,",
						"          Curr_T11Type,",
						"          Curr_T11OtherCharVal1,",
						"          Curr_T11OtherCharVal2,",
						"          Curr_T11OtherNumVal1,",
						"          Curr_T11OtherNumVal2,",
						"          Curr_T11OtherDtVal1,",
						"          Curr_T11OtherDtVal2,",
						"          Curr_T12Type,",
						"          Curr_T12OtherCharVal1,",
						"          Curr_T12OtherCharVal2,",
						"          Curr_T12OtherNumVal1,",
						"          Curr_T12OtherNumVal2,",
						"          Curr_T12OtherDtVal1,",
						"          Curr_T12OtherDtVal2,",
						"          Curr_T13Type,",
						"          Curr_T13OtherCharVal1,",
						"          Curr_T13OtherCharVal2,",
						"          Curr_T13OtherNumVal1,",
						"          Curr_T13OtherNumVal2,",
						"          Curr_T13OtherDtVal1,",
						"          Curr_T13OtherDtVal2,",
						"          Curr_T14Type,",
						"          Curr_T14OtherCharVal1,",
						"          Curr_T14OtherCharVal2,",
						"          Curr_T14OtherNumVal1,",
						"          Curr_T14OtherNumVal2,",
						"          Curr_T14OtherDtVal1,",
						"          Curr_T14OtherDtVal2,",
						"          Curr_T15Type,",
						"          Curr_T15OtherCharVal1,",
						"          Curr_T15OtherCharVal2,",
						"          Curr_T15OtherNumVal1,",
						"          Curr_T15OtherNumVal2,",
						"          Curr_T15OtherDtVal1,",
						"          Curr_T15OtherDtVal2,",
						"          Curr_T16Type,",
						"          Curr_T16OtherCharVal1,",
						"          Curr_T16OtherCharVal2,",
						"          Curr_T16OtherNumVal1,",
						"          Curr_T16OtherNumVal2,",
						"          Curr_T16OtherDtVal1,",
						"          Curr_T16OtherDtVal2,",
						"          Curr_T17Type,",
						"          Curr_T17OtherCharVal1,",
						"          Curr_T17OtherCharVal2,",
						"          Curr_T17OtherNumVal1,",
						"          Curr_T17OtherNumVal2,",
						"          Curr_T17OtherDtVal1,",
						"          Curr_T17OtherDtVal2,",
						"          Curr_T18Type,",
						"          Curr_T18OtherCharVal1,",
						"          Curr_T18OtherCharVal2,",
						"          Curr_T18OtherNumVal1,",
						"          Curr_T18OtherNumVal2,",
						"          Curr_T18OtherDtVal1,",
						"          Curr_T18OtherDtVal2,",
						"          Curr_T19Type,",
						"          Curr_T19OtherCharVal1,",
						"          Curr_T19OtherCharVal2,",
						"          Curr_T19OtherNumVal1,",
						"          Curr_T19OtherNumVal2,",
						"          Curr_T19OtherDtVal1,",
						"          Curr_T19OtherDtVal2,",
						"          Curr_T20Type,",
						"          Curr_T20OtherCharVal1,",
						"          Curr_T20OtherCharVal2,",
						"          Curr_T20OtherNumVal1,",
						"          Curr_T20OtherNumVal2,",
						"          Curr_T20OtherDtVal1,",
						"          Curr_T20OtherDtVal2,",
						"          Curr_T21Type,",
						"          Curr_T21OtherCharVal1,",
						"          Curr_T21OtherCharVal2,",
						"          Curr_T21OtherNumVal1,",
						"          Curr_T21OtherNumVal2,",
						"          Curr_T21OtherDtVal1,",
						"          Curr_T21OtherDtVal2,",
						"          Curr_T22Type,",
						"          Curr_T22OtherCharVal1,",
						"          Curr_T22OtherCharVal2,",
						"          Curr_T22OtherNumVal1,",
						"          Curr_T22OtherNumVal2,",
						"          Curr_T22OtherDtVal1,",
						"          Curr_T22OtherDtVal2,",
						"          Curr_T23Type,",
						"          Curr_T23OtherCharVal1,",
						"          Curr_T23OtherCharVal2,",
						"          Curr_T23OtherNumVal1,",
						"          Curr_T23OtherNumVal2,",
						"          Curr_T23OtherDtVal1,",
						"          Curr_T23OtherDtVal2,",
						"          Curr_T24Type,",
						"          Curr_T24OtherCharVal1,",
						"          Curr_T24OtherCharVal2,",
						"          Curr_T24OtherNumVal1,",
						"          Curr_T24OtherNumVal2,",
						"          Curr_T24OtherDtVal1,",
						"          Curr_T24OtherDtVal2,",
						"          Curr_T25Type,",
						"          Curr_T25OtherCharVal1,",
						"          Curr_T25OtherCharVal2,",
						"          Curr_T25OtherNumVal1,",
						"          Curr_T25OtherNumVal2,",
						"          Curr_T25OtherDtVal1,",
						"          Curr_T25OtherDtVal2,",
						"          Curr_T26Type,",
						"          Curr_T26OtherCharVal1,",
						"          Curr_T26OtherCharVal2,",
						"          Curr_T26OtherNumVal1,",
						"          Curr_T26OtherNumVal2,",
						"          Curr_T26OtherDtVal1,",
						"          Curr_T26OtherDtVal2,",
						"          Curr_T27Type,",
						"          Curr_T27OtherCharVal1,",
						"          Curr_T27OtherCharVal2,",
						"          Curr_T27OtherNumVal1,",
						"          Curr_T27OtherNumVal2,",
						"          Curr_T27OtherDtVal1,",
						"          Curr_T27OtherDtVal2,",
						"          Curr_T28Type,",
						"          Curr_T28OtherCharVal1,",
						"          Curr_T28OtherCharVal2,",
						"          Curr_T28OtherNumVal1,",
						"          Curr_T28OtherNumVal2,",
						"          Curr_T28OtherDtVal1,",
						"          Curr_T28OtherDtVal2,",
						"          Curr_T29Type,",
						"          Curr_T29OtherCharVal1,",
						"          Curr_T29OtherCharVal2,",
						"          Curr_T29OtherNumVal1,",
						"          Curr_T29OtherNumVal2,",
						"          Curr_T29OtherDtVal1,",
						"          Curr_T29OtherDtVal2,",
						"          Curr_T30Type,",
						"          Curr_T30OtherCharVal1,",
						"          Curr_T30OtherCharVal2,",
						"          Curr_T30OtherNumVal1,",
						"          Curr_T30OtherNumVal2,",
						"          Curr_T30OtherDtVal1,",
						"          Curr_T30OtherDtVal2,",
						"          Curr_T31Type,",
						"          Curr_T31OtherCharVal1,",
						"          Curr_T31OtherCharVal2,",
						"          Curr_T31OtherNumVal1,",
						"          Curr_T31OtherNumVal2,",
						"          Curr_T31OtherDtVal1,",
						"          Curr_T31OtherDtVal2,",
						"          Curr_T32Type,",
						"          Curr_T32OtherCharVal1,",
						"          Curr_T32OtherCharVal2,",
						"          Curr_T32OtherNumVal1,",
						"          Curr_T32OtherNumVal2,",
						"          Curr_T32OtherDtVal1,",
						"          Curr_T32OtherDtVal2,",
						"          Curr_T33Type,",
						"          Curr_T33OtherCharVal1,",
						"          Curr_T33OtherCharVal2,",
						"          Curr_T33OtherNumVal1,",
						"          Curr_T33OtherNumVal2,",
						"          Curr_T33OtherDtVal1,",
						"          Curr_T33OtherDtVal2,",
						"          Curr_T34Type,",
						"          Curr_T34OtherCharVal1,",
						"          Curr_T34OtherCharVal2,",
						"          Curr_T34OtherNumVal1,",
						"          Curr_T34OtherNumVal2,",
						"          Curr_T34OtherDtVal1,",
						"          Curr_T34OtherDtVal2,",
						"          Curr_T35Type,",
						"          Curr_T35OtherCharVal1,",
						"          Curr_T35OtherCharVal2,",
						"          Curr_T35OtherNumVal1,",
						"          Curr_T35OtherNumVal2,",
						"          Curr_T35OtherDtVal1,",
						"          Curr_T35OtherDtVal2,",
						"          Curr_T36Type,",
						"          Curr_T36OtherCharVal1,",
						"          Curr_T36OtherCharVal2,",
						"          Curr_T36OtherNumVal1,",
						"          Curr_T36OtherNumVal2,",
						"          Curr_T36OtherDtVal1,",
						"          Curr_T36OtherDtVal2,",
						"          Curr_T37Type,",
						"          Curr_T37OtherCharVal1,",
						"          Curr_T37OtherCharVal2,",
						"          Curr_T37OtherNumVal1,",
						"          Curr_T37OtherNumVal2,",
						"          Curr_T37OtherDtVal1,",
						"          Curr_T37OtherDtVal2,",
						"          Curr_T38Type,",
						"          Curr_T38OtherCharVal1,",
						"          Curr_T38OtherCharVal2,",
						"          Curr_T38OtherNumVal1,",
						"          Curr_T38OtherNumVal2,",
						"          Curr_T38OtherDtVal1,",
						"          Curr_T38OtherDtVal2,",
						"          Curr_T39Type,",
						"          Curr_T39OtherCharVal1,",
						"          Curr_T39OtherCharVal2,",
						"          Curr_T39OtherNumVal1,",
						"          Curr_T39OtherNumVal2,",
						"          Curr_T39OtherDtVal1,",
						"          Curr_T39OtherDtVal2,",
						"          Curr_T40Type,",
						"          Curr_T40OtherCharVal1,",
						"          Curr_T40OtherCharVal2,",
						"          Curr_T40OtherNumVal1,",
						"          Curr_T40OtherNumVal2,",
						"          Curr_T40OtherDtVal1,",
						"          Curr_T40OtherDtVal2,",
						"          Curr_T41Type,",
						"          Curr_T41OtherCharVal1,",
						"          Curr_T41OtherCharVal2,",
						"          Curr_T41OtherNumVal1,",
						"          Curr_T41OtherNumVal2,",
						"          Curr_T41OtherDtVal1,",
						"          Curr_T41OtherDtVal2,",
						"          Curr_T42Type,",
						"          Curr_T42OtherCharVal1,",
						"          Curr_T42OtherCharVal2,",
						"          Curr_T42OtherNumVal1,",
						"          Curr_T42OtherNumVal2,",
						"          Curr_T42OtherDtVal1,",
						"          Curr_T42OtherDtVal2,",
						"          Curr_T43Type,",
						"          Curr_T43OtherCharVal1,",
						"          Curr_T43OtherCharVal2,",
						"          Curr_T43OtherNumVal1,",
						"          Curr_T43OtherNumVal2,",
						"          Curr_T43OtherDtVal1,",
						"          Curr_T43OtherDtVal2,",
						"          Curr_T44Type,",
						"          Curr_T44OtherCharVal1,",
						"          Curr_T44OtherCharVal2,",
						"          Curr_T44OtherNumVal1,",
						"          Curr_T44OtherNumVal2,",
						"          Curr_T44OtherDtVal1,",
						"          Curr_T44OtherDtVal2,",
						"          Curr_T45Type,",
						"          Curr_T45OtherCharVal1,",
						"          Curr_T45OtherCharVal2,",
						"          Curr_T45OtherNumVal1,",
						"          Curr_T45OtherNumVal2,",
						"          Curr_T45OtherDtVal1,",
						"          Curr_T45OtherDtVal2,",
						"          Curr_T46Type,",
						"          Curr_T46OtherCharVal1,",
						"          Curr_T46OtherCharVal2,",
						"          Curr_T46OtherNumVal1,",
						"          Curr_T46OtherNumVal2,",
						"          Curr_T46OtherDtVal1,",
						"          Curr_T46OtherDtVal2,",
						"          Curr_T47Type,",
						"          Curr_T47OtherCharVal1,",
						"          Curr_T47OtherCharVal2,",
						"          Curr_T47OtherNumVal1,",
						"          Curr_T47OtherNumVal2,",
						"          Curr_T47OtherDtVal1,",
						"          Curr_T47OtherDtVal2,",
						"          Curr_T48Type,",
						"          Curr_T48OtherCharVal1,",
						"          Curr_T48OtherCharVal2,",
						"          Curr_T48OtherNumVal1,",
						"          Curr_T48OtherNumVal2,",
						"          Curr_T48OtherDtVal1,",
						"          Curr_T48OtherDtVal2,",
						"          Curr_T49Type,",
						"          Curr_T49OtherCharVal1,",
						"          Curr_T49OtherCharVal2,",
						"          Curr_T49OtherNumVal1,",
						"          Curr_T49OtherNumVal2,",
						"          Curr_T49OtherDtVal1,",
						"          Curr_T49OtherDtVal2,",
						"          Curr_T50Type,",
						"          Curr_T50OtherCharVal1,",
						"          Curr_T50OtherCharVal2,",
						"          Curr_T50OtherNumVal1,",
						"          Curr_T50OtherNumVal2,",
						"          Curr_T50OtherDtVal1,",
						"          Curr_T50OtherDtVal2,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          Curr_DataCollectionYear as integer,",
						"          Curr_DataCollectionQuarter as integer,",
						"          Curr_EventYear as integer,",
						"          Curr_T1Type as string,",
						"          Curr_T1OtherCharVal1 as string,",
						"          Curr_T1OtherCharVal2 as string,",
						"          Curr_T1OtherNumVal1 as double,",
						"          Curr_T1OtherNumVal2 as double,",
						"          Curr_T1OtherDtVal1 as date,",
						"          Curr_T1OtherDtVal2 as date,",
						"          Curr_T2Type as string,",
						"          Curr_T2OtherCharVal1 as string,",
						"          Curr_T2OtherCharVal2 as string,",
						"          Curr_T2OtherNumVal1 as double,",
						"          Curr_T2OtherNumVal2 as double,",
						"          Curr_T2OtherDtVal1 as date,",
						"          Curr_T2OtherDtVal2 as date,",
						"          Curr_T3Type as string,",
						"          Curr_T3OtherCharVal1 as string,",
						"          Curr_T3OtherCharVal2 as string,",
						"          Curr_T3OtherNumVal1 as double,",
						"          Curr_T3OtherNumVal2 as double,",
						"          Curr_T3OtherDtVal1 as date,",
						"          Curr_T3OtherDtVal2 as date,",
						"          Curr_T4Type as string,",
						"          Curr_T4OtherCharVal1 as string,",
						"          Curr_T4OtherCharVal2 as string,",
						"          Curr_T4OtherNumVal1 as double,",
						"          Curr_T4OtherNumVal2 as double,",
						"          Curr_T4OtherDtVal1 as date,",
						"          Curr_T4OtherDtVal2 as date,",
						"          Curr_T5Type as string,",
						"          Curr_T5OtherCharVal1 as string,",
						"          Curr_T5OtherCharVal2 as string,",
						"          Curr_T5OtherNumVal1 as double,",
						"          Curr_T5OtherNumVal2 as double,",
						"          Curr_T5OtherDtVal1 as date,",
						"          Curr_T5OtherDtVal2 as date,",
						"          Curr_T6Type as string,",
						"          Curr_T6OtherCharVal1 as string,",
						"          Curr_T6OtherCharVal2 as string,",
						"          Curr_T6OtherNumVal1 as double,",
						"          Curr_T6OtherNumVal2 as double,",
						"          Curr_T6OtherDtVal1 as date,",
						"          Curr_T6OtherDtVal2 as date,",
						"          Curr_T7Type as string,",
						"          Curr_T7OtherCharVal1 as string,",
						"          Curr_T7OtherCharVal2 as string,",
						"          Curr_T7OtherNumVal1 as double,",
						"          Curr_T7OtherNumVal2 as double,",
						"          Curr_T7OtherDtVal1 as date,",
						"          Curr_T7OtherDtVal2 as date,",
						"          Curr_T8Type as string,",
						"          Curr_T8OtherCharVal1 as string,",
						"          Curr_T8OtherCharVal2 as string,",
						"          Curr_T8OtherNumVal1 as double,",
						"          Curr_T8OtherNumVal2 as double,",
						"          Curr_T8OtherDtVal1 as date,",
						"          Curr_T8OtherDtVal2 as date,",
						"          Curr_T9Type as string,",
						"          Curr_T9OtherCharVal1 as string,",
						"          Curr_T9OtherCharVal2 as string,",
						"          Curr_T9OtherNumVal1 as double,",
						"          Curr_T9OtherNumVal2 as double,",
						"          Curr_T9OtherDtVal1 as date,",
						"          Curr_T9OtherDtVal2 as date,",
						"          Curr_T10Type as string,",
						"          Curr_T10OtherCharVal1 as string,",
						"          Curr_T10OtherCharVal2 as string,",
						"          Curr_T10OtherNumVal1 as double,",
						"          Curr_T10OtherNumVal2 as double,",
						"          Curr_T10OtherDtVal1 as date,",
						"          Curr_T10OtherDtVal2 as date,",
						"          Curr_T11Type as string,",
						"          Curr_T11OtherCharVal1 as string,",
						"          Curr_T11OtherCharVal2 as string,",
						"          Curr_T11OtherNumVal1 as double,",
						"          Curr_T11OtherNumVal2 as double,",
						"          Curr_T11OtherDtVal1 as date,",
						"          Curr_T11OtherDtVal2 as date,",
						"          Curr_T12Type as string,",
						"          Curr_T12OtherCharVal1 as string,",
						"          Curr_T12OtherCharVal2 as string,",
						"          Curr_T12OtherNumVal1 as double,",
						"          Curr_T12OtherNumVal2 as double,",
						"          Curr_T12OtherDtVal1 as date,",
						"          Curr_T12OtherDtVal2 as date,",
						"          Curr_T13Type as string,",
						"          Curr_T13OtherCharVal1 as string,",
						"          Curr_T13OtherCharVal2 as string,",
						"          Curr_T13OtherNumVal1 as double,",
						"          Curr_T13OtherNumVal2 as double,",
						"          Curr_T13OtherDtVal1 as date,",
						"          Curr_T13OtherDtVal2 as date,",
						"          Curr_T14Type as string,",
						"          Curr_T14OtherCharVal1 as string,",
						"          Curr_T14OtherCharVal2 as string,",
						"          Curr_T14OtherNumVal1 as double,",
						"          Curr_T14OtherNumVal2 as double,",
						"          Curr_T14OtherDtVal1 as date,",
						"          Curr_T14OtherDtVal2 as date,",
						"          Curr_T15Type as string,",
						"          Curr_T15OtherCharVal1 as string,",
						"          Curr_T15OtherCharVal2 as string,",
						"          Curr_T15OtherNumVal1 as double,",
						"          Curr_T15OtherNumVal2 as double,",
						"          Curr_T15OtherDtVal1 as date,",
						"          Curr_T15OtherDtVal2 as date,",
						"          Curr_T16Type as string,",
						"          Curr_T16OtherCharVal1 as string,",
						"          Curr_T16OtherCharVal2 as string,",
						"          Curr_T16OtherNumVal1 as double,",
						"          Curr_T16OtherNumVal2 as double,",
						"          Curr_T16OtherDtVal1 as date,",
						"          Curr_T16OtherDtVal2 as date,",
						"          Curr_T17Type as string,",
						"          Curr_T17OtherCharVal1 as string,",
						"          Curr_T17OtherCharVal2 as string,",
						"          Curr_T17OtherNumVal1 as double,",
						"          Curr_T17OtherNumVal2 as double,",
						"          Curr_T17OtherDtVal1 as date,",
						"          Curr_T17OtherDtVal2 as date,",
						"          Curr_T18Type as string,",
						"          Curr_T18OtherCharVal1 as string,",
						"          Curr_T18OtherCharVal2 as string,",
						"          Curr_T18OtherNumVal1 as double,",
						"          Curr_T18OtherNumVal2 as double,",
						"          Curr_T18OtherDtVal1 as date,",
						"          Curr_T18OtherDtVal2 as date,",
						"          Curr_T19Type as string,",
						"          Curr_T19OtherCharVal1 as string,",
						"          Curr_T19OtherCharVal2 as string,",
						"          Curr_T19OtherNumVal1 as double,",
						"          Curr_T19OtherNumVal2 as double,",
						"          Curr_T19OtherDtVal1 as date,",
						"          Curr_T19OtherDtVal2 as date,",
						"          Curr_T20Type as string,",
						"          Curr_T20OtherCharVal1 as string,",
						"          Curr_T20OtherCharVal2 as string,",
						"          Curr_T20OtherNumVal1 as double,",
						"          Curr_T20OtherNumVal2 as double,",
						"          Curr_T20OtherDtVal1 as date,",
						"          Curr_T20OtherDtVal2 as date,",
						"          Curr_T21Type as string,",
						"          Curr_T21OtherCharVal1 as string,",
						"          Curr_T21OtherCharVal2 as string,",
						"          Curr_T21OtherNumVal1 as double,",
						"          Curr_T21OtherNumVal2 as double,",
						"          Curr_T21OtherDtVal1 as date,",
						"          Curr_T21OtherDtVal2 as date,",
						"          Curr_T22Type as string,",
						"          Curr_T22OtherCharVal1 as string,",
						"          Curr_T22OtherCharVal2 as string,",
						"          Curr_T22OtherNumVal1 as double,",
						"          Curr_T22OtherNumVal2 as double,",
						"          Curr_T22OtherDtVal1 as date,",
						"          Curr_T22OtherDtVal2 as date,",
						"          Curr_T23Type as string,",
						"          Curr_T23OtherCharVal1 as string,",
						"          Curr_T23OtherCharVal2 as string,",
						"          Curr_T23OtherNumVal1 as double,",
						"          Curr_T23OtherNumVal2 as double,",
						"          Curr_T23OtherDtVal1 as date,",
						"          Curr_T23OtherDtVal2 as date,",
						"          Curr_T24Type as string,",
						"          Curr_T24OtherCharVal1 as string,",
						"          Curr_T24OtherCharVal2 as string,",
						"          Curr_T24OtherNumVal1 as double,",
						"          Curr_T24OtherNumVal2 as double,",
						"          Curr_T24OtherDtVal1 as date,",
						"          Curr_T24OtherDtVal2 as date,",
						"          Curr_T25Type as string,",
						"          Curr_T25OtherCharVal1 as string,",
						"          Curr_T25OtherCharVal2 as string,",
						"          Curr_T25OtherNumVal1 as double,",
						"          Curr_T25OtherNumVal2 as double,",
						"          Curr_T25OtherDtVal1 as date,",
						"          Curr_T25OtherDtVal2 as date,",
						"          Curr_T26Type as string,",
						"          Curr_T26OtherCharVal1 as string,",
						"          Curr_T26OtherCharVal2 as string,",
						"          Curr_T26OtherNumVal1 as double,",
						"          Curr_T26OtherNumVal2 as double,",
						"          Curr_T26OtherDtVal1 as date,",
						"          Curr_T26OtherDtVal2 as date,",
						"          Curr_T27Type as string,",
						"          Curr_T27OtherCharVal1 as string,",
						"          Curr_T27OtherCharVal2 as string,",
						"          Curr_T27OtherNumVal1 as double,",
						"          Curr_T27OtherNumVal2 as double,",
						"          Curr_T27OtherDtVal1 as date,",
						"          Curr_T27OtherDtVal2 as date,",
						"          Curr_T28Type as string,",
						"          Curr_T28OtherCharVal1 as string,",
						"          Curr_T28OtherCharVal2 as string,",
						"          Curr_T28OtherNumVal1 as double,",
						"          Curr_T28OtherNumVal2 as double,",
						"          Curr_T28OtherDtVal1 as date,",
						"          Curr_T28OtherDtVal2 as date,",
						"          Curr_T29Type as string,",
						"          Curr_T29OtherCharVal1 as string,",
						"          Curr_T29OtherCharVal2 as string,",
						"          Curr_T29OtherNumVal1 as double,",
						"          Curr_T29OtherNumVal2 as double,",
						"          Curr_T29OtherDtVal1 as date,",
						"          Curr_T29OtherDtVal2 as date,",
						"          Curr_T30Type as string,",
						"          Curr_T30OtherCharVal1 as string,",
						"          Curr_T30OtherCharVal2 as string,",
						"          Curr_T30OtherNumVal1 as double,",
						"          Curr_T30OtherNumVal2 as double,",
						"          Curr_T30OtherDtVal1 as date,",
						"          Curr_T30OtherDtVal2 as date,",
						"          Curr_T31Type as string,",
						"          Curr_T31OtherCharVal1 as string,",
						"          Curr_T31OtherCharVal2 as string,",
						"          Curr_T31OtherNumVal1 as double,",
						"          Curr_T31OtherNumVal2 as double,",
						"          Curr_T31OtherDtVal1 as date,",
						"          Curr_T31OtherDtVal2 as date,",
						"          Curr_T32Type as string,",
						"          Curr_T32OtherCharVal1 as string,",
						"          Curr_T32OtherCharVal2 as string,",
						"          Curr_T32OtherNumVal1 as double,",
						"          Curr_T32OtherNumVal2 as double,",
						"          Curr_T32OtherDtVal1 as date,",
						"          Curr_T32OtherDtVal2 as date,",
						"          Curr_T33Type as string,",
						"          Curr_T33OtherCharVal1 as string,",
						"          Curr_T33OtherCharVal2 as string,",
						"          Curr_T33OtherNumVal1 as double,",
						"          Curr_T33OtherNumVal2 as double,",
						"          Curr_T33OtherDtVal1 as date,",
						"          Curr_T33OtherDtVal2 as date,",
						"          Curr_T34Type as string,",
						"          Curr_T34OtherCharVal1 as string,",
						"          Curr_T34OtherCharVal2 as string,",
						"          Curr_T34OtherNumVal1 as double,",
						"          Curr_T34OtherNumVal2 as double,",
						"          Curr_T34OtherDtVal1 as date,",
						"          Curr_T34OtherDtVal2 as date,",
						"          Curr_T35Type as string,",
						"          Curr_T35OtherCharVal1 as string,",
						"          Curr_T35OtherCharVal2 as string,",
						"          Curr_T35OtherNumVal1 as double,",
						"          Curr_T35OtherNumVal2 as double,",
						"          Curr_T35OtherDtVal1 as date,",
						"          Curr_T35OtherDtVal2 as date,",
						"          Curr_T36Type as string,",
						"          Curr_T36OtherCharVal1 as string,",
						"          Curr_T36OtherCharVal2 as string,",
						"          Curr_T36OtherNumVal1 as double,",
						"          Curr_T36OtherNumVal2 as double,",
						"          Curr_T36OtherDtVal1 as date,",
						"          Curr_T36OtherDtVal2 as date,",
						"          Curr_T37Type as string,",
						"          Curr_T37OtherCharVal1 as string,",
						"          Curr_T37OtherCharVal2 as string,",
						"          Curr_T37OtherNumVal1 as double,",
						"          Curr_T37OtherNumVal2 as double,",
						"          Curr_T37OtherDtVal1 as date,",
						"          Curr_T37OtherDtVal2 as date,",
						"          Curr_T38Type as string,",
						"          Curr_T38OtherCharVal1 as string,",
						"          Curr_T38OtherCharVal2 as string,",
						"          Curr_T38OtherNumVal1 as double,",
						"          Curr_T38OtherNumVal2 as double,",
						"          Curr_T38OtherDtVal1 as date,",
						"          Curr_T38OtherDtVal2 as date,",
						"          Curr_T39Type as string,",
						"          Curr_T39OtherCharVal1 as string,",
						"          Curr_T39OtherCharVal2 as string,",
						"          Curr_T39OtherNumVal1 as double,",
						"          Curr_T39OtherNumVal2 as double,",
						"          Curr_T39OtherDtVal1 as date,",
						"          Curr_T39OtherDtVal2 as date,",
						"          Curr_T40Type as string,",
						"          Curr_T40OtherCharVal1 as string,",
						"          Curr_T40OtherCharVal2 as string,",
						"          Curr_T40OtherNumVal1 as double,",
						"          Curr_T40OtherNumVal2 as double,",
						"          Curr_T40OtherDtVal1 as date,",
						"          Curr_T40OtherDtVal2 as date,",
						"          Curr_T41Type as string,",
						"          Curr_T41OtherCharVal1 as string,",
						"          Curr_T41OtherCharVal2 as string,",
						"          Curr_T41OtherNumVal1 as double,",
						"          Curr_T41OtherNumVal2 as double,",
						"          Curr_T41OtherDtVal1 as date,",
						"          Curr_T41OtherDtVal2 as date,",
						"          Curr_T42Type as string,",
						"          Curr_T42OtherCharVal1 as string,",
						"          Curr_T42OtherCharVal2 as string,",
						"          Curr_T42OtherNumVal1 as double,",
						"          Curr_T42OtherNumVal2 as double,",
						"          Curr_T42OtherDtVal1 as date,",
						"          Curr_T42OtherDtVal2 as date,",
						"          Curr_T43Type as string,",
						"          Curr_T43OtherCharVal1 as string,",
						"          Curr_T43OtherCharVal2 as string,",
						"          Curr_T43OtherNumVal1 as double,",
						"          Curr_T43OtherNumVal2 as double,",
						"          Curr_T43OtherDtVal1 as date,",
						"          Curr_T43OtherDtVal2 as date,",
						"          Curr_T44Type as string,",
						"          Curr_T44OtherCharVal1 as string,",
						"          Curr_T44OtherCharVal2 as string,",
						"          Curr_T44OtherNumVal1 as double,",
						"          Curr_T44OtherNumVal2 as double,",
						"          Curr_T44OtherDtVal1 as date,",
						"          Curr_T44OtherDtVal2 as date,",
						"          Curr_T45Type as string,",
						"          Curr_T45OtherCharVal1 as string,",
						"          Curr_T45OtherCharVal2 as string,",
						"          Curr_T45OtherNumVal1 as double,",
						"          Curr_T45OtherNumVal2 as double,",
						"          Curr_T45OtherDtVal1 as date,",
						"          Curr_T45OtherDtVal2 as date,",
						"          Curr_T46Type as string,",
						"          Curr_T46OtherCharVal1 as string,",
						"          Curr_T46OtherCharVal2 as string,",
						"          Curr_T46OtherNumVal1 as double,",
						"          Curr_T46OtherNumVal2 as double,",
						"          Curr_T46OtherDtVal1 as date,",
						"          Curr_T46OtherDtVal2 as date,",
						"          Curr_T47Type as string,",
						"          Curr_T47OtherCharVal1 as string,",
						"          Curr_T47OtherCharVal2 as string,",
						"          Curr_T47OtherNumVal1 as double,",
						"          Curr_T47OtherNumVal2 as double,",
						"          Curr_T47OtherDtVal1 as date,",
						"          Curr_T47OtherDtVal2 as date,",
						"          Curr_T48Type as string,",
						"          Curr_T48OtherCharVal1 as string,",
						"          Curr_T48OtherCharVal2 as string,",
						"          Curr_T48OtherNumVal1 as double,",
						"          Curr_T48OtherNumVal2 as double,",
						"          Curr_T48OtherDtVal1 as date,",
						"          Curr_T48OtherDtVal2 as date,",
						"          Curr_T49Type as string,",
						"          Curr_T49OtherCharVal1 as string,",
						"          Curr_T49OtherCharVal2 as string,",
						"          Curr_T49OtherNumVal1 as double,",
						"          Curr_T49OtherNumVal2 as double,",
						"          Curr_T49OtherDtVal1 as date,",
						"          Curr_T49OtherDtVal2 as date,",
						"          Curr_T50Type as string,",
						"          Curr_T50OtherCharVal1 as string,",
						"          Curr_T50OtherCharVal2 as string,",
						"          Curr_T50OtherNumVal1 as double,",
						"          Curr_T50OtherNumVal2 as double,",
						"          Curr_T50OtherDtVal1 as date,",
						"          Curr_T50OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','Curr_DataCollectionYear','Curr_DataCollectionQuarter'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          Curr_DataCollectionYear,",
						"          Curr_DataCollectionQuarter,",
						"          Curr_EventYear,",
						"          Curr_T1Type,",
						"          Curr_T1OtherCharVal1,",
						"          Curr_T1OtherCharVal2,",
						"          Curr_T1OtherNumVal1,",
						"          Curr_T1OtherNumVal2,",
						"          Curr_T1OtherDtVal1,",
						"          Curr_T1OtherDtVal2,",
						"          Curr_T2Type,",
						"          Curr_T2OtherCharVal1,",
						"          Curr_T2OtherCharVal2,",
						"          Curr_T2OtherNumVal1,",
						"          Curr_T2OtherNumVal2,",
						"          Curr_T2OtherDtVal1,",
						"          Curr_T2OtherDtVal2,",
						"          Curr_T3Type,",
						"          Curr_T3OtherCharVal1,",
						"          Curr_T3OtherCharVal2,",
						"          Curr_T3OtherNumVal1,",
						"          Curr_T3OtherNumVal2,",
						"          Curr_T3OtherDtVal1,",
						"          Curr_T3OtherDtVal2,",
						"          Curr_T4Type,",
						"          Curr_T4OtherCharVal1,",
						"          Curr_T4OtherCharVal2,",
						"          Curr_T4OtherNumVal1,",
						"          Curr_T4OtherNumVal2,",
						"          Curr_T4OtherDtVal1,",
						"          Curr_T4OtherDtVal2,",
						"          Curr_T5Type,",
						"          Curr_T5OtherCharVal1,",
						"          Curr_T5OtherCharVal2,",
						"          Curr_T5OtherNumVal1,",
						"          Curr_T5OtherNumVal2,",
						"          Curr_T5OtherDtVal1,",
						"          Curr_T5OtherDtVal2,",
						"          Curr_T6Type,",
						"          Curr_T6OtherCharVal1,",
						"          Curr_T6OtherCharVal2,",
						"          Curr_T6OtherNumVal1,",
						"          Curr_T6OtherNumVal2,",
						"          Curr_T6OtherDtVal1,",
						"          Curr_T6OtherDtVal2,",
						"          Curr_T7Type,",
						"          Curr_T7OtherCharVal1,",
						"          Curr_T7OtherCharVal2,",
						"          Curr_T7OtherNumVal1,",
						"          Curr_T7OtherNumVal2,",
						"          Curr_T7OtherDtVal1,",
						"          Curr_T7OtherDtVal2,",
						"          Curr_T8Type,",
						"          Curr_T8OtherCharVal1,",
						"          Curr_T8OtherCharVal2,",
						"          Curr_T8OtherNumVal1,",
						"          Curr_T8OtherNumVal2,",
						"          Curr_T8OtherDtVal1,",
						"          Curr_T8OtherDtVal2,",
						"          Curr_T9Type,",
						"          Curr_T9OtherCharVal1,",
						"          Curr_T9OtherCharVal2,",
						"          Curr_T9OtherNumVal1,",
						"          Curr_T9OtherNumVal2,",
						"          Curr_T9OtherDtVal1,",
						"          Curr_T9OtherDtVal2,",
						"          Curr_T10Type,",
						"          Curr_T10OtherCharVal1,",
						"          Curr_T10OtherCharVal2,",
						"          Curr_T10OtherNumVal1,",
						"          Curr_T10OtherNumVal2,",
						"          Curr_T10OtherDtVal1,",
						"          Curr_T10OtherDtVal2,",
						"          Curr_T11Type,",
						"          Curr_T11OtherCharVal1,",
						"          Curr_T11OtherCharVal2,",
						"          Curr_T11OtherNumVal1,",
						"          Curr_T11OtherNumVal2,",
						"          Curr_T11OtherDtVal1,",
						"          Curr_T11OtherDtVal2,",
						"          Curr_T12Type,",
						"          Curr_T12OtherCharVal1,",
						"          Curr_T12OtherCharVal2,",
						"          Curr_T12OtherNumVal1,",
						"          Curr_T12OtherNumVal2,",
						"          Curr_T12OtherDtVal1,",
						"          Curr_T12OtherDtVal2,",
						"          Curr_T13Type,",
						"          Curr_T13OtherCharVal1,",
						"          Curr_T13OtherCharVal2,",
						"          Curr_T13OtherNumVal1,",
						"          Curr_T13OtherNumVal2,",
						"          Curr_T13OtherDtVal1,",
						"          Curr_T13OtherDtVal2,",
						"          Curr_T14Type,",
						"          Curr_T14OtherCharVal1,",
						"          Curr_T14OtherCharVal2,",
						"          Curr_T14OtherNumVal1,",
						"          Curr_T14OtherNumVal2,",
						"          Curr_T14OtherDtVal1,",
						"          Curr_T14OtherDtVal2,",
						"          Curr_T15Type,",
						"          Curr_T15OtherCharVal1,",
						"          Curr_T15OtherCharVal2,",
						"          Curr_T15OtherNumVal1,",
						"          Curr_T15OtherNumVal2,",
						"          Curr_T15OtherDtVal1,",
						"          Curr_T15OtherDtVal2,",
						"          Curr_T16Type,",
						"          Curr_T16OtherCharVal1,",
						"          Curr_T16OtherCharVal2,",
						"          Curr_T16OtherNumVal1,",
						"          Curr_T16OtherNumVal2,",
						"          Curr_T16OtherDtVal1,",
						"          Curr_T16OtherDtVal2,",
						"          Curr_T17Type,",
						"          Curr_T17OtherCharVal1,",
						"          Curr_T17OtherCharVal2,",
						"          Curr_T17OtherNumVal1,",
						"          Curr_T17OtherNumVal2,",
						"          Curr_T17OtherDtVal1,",
						"          Curr_T17OtherDtVal2,",
						"          Curr_T18Type,",
						"          Curr_T18OtherCharVal1,",
						"          Curr_T18OtherCharVal2,",
						"          Curr_T18OtherNumVal1,",
						"          Curr_T18OtherNumVal2,",
						"          Curr_T18OtherDtVal1,",
						"          Curr_T18OtherDtVal2,",
						"          Curr_T19Type,",
						"          Curr_T19OtherCharVal1,",
						"          Curr_T19OtherCharVal2,",
						"          Curr_T19OtherNumVal1,",
						"          Curr_T19OtherNumVal2,",
						"          Curr_T19OtherDtVal1,",
						"          Curr_T19OtherDtVal2,",
						"          Curr_T20Type,",
						"          Curr_T20OtherCharVal1,",
						"          Curr_T20OtherCharVal2,",
						"          Curr_T20OtherNumVal1,",
						"          Curr_T20OtherNumVal2,",
						"          Curr_T20OtherDtVal1,",
						"          Curr_T20OtherDtVal2,",
						"          Curr_T21Type,",
						"          Curr_T21OtherCharVal1,",
						"          Curr_T21OtherCharVal2,",
						"          Curr_T21OtherNumVal1,",
						"          Curr_T21OtherNumVal2,",
						"          Curr_T21OtherDtVal1,",
						"          Curr_T21OtherDtVal2,",
						"          Curr_T22Type,",
						"          Curr_T22OtherCharVal1,",
						"          Curr_T22OtherCharVal2,",
						"          Curr_T22OtherNumVal1,",
						"          Curr_T22OtherNumVal2,",
						"          Curr_T22OtherDtVal1,",
						"          Curr_T22OtherDtVal2,",
						"          Curr_T23Type,",
						"          Curr_T23OtherCharVal1,",
						"          Curr_T23OtherCharVal2,",
						"          Curr_T23OtherNumVal1,",
						"          Curr_T23OtherNumVal2,",
						"          Curr_T23OtherDtVal1,",
						"          Curr_T23OtherDtVal2,",
						"          Curr_T24Type,",
						"          Curr_T24OtherCharVal1,",
						"          Curr_T24OtherCharVal2,",
						"          Curr_T24OtherNumVal1,",
						"          Curr_T24OtherNumVal2,",
						"          Curr_T24OtherDtVal1,",
						"          Curr_T24OtherDtVal2,",
						"          Curr_T25Type,",
						"          Curr_T25OtherCharVal1,",
						"          Curr_T25OtherCharVal2,",
						"          Curr_T25OtherNumVal1,",
						"          Curr_T25OtherNumVal2,",
						"          Curr_T25OtherDtVal1,",
						"          Curr_T25OtherDtVal2,",
						"          Curr_T26Type,",
						"          Curr_T26OtherCharVal1,",
						"          Curr_T26OtherCharVal2,",
						"          Curr_T26OtherNumVal1,",
						"          Curr_T26OtherNumVal2,",
						"          Curr_T26OtherDtVal1,",
						"          Curr_T26OtherDtVal2,",
						"          Curr_T27Type,",
						"          Curr_T27OtherCharVal1,",
						"          Curr_T27OtherCharVal2,",
						"          Curr_T27OtherNumVal1,",
						"          Curr_T27OtherNumVal2,",
						"          Curr_T27OtherDtVal1,",
						"          Curr_T27OtherDtVal2,",
						"          Curr_T28Type,",
						"          Curr_T28OtherCharVal1,",
						"          Curr_T28OtherCharVal2,",
						"          Curr_T28OtherNumVal1,",
						"          Curr_T28OtherNumVal2,",
						"          Curr_T28OtherDtVal1,",
						"          Curr_T28OtherDtVal2,",
						"          Curr_T29Type,",
						"          Curr_T29OtherCharVal1,",
						"          Curr_T29OtherCharVal2,",
						"          Curr_T29OtherNumVal1,",
						"          Curr_T29OtherNumVal2,",
						"          Curr_T29OtherDtVal1,",
						"          Curr_T29OtherDtVal2,",
						"          Curr_T30Type,",
						"          Curr_T30OtherCharVal1,",
						"          Curr_T30OtherCharVal2,",
						"          Curr_T30OtherNumVal1,",
						"          Curr_T30OtherNumVal2,",
						"          Curr_T30OtherDtVal1,",
						"          Curr_T30OtherDtVal2,",
						"          Curr_T31Type,",
						"          Curr_T31OtherCharVal1,",
						"          Curr_T31OtherCharVal2,",
						"          Curr_T31OtherNumVal1,",
						"          Curr_T31OtherNumVal2,",
						"          Curr_T31OtherDtVal1,",
						"          Curr_T31OtherDtVal2,",
						"          Curr_T32Type,",
						"          Curr_T32OtherCharVal1,",
						"          Curr_T32OtherCharVal2,",
						"          Curr_T32OtherNumVal1,",
						"          Curr_T32OtherNumVal2,",
						"          Curr_T32OtherDtVal1,",
						"          Curr_T32OtherDtVal2,",
						"          Curr_T33Type,",
						"          Curr_T33OtherCharVal1,",
						"          Curr_T33OtherCharVal2,",
						"          Curr_T33OtherNumVal1,",
						"          Curr_T33OtherNumVal2,",
						"          Curr_T33OtherDtVal1,",
						"          Curr_T33OtherDtVal2,",
						"          Curr_T34Type,",
						"          Curr_T34OtherCharVal1,",
						"          Curr_T34OtherCharVal2,",
						"          Curr_T34OtherNumVal1,",
						"          Curr_T34OtherNumVal2,",
						"          Curr_T34OtherDtVal1,",
						"          Curr_T34OtherDtVal2,",
						"          Curr_T35Type,",
						"          Curr_T35OtherCharVal1,",
						"          Curr_T35OtherCharVal2,",
						"          Curr_T35OtherNumVal1,",
						"          Curr_T35OtherNumVal2,",
						"          Curr_T35OtherDtVal1,",
						"          Curr_T35OtherDtVal2,",
						"          Curr_T36Type,",
						"          Curr_T36OtherCharVal1,",
						"          Curr_T36OtherCharVal2,",
						"          Curr_T36OtherNumVal1,",
						"          Curr_T36OtherNumVal2,",
						"          Curr_T36OtherDtVal1,",
						"          Curr_T36OtherDtVal2,",
						"          Curr_T37Type,",
						"          Curr_T37OtherCharVal1,",
						"          Curr_T37OtherCharVal2,",
						"          Curr_T37OtherNumVal1,",
						"          Curr_T37OtherNumVal2,",
						"          Curr_T37OtherDtVal1,",
						"          Curr_T37OtherDtVal2,",
						"          Curr_T38Type,",
						"          Curr_T38OtherCharVal1,",
						"          Curr_T38OtherCharVal2,",
						"          Curr_T38OtherNumVal1,",
						"          Curr_T38OtherNumVal2,",
						"          Curr_T38OtherDtVal1,",
						"          Curr_T38OtherDtVal2,",
						"          Curr_T39Type,",
						"          Curr_T39OtherCharVal1,",
						"          Curr_T39OtherCharVal2,",
						"          Curr_T39OtherNumVal1,",
						"          Curr_T39OtherNumVal2,",
						"          Curr_T39OtherDtVal1,",
						"          Curr_T39OtherDtVal2,",
						"          Curr_T40Type,",
						"          Curr_T40OtherCharVal1,",
						"          Curr_T40OtherCharVal2,",
						"          Curr_T40OtherNumVal1,",
						"          Curr_T40OtherNumVal2,",
						"          Curr_T40OtherDtVal1,",
						"          Curr_T40OtherDtVal2,",
						"          Curr_T41Type,",
						"          Curr_T41OtherCharVal1,",
						"          Curr_T41OtherCharVal2,",
						"          Curr_T41OtherNumVal1,",
						"          Curr_T41OtherNumVal2,",
						"          Curr_T41OtherDtVal1,",
						"          Curr_T41OtherDtVal2,",
						"          Curr_T42Type,",
						"          Curr_T42OtherCharVal1,",
						"          Curr_T42OtherCharVal2,",
						"          Curr_T42OtherNumVal1,",
						"          Curr_T42OtherNumVal2,",
						"          Curr_T42OtherDtVal1,",
						"          Curr_T42OtherDtVal2,",
						"          Curr_T43Type,",
						"          Curr_T43OtherCharVal1,",
						"          Curr_T43OtherCharVal2,",
						"          Curr_T43OtherNumVal1,",
						"          Curr_T43OtherNumVal2,",
						"          Curr_T43OtherDtVal1,",
						"          Curr_T43OtherDtVal2,",
						"          Curr_T44Type,",
						"          Curr_T44OtherCharVal1,",
						"          Curr_T44OtherCharVal2,",
						"          Curr_T44OtherNumVal1,",
						"          Curr_T44OtherNumVal2,",
						"          Curr_T44OtherDtVal1,",
						"          Curr_T44OtherDtVal2,",
						"          Curr_T45Type,",
						"          Curr_T45OtherCharVal1,",
						"          Curr_T45OtherCharVal2,",
						"          Curr_T45OtherNumVal1,",
						"          Curr_T45OtherNumVal2,",
						"          Curr_T45OtherDtVal1,",
						"          Curr_T45OtherDtVal2,",
						"          Curr_T46Type,",
						"          Curr_T46OtherCharVal1,",
						"          Curr_T46OtherCharVal2,",
						"          Curr_T46OtherNumVal1,",
						"          Curr_T46OtherNumVal2,",
						"          Curr_T46OtherDtVal1,",
						"          Curr_T46OtherDtVal2,",
						"          Curr_T47Type,",
						"          Curr_T47OtherCharVal1,",
						"          Curr_T47OtherCharVal2,",
						"          Curr_T47OtherNumVal1,",
						"          Curr_T47OtherNumVal2,",
						"          Curr_T47OtherDtVal1,",
						"          Curr_T47OtherDtVal2,",
						"          Curr_T48Type,",
						"          Curr_T48OtherCharVal1,",
						"          Curr_T48OtherCharVal2,",
						"          Curr_T48OtherNumVal1,",
						"          Curr_T48OtherNumVal2,",
						"          Curr_T48OtherDtVal1,",
						"          Curr_T48OtherDtVal2,",
						"          Curr_T49Type,",
						"          Curr_T49OtherCharVal1,",
						"          Curr_T49OtherCharVal2,",
						"          Curr_T49OtherNumVal1,",
						"          Curr_T49OtherNumVal2,",
						"          Curr_T49OtherDtVal1,",
						"          Curr_T49OtherDtVal2,",
						"          Curr_T50Type,",
						"          Curr_T50OtherCharVal1,",
						"          Curr_T50OtherCharVal2,",
						"          Curr_T50OtherNumVal1,",
						"          Curr_T50OtherNumVal2,",
						"          Curr_T50OtherDtVal1,",
						"          Curr_T50OtherDtVal2,",
						"          LoadDt",
						"     )) ~> LoadOtherCoreAnalysisCurr"
					]
				}
			},
			"dependsOn": []
		}
	]
}