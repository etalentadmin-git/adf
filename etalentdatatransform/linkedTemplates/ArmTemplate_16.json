{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = CoreHCT@WorkerId,",
						"          ManagerInd,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = CoreHCT@EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(CoreHCT@WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(CoreHCT@WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(CoreHCT@WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(CoreHCT@WorkerId == {Applicant ID Calculated}",
						"     && CoreHCT@EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(CoreHCT@WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && CoreHCT@EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(CoreHCT@WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"Talent select(mapColumn(",
						"          WorkerId,",
						"          EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(CoreHCT@WorkerId == SelectTalentColumns@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Talent_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "RemoveNullWorkerIDRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"RemoveNullWorkerIDRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'PER',",
						"          {Performance Rating} = iif(isNull({Performance Rating}), 'N/A',{Performance Rating})) ~> AddParameters",
						"AddParameters aggregate(groupBy({Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)},",
						"          {Client ID}),",
						"     {Client Engagement Date} = max({Client Engagement Date})) ~> RemoveDuplicates",
						"RemoveDuplicates filter(not(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
						"SelectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TalentFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_YearRefTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputYearRefTable"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"Core aggregate(groupBy({Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year} = max({Event Year})) ~> aggregate1",
						"aggregate1 derive(CurrEventYear = toShort({Event Year}),",
						"          P1EventYear = toShort({Event Year} - 1),",
						"          P2EventYear = toShort({Event Year} - 2),",
						"          P3EventYear = toShort({Event Year} - 3),",
						"          P4EventYear = toShort({Event Year} - 4),",
						"          P5EventYear = toShort({Event Year} - 5),",
						"          {Client Engagement Date} = toDate({Client Engagement Date},'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          CurrEventYear,",
						"          P1EventYear,",
						"          P2EventYear,",
						"          P3EventYear,",
						"          P4EventYear,",
						"          P5EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(!(isNull({Client ID}))) ~> RemoveNullRows",
						"RemoveNullRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['YearRefTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputYearRefTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HierarchyCheck')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData1",
							"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData2",
							"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputOrphanHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OuputOrphanAndCurrHrchyCounts"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputWorkerHierarchyDetail"
						}
					],
					"transformations": [
						{
							"name": "MaxEventDt"
						},
						{
							"name": "CurrentHCTEvent",
							"description": "Join on max HCT event date in order to pull only the Current headcount records"
						},
						{
							"name": "UniqueHierarchyRecords",
							"description": "Select unique hierarchy for current headcount records."
						},
						{
							"name": "SelectUniqueHierarchyCurrHCT",
							"description": "Select key and hierarchy fields."
						},
						{
							"name": "UniqueHierarchyAllEvents"
						},
						{
							"name": "SelectUniqueHierarchyFields"
						},
						{
							"name": "SelectCoreWithNoCurrentHierarchy"
						},
						{
							"name": "PullRecordsWithOrphans",
							"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
						},
						{
							"name": "UniqueWorkerWithOrphanHrchy",
							"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
						},
						{
							"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
						},
						{
							"name": "PullCurrentHierarchyIfExists",
							"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
						},
						{
							"name": "SelectWorkerIDandHierarcy",
							"description": "Select worker ID and hierarchy fields"
						},
						{
							"name": "CreateWorkerCountsbyHierarchy",
							"description": "Create counts for unique orphan and current hierarchy records"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HCTFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData1",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData2",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"HCTFilter aggregate(groupBy(EventUnique = Event),",
						"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
						"select1, MaxEventDt join({Event Date} == MaxEventDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrentHCTEvent",
						"derivedColumn3 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
						"UniqueHierarchyRecords select(mapColumn(",
						"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
						"          {Business Group Level 1 HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
						"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
						"UniqueHierarchyAllEvents select(mapColumn(",
						"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
						"          {Business Group Level 1 ALL} = {Business Group Level 1},",
						"          {Business Group Level 2 ALL} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
						"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
						"     negate:true,",
						"     broadcast: 'both')~> SelectCoreWithNoCurrentHierarchy",
						"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullRecordsWithOrphans",
						"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
						"          {Business Group Level 1 Unique} = {Business Group Level 1},",
						"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
						"UniqueWorkerWithOrphanHrchy select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Unique}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
						"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
						"PullCurrentHierarchyIfExists select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
						"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
						"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
						"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
						"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
						"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
						"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
						"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
						"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn2",
						"HCTFilter select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CurrentHCTEvent derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
						"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
						"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
						"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
						"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "AllApplicantData"
						},
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplFlowMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantDatabaseRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingApplFlowMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepApplFlowMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotApplFlowAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnApplFlow"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectExistingApplFlowMapping"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "SelectDBApplicantData"
						},
						{
							"name": "union1"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "CollapsePossibleDuplicates"
						},
						{
							"name": "selectApplDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllApplicantData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ApplFlowMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantDatabaseRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Applicant ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotApplFlowAndEventTime",
						"derivedColumn2 sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotApplFlowAndEventTime sort(asc({Client Applicant Final Disposition}, true),",
						"     asc({Client Applicant Step Before Final Disposition}, true),",
						"     asc({Client Applicant Rejected Reason}, true)) ~> SortOnApplFlow",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingApplFlowMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Applicant Rejected Reason} == {Unique ClientApplRejectedReason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Applicant Final Disposition} = {Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason} = {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Applicant Final Disposition} = {Unique ElloreeApplFinalDisp},",
						"          {Suggested Elloree Applicant Category} = {Unique ElloreeApplCategory},",
						"          {Suggested Elloree Submitted to Manager Fl} = {Unique ElloreeSubmittedtoMgrFl},",
						"          {Applicant ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectExistingApplFlowMapping join({Client Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Client Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Client Applicant Rejected Reason} == {Unique ClientApplRejectedReason}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Applicant Final Disposition} = iif(isNull({Suggested Source}),{Unique ClientApplFinalDisp},{Suggested Elloree Applicant Final Disposition}),",
						"          {Suggested Elloree Applicant Category} = iif(isNull({Suggested Source}),{Unique ElloreeApplCategory},{Suggested Elloree Applicant Category}),",
						"          {Suggested Elloree Submitted to Mgr Fl} = iif(isNull({Suggested Source}),{Unique ElloreeSubmittedtoMgrFl},{Suggested Elloree Submitted to Mgr Fl})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl} = {Suggested Elloree Submitted to Manager Fl},",
						"          {Applicant ID},",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectApplDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Applicant ID} = ApplicantId,",
						"          {Applicant Final Disposition} = ApplFinalDisp,",
						"          {Applicant Step Before Final Disposition} = ApplStepBeforeFinalDisp,",
						"          {Applicant Rejected Reason} = ApplRejectedReason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDBApplicantData",
						"select4, SelectDBApplicantData union(byName: true)~> union1",
						"AllApplicantData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"CollapsePossibleDuplicates derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Applicant Final Disposition} = '',",
						"          {Elloree Applicant Category} = '',",
						"          {Elloree Submitted to Mgr Fl} = '') ~> derivedColumn2",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Step Before Final Disposition}),",
						"     TotApplCount = count({Applicant ID})) ~> CollapsePossibleDuplicates",
						"ApplicantDatabaseRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ApplicantId,",
						"          ApplType,",
						"          ApplFinalDisp,",
						"          ApplStepBeforeFinalDisp,",
						"          ApplRejectedReason),",
						"     TotRecCount = count(ApplicantId)) ~> selectApplDBRecsInit",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Count Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Count Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason},",
						"          {Count Unique ElloreeApplFinalDisp} = {Unique ElloreeApplFinalDisp},",
						"          {Count Unique ElloreeApplCategory} = {Unique ElloreeApplCategory},",
						"          {Count Unique ElloreeSubmittedtoMgrFl} = {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientApplFinalDisp} == {Count Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Count Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Count Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Count Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Count Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Count Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Agg Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Agg Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason}),",
						"     {Agg Unique ElloreeApplFinalDisp} = first({Unique ElloreeApplFinalDisp}),",
						"          {Agg Unique ElloreeApplCategory} = first({Unique ElloreeApplCategory}),",
						"          {Agg Unique ElloreeSubmittedtoMgrFl} = first({Unique ElloreeSubmittedtoMgrFl})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientApplFinalDisp} == {Agg Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Agg Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Agg Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Agg Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Agg Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Agg Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ApplFlowMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ApplFlowMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingApplFlowMapping",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepApplFlowMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "HierarchyMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingHierarchyMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepHierarchyMapping"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort4"
						},
						{
							"name": "sort5"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "SelectFinal1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectReqRecords"
						},
						{
							"name": "SelectCoreRecords"
						},
						{
							"name": "union1"
						},
						{
							"name": "SetEvent"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "CollapsePossibleDuplicateRows"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HierarchyMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn2 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"CollapsePossibleDuplicateRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Business Group Level 1} = '',",
						"          {Elloree Business Group Level 2} = '',",
						"          {Elloree Business Group Level 3} = '',",
						"          {Elloree Business Group Level 4} = '',",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(asc({Event and Year}, true)) ~> sort4",
						"pivot1 sort(asc({Client Business Group Level 1}, true),",
						"     asc({Client Business Group Level 2}, true),",
						"     asc({Client Business Group Level 3}, true),",
						"     asc({Client Business Group Level 4}, true)) ~> sort5",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"sort4, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Business Group Level 1} = {Business Group Level 1},",
						"          {Client Business Group Level 2} = {Business Group Level 2},",
						"          {Client Business Group Level 3} = {Business Group Level 3},",
						"          {Client Business Group Level 4} = {Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Business Group Level 1} = {Unique ElloreeBusGrpLvl1},",
						"          {Suggested Elloree Business Group Level 2} = {Unique ElloreeBusGrpLvl2},",
						"          {Suggested Elloree Business Group Level 3} = {Unique ElloreeBusGrpLvl3},",
						"          {Suggested Elloree Business Group Level 4} = {Unique ElloreeBusGrpLvl4},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Client Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Client Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Client Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"join2 select(mapColumn(",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal1",
						"SelectFinal1 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Business Group Level 1} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl1},{Suggested Elloree Business Group Level 1}),",
						"          {Suggested Elloree Business Group Level 2} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl2},{Suggested Elloree Business Group Level 2}),",
						"          {Suggested Elloree Business Group Level 3} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl3},{Suggested Elloree Business Group Level 3}),",
						"          {Suggested Elloree Business Group Level 4} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl4},{Suggested Elloree Business Group Level 4})) ~> derivedColumn2",
						"SetEvent select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Requisition ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqRecords",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
						"SelectCoreRecords, SelectReqRecords, selectReqDBRecs, selectCoreDBRecs union(byName: true)~> union1",
						"Requisitions derive(Event = 'Requisition') ~> SetEvent",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}),",
						"     TotalRecCount = count({Record Id})) ~> CollapsePossibleDuplicateRows",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl4),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Count Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Count Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Count Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4},",
						"          {Count Unique ElloreeBusGrpLvl1} = {Unique ElloreeBusGrpLvl1},",
						"          {Count Unique ElloreeBusGrpLvl2} = {Unique ElloreeBusGrpLvl2},",
						"          {Count Unique ElloreeBusGrpLvl3} = {Unique ElloreeBusGrpLvl3},",
						"          {Count Unique ElloreeBusGrpLvl4} = {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientBusGrpLvl1} == {Count Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Count Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Count Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Count Unique ClientBusGrpLvl4}",
						"     && {Unique ElloreeBusGrpLvl1} == {Count Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Count Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Count Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Count Unique ElloreeBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Agg Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Agg Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Agg Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4}),",
						"     {Agg Unique ElloreeBusGrpLvl1} = first({Unique ElloreeBusGrpLvl1}),",
						"          {Agg Unique ElloreeBusGrpLvl2} = first({Unique ElloreeBusGrpLvl2}),",
						"          {Agg Unique ElloreeBusGrpLvl3} = first({Unique ElloreeBusGrpLvl3}),",
						"          {Agg Unique ElloreeBusGrpLvl4} = first({Unique ElloreeBusGrpLvl4})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeBusGrpLvl1} == {Agg Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Agg Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Agg Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Agg Unique ElloreeBusGrpLvl4}",
						"     && {Unique ClientBusGrpLvl1} == {Agg Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Agg Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Agg Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Agg Unique ClientBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4,",
						"          ClientEngagementDt),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"HierarchyMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"HierarchyMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingHierarchyMapping",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepHierarchyMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMappingTableClient"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputMappingToPrepFldr"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputMappingToWorkingFldr"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotCorpTitleEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnCorpTitle"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectExistingCorpTitleMapping"
						},
						{
							"name": "JoinCurrCorpTitle"
						},
						{
							"name": "select5"
						},
						{
							"name": "join5"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select6"
						},
						{
							"name": "JoinPrevCorpTitle"
						},
						{
							"name": "select7"
						},
						{
							"name": "join6"
						},
						{
							"name": "select8"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "PullCorpTitleValuesNotInCurrTitleField"
						},
						{
							"name": "UnionCurrAndPrevCorpTitleRows"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectCorpTitleColumns"
						},
						{
							"name": "select10"
						},
						{
							"name": "AddReqDerivedForUnion"
						},
						{
							"name": "JoinCoreAndReqRecords"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "AddReqDBDerivedForUnion"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CorpTitleMappingTableClient",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn4 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotCorpTitleEventTime",
						"derivedColumn5 sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotCorpTitleEventTime sort(asc({Client Corporate Title}, true)) ~> SortOnCorpTitle",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientCorpTitle} = ClientCorpTitle,",
						"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId,",
						"          ClientEngagementDt),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle} = {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorporateTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorporateTitle} = {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorporateTitleSort} = {Unique ElloreeCorpTitleSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingCorpTitleMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Corporate Title} == {Unique ClientCorpTitle},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrCorpTitle",
						"JoinCurrCorpTitle select(mapColumn(",
						"          {Client Corporate Title} = {Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Client Elloree Corporate Title} = {Unique ClientElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title} = {Unique ElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title Sort} = {Unique ElloreeCorpTitleSortId},",
						"          {Worker ID} = RecordID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join5",
						"select6 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
						"          {Corporate Title (Current or Previous)} = 'Curr Title') ~> derivedColumn2",
						"join5 select(mapColumn(",
						"          {Client Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle},",
						"          {Unique ClientElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitleSort}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Previous Corporate Title} == {Unique ClientCorpTitle},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPrevCorpTitle",
						"JoinPrevCorpTitle select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title} = {Previous Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
						"          {Suggested ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId},",
						"          {Suggested ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Worker ID} = RecordID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join6",
						"join6 select(mapColumn(",
						"          {Client Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title} = {Suggested ClientElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title} = {Suggested ElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title Sort} = {Suggested ElloreeCorpTitleSortId},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle},",
						"          {Unique ClientElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitleSort}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"select8 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
						"          {Corporate Title (Current or Previous)} = 'Prev Title') ~> derivedColumn3",
						"select11, derivedColumn2 exists(select11@{Client Corporate Title} == select6@{Client Corporate Title},",
						"     negate:true,",
						"     broadcast: 'both')~> PullCorpTitleValuesNotInCurrTitleField",
						"derivedColumn2, PullCorpTitleValuesNotInCurrTitleField union(byName: true)~> UnionCurrAndPrevCorpTitleRows",
						"UnionCurrAndPrevCorpTitleRows derive({Event and Year} = concat({Event and Year},concat(' ',{Corporate Title (Current or Previous)}))) ~> derivedColumn4",
						"Requisitions select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Corporate Title},",
						"          {Event Year},",
						"          Event,",
						"          RecordID = {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleColumns",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          RecordID = {Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"SelectCorpTitleColumns derive({Previous Corporate Title} = 'N/A') ~> AddReqDerivedForUnion",
						"select10, AddReqDerivedForUnion, AddReqDBDerivedForUnion, selectCoreDBRecs union(byName: true)~> JoinCoreAndReqRecords",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          RecordID = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Corporate Title} = CorpTitle,",
						"          {Previous Corporate Title} = PrevCorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          RecordID = ReqId,",
						"          {Corporate Title} = CorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"JoinCoreAndReqRecords aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          RecordID),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Corporate Title} = '',",
						"          {Elloree Corporate Title Sort} = '',",
						"          {Client Elloree Corporate Title} = '') ~> derivedColumn5",
						"selectReqDBRecs derive({Previous Corporate Title} = 'N/A') ~> AddReqDBDerivedForUnion",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          CorpTitle),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          CorpTitle,",
						"          PrevCorpTitle),",
						"     TotWorkers = count(WorkerId)) ~> aggregate2",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientCorpTitle} = {Unique ClientCorpTitle},",
						"          {Count Unique ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Count Unique ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
						"          {Count Unique ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientCorpTitle} == {Count Unique ClientCorpTitle}",
						"     && {Unique ClientElloreeCorpTitle} == {Count Unique ClientElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitle} == {Count Unique ElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitleSortId} == {Count Unique ElloreeCorpTitleSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          ClientEngagementDt,",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}),",
						"     ClientIDCount = max(ClientIDCount),",
						"          ClientEngagementDt = max(ClientEngagementDt)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientCorpTitle} = {Unique ClientCorpTitle}),",
						"     {Agg Unique ClientElloreeCorpTitle} = first({Unique ClientElloreeCorpTitle}),",
						"          {Agg Unique ElloreeCorpTitle} = first({Unique ElloreeCorpTitle}),",
						"          {Agg Unique ElloreeCorpTitleSortId} = first({Unique ElloreeCorpTitleSortId})) ~> aggregate3",
						"SelectMappingWithMostClients, aggregate3 join({Unique ClientCorpTitle} == {Agg Unique ClientCorpTitle}",
						"     && {Unique ClientElloreeCorpTitle} == {Agg Unique ClientElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitle} == {Agg Unique ElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitleSortId} == {Agg Unique ElloreeCorpTitleSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"CorpTitleMappingTableClient filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"CorpTitleMappingTableClient filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientCorpTitle} = ClientCorpTitle,",
						"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId,",
						"          ClientEngagementDt),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"derivedColumn3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Worker ID},",
						"          {Corporate Title (Current or Previous)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_corp_title_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMappingToPrepFldr",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['corp_title_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMappingToWorkingFldr"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DisabilityMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingDisabilityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepDisabilityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotDisabilityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnDisability"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectCandidate"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "exists1"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DisabilityMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Disability Ind},",
						"          {Elloree Disability Ind},",
						"          {Suggested Elloree Disability Ind},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotDisabilityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotDisabilityAndEventTime sort(asc({Client Disability Ind}, true)) ~> SortOnDisability",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Disability Ind} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientDisabilityInd} = ClientDisabilityInd,",
						"          {Unique ElloreeDisabilityInd} = ElloreeDisabilityInd),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd},",
						"          {Unique ClientId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Disability Ind} == {Unique ClientDisabilityInd},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Disability Ind} = {Disability Ind},",
						"          {Elloree Disability Ind},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Disability Ind} = {Unique ElloreeDisabilityInd},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Disability Ind} == {Unique ClientDisabilityInd},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Disability Ind} = iif(isNull({Suggested Source}),{Unique ClientDisabilityInd},{Suggested Elloree Disability Ind})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Disability Ind},",
						"          {Elloree Disability Ind},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Disability Ind},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          {Disability Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCandidate",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Disability Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectCandidate, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          DisabilityInd),",
						"     TotalFinalCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Disability Ind} = DisabilityInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Disability Ind} = DisabilityInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          WorkerId,",
						"          DisabilityInd,",
						"          Event),",
						"     MaxWorkerId = max(WorkerId)) ~> aggregate2",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Disability Ind}),",
						"     MaxAppl = max({Applicant ID})) ~> aggregate3",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientDisabilityInd} = {Unique ClientDisabilityInd},",
						"          {Count Unique ElloreeDisabilityInd} = {Unique ElloreeDisabilityInd}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientDisabilityInd} == {Count Unique ClientDisabilityInd}",
						"     && {Unique ElloreeDisabilityInd} == {Count Unique ElloreeDisabilityInd},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientDisabilityInd} = {Unique ClientDisabilityInd}),",
						"     {Agg Unique ElloreeDisabilityInd} = first({Unique ElloreeDisabilityInd})) ~> aggregate4",
						"SelectMappingWithMostClients, aggregate4 join({Unique ClientDisabilityInd} == {Agg Unique ClientDisabilityInd}",
						"     && {Unique ElloreeDisabilityInd} == {Agg Unique ElloreeDisabilityInd},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"DisabilityMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"DisabilityMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientDisabilityInd} = ClientDisabilityInd,",
						"          {Unique ElloreeDisabilityInd} = ElloreeDisabilityInd),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> exists1",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"exists1 select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Disability Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnDisability sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['disability_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingDisabilityMapping",
						"SortOnDisability sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_disability_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepDisabilityMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "EthnicityMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEthnicityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnEthnicity"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EthnicityMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Race},",
						"          {Client Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Suggested Elloree Race},",
						"          {Suggested Elloree Hispanic or Latino Origin},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotEthnicityAndEventTime sort(asc({Client Race}, true),",
						"     asc({Client Hispanic or Latino Origin}, true)) ~> SortOnEthnicity",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Race} = '',",
						"          {Elloree Hispanic or Latino Origin} = '',",
						"          {Elloree Ethnic Group} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientRace} = ClientRace,",
						"          {Unique ClientHispanicLatinoOrigin} = ClientHispanicLatinoOrigin,",
						"          {Unique ElloreeRace} = ElloreeRace,",
						"          {Unique ElloreeHispanicLatinoOrigin} = ElloreeHispanicLatinoOrigin),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && Race == {Unique ClientRace}",
						"     && {Hispanic or Latino Origin} == {Unique ClientHispanicLatinoOrigin},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Race} = Race,",
						"          {Client Hispanic or Latino Origin} = {Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Elloree Ethnic Group},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Race} = {Unique ElloreeRace},",
						"          {Suggested Elloree Hispanic or Latino Origin} = {Unique ElloreeHispanicLatinoOrigin},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectWithoutEngagementDt join({Client Race} == {Unique ClientRace}",
						"     && {Client Hispanic or Latino Origin} == {Unique ClientHispanicLatinoOrigin}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Race} = iif(isNull({Suggested Source}),{Unique ClientRace},{Suggested Elloree Race}),",
						"          {Suggested Elloree Hispanic or Latino Origin} = iif(isNull({Suggested Source}),{Unique ClientHispanicLatinoOrigin},{Suggested Elloree Hispanic or Latino Origin})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Race},",
						"          {Client Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Elloree Ethnic Group},",
						"          {Suggested Source},",
						"          {Suggested Elloree Race},",
						"          {Suggested Elloree Hispanic or Latino Origin},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          Race,",
						"          {Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          Race,",
						"          {Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"aggregate4 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          Race,",
						"          {Hispanic or Latino Origin} = HispanicLatinoOrigin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"aggregate5 aggregate(groupBy({Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ApplicantId,",
						"          Race,",
						"          {Hispanic or Latino Origin} = HispanicLatinoOrigin),",
						"     {Client ID} = max({Client ID})) ~> selectApplicantDBRecs",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          Race,",
						"          {Hispanic or Latino Origin}),",
						"     MaxClient = max({Client ID})) ~> aggregate3",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          WorkerId,",
						"          Race,",
						"          HispanicLatinoOrigin),",
						"     MaxId = max(WorkerId)) ~> aggregate4",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ApplicantId,",
						"          Race,",
						"          HispanicLatinoOrigin),",
						"     maxid = max(ApplicantId)) ~> aggregate5",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientRace} = {Unique ClientRace},",
						"          {Count Unique ClientHispanicLatinoOrigin} = {Unique ClientHispanicLatinoOrigin},",
						"          {Count Unique ElloreeRace} = {Unique ElloreeRace},",
						"          {Count Unique ElloreeHispanicLatinoOrigin} = {Unique ElloreeHispanicLatinoOrigin}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientRace} == {Count Unique ClientRace}",
						"     && {Unique ClientHispanicLatinoOrigin} == {Count Unique ClientHispanicLatinoOrigin}",
						"     && {Unique ElloreeRace} == {Count Unique ElloreeRace}",
						"     && {Unique ElloreeHispanicLatinoOrigin} == {Count Unique ElloreeHispanicLatinoOrigin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientRace} = {Unique ClientRace},",
						"          {Agg Unique ClientHispanicLatinoOrigin} = {Unique ClientHispanicLatinoOrigin}),",
						"     {Agg Unique ElloreeRace} = first({Unique ElloreeRace}),",
						"          {Agg Unique ElloreeHispanicLatinoOrigin} = first({Unique ElloreeHispanicLatinoOrigin})) ~> aggregate6",
						"SelectMappingWithMostClients, aggregate6 join({Unique ClientRace} == {Agg Unique ClientRace}",
						"     && {Unique ClientHispanicLatinoOrigin} == {Agg Unique ClientHispanicLatinoOrigin}",
						"     && {Unique ElloreeRace} == {Agg Unique ElloreeRace}",
						"     && {Unique ElloreeHispanicLatinoOrigin} == {Agg Unique ElloreeHispanicLatinoOrigin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"EthnicityMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"EthnicityMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientRace} = ClientRace,",
						"          {Unique ClientHispanicLatinoOrigin} = ClientHispanicLatinoOrigin,",
						"          {Unique ElloreeRace} = ElloreeRace,",
						"          {Unique ElloreeHispanicLatinoOrigin} = ElloreeHispanicLatinoOrigin),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          Race,",
						"          {Hispanic or Latino Origin}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnEthnicity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ethnicity_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
						"SortOnEthnicity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_ethnicity_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "EventMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEventMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEventMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEventAndEventTime"
						},
						{
							"name": "SortOnEventAndYear"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "UniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRow"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EventMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Event},",
						"          {Client Event Type},",
						"          {Client Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Suggested Elloree Event},",
						"          {Suggested Elloree Event Type},",
						"          {Suggested Elloree Event Reason},",
						"          {Suggested Elloree Termination Reason},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEventAndEventTime",
						"RemoveDupRow sort(asc({Event Year}, true)) ~> SortOnEventAndYear",
						"CreatePivotEventAndEventTime sort(asc({Client Event}, true),",
						"     asc({Client Event Type}, true),",
						"     asc({Client Event Reason}, true)) ~> SortOnEvent",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientEvent} = ClientEvent,",
						"          {Unique ClientEventType} = ClientEventType,",
						"          {Unique ClientEventReason} = ClientEventReason,",
						"          {Unique ElloreeEvent} = ElloreeEvent,",
						"          {Unique ElloreeEventType} = ElloreeEventType,",
						"          {Unique ElloreeEventReason} = ElloreeEventReason,",
						"          {Unique ElloreeTermReason} = ElloreeTermReason),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> UniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEventAndYear, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && Event == {Unique ClientEvent}",
						"     && {Event Type} == {Unique ClientEventType}",
						"     && {Event Reason} == {Unique ClientEventReason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"derivedColumn2 select(mapColumn(",
						"          {Client Event} = Event,",
						"          {Client Event Type} = {Event Type},",
						"          {Client Event Reason} = {Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Event} = {Unique ElloreeEvent},",
						"          {Suggested Elloree Event Type} = {Unique ElloreeEventType},",
						"          {Suggested Elloree Event Reason} = {Unique ElloreeEventReason},",
						"          {Suggested Elloree Termination Reason} = {Unique ElloreeTermReason},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Event} == {Unique ClientEvent}",
						"     && {Client Event Type} == {Unique ClientEventType}",
						"     && {Client Event Reason} == {Unique ClientEventReason}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"SelectFinal derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Event} = iif(isNull({Suggested Source}),{Unique ElloreeEvent},{Suggested Elloree Event}),",
						"          {Suggested Elloree Event Type} = iif(isNull({Suggested Source}),{Unique ClientEventType},{Suggested Elloree Event Type}),",
						"          {Suggested Elloree Event Reason} = iif(isNull({Suggested Source}),{Unique ClientEventReason},{Suggested Elloree Event Reason}),",
						"          {Suggested Elloree Termination Reason} = iif(isNull({Suggested Source}),{Unique ElloreeTermReason},{Suggested Elloree Termination Reason})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Event},",
						"          {Client Event Type},",
						"          {Client Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Event},",
						"          {Suggested Elloree Event Type},",
						"          {Suggested Elloree Event Reason},",
						"          {Suggested Elloree Termination Reason},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Event Type} = EventType,",
						"          {Event Reason} = EventReason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"join1 derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Event} = '',",
						"          {Elloree Event Type} = '',",
						"          {Elloree Event Reason} = '',",
						"          {Elloree Termination Reason} = '') ~> derivedColumn2",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, selectCoreDBRecs union(byName: true)~> union1",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          EventType,",
						"          EventReason,",
						"          Event),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"UniqueRows aggregate(groupBy({Count Unique ClientEvent} = {Unique ClientEvent},",
						"          {Count Unique ClientEventType} = {Unique ClientEventType},",
						"          {Count Unique ClientEventReason} = {Unique ClientEventReason},",
						"          {Count Unique ElloreeEvent} = {Unique ElloreeEvent},",
						"          {Count Unique ElloreeEventType} = {Unique ElloreeEventType},",
						"          {Count Unique ElloreeEventReason} = {Unique ElloreeEventReason},",
						"          {Count Unique ElloreeTermReason} = {Unique ElloreeTermReason}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"UniqueRows, GetCountOfClientForUniqueValues join({Unique ClientEvent} == {Count Unique ClientEvent}",
						"     && {Unique ClientEventType} == {Count Unique ClientEventType}",
						"     && {Unique ClientEventReason} == {Count Unique ClientEventReason}",
						"     && {Unique ElloreeEvent} == {Count Unique ElloreeEvent}",
						"     && {Unique ElloreeEventType} == {Count Unique ElloreeEventType}",
						"     && {Unique ElloreeEventReason} == {Count Unique ElloreeEventReason}",
						"     && {Unique ElloreeTermReason} == {Count Unique ElloreeTermReason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientEvent} = {Unique ClientEvent},",
						"          {Agg Unique ClientEventType} = {Unique ClientEventType},",
						"          {Agg Unique ClientEventReason} = {Unique ClientEventReason}),",
						"     {Agg Unique ElloreeEvent} = first({Unique ElloreeEvent}),",
						"          {Agg Unique ElloreeEventType} = first({Unique ElloreeEventType}),",
						"          {Agg Unique ElloreeEventReason} = first({Unique ElloreeEventReason}),",
						"          {Agg Unique ElloreeTermReason} = first({Unique ElloreeTermReason})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeEvent} == {Agg Unique ElloreeEvent}",
						"     && {Unique ElloreeEventType} == {Agg Unique ElloreeEventType}",
						"     && {Unique ElloreeEventReason} == {Agg Unique ElloreeEventReason}",
						"     && {Unique ElloreeTermReason} == {Agg Unique ElloreeTermReason}",
						"     && {Unique ClientEvent} == {Agg Unique ClientEvent}",
						"     && {Unique ClientEventType} == {Agg Unique ClientEventType}",
						"     && {Unique ClientEventReason} == {Agg Unique ClientEventReason}",
						"     && {Unique ElloreeEvent} == {Agg Unique ElloreeEvent},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"EventMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"EventMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientEvent} = ClientEvent,",
						"          {Unique ClientEventType} = ClientEventType,",
						"          {Unique ClientEventReason} = ClientEventReason,",
						"          {Unique ElloreeEvent} = ElloreeEvent,",
						"          {Unique ElloreeEventType} = ElloreeEventType,",
						"          {Unique ElloreeEventReason} = ElloreeEventReason,",
						"          {Unique ElloreeTermReason} = ElloreeTermReason),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRow",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['event_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEventMapping",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_event_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEventMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "GenderMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEthnicityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotGenderAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "aggregate6"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> GenderMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Gender},",
						"          {Elloree Gender},",
						"          {Suggested Elloree Gender},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotGenderAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotGenderAndEventTime sort(asc({Client Gender}, true)) ~> SortOnGender",
						"aggregate6 derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Gender} = '') ~> AddDerivedEventYearColumn",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && Gender == {Unique ClientGender},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Gender} = Gender,",
						"          {Elloree Gender},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Gender} = {Unique ElloreeGender},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Gender} == {Unique ClientGender},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Gender} = iif(isNull({Suggested Source}),{Unique ClientGender},{Suggested Elloree Gender})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Gender},",
						"          {Elloree Gender},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Gender},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"aggregate3 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          Gender),",
						"     TotalRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          Gender),",
						"     MaxAppl = max({Applicant ID})) ~> aggregate2",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          WorkerId,",
						"          Gender),",
						"     MaxWorkerId = max(WorkerId)) ~> aggregate3",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientGender} = ClientGender,",
						"          {Unique ElloreeGender} = ElloreeGender),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientGender} = {Unique ClientGender},",
						"          {Count Unique ElloreeGender} = {Unique ElloreeGender}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientGender} == {Count Unique ClientGender}",
						"     && {Unique ElloreeGender} == {Count Unique ElloreeGender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientGender} = {Unique ClientGender}),",
						"     {Agg Unique ElloreeGender} = first({Unique ElloreeGender})) ~> aggregate5",
						"SelectMappingWithMostClients, aggregate5 join({Unique ClientGender} == {Agg Unique ClientGender}",
						"     && {Unique ElloreeGender} == {Agg Unique ElloreeGender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientGender},",
						"          {Unique ElloreeGender}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"GenderMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"GenderMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientGender} = ClientGender,",
						"          {Unique ElloreeGender} = ElloreeGender),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          Gender),",
						"     RowCount = count({Client ID})) ~> aggregate6",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['gender_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_gender_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "LGTBQMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkinglgtbqMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepLGTBQMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotGenderAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnLGTBQ"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LGTBQMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client LGTBQ},",
						"          {Elloree LGTBQ},",
						"          {Suggested Elloree LGTBQ},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotGenderAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotGenderAndEventTime sort(asc({Client LGTBQ}, true)) ~> SortOnLGTBQ",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree LGTBQ} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientLGTBQ} = ClientLGTBQ,",
						"          {Unique ElloreeLGTBQ} = ElloreeLGTBQ),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && LGTBQ == {Unique ClientLGTBQ},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client LGTBQ} = LGTBQ,",
						"          {Elloree LGTBQ},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree LGTBQ} = {Unique ElloreeLGTBQ},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client LGTBQ} == {Unique ClientLGTBQ},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree LGTBQ} = iif(isNull({Suggested Source}),{Unique ClientLGTBQ},{Suggested Elloree LGTBQ})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client LGTBQ},",
						"          {Elloree LGTBQ},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree LGTBQ},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectApplicantDBRecs, selectCoreDBRecs union(byName: true)~> union1",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          LGTBQ),",
						"     TotalRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          LGTBQ),",
						"     MaxWorkerId = max(WorkerId)) ~> aggregate2",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          LGTBQ),",
						"     MaxAppl = max({Applicant ID})) ~> aggregate3",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientLGTBQ} = {Unique ClientLGTBQ},",
						"          {Count Unique ElloreeLGTBQ} = {Unique ElloreeLGTBQ}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientLGTBQ} == {Count Unique ClientLGTBQ}",
						"     && {Unique ElloreeLGTBQ} == {Count Unique ElloreeLGTBQ},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientLGTBQ} = {Unique ClientLGTBQ}),",
						"     {Agg Unique ElloreeLGTBQ} = first({Unique ElloreeLGTBQ})) ~> aggregate4",
						"SelectMappingWithMostClients, aggregate4 join({Unique ClientLGTBQ} == {Agg Unique ClientLGTBQ}",
						"     && {Unique ElloreeLGTBQ} == {Agg Unique ElloreeLGTBQ},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"LGTBQMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"LGTBQMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientLGTBQ} = ClientLGTBQ,",
						"          {Unique ElloreeLGTBQ} = ElloreeLGTBQ),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          LGTBQ),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnLGTBQ sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['lgtbq_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkinglgtbqMapping",
						"SortOnLGTBQ sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_lgtbq_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepLGTBQMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "LocationMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEthnicityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotLocationAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnLocation"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "SelectReq"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "FilterOutNullHCTEventRows"
						},
						{
							"name": "FilterOutNullReqEventRows"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LocationMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Work Office Location},",
						"          {Client Work City},",
						"          {Client Work State},",
						"          {Client Work Country},",
						"          {Client Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Work Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort Id},",
						"          {Suggested Elloree Work Office},",
						"          {Suggested Elloree Work City},",
						"          {Suggested Elloree Work State},",
						"          {Suggested Elloree Work Country},",
						"          {Suggested Elloree Work Region},",
						"          {Suggested Elloree Strategic Location},",
						"          {Suggested Elloree Location Sort Id},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotLocationAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotLocationAndEventTime sort(asc({Client Work Office Location}, true),",
						"     asc({Client Work City}, true),",
						"     asc({Client Work State}, true),",
						"     asc({Client Work Country}, true),",
						"     asc({Client Strategic Work Location Ind}, true)) ~> SortOnLocation",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Region} = '',",
						"          {Elloree Work Country} = '',",
						"          {Elloree Work State} = '',",
						"          {Elloree Work City} = '',",
						"          {Elloree Work Ofiice} = '',",
						"          {Elloree Location Sort} = '',",
						"          {Elloree Strategic Location} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientWorkOffice} = ClientWorkOffice,",
						"          {Unique ClientWorkCity} = ClientWorkCity,",
						"          {Unique ClientWorkState} = ClientWorkState,",
						"          {Unique ClientWorkCountry} = ClientWorkCountry,",
						"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
						"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
						"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
						"          {Unique ElloreeWorkState} = ElloreeWorkState,",
						"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
						"          {Unique  ElloreeWorkRegion} = ElloreeWorkRegion,",
						"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
						"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeRegion} = {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Work Office Location} == {Unique ClientWorkOffice}",
						"     && {Work City} == {Unique ClientWorkCity}",
						"     && {Work State} == {Unique ClientWorkState}",
						"     && {Work Country} == {Unique ClientWorkCountry}",
						"     && {Strategic Work Location Ind} == {Unique ClientStrategicLoc},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"join1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Work Office Location} = {Work Office Location},",
						"          {Client Work City} = {Work City},",
						"          {Client Work State} = {Work State},",
						"          {Client Work Country} = {Work Country},",
						"          {Client Strategic Work Location Ind} = {Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Work City} = {Unique ElloreeWorkCity},",
						"          {Suggested Elloree Work Office} = {Unique ElloreeWorkOffice},",
						"          {Suggested Elloree Work State} = {Unique ElloreeWorkState},",
						"          {Suggested Elloree Work Country} = {Unique ElloreeWorkCountry},",
						"          {Suggested Elloree Region} = {Unique ElloreeWorkRegion},",
						"          {Suggested Elloree Strategic Location} = {Unique ElloreeStrategicLoc},",
						"          {Suggested Elloree Location Sort Id} = {Unique ElloreeLocSortId},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Work Office Location} == {Unique ClientWorkOffice}",
						"     && {Client Work City} == {Unique ClientWorkCity}",
						"     && {Client Work State} == {Unique ClientWorkState}",
						"     && {Client Work Country} == {Unique ClientWorkCountry}",
						"     && {Client Strategic Work Location Ind} == {Unique ClientStrategicLoc}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"SelectFinal derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Work Office} = iif(isNull({Suggested Source}),{Unique ElloreeWorkOffice},{Suggested Elloree Work Office}),",
						"          {Suggested Elloree Work City} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCity},{Suggested Elloree Work City}),",
						"          {Suggested Elloree Work State} = iif(isNull({Suggested Source}),{Unique ElloreeWorkState},{Suggested Elloree Work State}),",
						"          {Suggested Elloree Work Country} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCountry},{Suggested Elloree Work Country}),",
						"          {Suggested Elloree Work Region} = iif(isNull({Suggested Source}),{Unique ElloreeRegion},{Suggested Elloree Work Region}),",
						"          {Suggested Elloree Strategic Location} = iif(isNull({Suggested Source}),{Unique ElloreeStrategicLoc},{Suggested Elloree Strategic Location}),",
						"          {Suggested Elloree Location Sort Id} = iif(isNull({Suggested Source}),{Unique ElloreeLocSortId},{Suggested Elloree Location Sort Id})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Work Office Location},",
						"          {Client Work City},",
						"          {Client Work State},",
						"          {Client Work Country},",
						"          {Client Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Work Region} = {Elloree Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort Id} = {Elloree Location Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Work Office},",
						"          {Suggested Elloree Work City},",
						"          {Suggested Elloree Work State},",
						"          {Suggested Elloree Work Country},",
						"          {Suggested Elloree Work Region} = {Suggested Elloree Region},",
						"          {Suggested Elloree Strategic Location},",
						"          {Suggested Elloree Location Sort Id},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutNullReqEventRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Requisition ID},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City} = {Work Office City},",
						"          {Work State} = {Work Office State},",
						"          {Work Country} = {Work Office Country},",
						"          {Strategic Work Location Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReq",
						"FilterOutNullHCTEventRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectReq, selectCoreDBRecs, selectReqDBRecs union(byName: true)~> union1",
						"AllCoreData filter(not(isNull({Event Code}))) ~> FilterOutNullHCTEventRows",
						"Requisitions filter(not(isNull(Event))) ~> FilterOutNullReqEventRows",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Work Office Location} = WorkOfficeLoc,",
						"          {Work City} = WorkOfficeCity,",
						"          {Work State} = WorkOfficeState,",
						"          {Work Country} = WorkOfficeCountry,",
						"          {Strategic Work Location Ind} = WorkStrategicLocInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Work Office Location} = WorkOfficeLoc,",
						"          {Work City} = WorkOfficeCity,",
						"          {Work State} = WorkOfficeState,",
						"          {Work Country} = WorkOfficeCountry,",
						"          {Strategic Work Location Ind} = WorkStrategicLocInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
						"          {Count Unique ClientWorkCity} = {Unique ClientWorkCity},",
						"          {Count Unique ClientWorkState} = {Unique ClientWorkState},",
						"          {Count Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
						"          {Count Unique ClientStrategicLoc} = {Unique ClientStrategicLoc},",
						"          {Count Unique ElloreeWorkOffice} = {Unique ElloreeWorkOffice},",
						"          {Count Unique ElloreeWorkCity} = {Unique ElloreeWorkCity},",
						"          {Count Unique ElloreeWorkState} = {Unique ElloreeWorkState},",
						"          {Count Unique ElloreeWorkCountry} = {Unique ElloreeWorkCountry},",
						"          {Count Unique  ElloreeWorkRegion} = {Unique  ElloreeWorkRegion},",
						"          {Count Unique ElloreeStrategicLoc} = {Unique ElloreeStrategicLoc},",
						"          {Count Unique ElloreeLocSortId} = {Unique ElloreeLocSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ElloreeWorkOffice} == {Count Unique ElloreeWorkOffice}",
						"     && {Unique ElloreeWorkCity} == {Count Unique ElloreeWorkCity}",
						"     && {Unique ElloreeWorkState} == {Count Unique ElloreeWorkState}",
						"     && {Unique ElloreeWorkCountry} == {Count Unique ElloreeWorkCountry}",
						"     && {Unique  ElloreeWorkRegion} == {Count Unique  ElloreeWorkRegion}",
						"     && {Unique ElloreeStrategicLoc} == {Count Unique ElloreeStrategicLoc}",
						"     && {Unique ElloreeLocSortId} == {Count Unique ElloreeLocSortId}",
						"     && {Unique ClientWorkOffice} == {Count Unique ClientWorkOffice}",
						"     && {Unique ClientWorkCity} == {Count Unique ClientWorkCity}",
						"     && {Unique ClientWorkState} == {Count Unique ClientWorkState}",
						"     && {Unique ClientWorkCountry} == {Count Unique ClientWorkCountry}",
						"     && {Unique ClientStrategicLoc} == {Count Unique ClientStrategicLoc},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
						"          {Agg Unique ClientWorkCity} = {Unique ClientWorkCity},",
						"          {Agg Unique ClientWorkState} = {Unique ClientWorkState},",
						"          {Agg Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
						"          {Agg Unique ClientStrategicLoc} = {Unique ClientStrategicLoc}),",
						"     {Agg Unique ElloreeWorkOffice} = first({Unique ElloreeWorkOffice}),",
						"          {Agg Unique ElloreeWorkCity} = first({Unique ElloreeWorkCity}),",
						"          {Agg Unique ElloreeWorkState} = first({Unique ElloreeWorkState}),",
						"          {Agg Unique ElloreeWorkCountry} = first({Unique ElloreeWorkCountry}),",
						"          {Agg Unique ElloreeWorkRegion} = first({Unique  ElloreeWorkRegion}),",
						"          {Agg Unique ElloreeStrategicLoc} = first({Unique ElloreeStrategicLoc}),",
						"          {Agg Unique ElloreeLocSortId} = first({Unique ElloreeLocSortId})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeWorkOffice} == {Agg Unique ElloreeWorkOffice}",
						"     && {Unique ElloreeWorkCity} == {Agg Unique ElloreeWorkCity}",
						"     && {Unique ElloreeWorkState} == {Agg Unique ElloreeWorkState}",
						"     && {Unique ElloreeWorkCountry} == {Agg Unique ElloreeWorkCountry}",
						"     && {Unique  ElloreeWorkRegion} == {Agg Unique ElloreeWorkRegion}",
						"     && {Unique ElloreeStrategicLoc} == {Agg Unique ElloreeStrategicLoc}",
						"     && {Unique ElloreeLocSortId} == {Agg Unique ElloreeLocSortId}",
						"     && {Unique ClientWorkOffice} == {Agg Unique ClientWorkOffice}",
						"     && {Unique ClientWorkCity} == {Agg Unique ClientWorkCity}",
						"     && {Unique ClientWorkState} == {Agg Unique ClientWorkState}",
						"     && {Unique ClientWorkCountry} == {Agg Unique ClientWorkCountry}",
						"     && {Unique ClientStrategicLoc} == {Agg Unique ClientStrategicLoc},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"LocationMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"LocationMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientWorkOffice} = ClientWorkOffice,",
						"          {Unique ClientWorkCity} = ClientWorkCity,",
						"          {Unique ClientWorkState} = ClientWorkState,",
						"          {Unique ClientWorkCountry} = ClientWorkCountry,",
						"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
						"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
						"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
						"          {Unique ElloreeWorkState} = ElloreeWorkState,",
						"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
						"          {Unique ElloreeWorkRegion} = ElloreeWorkRegion,",
						"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
						"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['location_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_location_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Performance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of performance values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerfromanceRatingMapTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseTalentRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingPerformanceMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepPerformanceMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotPerformanceAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "selectTalentDBRecs"
						},
						{
							"name": "selectTalentColumns"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectWokerDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PerfromanceRatingMapTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseTalentRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performance Rating Sort Id},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotPerformanceAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotPerformanceAndEventTime sort(asc({Client Performance Rating}, true)) ~> SortOnGender",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ','PER')),",
						"          {Elloree Performance Rating} = '',",
						"          {Elloree Performance Rating Sort} = '',",
						"          {Performance Rating} = iif(isNull({Performance Rating}),'N/A',{Performance Rating})) ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientPerfRating} = ClientPerfRating,",
						"          {Unique ElloreePerfRating} = ElloreePerfRating,",
						"          {Unique ElloreePerfRatingSortId} = ElloreePerfRatingSortId),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Performance Rating} == {Unique ClientPerfRating},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"join1 select(mapColumn(",
						"          {Client Performance Rating} = {Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Performance Rating} = {Unique ElloreePerfRating},",
						"          {Suggested Elloree Performance Rating Sort Id} = {Unique ElloreePerfRatingSortId},",
						"          {Worker ID} = {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Performance Rating} == {Unique ClientPerfRating}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"Select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Performance Rating} = iif(isNull({Suggested Source}),{Unique ElloreePerfRating},{Suggested Elloree Performance Rating}),",
						"          {Suggested Elloree Performance Rating Sort Id} = iif(isNull({Suggested Source}),{Unique ElloreePerfRatingSortId},{Suggested Elloree Performance Rating Sort Id})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performance Rating Sort Id},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select2",
						"selectWokerDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          Event,",
						"          {Event Year} = EventYear,",
						"          {Performance Rating} = PerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTalentDBRecs",
						"Talent select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Worker ID},",
						"          {Performance Rating}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTalentColumns",
						"selectTalentColumns, selectTalentDBRecs union(byName: true)~> union1",
						"DatabaseTalentRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          Event,",
						"          EventYear,",
						"          PerfRating),",
						"     TotalRecCount = count(WorkerId)) ~> selectWokerDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientPerfRating} = {Unique ClientPerfRating},",
						"          {Count Unique ElloreePerfRating} = {Unique ElloreePerfRating},",
						"          {Count Unique ElloreePerfRatingSortId} = {Unique ElloreePerfRatingSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientPerfRating} == {Count Unique ClientPerfRating}",
						"     && {Unique ElloreePerfRating} == {Count Unique ElloreePerfRating}",
						"     && {Unique ElloreePerfRatingSortId} == {Count Unique ElloreePerfRatingSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientPerfRating} = {Unique ClientPerfRating}),",
						"     {Agg Unique ElloreePerfRating} = first({Unique ElloreePerfRating}),",
						"          {Agg Unique ElloreePerfRatingSortId} = first({Unique ElloreePerfRatingSortId})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientPerfRating} == {Agg Unique ClientPerfRating}",
						"     && {Unique ElloreePerfRating} == {Agg Unique ElloreePerfRating}",
						"     && {Unique ElloreePerfRatingSortId} == {Agg Unique ElloreePerfRatingSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"PerfromanceRatingMapTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"PerfromanceRatingMapTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientPerfRating} = ClientPerfRating,",
						"          {Unique ElloreePerfRating} = ElloreePerfRating,",
						"          {Unique ElloreePerfRatingSortId} = ElloreePerfRatingSortId),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id},",
						"          {Performance Rating}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['perf_rating_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingPerformanceMapping",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_perf_rating_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepPerformanceMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "AllReqData"
						},
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqStatusMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingReqStatusMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotReqStatusAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnReqStatus"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "select5"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "exists1"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllReqData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqStatusMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Suggested Elloree Requisition Status},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Requisition ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotReqStatusAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotReqStatusAndEventTime sort(asc({Client Requisition Status}, true)) ~> SortOnReqStatus",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Requisition Status} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientReqStatus} = ClientReqStatus,",
						"          {Unique ElloreeReqStatus} = ElloreeReqStatus),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Requisition Status} == {Unique ClientReqStatus},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Requisition Status} = {Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Requisition Status} = {Unique ElloreeReqStatus},",
						"          {Requisition ID} = {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, select1 join({Client ID} != {Unique ClientId}",
						"     && {Client Requisition Status} == {Unique ClientReqStatus},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Requisition Status} = iif(isNull({Suggested Source}),{Unique ClientReqStatus},{Suggested Elloree Requisition Status})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Requisition Status},",
						"          {Requisition ID},",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Requisition Status} = ReqStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"AllReqData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Requisition ID},",
						"          {Requisition Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, selectReqDBRecs union(byName: true)~> union1",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          ReqStatus),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientReqStatus} = {Unique ClientReqStatus},",
						"          {Count Unique ElloreeReqStatus} = {Unique ElloreeReqStatus}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientReqStatus} == {Count Unique ClientReqStatus}",
						"     && {Unique ElloreeReqStatus} == {Count Unique ElloreeReqStatus},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientReqStatus} = {Unique ClientReqStatus}),",
						"     {Agg Unique ElloreeReqStatus} = first({Unique ElloreeReqStatus})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientReqStatus} == {Agg Unique ClientReqStatus}",
						"     && {Unique ElloreeReqStatus} == {Agg Unique ElloreeReqStatus},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ReqStatusMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ReqStatusMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientReqStatus} = ClientReqStatus,",
						"          {Unique ElloreeReqStatus} = ElloreeReqStatus),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> exists1",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"exists1 select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id},",
						"          {Requisition Status}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnReqStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['reqstatus_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingReqStatusMapping",
						"SortOnReqStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_reqstatus_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepReqStatusMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "AllReqData"
						},
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqTypeMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingReqTypeMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepReqTypeMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotReqTypeAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnReqType"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectExistingReqTypeMapping"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "select4"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllReqData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqTypeMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Suggested Elloree Requisition Type},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Requisition ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotReqTypeAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotReqTypeAndEventTime sort(asc({Client Requisition Type}, true)) ~> SortOnReqType",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Requisition Type} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientReqType} = ClientReqType,",
						"          {Unique ElloreeReqType} = ElloreeReqType),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingReqTypeMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Requisition Type} == {Unique ClientReqType},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Requisition Type} = {Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Requisition Type} = {Unique ElloreeReqType},",
						"          {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectExistingReqTypeMapping join({Client ID} != {Unique ClientId}",
						"     && {Client Requisition Type} == {Unique ClientReqType},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Requisition Type} = iif(isNull({Suggested Source}),{Unique ClientReqType},{Suggested Elloree Requisition Type})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Requisition Type},",
						"          {Requisition ID},",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Requisition ID} = ReqId,",
						"          {Requisition Type} = ReqType",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"AllReqData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, selectReqDBRecs union(byName: true)~> union1",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          ReqType),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientReqType} = {Unique ClientReqType},",
						"          {Count Unique ElloreeReqType} = {Unique ElloreeReqType}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientReqType} == {Count Unique ClientReqType}",
						"     && {Unique ElloreeReqType} == {Count Unique ElloreeReqType},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientReqType} = {Unique ClientReqType}),",
						"     {Agg Unique ElloreeReqType} = first({Unique ElloreeReqType})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientReqType} == {Agg Unique ClientReqType}",
						"     && {Unique ElloreeReqType} == {Agg Unique ElloreeReqType},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientReqType},",
						"          {Unique ElloreeReqType}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ReqTypeMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ReqTypeMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientReqType} = ClientReqType,",
						"          {Unique ElloreeReqType} = ElloreeReqType),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnReqType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['reqtype_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingReqTypeMapping",
						"SortOnReqType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_reqtype_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepReqTypeMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of veteran values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "VeteranMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingVeteranMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepVeteranMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotVeteranAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnVeteran"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> VeteranMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Veteran},",
						"          {Elloree Veteran},",
						"          {Suggested Elloree Veteran},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotVeteranAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotVeteranAndEventTime sort(asc({Client Veteran}, true)) ~> SortOnVeteran",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Veteran} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientVeteran} = ClientVeteran,",
						"          {Unique ElloreeVeteran} = ElloreeVeteran),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Veteran Ind} == {Unique ClientVeteran},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Veteran} = {Veteran Ind},",
						"          {Elloree Veteran},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Veteran} = {Unique ElloreeVeteran},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Veteran} == {Unique ClientVeteran},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Veteran} = iif(isNull({Suggested Source}),{Unique ClientVeteran},{Suggested Elloree Veteran})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Veteran},",
						"          {Elloree Veteran},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Veteran},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Veteran Ind} = Veteran",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Veteran Ind} = Veteran),",
						"     TotRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          Veteran),",
						"     TotWorkers = count(WorkerId)) ~> aggregate2",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Veteran Ind}),",
						"     TotAplicants = count({Applicant ID})) ~> aggregate3",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientVeteran} = {Unique ClientVeteran},",
						"          {Count Unique ElloreeVeteran} = {Unique ElloreeVeteran}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientVeteran} == {Count Unique ClientVeteran}",
						"     && {Unique ElloreeVeteran} == {Count Unique ElloreeVeteran},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientVeteran} = {Unique ClientVeteran}),",
						"     {Agg Unique ElloreeVeteran} = first({Unique ElloreeVeteran})) ~> aggregate5",
						"SelectMappingWithMostClients, aggregate5 join({Unique ElloreeVeteran} == {Agg Unique ElloreeVeteran}",
						"     && {Unique ClientVeteran} == {Agg Unique ClientVeteran},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"VeteranMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"VeteranMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientVeteran} = ClientVeteran,",
						"          {Unique ElloreeVeteran} = ElloreeVeteran),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnVeteran sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['veteran_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingVeteranMapping",
						"SortOnVeteran sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_veteran_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepVeteranMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_ApplicantID')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "ApplicantTemplate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputAudit"
						}
					],
					"transformations": [
						{
							"name": "GroupUniqueCandidateIDandWorkerIDs"
						},
						{
							"name": "CountCandidateIds"
						},
						{
							"name": "FilterForMultipleCandidateIDs"
						},
						{
							"name": "JoinForWorkerId"
						},
						{
							"name": "SelectFinalOutput"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantTemplate",
						"ApplicantTemplate aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RecordCount = countDistinct(concat({Applicant ID},{Internal Worker ID}))) ~> GroupUniqueCandidateIDandWorkerIDs",
						"GroupUniqueCandidateIDandWorkerIDs aggregate(groupBy({Applicant ID}),",
						"     InternalWorkerIDCount = sum(RecordCount)) ~> CountCandidateIds",
						"CountCandidateIds filter(InternalWorkerIDCount>1) ~> FilterForMultipleCandidateIDs",
						"FilterForMultipleCandidateIDs, GroupUniqueCandidateIDandWorkerIDs join(CountCandidateIds@{Applicant ID} == GroupUniqueCandidateIDandWorkerIDs@{Applicant ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinForWorkerId",
						"JoinForWorkerId select(mapColumn(",
						"          {Applicant ID} = CountCandidateIds@{Applicant ID},",
						"          {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"SelectFinalOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Applicant Id with Multiple Worker Ids.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputAudit"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "BusinessMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "BSOutputAllHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "BSOutputLOBlvl1Hierarchy"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "pivot2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort3"
						},
						{
							"name": "sort4"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort5"
						},
						{
							"name": "sort6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BusinessMapping",
						"sort4 pivot(groupBy({Business Group Level 1},",
						"          {Elloree Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Elloree Business Group Level 2}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"sort3 pivot(groupBy({Business Group Level 1},",
						"          {Elloree Business Group Level 1}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot2",
						"select1 derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year}))),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(asc({Event Quarter and Year}, true),",
						"     partitionBy('hash', 1)) ~> sort3",
						"derivedColumn1 sort(asc({Event Quarter and Year}, true)) ~> sort4",
						"AllCoreData, BusinessMapping join({Business Group Level 1} == {Client Business Group Level 1}",
						"     && {Business Group Level 2} == {Client Business Group Level 2},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Worker Status},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"pivot1 sort(asc({Elloree Business Group Level 1}, true),",
						"     asc({Elloree Business Group Level 2}, true)) ~> sort5",
						"pivot2 sort(asc({Elloree Business Group Level 1}, true)) ~> sort6",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BSOutputAllHierarchy",
						"sort6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Lvl 1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BSOutputLOBlvl1Hierarchy"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_BusHierarchyCheck')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData1",
							"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData2",
							"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputOrphanHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OuputOrphanAndCurrHrchyCounts"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputWorkerHierarchyDetail"
						}
					],
					"transformations": [
						{
							"name": "MaxEventDt"
						},
						{
							"name": "CurrentHCTEvent",
							"description": "Join on max HCT event date in order to pull only the Current headcount records"
						},
						{
							"name": "UniqueHierarchyRecords",
							"description": "Select unique hierarchy for current headcount records."
						},
						{
							"name": "SelectUniqueHierarchyCurrHCT",
							"description": "Select key and hierarchy fields."
						},
						{
							"name": "UniqueHierarchyAllEvents"
						},
						{
							"name": "SelectUniqueHierarchyFields"
						},
						{
							"name": "SelectCoreWithNoCurrentHierarchy"
						},
						{
							"name": "PullRecordsWithOrphans",
							"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
						},
						{
							"name": "UniqueWorkerWithOrphanHrchy",
							"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
						},
						{
							"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
						},
						{
							"name": "PullCurrentHierarchyIfExists",
							"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
						},
						{
							"name": "SelectWorkerIDandHierarcy",
							"description": "Select worker ID and hierarchy fields"
						},
						{
							"name": "CreateWorkerCountsbyHierarchy",
							"description": "Create counts for unique orphan and current hierarchy records"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HCTFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData1",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData2",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"HCTFilter aggregate(groupBy(EventUnique = Event),",
						"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
						"derivedColumn3, MaxEventDt join({Event Date} == MaxEventDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrentHCTEvent",
						"CurrentHCTEvent aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
						"UniqueHierarchyRecords select(mapColumn(",
						"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
						"          {Business Group Level 1 HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
						"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
						"UniqueHierarchyAllEvents select(mapColumn(",
						"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
						"          {Business Group Level 1 ALL} = {Business Group Level 1},",
						"          {Business Group Level 2 ALL} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
						"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
						"     negate:true,",
						"     broadcast: 'auto')~> SelectCoreWithNoCurrentHierarchy",
						"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullRecordsWithOrphans",
						"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
						"          {Business Group Level 1 Unique} = {Business Group Level 1},",
						"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
						"UniqueWorkerWithOrphanHrchy select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Unique}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
						"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
						"PullCurrentHierarchyIfExists select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
						"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
						"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
						"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
						"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
						"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
						"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
						"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
						"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1}, {Business Group Level 2})) ~> derivedColumn2",
						"HCTFilter derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
						"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
						"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
						"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
						"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
					]
				}
			},
			"dependsOn": []
		}
	]
}