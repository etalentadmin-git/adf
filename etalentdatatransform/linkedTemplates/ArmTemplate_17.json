{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_All_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_ApplStatus_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Applicant_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_ApplStatus_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Applicant_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Applicant_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_ClientInfo_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_ApplStatus_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_ClientInfo_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Core_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_ClientInfo_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Core_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_DivSlate_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Core_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_DivSlate_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_OtherCore_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_DivSlate_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_OtherCore_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_PerfRating_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_OtherCore_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_PerfRating_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Req_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_PerfRating_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Req_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_SilverMedalist_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Req_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_SilverMedalist_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Speedbumps_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_SilverMedalist_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Speedbumps_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Talent_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Speedbumps_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Talent_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_YearRef_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Talent_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_YearRef_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_All_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_BusHierarchy_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ApplicantFlow_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_BusHierarchy_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ApplicantFlow_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ApplicantFlow_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_CorpTitle_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_BusHierarchy_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_CorpTitle_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Disability_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_CorpTitle_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Disability_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Ethnicity_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Disability_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Ethnicity_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Event_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Ethnicity_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Event_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Gender_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Event_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Gender_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_LGTBQ_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Gender_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_LGTBQ_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Location_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_LGTBQ_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Location_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_PerformanceRating_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Location_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_PerformanceRating_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ReqStatus_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_PerformanceRating_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ReqStatus_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ReqType_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ReqStatus_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ReqType_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Veteran_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ReqType_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Veteran_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archive_Output_Core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Creating anonymization review file (this one runs)",
				"activities": [
					{
						"name": "RunPython",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "python Summary_Archive_Core.py",
							"resourceLinkedService": {
								"referenceName": "AzureBlob_Etalent1Storage",
								"type": "LinkedServiceReference"
							},
							"folderPath": "processing/Python",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch_etalent1storage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"variables": {
					"ErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Client/Archive"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU02072666"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_All_Rec_FactTbl_Speedbumps",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Applicant",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Speedbumps",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Applicant",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_ApplicantStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Applicant",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_ApplicantStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Client",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_ApplicantStatus",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Client",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Core",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Client",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Core",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_DivSlate",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Core",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_DivSlate",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_OtherCore",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_DivSlate",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_OtherCore",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_PerfRatingHist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_OtherCore",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_PerfRatingHist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Req",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_PerfRatingHist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Req",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_SilverMedalist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Req",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_SilverMedalist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Talent",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_SilverMedalist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Talent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_YearRef",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Talent",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_YearRef",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Veteran",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Veteran",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_ApplFlow",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Veteran",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ApplFlow",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_BusHierarchy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_ApplFlow",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_BusHierarchy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_CorpTitle",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_BusHierarchy",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_CorpTitle",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Disability",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_CorpTitle",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Disability",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Ethnicity",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Disability",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Ethnicity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Event",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Ethnicity",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Event",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Gender",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Event",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Gender",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_LGTBQ",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Gender",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_LGTBQ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Location",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_LGTBQ",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_PerfRating",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Location",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_PerfRating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_ReqStatusMap",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_PerfRating",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ReqStatusMap",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_ReqType",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_ReqStatusMap",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ReqType",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move_Template_Into_AnalysisFldr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Analysis Template to Client Folder",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_Binary_AnalysisTemplate_TemplateAdminFldr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Source_Binary_AnalysisFldr",
								"type": "DatasetReference",
								"parameters": {
									"Source_Client_Fldr": {
										"value": "@pipeline().parameters.P_Client_Id",
										"type": "Expression"
									},
									"Source_Client_Date": {
										"value": "@pipeline().parameters.P_Client_Dt",
										"type": "Expression"
									},
									"Source_Client_Year": {
										"value": "@pipeline().parameters.P_Folder_Year",
										"type": "Expression"
									},
									"Source_Client_Quarter": {
										"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Analysis Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move_Templates_Into_ClientFldr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_Binary_CoreTemplate_ProcessingFldr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Source_Binary_TemplatesFldr",
								"type": "DatasetReference",
								"parameters": {
									"Source_Client_Fldr": {
										"value": "@pipeline().parameters.P_Client_Id",
										"type": "Expression"
									},
									"Source_Client_Date": {
										"value": "@pipeline().parameters.P_Client_Dt",
										"type": "Expression"
									},
									"Source_Client_Year": {
										"value": "@pipeline().parameters.P_Folder_Year",
										"type": "Expression"
									},
									"Source_Client_Quarter": {
										"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_Binary_TalentAcqTemplate_ProcessingFldr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Source_Binary_TemplatesFldr",
								"type": "DatasetReference",
								"parameters": {
									"Source_Client_Fldr": {
										"value": "@pipeline().parameters.P_Client_Id",
										"type": "Expression"
									},
									"Source_Client_Date": {
										"value": "@pipeline().parameters.P_Client_Dt",
										"type": "Expression"
									},
									"Source_Client_Year": {
										"value": "@pipeline().parameters.P_Folder_Year",
										"type": "Expression"
									},
									"Source_Client_Quarter": {
										"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data3",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_Binary_OtherTemplate_ProcessingFldr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Source_Binary_TemplatesFldr",
								"type": "DatasetReference",
								"parameters": {
									"Source_Client_Fldr": {
										"value": "@pipeline().parameters.P_Client_Id",
										"type": "Expression"
									},
									"Source_Client_Date": {
										"value": "@pipeline().parameters.P_Client_Dt",
										"type": "Expression"
									},
									"Source_Client_Year": {
										"value": "@pipeline().parameters.P_Folder_Year",
										"type": "Expression"
									},
									"Source_Client_Quarter": {
										"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Creating anonymization review file (this one runs)",
				"activities": [
					{
						"name": "RunPython",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "python Summary_Archive_Core1.py",
							"resourceLinkedService": {
								"referenceName": "AzureBlob_Etalent1Storage",
								"type": "LinkedServiceReference"
							},
							"folderPath": "processing/Python",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch_etalent1storage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"ErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Org')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Creating anonymization review file (this one runs)",
				"activities": [
					{
						"name": "RunPython",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "python BusinessMappingTest.py",
							"resourceLinkedService": {
								"referenceName": "AzureBlob_Etalent1Storage",
								"type": "LinkedServiceReference"
							},
							"folderPath": "processing/Python",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch_etalent1storage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"ErrorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_etalent1storageTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Custom1",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "python testHelloWorld_blob1.py",
							"resourceLinkedService": {
								"referenceName": "AzureBlob_Etalent1Storage",
								"type": "LinkedServiceReference"
							},
							"folderPath": "processing/Python",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch_etalent1storage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_etalent2storageTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Custom1",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "python testHelloWorld_blob2.py",
							"resourceLinkedService": {
								"referenceName": "AzureBlob_Etalent2Storage",
								"type": "LinkedServiceReference"
							},
							"folderPath": "processing/Python",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch_etalent2storage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_hierarchymap')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Custom1",
						"type": "Custom",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"command": "python HierarchyMapping_v1.py",
							"resourceLinkedService": {
								"referenceName": "AzureBlob_Etalent1Storage",
								"type": "LinkedServiceReference"
							},
							"folderPath": "processing/Python",
							"referenceObjects": {
								"linkedServices": [],
								"datasets": []
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureBatch_etalent1storage",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_ApplStatus_File",
								"type": "DatasetReference"
							},
							"name": "ApplStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendApplStatusFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Applicant ID} as string,",
						"          {Requisition ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Applicant Type} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Elloree Gender} as string,",
						"          Applicant as integer,",
						"          {White Appl} as integer,",
						"          {Black Appl} as integer,",
						"          {Latinx Appl} as integer,",
						"          {Asian Appl} as integer,",
						"          {Two or More Appl} as integer,",
						"          {Other Appl} as integer,",
						"          {DNSID Appl} as integer,",
						"          {Female Appl} as integer,",
						"          {PoC Appl} as integer,",
						"          {Male Appl} as integer,",
						"          {Other Gender Appl} as integer,",
						"          {DNSID Gender Appl} as integer,",
						"          {Diverse Applicant} as integer,",
						"          {Applicant Rejected by HR} as integer,",
						"          {Applicant Withdrew} as integer,",
						"          Candidate as integer,",
						"          {Candidate Rejected by HR} as integer,",
						"          {Candidate StM} as integer,",
						"          {Candidate Rejected by HM} as integer,",
						"          {Candidate Interviewed} as integer,",
						"          {Candidate Hired} as integer,",
						"          {Candidate Withdrew} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplStatus",
						"ApplStatus alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Date})),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Applicant ID}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          EventDt = {Event Date},",
						"          ReqId = {Requisition ID},",
						"          ApplId = {Applicant ID},",
						"          {Applicant Type},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Elloree Gender},",
						"          Applicants = Applicant,",
						"          WhiteAppl = {White Appl},",
						"          BlackAppl = {Black Appl},",
						"          LatinxAppl = {Latinx Appl},",
						"          AsianAppl = {Asian Appl},",
						"          TwoorMoreAppl = {Two or More Appl},",
						"          OtherAppl = {Other Appl},",
						"          PoCAppl = {PoC Appl},",
						"          DNSIDAppl = {DNSID Appl},",
						"          FemaleAppl = {Female Appl},",
						"          MaleAppl = {Male Appl},",
						"          OtherGenderAppl = {Other Gender Appl},",
						"          DNSIDGenderAppl = {DNSID Gender Appl},",
						"          DiverseAppl = {Diverse Applicant},",
						"          ApplRejected = {Applicant Rejected by HR},",
						"          ApplWithdrew = {Applicant Withdrew},",
						"          Candidates = Candidate,",
						"          CandRejectedHR = {Candidate Rejected by HR},",
						"          CandStM = {Candidate StM},",
						"          CandRejectedHM = {Candidate Rejected by HM},",
						"          CandInterviewed = {Candidate Interviewed},",
						"          CandHired = {Candidate Hired},",
						"          CandWithdrew = {Candidate Withdrew}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','ReqId','ApplId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ApplId,",
						"          ReqId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Applicants,",
						"          WhiteAppl,",
						"          BlackAppl,",
						"          LatinxAppl,",
						"          AsianAppl,",
						"          TwoorMoreAppl,",
						"          OtherAppl,",
						"          DNSIDAppl,",
						"          PoCAppl,",
						"          FemaleAppl,",
						"          MaleAppl,",
						"          OtherGenderAppl,",
						"          DNSIDGenderAppl,",
						"          DiverseAppl,",
						"          ApplRejected,",
						"          ApplWithdrew,",
						"          Candidates,",
						"          CandRejectedHR,",
						"          CandStM,",
						"          CandRejectedHM,",
						"          CandInterviewed,",
						"          CandHired,",
						"          CandWithdrew,",
						"          LoadDt",
						"     )) ~> AppendApplStatusFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "RemoveNullRows"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as date,",
						"          {Applicant ID} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State} as string,",
						"          {Applicant Country} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as date 'MM/dd/yyyy',",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant2",
						"RemoveNullRows alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Date})),",
						"     deleteIf(isNull(Event)),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Applicant ID}))) ~> alterRow1",
						"derivedColumn2 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventDt = {Event Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          Event,",
						"          ReqId = {Requisition ID},",
						"          ApplDt = {Application Date},",
						"          ApplicantId = {Applicant ID},",
						"          ApplicantCity = {Applicant City},",
						"          ApplicantState = {Applicant State},",
						"          ApplicantCountry = {Applicant Country},",
						"          Source,",
						"          ApplType = {Applicant Type},",
						"          InternalWorkerId = {Internal Worker ID},",
						"          Race,",
						"          HispanicLatinoOrigin = {Hispanic or Latino Origin},",
						"          Gender,",
						"          Veteran = {Veteran Ind},",
						"          LGBTQ,",
						"          DisabilityInd = {Disability Ind},",
						"          ApplFinalDispDt = {Applicant Final Disposition Date},",
						"          ApplFinalDisp = {Applicant Final Disposition},",
						"          ApplStepBeforeFinalDisp = {Applicant Step Before Final Disposition},",
						"          ApplRejectedReason = {Applicant Rejected Reason},",
						"          ApplOther1 = {Applicant Other (1)},",
						"          ApplOther2 = {Applicant Other (2)},",
						"          ApplOther3 = {Applicant Other (3)},",
						"          ApplOther4 = {Applicant Other (4)},",
						"          ApplOther5 = {Applicant Other (5)},",
						"          EventId,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"Applicant2 filter(!(isNull({Event Date}))||!(isNull({Applicant ID}))) ~> RemoveNullRows",
						"alterRow1 derive(EventId = 'APP',",
						"          LoadDt = currentDate()) ~> derivedColumn2",
						"AlterColumnNamesforMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date,",
						"          ApplicantCity as string,",
						"          ApplicantState as string,",
						"          ApplicantCountry as string,",
						"          ApplDt as date,",
						"          ApplFinalDispDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','ReqId','ApplicantId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          ReqId,",
						"          ApplicantId,",
						"          Source,",
						"          ApplType,",
						"          InternalWorkerId,",
						"          Race,",
						"          HispanicLatinoOrigin,",
						"          Gender,",
						"          Veteran,",
						"          LGBTQ,",
						"          DisabilityInd,",
						"          ApplFinalDisp,",
						"          ApplStepBeforeFinalDisp,",
						"          ApplRejectedReason,",
						"          ApplOther1,",
						"          ApplOther2,",
						"          ApplOther3,",
						"          ApplOther4,",
						"          ApplOther5,",
						"          LoadDt,",
						"          ApplicantCity,",
						"          ApplicantState,",
						"          ApplicantCountry,",
						"          ApplDt,",
						"          ApplFinalDispDt",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendCoreFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "RemoveNullRows"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"RemoveNullRows alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Worker ID})),",
						"     deleteIf(isNull({Event Date})),",
						"     deleteIf(isNull({Event Year})),",
						"     deleteIf(isNull({Event Code})),",
						"     deleteIf(isNull({Event Type})),",
						"     deleteIf(isNull(Event)),",
						"     deleteIf(isNull({Event Reason})),",
						"     deleteIf(isNull({Worker Type})),",
						"     deleteIf(isNull({Job Title})),",
						"     deleteIf(isNull({Job Function})),",
						"     deleteIf(isNull({Years in Job})),",
						"     deleteIf(isNull({Previous Job Title})),",
						"     deleteIf(isNull({Previous Job Function})),",
						"     deleteIf(isNull({Original Hire Date})),",
						"     deleteIf(isNull({Current Hire Date})),",
						"     deleteIf(isNull({Years of Service})),",
						"     deleteIf(isNull({Years of Service Band})),",
						"     deleteIf(isNull({Years of Service Sort ID})),",
						"     deleteIf(isNull({Corporate Title})),",
						"     deleteIf(isNull({Previous Corporate Title})),",
						"     deleteIf(isNull({Manager Indicator})),",
						"     deleteIf(isNull({Direct Manager Worker ID})),",
						"     deleteIf(isNull({Work Office Location})),",
						"     deleteIf(isNull({Work City})),",
						"     deleteIf(isNull({Work State})),",
						"     deleteIf(isNull({Work Country})),",
						"     deleteIf(isNull({Strategic Work Location Ind})),",
						"     deleteIf(isNull({Legacy Organization})),",
						"     deleteIf(isNull({Business Group Level 1})),",
						"     deleteIf(isNull({Business Group Level 2})),",
						"     deleteIf(isNull({Business Group Level 3})),",
						"     deleteIf(isNull({Business Group Level 4})),",
						"     deleteIf(isNull(Race)),",
						"     deleteIf(isNull({Hispanic or Latino Origin})),",
						"     deleteIf(isNull(Gender)),",
						"     deleteIf(isNull({Veteran Ind})),",
						"     deleteIf(isNull(LGBTQ)),",
						"     deleteIf(isNull({Disability Ind})),",
						"     deleteIf(isNull({Generation Desc})),",
						"     deleteIf(isNull({Generation Sort ID})),",
						"     deleteIf(isNull(EmpCount))) ~> alterRow1",
						"Core filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          WorkerId = {Worker ID},",
						"          EventDt = {Event Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId = {Event Code},",
						"          EventType = {Event Type},",
						"          EventReason = {Event Reason},",
						"          WorkerType = {Worker Type},",
						"          JobTitle = {Job Title},",
						"          JobFunction = {Job Function},",
						"          YearsinJob = {Years in Job},",
						"          PrevJobTitle = {Previous Job Title},",
						"          PrevJobFunction = {Previous Job Function},",
						"          LastPromoDt = {Last Promo Date},",
						"          OrigHireDt = {Original Hire Date},",
						"          CurrHireDt = {Current Hire Date},",
						"          YearsofSrvc = {Years of Service},",
						"          YearsofSrvcBand = {Years of Service Band},",
						"          YearsofSrvcBandSortId = {Years of Service Sort ID},",
						"          CorpTitle = {Corporate Title},",
						"          PrevCorpTitle = {Previous Corporate Title},",
						"          ManagerInd = {Manager Indicator},",
						"          DirectMgrWorkerId = {Direct Manager Worker ID},",
						"          WorkOfficeLoc = {Work Office Location},",
						"          WorkOfficeCity = {Work City},",
						"          WorkOfficeState = {Work State},",
						"          WorkOfficeCountry = {Work Country},",
						"          WorkStrategicLocInd = {Strategic Work Location Ind},",
						"          LegacyOrg = {Legacy Organization},",
						"          BusinessGrpLvl1 = {Business Group Level 1},",
						"          BusinessGrpLvl2 = {Business Group Level 2},",
						"          BusinessGrpLvl3 = {Business Group Level 3},",
						"          BusinessGrpLvl4 = {Business Group Level 4},",
						"          Race,",
						"          HispanicLatinoOrigin = {Hispanic or Latino Origin},",
						"          Gender,",
						"          Veteran = {Veteran Ind},",
						"          LGBTQ,",
						"          DisabilityInd = {Disability Ind},",
						"          BirthYear = {Birth Year},",
						"          Generation = {Generation Desc},",
						"          GenerationSortId = {Generation Sort ID},",
						"          EmpCount,",
						"          LoadDt",
						"     )) ~> AppendCoreFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_DivSlate_File",
								"type": "DatasetReference"
							},
							"name": "DivSlate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendDivSlateFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveNullRows"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Requisition ID} as string,",
						"          {Event Year} as short,",
						"          {Candidates StM} as integer,",
						"          {Internal Candidates StM} as integer,",
						"          {External Candidates StM} as integer,",
						"          {Candidates Hired} as integer,",
						"          {Internal Candidates Hired} as integer,",
						"          {External Candidates Hired} as integer,",
						"          {White Candidates StM} as integer,",
						"          {Internal White Candidates StM} as integer,",
						"          {External White Candidates StM} as integer,",
						"          {White Candidates Hired} as integer,",
						"          {Internal White Candidates Hired} as integer,",
						"          {External White Candidates Hired} as integer,",
						"          {Black Candidates StM} as integer,",
						"          {Internal Black Candidates StM} as integer,",
						"          {External Black Candidates StM} as integer,",
						"          {Black Candidates Hired} as integer,",
						"          {Internal Black Candidates Hired} as integer,",
						"          {External Black Candidates Hired} as integer,",
						"          {Latinx Candidates StM} as integer,",
						"          {Internal Latinx Candidates StM} as integer,",
						"          {External Latinx Candidates StM} as integer,",
						"          {Latinx Candidates Hired} as integer,",
						"          {Internal Latinx Candidates Hired} as integer,",
						"          {External Latinx Candidates Hired} as integer,",
						"          {Asian Candidates StM} as integer,",
						"          {Internal Asian Candidates StM} as integer,",
						"          {External Asian Candidates StM} as integer,",
						"          {Asian Candidates Hired} as integer,",
						"          {Internal Asian Candidates Hired} as integer,",
						"          {External Asian Candidates Hired} as integer,",
						"          {2+ Races Candidates StM} as integer,",
						"          {Internal 2+ Races Candidates StM} as integer,",
						"          {External 2+ Races Candidates StM} as integer,",
						"          {2+ Races Candidates Hired} as integer,",
						"          {Internal 2+ Races Candidates Hired} as integer,",
						"          {External 2+ Races Candidates Hired} as integer,",
						"          {Other Candidates StM} as integer,",
						"          {Internal Other Candidates StM} as integer,",
						"          {External Other Candidates StM} as integer,",
						"          {Other Candidates Hired} as integer,",
						"          {Internal Other Candidates Hired} as integer,",
						"          {External Other Candidates Hired} as integer,",
						"          {Male Candidates StM} as integer,",
						"          {Internal Male Candidates StM} as integer,",
						"          {External Male Candidates StM} as integer,",
						"          {Male Candidates Hired} as integer,",
						"          {Internal Male Candidates Hired} as integer,",
						"          {External Male Candidates Hired} as integer,",
						"          {Female Candidates StM} as integer,",
						"          {Internal Female Candidates StM} as integer,",
						"          {External Female Candidates StM} as integer,",
						"          {Female Candidates Hired} as integer,",
						"          {Internal Female Candidates Hired} as integer,",
						"          {External Female Candidates Hired} as integer,",
						"          {Other Gender Candidates StM} as integer,",
						"          {Internal Other Gender Candidates StM} as integer,",
						"          {External Other Gender Candidates StM} as integer,",
						"          {Other Gender Candidates Hired} as integer,",
						"          {Internal Other Gender Candidates Hired} as integer,",
						"          {External Other Gender Candidates Hired} as integer,",
						"          {PoC Candidates StM} as integer,",
						"          {Internal PoC Candidates StM} as integer,",
						"          {External PoC Candidates StM} as integer,",
						"          {PoC  Candidates Hired} as integer,",
						"          {Internal PoC  Candidates Hired} as integer,",
						"          {External PoC  Candidates Hired} as integer,",
						"          {Diverse Candidates StM} as integer,",
						"          {Internal Diverse Candidates StM} as integer,",
						"          {External Diverse Candidates StM} as integer,",
						"          {Diverse Candidates Hired} as integer,",
						"          {Internal Diverse Candidates Hired} as integer,",
						"          {External Diverse Candidates Hired} as integer,",
						"          {Female Not PoC Candidates StM} as integer,",
						"          {Internal Female Not PoC Candidates StM} as integer,",
						"          {External Female Not PoC Candidates StM} as integer,",
						"          {Female Not PoC Candidates Hired} as integer,",
						"          {Internal Female Not PoC Candidates Hired} as integer,",
						"          {External Female Not PoC Candidates Hired} as integer,",
						"          {Female PoC Candidates StM} as integer,",
						"          {Internal Female PoC Candidates StM} as integer,",
						"          {External Female PoC Candidates StM} as integer,",
						"          {Female PoC Candidates Hired} as integer,",
						"          {Internal Female PoC Candidates Hired} as integer,",
						"          {External Female PoC Candidates Hired} as integer,",
						"          {Not Female PoC Candidates StM} as integer,",
						"          {Internal Not Female PoC Candidates StM} as integer,",
						"          {External Not Female PoC Candidates StM} as integer,",
						"          {Not Female PoC Candidates Hired} as integer,",
						"          {Internal Not Female PoC Candidates Hired} as integer,",
						"          {External Not Female PoC Candidates Hired} as integer,",
						"          {Not Female Not PoC Candidates StM} as integer,",
						"          {Internal Not Female Not PoC Candidates StM} as integer,",
						"          {External Not Female Not PoC Candidates StM} as integer,",
						"          {Not Female Not PoC Candidates Hired} as integer,",
						"          {Internal Not Female Not PoC Candidates Hired} as integer,",
						"          {External Not Female Not PoC Candidates Hired} as integer,",
						"          {Diverse Slate} as string,",
						"          {Internal Diverse Slate} as string,",
						"          {External Diverse Slate} as string,",
						"          {No Diverse Slate} as string,",
						"          {Internal No Diverse Slate} as string,",
						"          {External No Diverse Slate} as string,",
						"          {Diverse Hired Slate} as string,",
						"          {Internal Diverse Hired Slate} as string,",
						"          {External Diverse Hired Slate} as string,",
						"          {PoC Slate} as string,",
						"          {Internal PoC Slate} as string,",
						"          {External PoC Slate} as string,",
						"          {No PoC Slate} as string,",
						"          {Internal No PoC Slate} as string,",
						"          {External No PoC Slate} as string,",
						"          {PoC Hired Slate} as string,",
						"          {Internal PoC Hired Slate} as string,",
						"          {External PoC Hired Slate} as string,",
						"          {White Slate} as string,",
						"          {Internal White Slate} as string,",
						"          {External White Slate} as string,",
						"          {No White Slate} as string,",
						"          {Internal No White Slate} as string,",
						"          {External No White Slate} as string,",
						"          {White Hired Slate} as string,",
						"          {Internal White Hired Slate} as string,",
						"          {External White Hired Slate} as string,",
						"          {Black Slate} as string,",
						"          {Internal Black Slate} as string,",
						"          {External Black Slate} as string,",
						"          {No Black Slate} as string,",
						"          {Internal No Black Slate} as string,",
						"          {External No Black Slate} as string,",
						"          {Black Hired Slate} as string,",
						"          {Internal Black Hired Slate} as string,",
						"          {External Black Hired Slate} as string,",
						"          {Latinx Slate} as string,",
						"          {Internal Latinx Slate} as string,",
						"          {External Latinx Slate} as string,",
						"          {No Latinx Slate} as string,",
						"          {Internal No Latinx Slate} as string,",
						"          {External No Latinx Slate} as string,",
						"          {Latinx Hired Slate} as string,",
						"          {Internal Latinx Hired Slate} as string,",
						"          {External Latinx Hired Slate} as string,",
						"          {Asian Slate} as string,",
						"          {Internal Asian Slate} as string,",
						"          {External Asian Slate} as string,",
						"          {No Asian Slate} as string,",
						"          {Internal No Asian Slate} as string,",
						"          {External No Asian Slate} as string,",
						"          {Asian Hired Slate} as string,",
						"          {Internal Asian Hired Slate} as string,",
						"          {External Asian Hired Slate} as string,",
						"          {2+ Races Slate} as string,",
						"          {Internal 2+ Races Slate} as string,",
						"          {External 2+ Races Slate} as string,",
						"          {No 2+ Races Slate} as string,",
						"          {Internal No 2+ Races Slate} as string,",
						"          {External No 2+ Races Slate} as string,",
						"          {2+ Races Hired Slate} as string,",
						"          {Internal 2+ Races Hired Slate} as string,",
						"          {External 2+ Races Hired Slate} as string,",
						"          {Other Race Slate} as string,",
						"          {Internal Other Race Slate} as string,",
						"          {External Other Race Slate} as string,",
						"          {No Other Race Slate} as string,",
						"          {Internal No Other Race Slate} as string,",
						"          {External No Other Race Slate} as string,",
						"          {Other Race Hired Slate} as string,",
						"          {Internal Other Race Hired Slate} as string,",
						"          {External Other Race Hired Slate} as string,",
						"          {Female Slate} as string,",
						"          {Internal Female Slate} as string,",
						"          {External Female Slate} as string,",
						"          {No Female Slate} as string,",
						"          {Internal No Female Slate} as string,",
						"          {External No Female Slate} as string,",
						"          {Female Hired Slate} as string,",
						"          {Internal Female Hired Slate} as string,",
						"          {External Female Hired Slate} as string,",
						"          {Male Slate} as string,",
						"          {Internal Male Slate} as string,",
						"          {External Male Slate} as string,",
						"          {No Male Slate} as string,",
						"          {Internal No Male Slate} as string,",
						"          {External No Male Slate} as string,",
						"          {Male Hired Slate} as string,",
						"          {Internal Male Hired Slate} as string,",
						"          {External Male Hired Slate} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DivSlate",
						"RemoveNullRows alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Candidates StM},",
						"          {Internal Candidates StM},",
						"          {External Candidates StM},",
						"          {Candidates Hired},",
						"          {Internal Candidates Hired},",
						"          {External Candidates Hired},",
						"          {White Candidates StM},",
						"          {Internal White Candidates StM},",
						"          {External White Candidates StM},",
						"          {White Candidates Hired},",
						"          {Internal White Candidates Hired},",
						"          {External White Candidates Hired},",
						"          {Black Candidates StM},",
						"          {Internal Black Candidates StM},",
						"          {External Black Candidates StM},",
						"          {Black Candidates Hired},",
						"          {Internal Black Candidates Hired},",
						"          {External Black Candidates Hired},",
						"          {Latinx Candidates StM},",
						"          {Internal Latinx Candidates StM},",
						"          {External Latinx Candidates StM},",
						"          {Latinx Candidates Hired},",
						"          {Internal Latinx Candidates Hired},",
						"          {External Latinx Candidates Hired},",
						"          {Asian Candidates StM},",
						"          {Internal Asian Candidates StM},",
						"          {External Asian Candidates StM},",
						"          {Asian Candidates Hired},",
						"          {Internal Asian Candidates Hired},",
						"          {External Asian Candidates Hired},",
						"          {2+ Races Candidates StM},",
						"          {Internal 2+ Races Candidates StM},",
						"          {External 2+ Races Candidates StM},",
						"          {2+ Races Candidates Hired},",
						"          {Internal 2+ Races Candidates Hired},",
						"          {External 2+ Races Candidates Hired},",
						"          {Other Candidates StM},",
						"          {Internal Other Candidates StM},",
						"          {External Other Candidates StM},",
						"          {Other Candidates Hired},",
						"          {Internal Other Candidates Hired},",
						"          {External Other Candidates Hired},",
						"          {Male Candidates StM},",
						"          {Internal Male Candidates StM},",
						"          {External Male Candidates StM},",
						"          {Male Candidates Hired},",
						"          {Internal Male Candidates Hired},",
						"          {External Male Candidates Hired},",
						"          {Female Candidates StM},",
						"          {Internal Female Candidates StM},",
						"          {External Female Candidates StM},",
						"          {Female Candidates Hired},",
						"          {Internal Female Candidates Hired},",
						"          {External Female Candidates Hired},",
						"          {Other Gender Candidates StM},",
						"          {Internal Other Gender Candidates StM},",
						"          {External Other Gender Candidates StM},",
						"          {Other Gender Candidates Hired},",
						"          {Internal Other Gender Candidates Hired},",
						"          {External Other Gender Candidates Hired},",
						"          {PoC Candidates StM},",
						"          {Internal PoC Candidates StM},",
						"          {External PoC Candidates StM},",
						"          {PoC  Candidates Hired},",
						"          {Internal PoC  Candidates Hired},",
						"          {External PoC  Candidates Hired},",
						"          {Diverse Candidates StM},",
						"          {Internal Diverse Candidates StM},",
						"          {External Diverse Candidates StM},",
						"          {Diverse Candidates Hired},",
						"          {Internal Diverse Candidates Hired},",
						"          {External Diverse Candidates Hired},",
						"          {Female Not PoC Candidates StM},",
						"          {Internal Female Not PoC Candidates StM},",
						"          {External Female Not PoC Candidates StM},",
						"          {Female Not PoC Candidates Hired},",
						"          {Internal Female Not PoC Candidates Hired},",
						"          {External Female Not PoC Candidates Hired},",
						"          {Female PoC Candidates StM},",
						"          {Internal Female PoC Candidates StM},",
						"          {External Female PoC Candidates StM},",
						"          {Female PoC Candidates Hired},",
						"          {Internal Female PoC Candidates Hired},",
						"          {External Female PoC Candidates Hired},",
						"          {Not Female PoC Candidates StM},",
						"          {Internal Not Female PoC Candidates StM},",
						"          {External Not Female PoC Candidates StM},",
						"          {Not Female PoC Candidates Hired},",
						"          {Internal Not Female PoC Candidates Hired},",
						"          {External Not Female PoC Candidates Hired},",
						"          {Not Female Not PoC Candidates StM},",
						"          {Internal Not Female Not PoC Candidates StM},",
						"          {External Not Female Not PoC Candidates StM},",
						"          {Not Female Not PoC Candidates Hired},",
						"          {Internal Not Female Not PoC Candidates Hired},",
						"          {External Not Female Not PoC Candidates Hired},",
						"          {Diverse Slate},",
						"          {Internal Diverse Slate},",
						"          {External Diverse Slate},",
						"          {No Diverse Slate},",
						"          {Internal No Diverse Slate},",
						"          {External No Diverse Slate},",
						"          {Diverse Hired Slate},",
						"          {Internal Diverse Hired Slate},",
						"          {External Diverse Hired Slate},",
						"          {PoC Slate},",
						"          {Internal PoC Slate},",
						"          {External PoC Slate},",
						"          {No PoC Slate},",
						"          {Internal No PoC Slate},",
						"          {External No PoC Slate},",
						"          {PoC Hired Slate},",
						"          {Internal PoC Hired Slate},",
						"          {External PoC Hired Slate},",
						"          {White Slate},",
						"          {Internal White Slate},",
						"          {External White Slate},",
						"          {No White Slate},",
						"          {Internal No White Slate},",
						"          {External No White Slate},",
						"          {White Hired Slate},",
						"          {Internal White Hired Slate},",
						"          {External White Hired Slate},",
						"          {Black Slate},",
						"          {Internal Black Slate},",
						"          {External Black Slate},",
						"          {No Black Slate},",
						"          {Internal No Black Slate},",
						"          {External No Black Slate},",
						"          {Black Hired Slate},",
						"          {Internal Black Hired Slate},",
						"          {External Black Hired Slate},",
						"          {Latinx Slate},",
						"          {Internal Latinx Slate},",
						"          {External Latinx Slate},",
						"          {No Latinx Slate},",
						"          {Internal No Latinx Slate},",
						"          {External No Latinx Slate},",
						"          {Latinx Hired Slate},",
						"          {Internal Latinx Hired Slate},",
						"          {External Latinx Hired Slate},",
						"          {Asian Slate},",
						"          {Internal Asian Slate},",
						"          {External Asian Slate},",
						"          {No Asian Slate},",
						"          {Internal No Asian Slate},",
						"          {External No Asian Slate},",
						"          {Asian Hired Slate},",
						"          {Internal Asian Hired Slate},",
						"          {External Asian Hired Slate},",
						"          {2+ Races Slate},",
						"          {Internal 2+ Races Slate},",
						"          {External 2+ Races Slate},",
						"          {No 2+ Races Slate},",
						"          {Internal No 2+ Races Slate},",
						"          {External No 2+ Races Slate},",
						"          {2+ Races Hired Slate},",
						"          {Internal 2+ Races Hired Slate},",
						"          {External 2+ Races Hired Slate},",
						"          {Other Race Slate},",
						"          {Internal Other Race Slate},",
						"          {External Other Race Slate},",
						"          {No Other Race Slate},",
						"          {Internal No Other Race Slate},",
						"          {External No Other Race Slate},",
						"          {Other Race Hired Slate},",
						"          {Internal Other Race Hired Slate},",
						"          {External Other Race Hired Slate},",
						"          {Female Slate},",
						"          {Internal Female Slate},",
						"          {External Female Slate},",
						"          {No Female Slate},",
						"          {Internal No Female Slate},",
						"          {External No Female Slate},",
						"          {Female Hired Slate},",
						"          {Internal Female Hired Slate},",
						"          {External Female Hired Slate},",
						"          {Male Slate},",
						"          {Internal Male Slate},",
						"          {External Male Slate},",
						"          {No Male Slate},",
						"          {Internal No Male Slate},",
						"          {External No Male Slate},",
						"          {Male Hired Slate},",
						"          {Internal Male Hired Slate},",
						"          {External Male Hired Slate}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"DivSlate filter(!(isNull({Requisition ID}))) ~> RemoveNullRows",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          ReqId = {Requisition ID},",
						"          CandStM = {Candidates StM},",
						"          IntCandStM = {Internal Candidates StM},",
						"          ExtCandStM = {External Candidates StM},",
						"          CandHired = {Candidates Hired},",
						"          IntCandHired = {Internal Candidates Hired},",
						"          ExtCandHired = {External Candidates Hired},",
						"          WhiteCandStM = {White Candidates StM},",
						"          IntWhiteCandStM = {Internal White Candidates StM},",
						"          ExtWhiteCandStM = {External White Candidates StM},",
						"          WhiteCandHired = {White Candidates Hired},",
						"          IntWhiteCandHired = {Internal White Candidates Hired},",
						"          ExtWhiteCandHired = {External White Candidates Hired},",
						"          BlackCandStM = {Black Candidates StM},",
						"          IntBlackCandStM = {Internal Black Candidates StM},",
						"          ExtBlackCandStM = {External Black Candidates StM},",
						"          BlackCandHired = {Black Candidates Hired},",
						"          IntBlackCandHired = {Internal Black Candidates Hired},",
						"          ExtBlackCandHired = {External Black Candidates Hired},",
						"          LatinxCandStM = {Latinx Candidates StM},",
						"          IntLatinxCandStM = {Internal Latinx Candidates StM},",
						"          ExtLatinxCandStM = {External Latinx Candidates StM},",
						"          LatinxCandHired = {Latinx Candidates Hired},",
						"          IntLatinxCandHired = {Internal Latinx Candidates Hired},",
						"          ExtLatinxCandHired = {External Latinx Candidates Hired},",
						"          AsianCandStM = {Asian Candidates StM},",
						"          IntAsianCandStM = {Internal Asian Candidates StM},",
						"          ExtAsianCandStM = {External Asian Candidates StM},",
						"          AsianCandHired = {Asian Candidates Hired},",
						"          IntAsianCandHired = {Internal Asian Candidates Hired},",
						"          ExtAsianCandHired = {External Asian Candidates Hired},",
						"          TwoPlusRacesCandStM = {2+ Races Candidates StM},",
						"          IntTwoPlusRacesCandStM = {Internal 2+ Races Candidates StM},",
						"          ExtTwoPlusRacesCandStM = {External 2+ Races Candidates StM},",
						"          TwoPlusRacesCandHired = {2+ Races Candidates Hired},",
						"          IntTwoPlusRacesCandHired = {Internal 2+ Races Candidates Hired},",
						"          ExtTwoPlusRacesCandHired = {External 2+ Races Candidates Hired},",
						"          OtherCandStM = {Other Candidates StM},",
						"          IntOtherCandStM = {Internal Other Candidates StM},",
						"          ExtOtherCandStM = {External Other Candidates StM},",
						"          OtherCandHired = {Other Candidates Hired},",
						"          IntOtherCandHired = {Internal Other Candidates Hired},",
						"          ExtOtherCandHired = {External Other Candidates Hired},",
						"          MaleCandStM = {Male Candidates StM},",
						"          IntMaleCandStM = {Internal Male Candidates StM},",
						"          ExtMaleCandStM = {External Male Candidates StM},",
						"          MaleCandHired = {Male Candidates Hired},",
						"          IntMaleCandHired = {Internal Male Candidates Hired},",
						"          ExtMaleCandHired = {External Male Candidates Hired},",
						"          FemaleCandStM = {Female Candidates StM},",
						"          IntFemaleCandStM = {Internal Female Candidates StM},",
						"          ExtFemaleCandStM = {External Female Candidates StM},",
						"          FemaleCandHired = {Female Candidates Hired},",
						"          IntFemaleCandHired = {Internal Female Candidates Hired},",
						"          ExtFemaleCandHired = {External Female Candidates Hired},",
						"          OtherGenderCandStM = {Other Gender Candidates StM},",
						"          IntOtherGenderCandStM = {Internal Other Gender Candidates StM},",
						"          ExtOtherGenderCandStM = {External Other Gender Candidates StM},",
						"          OtherGenderCandHired = {Other Gender Candidates Hired},",
						"          IntOtherGenderCandHired = {Internal Other Gender Candidates Hired},",
						"          ExtOtherGenderCandHired = {External Other Gender Candidates Hired},",
						"          PoCCandStM = {PoC Candidates StM},",
						"          IntPoCCandStM = {Internal PoC Candidates StM},",
						"          ExtPoCCandStM = {External PoC Candidates StM},",
						"          PoCCandHired = {PoC  Candidates Hired},",
						"          IntPoCCandHired = {Internal PoC  Candidates Hired},",
						"          ExtPoCCandHired = {External PoC  Candidates Hired},",
						"          DiverseCandStM = {Diverse Candidates StM},",
						"          IntDiverseCandStM = {Internal Diverse Candidates StM},",
						"          ExtDiverseCandStM = {External Diverse Candidates StM},",
						"          DiverseCandHired = {Diverse Candidates Hired},",
						"          IntDiverseCandHired = {Internal Diverse Candidates Hired},",
						"          ExtDiverseCandHired = {External Diverse Candidates Hired},",
						"          FemaleNotPoCCandStM = {Female Not PoC Candidates StM},",
						"          IntFemaleNotPoCCandStM = {Internal Female Not PoC Candidates StM},",
						"          ExtFemaleNotPoCCandStM = {External Female Not PoC Candidates StM},",
						"          FemaleNotPoCCandHired = {Female Not PoC Candidates Hired},",
						"          IntFemaleNotPoCCandHired = {Internal Female Not PoC Candidates Hired},",
						"          ExtFemaleNotPoCCandHired = {External Female Not PoC Candidates Hired},",
						"          FemalePoCCandStM = {Female PoC Candidates StM},",
						"          IntFemalePoCCandStM = {Internal Female PoC Candidates StM},",
						"          ExtFemalePoCCandStM = {External Female PoC Candidates StM},",
						"          FemalePoCCandHired = {Female PoC Candidates Hired},",
						"          IntFemalePoCCandHired = {Internal Female PoC Candidates Hired},",
						"          ExtFemalePoCCandHired = {External Female PoC Candidates Hired},",
						"          NotFemalePoCCandStM = {Not Female PoC Candidates StM},",
						"          IntNotFemalePoCCandStM = {Internal Not Female PoC Candidates StM},",
						"          ExtNotFemalePoCCandStM = {External Not Female PoC Candidates StM},",
						"          NotFemaleNotPoCCandHired = {Not Female PoC Candidates Hired},",
						"          IntNotFemaleNotPoCCandHired = {Internal Not Female PoC Candidates Hired},",
						"          ExtNotFemaleNotPoCCandHired = {External Not Female PoC Candidates Hired},",
						"          NotFemaleNotPoCCandStM = {Not Female Not PoC Candidates StM},",
						"          IntNotFemaleNotPoCCandStM = {Internal Not Female Not PoC Candidates StM},",
						"          ExtNotFemaleNotPoCCandStM = {External Not Female Not PoC Candidates StM},",
						"          NotFemalePoCCandHired = {Not Female Not PoC Candidates Hired},",
						"          IntNotFemalePoCCandHired = {Internal Not Female Not PoC Candidates Hired},",
						"          ExtNotFemalePoCCandHired = {External Not Female Not PoC Candidates Hired},",
						"          DiverseSlate = {Diverse Slate},",
						"          IntDiverseSlate = {Internal Diverse Slate},",
						"          ExtDiverseSlate = {External Diverse Slate},",
						"          NoDiverseSlate = {No Diverse Slate},",
						"          IntNoDiverseSlate = {Internal No Diverse Slate},",
						"          ExtNoDiverseSlate = {External No Diverse Slate},",
						"          DiverseHiredSlate = {Diverse Hired Slate},",
						"          IntDiverseHiredSlate = {Internal Diverse Hired Slate},",
						"          ExtDiverseHiredSlate = {External Diverse Hired Slate},",
						"          PoCSlate = {PoC Slate},",
						"          IntPoCSlate = {Internal PoC Slate},",
						"          ExtPoCSlate = {External PoC Slate},",
						"          NoPoCSlate = {No PoC Slate},",
						"          IntNoPoCSlate = {Internal No PoC Slate},",
						"          ExtNoPoCSlate = {External No PoC Slate},",
						"          PoCHiredSlate = {PoC Hired Slate},",
						"          IntPoCHiredSlate = {Internal PoC Hired Slate},",
						"          ExtPoCHiredSlate = {External PoC Hired Slate},",
						"          WhiteSlate = {White Slate},",
						"          IntWhiteSlate = {Internal White Slate},",
						"          ExtWhiteSlate = {External White Slate},",
						"          NoWhiteSlate = {No White Slate},",
						"          IntNoWhiteSlate = {Internal No White Slate},",
						"          ExtNoWhiteSlate = {External No White Slate},",
						"          WhiteHiredSlate = {White Hired Slate},",
						"          IntWhiteHiredSlate = {Internal White Hired Slate},",
						"          ExtWhiteHiredSlate = {External White Hired Slate},",
						"          BlackSlate = {Black Slate},",
						"          IntBlackSlate = {Internal Black Slate},",
						"          ExtBlackSlate = {External Black Slate},",
						"          NoBlackSlate = {No Black Slate},",
						"          IntNoBlackSlate = {Internal No Black Slate},",
						"          ExtNoBlackSlate = {External No Black Slate},",
						"          BlackHiredSlate = {Black Hired Slate},",
						"          IntBlackHiredSlate = {Internal Black Hired Slate},",
						"          ExtBlackHiredSlate = {External Black Hired Slate},",
						"          LatinxSlate = {Latinx Slate},",
						"          IntLatinxSlate = {Internal Latinx Slate},",
						"          ExtLatinxSlate = {External Latinx Slate},",
						"          NoLatinxSlate = {No Latinx Slate},",
						"          IntNoLatinxSlate = {Internal No Latinx Slate},",
						"          ExtNoLatinxSlate = {External No Latinx Slate},",
						"          LatinxHiredSlate = {Latinx Hired Slate},",
						"          IntLatinxHiredSlate = {Internal Latinx Hired Slate},",
						"          ExtLatinxHiredSlate = {External Latinx Hired Slate},",
						"          AsianSlate = {Asian Slate},",
						"          IntAsianSlate = {Internal Asian Slate},",
						"          ExtAsianSlate = {External Asian Slate},",
						"          NoAsianSlate = {No Asian Slate},",
						"          IntNoAsianSlate = {Internal No Asian Slate},",
						"          ExtNoAsianSlate = {External No Asian Slate},",
						"          AsianHiredSlate = {Asian Hired Slate},",
						"          IntAsianHiredSlate = {Internal Asian Hired Slate},",
						"          ExtAsianHiredSlate = {External Asian Hired Slate},",
						"          TwoPlusRacesSlate = {2+ Races Slate},",
						"          IntTwoPlusRacesSlate = {Internal 2+ Races Slate},",
						"          ExtTwoPlusRacesSlate = {External 2+ Races Slate},",
						"          NoTwoPlusRacesSlate = {No 2+ Races Slate},",
						"          IntNoTwoPlusRacesSlate = {Internal No 2+ Races Slate},",
						"          ExtNoTwoPlusRacesSlate = {External No 2+ Races Slate},",
						"          TwoPlusRacesHiredSlate = {2+ Races Hired Slate},",
						"          IntTwoPlusRacesHiredSlate = {Internal 2+ Races Hired Slate},",
						"          ExtTwoPlusRacesHiredSlate = {External 2+ Races Hired Slate},",
						"          OtherRaceSlate = {Other Race Slate},",
						"          IntOtherRaceSlate = {Internal Other Race Slate},",
						"          ExtOtherRaceSlate = {External Other Race Slate},",
						"          NoOtherRaceSlate = {No Other Race Slate},",
						"          IntNoOtherRaceSlate = {Internal No Other Race Slate},",
						"          ExtNoOtherRaceSlate = {External No Other Race Slate},",
						"          OtherRaceHiredSlate = {Other Race Hired Slate},",
						"          IntOtherRaceHiredSlate = {Internal Other Race Hired Slate},",
						"          ExtOtherRaceHiredSlate = {External Other Race Hired Slate},",
						"          FemaleSlate = {Female Slate},",
						"          IntFemaleSlate = {Internal Female Slate},",
						"          ExtFemaleSlate = {External Female Slate},",
						"          NoFemaleSlate = {No Female Slate},",
						"          IntNoFemaleSlate = {Internal No Female Slate},",
						"          ExtNoFemaleSlate = {External No Female Slate},",
						"          FemaleHiredSlate = {Female Hired Slate},",
						"          IntFemaleHiredSlate = {Internal Female Hired Slate},",
						"          ExtFemaleHiredSlate = {External Female Hired Slate},",
						"          MaleSlate = {Male Slate},",
						"          IntMaleSlate = {Internal Male Slate},",
						"          ExtMaleSlate = {External Male Slate},",
						"          NoMaleSlate = {No Male Slate},",
						"          IntNoMaleSlate = {Internal No Male Slate},",
						"          ExtNoMaleSlate = {External No Male Slate},",
						"          MaleHiredSlate = {Male Hired Slate},",
						"          IntMaleHiredSlate = {Internal Male Hired Slate},",
						"          ExtMaleHiredSlate = {External Male Hired Slate},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendDivSlateFact"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendOtherFactTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OtherNullRecordOutput"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as double,",
						"          {Other (Num Value 2)} as double,",
						"          {Other (Date Value 1)} as date,",
						"          {Other (Date Value 2)} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"Other alterRow(deleteIf(isNull({Worker ID})),",
						"     upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Year})),",
						"     deleteIf(isNull({Event (Type)}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          WorkerId = {Worker ID},",
						"          EventDt = {Event Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId = {Event ID},",
						"          EventType = {Event (Type)},",
						"          EventDesc = {Event (Desc)},",
						"          OtherCharVal1 = {Other (Char Value 1)},",
						"          OtherCharVal2 = {Other (Char Value 2)},",
						"          OtherNumVal1 = {Other (Num Value 1)},",
						"          OtherNumVal2 = {Other (Num Value 2)},",
						"          OtherDtVal1 = {Other (Date Value 1)},",
						"          OtherDtVal2 = {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(WorkerId = iif(isNull(WorkerId),'N/A',WorkerId),",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 filter(WorkerId!='N/A') ~> filter1",
						"derivedColumn1 filter(WorkerId=='N/A') ~> filter2",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventYear','EventType','EventDesc','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventDesc,",
						"          EventType,",
						"          OtherCharVal11 = OtherCharVal1,",
						"          OtherCharVal2,",
						"          OtherNumVal1,",
						"          OtherNumVal2,",
						"          OtherDtVal1,",
						"          OtherDtVal2,",
						"          LoadDt",
						"     )) ~> AppendOtherFactTbl",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Other Core Fact Table Load - Reject Records.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OtherNullRecordOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "PerRatingHistory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendTalentMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date,",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as short,",
						"          {Curr Performance Rating Date} as date,",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as integer,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as short,",
						"          {P1 Performance Rating Date} as date,",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as integer,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as short,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as date,",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as integer,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as short,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as date,",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as integer,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerRatingHistory",
						"PerRatingHistory alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Worker ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          WorkerId = {Worker ID},",
						"          LastPerfYear = {Last Performance Year},",
						"          LastPerfRatingDt = {Last Performance Rating Date},",
						"          LastClientPerfRating = {Last Client Performance Rating},",
						"          LastElloreePerfRating = {Last Elloree Performance Rating},",
						"          LastElloreePerfRatingSortId = {Last Elloree Performance Rating Sort Id},",
						"          LastTopTalentInd = {Last Top Talent Ind},",
						"          CurrPerfYear = {Curr Performance Year},",
						"          CurrPerfRatingDt = {Curr Performance Rating Date},",
						"          CurrTalentTag = {Curr Talent Tag},",
						"          CurrClientPerfRating = {Curr Client Performance Rating},",
						"          CurrElloreePerfRating = {Curr Elloree Performance Rating},",
						"          CurrElloreePerfRatingSortId = {Curr Elloree Performance Rating Sort Id},",
						"          CurrTopTalentInd = {Curr Top Talent Ind},",
						"          P1PerfYear = {P1 Performance Year},",
						"          P1PerfRatingDt = {P1 Performance Rating Date},",
						"          P1ClientPerfRating = {P1 Client Performance Rating},",
						"          P1ElloreePerfRating = {P1 Elloree Performance Rating},",
						"          P1ElloreePerfRatingSortId = {P1 Elloree Performance Rating Sort Id},",
						"          P1TopTalentInd = {P1 Top Talent Ind},",
						"          P2PerfYear = {P2 Performance Year},",
						"          P2PerfRatingDt = {P2 Performance Rating Date},",
						"          P2ClientPerfRating = {P2 Client Performance Rating},",
						"          P2ElloreePerfRating = {P2 Elloree Performance Rating},",
						"          P2ElloreePerfRatingSortId = {P2 Elloree Performance Rating Sort Id},",
						"          P2TopTalentInd = {P2 Top Talent Ind},",
						"          P3PerfYear = {P3 Performance Year},",
						"          P3PerfRatingDt = {P3 Performance Rating Date},",
						"          P3ClientPerfRating = {P3 Client Performance Rating},",
						"          P3ElloreePerfRating = {P3 Elloree Performance Rating},",
						"          P3ElloreePerfRatingSortId = {P3 Elloree Performance Rating Sort Id},",
						"          P3TopTalentInd = {P3 Top Talent Ind},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"AlterColumnNamesforMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          WorkerId,",
						"          LastPerfYear,",
						"          LastPerfRatingDt,",
						"          LastClientPerfRating,",
						"          LastElloreePerfRating,",
						"          LastElloreePerfRatingSortId,",
						"          LastTopTalentInd,",
						"          CurrPerfYear,",
						"          CurrPerfRatingDt,",
						"          CurrTalentTag,",
						"          CurrClientPerfRating,",
						"          CurrElloreePerfRating,",
						"          CurrElloreePerfRatingSortId,",
						"          CurrTopTalentInd,",
						"          P1PerfYear,",
						"          P1PerfRatingDt,",
						"          P1ClientPerfRating,",
						"          P1ElloreePerfRating,",
						"          P1ElloreePerfRatingSortId,",
						"          P1TopTalentInd,",
						"          P2PerfYear,",
						"          P2PerfRatingDt,",
						"          P2ClientPerfRating,",
						"          P2ElloreePerfRating,",
						"          P2ElloreePerfRatingSortId,",
						"          P2TopTalentInd,",
						"          P3PerfYear,",
						"          P3PerfRatingDt,",
						"          P3ClientPerfRating,",
						"          P3ElloreePerfRating,",
						"          P3ElloreePerfRatingSortId,",
						"          P3TopTalentInd,",
						"          LoadDt",
						"     )) ~> AppendTalentMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "addLoadDt"
						},
						{
							"name": "RestrictFieldColumnLength"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date 'yyyy-MM-dd',",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull(Event)),",
						"     deleteIf(isNull({Requisition ID}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventDt = {Event Date},",
						"          EventQuarter = {Event Quarter},",
						"          EventMonth,",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId,",
						"          ReqId = {Requisition ID},",
						"          ReqType = {Requisition Type},",
						"          PostingDt = {Posting Date},",
						"          ReqStatus = {Requisition Status},",
						"          NumberofOpenings = {Number of Openings},",
						"          JobTitle = {Job Title},",
						"          JobFunction = {Job Function},",
						"          CorpTitle = {Corporate Title},",
						"          WorkOfficeLoc = {Work Office Location},",
						"          WorkOfficeCity = {Work Office City},",
						"          WorkOfficeState = {Work Office State},",
						"          WorkOfficeCountry = {Work Office Country},",
						"          WorkStrategicLocInd = {Strategic Work Location Ind},",
						"          BusinessGrpLvl1 = {Business Group Level 1},",
						"          BusinessGrpLvl2 = {Business Group Level 2},",
						"          BusinessGrpLvl3 = {Business Group Level 3},",
						"          BusinessGrpLvl4 = {Business Group Level 4},",
						"          HiringMgrWorkerId = {Hiring Manager Worker ID},",
						"          PrimaryRecruiterWorkerId = {Primary Recruiter Worker ID},",
						"          ReqOther1 = {Requisition Other (1)},",
						"          ReqOther2 = {Requisition Other (2)},",
						"          ReqOther3 = {Requisition Other (3)},",
						"          ReqOther4 = {Requisition Other (4)},",
						"          ReqOther5 = {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> addLoadDt",
						"addLoadDt derive(JobTitle = left(JobTitle,100)) ~> RestrictFieldColumnLength",
						"RestrictFieldColumnLength sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          ReqId,",
						"          ReqType,",
						"          PostingDt,",
						"          ReqStatus,",
						"          NumberofOpenings,",
						"          JobTitle,",
						"          JobFunction,",
						"          CorpTitle,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          HiringMgrWorkerId,",
						"          PrimaryRecruiterWorkerId,",
						"          ReqOther1,",
						"          ReqOther2,",
						"          ReqOther3,",
						"          ReqOther4,",
						"          ReqOther5,",
						"          LoadDt",
						"     )) ~> AppendReqFact"
					]
				}
			},
			"dependsOn": []
		}
	]
}