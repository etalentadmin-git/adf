{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Applicants')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
						"          {Applicant ID - Null} = iif(isNull({Applicant ID}),1,iif({Applicant ID}=='N/A',1,0)),",
						"          {Source - Null} = iif(isNull(Source),1,iif(Source=='N/A',1,0)),",
						"          {Applicant Type - Null} = iif(isNull({Applicant Type}),1,iif({Applicant Type}=='N/A',1,0)),",
						"          {Internal Worker ID - Null} = iif(isNull({Internal Worker ID}),1,iif({Internal Worker ID}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Applicant Final Disposition - Null} = iif(isNull({Applicant Final Disposition}),1,iif({Applicant Final Disposition}=='N/A',1,0)),",
						"          {Applicant Step Before Final Disposition - Null} = iif(isNull({Applicant Step Before Final Disposition}),1,iif({Applicant Step Before Final Disposition}=='N/A',1,0)),",
						"          {Applicant Rejected Reason - Null} = iif(isNull({Applicant Rejected Reason}),1,iif({Applicant Rejected Reason}=='N/A',1,0)),",
						"          {Applicant Other (1) - Null} = iif(isNull({Applicant Other (1)}),1,iif({Applicant Other (1)}=='N/A',1,0)),",
						"          {Applicant Other (2) - Null} = iif(isNull({Applicant Other (2)}),1,iif({Applicant Other (2)}=='N/A',1,0)),",
						"          {Applicant Other (3) - Null} = iif(isNull({Applicant Other (3)}),1,iif({Applicant Other (3)}=='N/A',1,0)),",
						"          {Applicant Other (4) - Null} = iif(isNull({Applicant Other (4)}),1,iif({Applicant Other (4)}=='N/A',1,0)),",
						"          {Applicant Other (5) - Null} = iif(isNull({Applicant Other (5)}),1,iif({Applicant Other (5)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'APP') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
						"          {Applicant ID - Null} = sum({Applicant ID - Null}),",
						"          {Source - Null} = sum({Source - Null}),",
						"          {Applicant Type - Null} = sum({Applicant Type - Null}),",
						"          {Internal Worker ID - Null} = sum({Internal Worker ID - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Applicant Final Disposition - Null} = sum({Applicant Final Disposition - Null}),",
						"          {Applicant Step Before Final Disposition - Null} = sum({Applicant Step Before Final Disposition - Null}),",
						"          {Applicant Rejected Reason - Null} = sum({Applicant Rejected Reason - Null}),",
						"          {Applicant Other (1) - Null} = sum({Applicant Other (1) - Null}),",
						"          {Applicant Other (2) - Null} = sum({Applicant Other (2) - Null}),",
						"          {Applicant Other (3) - Null} = sum({Applicant Other (3) - Null}),",
						"          {Applicant Other (4) - Null} = sum({Applicant Other (4) - Null}),",
						"          {Applicant Other (5) - Null} = sum({Applicant Other (5) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Requisition ID} = {Requisition ID - Null},",
						"          {Applicant ID} = {Applicant ID - Null},",
						"          Source = {Source - Null},",
						"          {Applicant Type} = {Applicant Type - Null},",
						"          {Internal Worker ID} = {Internal Worker ID - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Applicant Final Disposition} = {Applicant Final Disposition - Null},",
						"          {Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition - Null},",
						"          {Applicant Rejected Reason} = {Applicant Rejected Reason - Null},",
						"          {Applicant Other (1)} = {Applicant Other (1) - Null},",
						"          {Applicant Other (2)} = {Applicant Other (2) - Null},",
						"          {Applicant Other (3)} = {Applicant Other (3) - Null},",
						"          {Applicant Other (4)} = {Applicant Other (4) - Null},",
						"          {Applicant Other (5)} = {Applicant Other (5) - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Applicants.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Headcount')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHeadcount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "HeadcountFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHeadcount",
						"HeadcountFilter derive({Event Year - Null or N/A} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Status - Null} = iif(isNull({Worker Status}),1,iif({Worker Status}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}),1,iif({Years in Job}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          {Generation Sort ID - Null} = iif(isNull({Generation Sort ID}),1,iif({Generation Sort ID}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null or N/A}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Status - Null} = sum({Worker Status - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Generation Sort ID - Null} = sum({Generation Sort ID - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Status} = {Worker Status - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Generation Sort ID} = {Generation Sort ID - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreHeadcount filter({Event Code}=='HCT') ~> HeadcountFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Headcount.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Hires')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHires"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "HiresFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHires",
						"HiresFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Rehire Indicator - Null} = iif(isNull({Rehire Indicator}),1,iif({Rehire Indicator}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Rehire Indicator - Null} = sum({Rehire Indicator - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Rehire Indicator} = {Rehire Indicator - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreHires filter({Event Code}=='HIR') ~> HiresFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Hires.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Other')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event (Type) - Null} = iif(isNull({Event (Type)}),1,iif({Event (Type)}=='N/A',1,0)),",
						"          {Event (Desc) - Null} = iif(isNull({Event (Desc)}),1,iif({Event (Desc)}=='N/A',1,0)),",
						"          {Other (Char Value 1) - Null} = iif(isNull({Other (Char Value 1)}),1,iif({Other (Char Value 1)}=='N/A',1,0)),",
						"          {Other (Char Value 2) - Null} = iif(isNull({Other (Char Value 2)}),1,iif({Other (Char Value 2)}=='N/A',1,0)),",
						"          {Other (Num Value 1) - Null} = iif(isNull({Other (Num Value 1)}),1,iif({Other (Num Value 2)}=='N/A',1,0)),",
						"          {Other (Num Value 2) - Null} = iif(isNull({Other (Num Value 2)}),1,iif({Other (Num Value 2)}=='N/A',1,0)),",
						"          {Other (Date Value 1) - Null} = iif(isNull({Other (Date Value 1)}),1,iif({Other (Date Value 1)}=='N/A',1,0)),",
						"          {Other (Date Value 2) - Null} = iif(isNull({Other (Date Value 2)}),1,iif({Other (Date Value 2)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'OTH') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event (Type) - Null} = sum({Event (Type) - Null}),",
						"          {Event (Desc) - Null} = sum({Event (Desc) - Null}),",
						"          {Other (Char Value 1) - Null} = sum({Other (Char Value 1) - Null}),",
						"          {Other (Char Value 2) - Null} = sum({Other (Char Value 2) - Null}),",
						"          {Other (Num Value 1) - Null} = sum({Other (Num Value 1) - Null}),",
						"          {Other (Num Value 2) - Null} = sum({Other (Num Value 2) - Null}),",
						"          {Other (Date Value 1) - Null} = sum({Other (Date Value 1) - Null}),",
						"          {Other (Date Value 2) - Null} = sum({Other (Date Value 2) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          {Event (Type)} = {Event (Type) - Null},",
						"          {Event (Desc)} = {Event (Desc) - Null},",
						"          {Other (Char Value 1)} = {Other (Char Value 1) - Null},",
						"          {Other (Char Value 2)} = {Other (Char Value 2) - Null},",
						"          {Other (Num Value 1)} = {Other (Num Value 1) - Null},",
						"          {Other (Num Value 2)} = {Other (Num Value 2) - Null},",
						"          {Other (Date Value 1)} = {Other (Date Value 1) - Null},",
						"          {Other (Date Value 2)} = {Other (Date Value 2) - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Other.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Promotions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CorePromotions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "PromotionsFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorePromotions",
						"PromotionsFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Previous Job Title - Null} = iif(isNull({Previous Job Title}),1,iif({Previous Job Title}=='N/A',1,0)),",
						"          {Previous Job Family/Function - Null} = iif(isNull({Previous Job Family/Function}),1,iif({Previous Job Family/Function}=='N/A',1,0)),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}),1,iif({Years in Job}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Previous Corporate Title - Null} = iif(isNull({Previous Corporate Title}),1,iif({Previous Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Previous Job Title - Null} = sum({Previous Job Title - Null}),",
						"          {Previous Job Family/Function - Null} = sum({Previous Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Previous Corporate Title - Null} = sum({Previous Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Previous Job Title} = {Previous Job Title - Null},",
						"          {Previous Job Family/Function} = {Previous Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Previous Corporate Title} = {Previous Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CorePromotions filter({Event Code}=='PRO') ~> PromotionsFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Promotions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Requisitions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
						"          {Requisition Type - Null} = iif(isNull({Requisition Type}),1,iif({Requisition Type}=='N/A',1,0)),",
						"          {Posting Date - Null} = iif(isNull({Posting Date}),1,iif({Posting Date}=='N/A',1,0)),",
						"          {Requisition Status - Null} = iif(isNull({Requisition Status}),1,iif({Requisition Status}=='N/A',1,0)),",
						"          {Number of Openings - Null} = iif(isNull({Number of Openings}),1,iif({Number of Openings}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Function - Null} = iif(isNull({Job Function}),1,iif({Job Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work Office City}),1,iif({Work Office City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work Office State}),1,iif({Work Office State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Office Country}),1,iif({Work Office Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Hiring Manager Worker ID - Null} = iif(isNull({Hiring Manager Worker ID}),1,iif({Hiring Manager Worker ID}=='N/A',1,0)),",
						"          {Primary Recruiter Worker ID - Null} = iif(isNull({Primary Recruiter Worker ID}),1,iif({Primary Recruiter Worker ID}=='N/A',1,0)),",
						"          {Requisition Other (1) - Null} = iif(isNull({Requisition Other (1)}),1,iif({Requisition Other (1)}=='N/A',1,0)),",
						"          {Requisition Other (2) - Null} = iif(isNull({Requisition Other (2)}),1,iif({Requisition Other (2)}=='N/A',1,0)),",
						"          {Requisition Other (3) - Null} = iif(isNull({Requisition Other (3)}),1,iif({Requisition Other (3)}=='N/A',1,0)),",
						"          {Requisition Other (4) - Null} = iif(isNull({Requisition Other (4)}),1,iif({Requisition Other (4)}=='N/A',1,0)),",
						"          {Requisition Other (5) - Null} = iif(isNull({Requisition Other (5)}),1,iif({Requisition Other (5)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'REQ') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
						"          {Requisition Type - Null} = sum({Requisition Type - Null}),",
						"          {Posting Date - Null} = sum({Posting Date - Null}),",
						"          {Requisition Status - Null} = sum({Requisition Status - Null}),",
						"          {Number of Openings - Null} = sum({Number of Openings - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Function - Null} = sum({Job Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Hiring Manager Worker ID - Null} = sum({Hiring Manager Worker ID - Null}),",
						"          {Primary Recruiter Worker ID - Null} = sum({Primary Recruiter Worker ID - Null}),",
						"          {Requisition Other (1) - Null} = sum({Requisition Other (1) - Null}),",
						"          {Requisition Other (2) - Null} = sum({Requisition Other (2) - Null}),",
						"          {Requisition Other (3) - Null} = sum({Requisition Other (2) - Null}),",
						"          {Requisition Other (4) - Null} = sum({Requisition Other (4) - Null}),",
						"          {Requisition Other (5) - Null} = sum({Requisition Other (5) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Requisition ID} = {Requisition ID - Null},",
						"          {Requisition Type} = {Requisition Type - Null},",
						"          {Posting Date} = {Posting Date - Null},",
						"          {Requisition Status} = {Requisition Status - Null},",
						"          {Number of Openings} = {Number of Openings - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Function} = {Job Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          {Hiring Manager Worker ID} = {Hiring Manager Worker ID - Null},",
						"          {Primary Recruiter Worker ID} = {Primary Recruiter Worker ID - Null},",
						"          {Requisition Other (1)} = {Requisition Other (1) - Null},",
						"          {Requisition Other (2)} = {Requisition Other (2) - Null},",
						"          {Requisition Other (3)} = {Requisition Other (3) - Null},",
						"          {Requisition Other (4)} = {Requisition Other (4) - Null},",
						"          {Requisition Other (5)} = {Requisition Other (5) - Null},",
						"          {Total Records},",
						"          {Event Review}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Requisitions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_TalentAssessment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTalent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTalent",
						"CoreTalent derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Performance Rating - Null} = iif(isNull({Performance Rating}),1,iif({Performance Rating}=='N/A',1,0)),",
						"          {Performance Rating Date - Null} = iif(isNull({Performance Rating Date}), 1,0),",
						"          {Talent Identifier (1) - Null} = iif(isNull({Talent Identifier (1)}),1,iif({Talent Identifier (1)}=='N/A',1,0)),",
						"          {Talent Identifier (2) - Null} = iif(isNull({Talent Identifier (2)}),1,iif({Talent Identifier (2)}=='N/A',1,0)),",
						"          {Talent Identifier (3) - Null} = iif(isNull({Talent Identifier (3)}),1,iif({Talent Identifier (3)}=='N/A',1,0)),",
						"          {Talent Identifier (4) - Null} = iif(isNull({Talent Identifier (4)}),1,iif({Talent Identifier (4)}=='N/A',1,0)),",
						"          {Talent Identifier (5) - Null} = iif(isNull({Talent Identifier (5)}),1,iif({Talent Identifier (5)}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Performance Rating - Null} = sum({Performance Rating - Null}),",
						"          {Performance Rating Date - Null} = sum({Performance Rating Date - Null}),",
						"          {Talent Identifier (1) - Null} = sum({Talent Identifier (1) - Null}),",
						"          {Talent Identifier (2) - Null} = sum({Talent Identifier (2) - Null}),",
						"          {Talent Identifier (3) - Null} = sum({Talent Identifier (3) - Null}),",
						"          {Talent Identifier (4) - Null} = sum({Talent Identifier (4) - Null}),",
						"          {Talent Identifier (5) - Null} = sum({Talent Identifier (5) - Null}),",
						"          Total = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Performance Rating} = {Performance Rating - Null},",
						"          {Performance Rating Date} = {Performance Rating Date - Null},",
						"          {Talent Identifier (1)} = {Talent Identifier (1) - Null},",
						"          {Talent Identifier (2)} = {Talent Identifier (2) - Null},",
						"          {Talent Identifier (3)} = {Talent Identifier (3) - Null},",
						"          {Talent Identifier (4) } = {Talent Identifier (4) - Null},",
						"          {Talent Identifier (5)} = {Talent Identifier (5) - Null},",
						"          {Total Records} = Total",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Talent Assessment.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Terminations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "TerminationsFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTerminations",
						"TerminationsFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Event Reason - Null} = iif(isNull({Event Reason}),1,iif({Event Reason}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreTerminations filter({Event Code}=='TER') ~> TerminationsFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Terminations.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of performance values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_PerformanceRating",
								"type": "DatasetReference"
							},
							"name": "PerformanceMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputPeerformanceReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotPerformanceAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddPerformanceMapping"
						},
						{
							"name": "SortOnRating"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Performance Rating} as string,",
						"          {Elloree Performance Rating} as string,",
						"          {Elloree Performance Rating Sort} as string,",
						"          {Suggested Elloree Performance Rating} as string,",
						"          {Suggested Elloree Performane Rating Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Talent Assessment} as string,",
						"          {2018 Talent Assessment} as string,",
						"          {2019 Talent Assessment} as string,",
						"          {2020 Talent Assessment} as string,",
						"          {2021 Talent Assessment} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerformanceMapping",
						"SortOnEvent pivot(groupBy({Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotPerformanceAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, PerformanceMapping join({Performance Rating} == {Client Performance Rating},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddPerformanceMapping",
						"CreatePivotPerformanceAndEventTime sort(asc({Performance Rating}, true),",
						"     asc({Elloree Performance Rating}, true)) ~> SortOnRating",
						"AddPerformanceMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)},",
						"          {Client ID} = PerformanceMapping@{Client ID},",
						"          {Client Engagement Date} = PerformanceMapping@{Client Engagement Date},",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performane Rating Sort Id},",
						"          {Suggested Source},",
						"          {2017 Talent Assessment},",
						"          {2018 Talent Assessment},",
						"          {2019 Talent Assessment},",
						"          {2020 Talent Assessment},",
						"          {2021 Talent Assessment}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"SortOnRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Performance.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPeerformanceReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Template_Column_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "TalentAssessment"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Headcount",
								"type": "DatasetReference"
							},
							"name": "HeadcountColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Hires",
								"type": "DatasetReference"
							},
							"name": "HiresColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Terminations",
								"type": "DatasetReference"
							},
							"name": "TerminationsColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Promotions",
								"type": "DatasetReference"
							},
							"name": "PromotionsColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_TalentAssessmentColumnMapping",
								"type": "DatasetReference"
							},
							"name": "TalentAssessmentColumnMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputColumnSummaryReview"
						}
					],
					"transformations": [
						{
							"name": "UnpivotToTransposeHCTColumnNames"
						},
						{
							"name": "SelectOnlyHCTColumnNameField"
						},
						{
							"name": "SelectUniqueHCTColumnRows"
						},
						{
							"name": "UnpivotToTransposeTermColumnNames"
						},
						{
							"name": "SelectUniqueTermColumnRows"
						},
						{
							"name": "SelectOnlyTermColumnNameField"
						},
						{
							"name": "UnpivotToTransposePromoColumnNames"
						},
						{
							"name": "SelectUniquePromoColumnRows"
						},
						{
							"name": "SelectOnlyPromoColumnNameField"
						},
						{
							"name": "UnpivotToTransposeHireColumnNames"
						},
						{
							"name": "SelectUniqueHireColumnRows"
						},
						{
							"name": "SelectOnlyHireColumnNameField"
						},
						{
							"name": "UnpivotToTransposeTalentAssessmentColumnNames"
						},
						{
							"name": "SelectUniqueTalentAssessmentColumnRows"
						},
						{
							"name": "SelectOnlyTalentAssessmentColumnNameField"
						},
						{
							"name": "HeadcountColumnJoinToMapping"
						},
						{
							"name": "HiresColumnJoinToMapping"
						},
						{
							"name": "TerminationsColumnJoinToMapping"
						},
						{
							"name": "PromotionsColumnJoinToMapping"
						},
						{
							"name": "TalentAssessmentColumnJoinToMapping"
						},
						{
							"name": "AddHCTColumnDescription"
						},
						{
							"name": "AddTermColumnDescription"
						},
						{
							"name": "AddPromoColumnDescription"
						},
						{
							"name": "AddHireColumnDescription"
						},
						{
							"name": "AddTalentAssessmentColumnDescription"
						},
						{
							"name": "AddHCTDerivedColumnForAggGrouping"
						},
						{
							"name": "AddTermDerivedColumnForAggGrouping"
						},
						{
							"name": "AddPromoDerivedColumnForAggGrouping"
						},
						{
							"name": "AddHireDerivedColumnForAggGrouping"
						},
						{
							"name": "AddTalentAssessmentDerivedColumnForAggGrouping"
						},
						{
							"name": "SelectHeadcountSummary"
						},
						{
							"name": "SelectTerminationSummary"
						},
						{
							"name": "SelectPromotionSummary"
						},
						{
							"name": "SelectHireSummary"
						},
						{
							"name": "SelectTalentAssessmentSummary"
						},
						{
							"name": "UnionAllEventColumnSummaries"
						},
						{
							"name": "SortEvents"
						},
						{
							"name": "HeadcountRemoveClientRefColumn"
						},
						{
							"name": "TerminationsRemoveClientRefColumn"
						},
						{
							"name": "PromotionsRemoveClientRefColumn"
						},
						{
							"name": "HiresRemoveClientRefColumn"
						},
						{
							"name": "TalentRemoveClientRefColumn"
						},
						{
							"name": "sort1"
						},
						{
							"name": "sort2"
						},
						{
							"name": "sort3"
						},
						{
							"name": "sort4"
						},
						{
							"name": "sort6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years in Job} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TalentAssessment",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HeadcountColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HiresColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TerminationsColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PromotionsColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TalentAssessmentColumnMapping",
						"AddHCTDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeHCTColumnNames",
						"SelectUniqueHCTColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyHCTColumnNameField",
						"UnpivotToTransposeHCTColumnNames aggregate(groupBy({Column Name} = Column),",
						"     {Total Count} = count(Column)) ~> SelectUniqueHCTColumnRows",
						"AddTermDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeTermColumnNames",
						"UnpivotToTransposeTermColumnNames aggregate(groupBy({Column Name} = Column),",
						"     {Total Count} = count(Column)) ~> SelectUniqueTermColumnRows",
						"SelectUniqueTermColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTermColumnNameField",
						"AddPromoDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposePromoColumnNames",
						"UnpivotToTransposePromoColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniquePromoColumnRows",
						"SelectUniquePromoColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyPromoColumnNameField",
						"AddHireDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeHireColumnNames",
						"UnpivotToTransposeHireColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueHireColumnRows",
						"SelectUniqueHireColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyHireColumnNameField",
						"AddTalentAssessmentDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeTalentAssessmentColumnNames",
						"UnpivotToTransposeTalentAssessmentColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueTalentAssessmentColumnRows",
						"SelectUniqueTalentAssessmentColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTalentAssessmentColumnNameField",
						"SelectOnlyHCTColumnNameField, HeadcountColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HeadcountColumnJoinToMapping",
						"SelectOnlyHireColumnNameField, HiresColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HiresColumnJoinToMapping",
						"SelectOnlyTermColumnNameField, TerminationsColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TerminationsColumnJoinToMapping",
						"SelectOnlyPromoColumnNameField, PromotionsColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PromotionsColumnJoinToMapping",
						"SelectOnlyTalentAssessmentColumnNameField, TalentAssessmentColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TalentAssessmentColumnJoinToMapping",
						"HeadcountColumnJoinToMapping derive({Event Template} = 'Headcount') ~> AddHCTColumnDescription",
						"TerminationsColumnJoinToMapping derive({Event Template} = 'Terminations') ~> AddTermColumnDescription",
						"PromotionsColumnJoinToMapping derive({Event Template} = 'Promotions') ~> AddPromoColumnDescription",
						"HiresColumnJoinToMapping derive({Event Template} = 'Hires') ~> AddHireColumnDescription",
						"TalentAssessmentColumnJoinToMapping derive({Event Template} = 'Talent Assessment') ~> AddTalentAssessmentColumnDescription",
						"HeadcountRemoveClientRefColumn derive({Event Sheet} = 'Headcount') ~> AddHCTDerivedColumnForAggGrouping",
						"TerminationsRemoveClientRefColumn derive({Event Sheet} = 'Terminations') ~> AddTermDerivedColumnForAggGrouping",
						"PromotionsRemoveClientRefColumn derive({Event Sheet} = 'Promotions') ~> AddPromoDerivedColumnForAggGrouping",
						"HiresRemoveClientRefColumn derive({Event Sheet} = 'Hires') ~> AddHireDerivedColumnForAggGrouping",
						"TalentRemoveClientRefColumn derive({Event Sheet} = 'Talent Assessment') ~> AddTalentAssessmentDerivedColumnForAggGrouping",
						"sort6 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHeadcountSummary",
						"sort1 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminationSummary",
						"sort2 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromotionSummary",
						"sort3 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHireSummary",
						"sort4 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentAssessmentSummary",
						"SelectHeadcountSummary, SelectTerminationSummary, SelectPromotionSummary, SelectHireSummary, SelectTalentAssessmentSummary union(byName: true)~> UnionAllEventColumnSummaries",
						"UnionAllEventColumnSummaries sort(asc({Event Template}, true)) ~> SortEvents",
						"Headcount select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HeadcountRemoveClientRefColumn",
						"Terminations select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TerminationsRemoveClientRefColumn",
						"Promotions select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PromotionsRemoveClientRefColumn",
						"Hires select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HiresRemoveClientRefColumn",
						"TalentAssessment select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Top Performer},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TalentRemoveClientRefColumn",
						"AddTermColumnDescription sort(asc({Sort Id}, true)) ~> sort1",
						"AddPromoColumnDescription sort(asc({Sort Id}, true)) ~> sort2",
						"AddHireColumnDescription sort(asc({Sort Id}, true)) ~> sort3",
						"AddTalentAssessmentColumnDescription sort(asc({Sort Id}, true)) ~> sort4",
						"AddHCTColumnDescription sort(asc({Sort Id}, true)) ~> sort6",
						"SortEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Column Review Core.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputColumnSummaryReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Template_Column_TA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Requisition",
								"type": "DatasetReference"
							},
							"name": "RequisitionColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Req_Test",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicanrColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ReqRemoveClientRefColumn"
						},
						{
							"name": "AddReqDerivedColumnForAggGrouping"
						},
						{
							"name": "UnpivotToTransposeReqColumnNames"
						},
						{
							"name": "SelectUniqueReqColumnRows"
						},
						{
							"name": "SelectOnlyReqColumnNameField"
						},
						{
							"name": "ReqColumnJoinToMapping"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectReqSummary"
						},
						{
							"name": "sort1"
						},
						{
							"name": "AppliantRemoveClientRefColumn"
						},
						{
							"name": "AddApplicantsDerivedColumnForAggGrouping"
						},
						{
							"name": "UnpivotToTransposeApplColumnNames"
						},
						{
							"name": "SelectUniqueApplColumnRows"
						},
						{
							"name": "SelectOnlyApplColumnNameField"
						},
						{
							"name": "ApplColumnJoinToMapping"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectApplSummary"
						},
						{
							"name": "sort2"
						},
						{
							"name": "union1"
						},
						{
							"name": "sort3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RequisitionColumnMapping",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicanrColumnMapping",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Requisitions select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReqRemoveClientRefColumn",
						"ReqRemoveClientRefColumn derive({Event Sheet} = 'Requisitions') ~> AddReqDerivedColumnForAggGrouping",
						"AddReqDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeReqColumnNames",
						"UnpivotToTransposeReqColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueReqColumnRows",
						"SelectUniqueReqColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyReqColumnNameField",
						"SelectOnlyReqColumnNameField, RequisitionColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ReqColumnJoinToMapping",
						"ReqColumnJoinToMapping derive({Event Template} = 'Requisitions') ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqSummary",
						"SelectReqSummary sort(asc({Sort Id}, true)) ~> sort1",
						"Applicants select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AppliantRemoveClientRefColumn",
						"AppliantRemoveClientRefColumn derive({Event Sheet} = 'Applicants') ~> AddApplicantsDerivedColumnForAggGrouping",
						"AddApplicantsDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeApplColumnNames",
						"UnpivotToTransposeApplColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueApplColumnRows",
						"SelectUniqueApplColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyApplColumnNameField",
						"SelectOnlyApplColumnNameField, ApplicanrColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ApplColumnJoinToMapping",
						"ApplColumnJoinToMapping derive({Event Template} = 'Applicants') ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          {Client Column},",
						"          {Sort Id},",
						"          {Column Name},",
						"          {Event Template}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplSummary",
						"SelectApplSummary sort(asc({Sort Id}, true)) ~> sort2",
						"sort1, sort2 union(byName: true)~> union1",
						"union1 sort(asc({Event Template}, true)) ~> sort3",
						"sort3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Column Review TA.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_WorkerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow takes unique IDs from each core event table and compares to unique worker IDs from all headcount to identify IDs not in headcount.  Results could highlight an issue with ID anonymization.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTotalSummary"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTermIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputPromoIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTalentIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputHireIDsNotInHeadcount"
						}
					],
					"transformations": [
						{
							"name": "SelectUniqueWorkerIDTerminations"
						},
						{
							"name": "SelectAllEmpIDsInTerminations"
						},
						{
							"name": "SelectUniqueEmpIDHeadcount"
						},
						{
							"name": "SelectAllEmpIDsInHeadcount"
						},
						{
							"name": "SelectTermIDsNotInHeadcount"
						},
						{
							"name": "AggregateTermIDsNotInHeadcount"
						},
						{
							"name": "TotalIDsInHeadcount"
						},
						{
							"name": "CombineHeadcountAndTermIDCounts"
						},
						{
							"name": "TagEventCheckForTerms"
						},
						{
							"name": "DisplayTotalTermIDsVSTotalHeadcount"
						},
						{
							"name": "SelectUniqueWorkerIDPromotions"
						},
						{
							"name": "SelectAllEmpIDsInPromotions"
						},
						{
							"name": "SelectPromoIDsNotInHeadcount"
						},
						{
							"name": "AggregatePromoIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndPromoIDCounts"
						},
						{
							"name": "TagEventCheckForPromos"
						},
						{
							"name": "DisplayTotalPromoIDsVSTotalHeadcount"
						},
						{
							"name": "CombineTotalWorkerIDSummaryAllEvents"
						},
						{
							"name": "SelectUniqueWorkerIDTalent"
						},
						{
							"name": "SelectAllEmpIDsInTalent"
						},
						{
							"name": "SelectTalentIDsNotInHeadcount"
						},
						{
							"name": "AggregateTalentIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndTalentIDCounts"
						},
						{
							"name": "TagEventCheckForTalent"
						},
						{
							"name": "DisplayTotalTalentIDsVSTotalHeadcount"
						},
						{
							"name": "CountTotalTerms"
						},
						{
							"name": "TotalTermsIdentifier"
						},
						{
							"name": "JoinTotalWorkerIDEventCountsWithSummary"
						},
						{
							"name": "CountTotalPromotions"
						},
						{
							"name": "TotalPromosIdentifier"
						},
						{
							"name": "CountTotalTalent"
						},
						{
							"name": "TotalTalentIdentifier"
						},
						{
							"name": "TotalEventRecords"
						},
						{
							"name": "select1"
						},
						{
							"name": "SelectUniqueWorkerIDHires"
						},
						{
							"name": "SelectAllEmpIDsInHires"
						},
						{
							"name": "SelectHireIDsNotInHeadcount"
						},
						{
							"name": "AggregateHireIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndHireIDCounts"
						},
						{
							"name": "TagEventCheckForHires"
						},
						{
							"name": "DisplayTotalHireIDsVSTotalHeadcount"
						},
						{
							"name": "CountTotalHires"
						},
						{
							"name": "TotalHireIdentifier"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "derivedColumn5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years in Job} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"select3 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTerminations",
						"SelectUniqueWorkerIDTerminations select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTerminations",
						"select2 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> SelectUniqueEmpIDHeadcount",
						"SelectUniqueEmpIDHeadcount select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHeadcount",
						"SelectAllEmpIDsInTerminations, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTerminations@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectTermIDsNotInHeadcount",
						"SelectTermIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Terminations Not in HCT} = count({Worker ID})) ~> AggregateTermIDsNotInHeadcount",
						"SelectAllEmpIDsInHeadcount aggregate(groupBy(Event),",
						"     {Total Count} = count({Worker ID})) ~> TotalIDsInHeadcount",
						"AggregateTermIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTermIDCounts",
						"CombineHeadcountAndTermIDCounts derive({Event Check} = 'Terminations') ~> TagEventCheckForTerms",
						"TagEventCheckForTerms aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Terminations Not in HCT})) ~> DisplayTotalTermIDsVSTotalHeadcount",
						"select4 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDPromotions",
						"SelectUniqueWorkerIDPromotions select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInPromotions",
						"SelectAllEmpIDsInPromotions, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInPromotions@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectPromoIDsNotInHeadcount",
						"SelectPromoIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Promotions Not in HCT} = count({Worker ID})) ~> AggregatePromoIDsNotInHeadcount",
						"AggregatePromoIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndPromoIDCounts",
						"CombineHeadcountAndPromoIDCounts derive({Event Check} = 'Promotions') ~> TagEventCheckForPromos",
						"TagEventCheckForPromos aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Promotions Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalPromoIDsVSTotalHeadcount",
						"DisplayTotalTermIDsVSTotalHeadcount, DisplayTotalPromoIDsVSTotalHeadcount, DisplayTotalTalentIDsVSTotalHeadcount, DisplayTotalHireIDsVSTotalHeadcount union(byName: true)~> CombineTotalWorkerIDSummaryAllEvents",
						"select5 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTalent",
						"SelectUniqueWorkerIDTalent select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTalent",
						"SelectAllEmpIDsInTalent, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTalent@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectTalentIDsNotInHeadcount",
						"SelectTalentIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Talent Not in HCT} = count({Worker ID})) ~> AggregateTalentIDsNotInHeadcount",
						"AggregateTalentIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTalentIDCounts",
						"CombineHeadcountAndTalentIDCounts derive({Event Check} = 'Talent') ~> TagEventCheckForTalent",
						"TagEventCheckForTalent aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Talent Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalTalentIDsVSTotalHeadcount",
						"SelectAllEmpIDsInTerminations aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTerms",
						"CountTotalTerms derive({Event Check} = 'Terminations') ~> TotalTermsIdentifier",
						"CombineTotalWorkerIDSummaryAllEvents, TotalEventRecords join(CombineTotalWorkerIDSummaryAllEvents@{Event Check} == TotalEventRecords@{Event Check},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotalWorkerIDEventCountsWithSummary",
						"SelectAllEmpIDsInPromotions aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalPromotions",
						"CountTotalPromotions derive({Event Check} = 'Promotions') ~> TotalPromosIdentifier",
						"SelectAllEmpIDsInTalent aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTalent",
						"CountTotalTalent derive({Event Check} = 'Talent') ~> TotalTalentIdentifier",
						"TotalTermsIdentifier, TotalPromosIdentifier, TotalTalentIdentifier, TotalHireIdentifier union(byName: true)~> TotalEventRecords",
						"JoinTotalWorkerIDEventCountsWithSummary select(mapColumn(",
						"          Event = CombineTotalWorkerIDSummaryAllEvents@{Event Check},",
						"          {Total IDs Not in HCT},",
						"          {Total Unique Worker ID's in Event} = {Total Event Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select6 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDHires",
						"SelectUniqueWorkerIDHires select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHires",
						"SelectAllEmpIDsInHires, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInHires@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SelectHireIDsNotInHeadcount",
						"SelectHireIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Hires Not in HCT} = count({Worker ID})) ~> AggregateHireIDsNotInHeadcount",
						"AggregateHireIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndHireIDCounts",
						"CombineHeadcountAndHireIDCounts derive({Event Check} = 'Hire') ~> TagEventCheckForHires",
						"TagEventCheckForHires aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Hires Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalHireIDsVSTotalHeadcount",
						"SelectAllEmpIDsInHires aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalHires",
						"CountTotalHires derive({Event Check} = 'Hire') ~> TotalHireIdentifier",
						"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
						"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
						"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
						"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
						"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter5",
						"derivedColumn1 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn2 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"derivedColumn3 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn4 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Top Performer},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"derivedColumn5 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"filter1 derive(Event = 'Headcount') ~> derivedColumn1",
						"filter2 derive(Event = 'Terminations') ~> derivedColumn2",
						"filter3 derive(Event = 'Promotions') ~> derivedColumn3",
						"filter4 derive(Event = 'Talent') ~> derivedColumn4",
						"filter5 derive(Event = 'Hires') ~> derivedColumn5",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker ID Review Summary.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTotalSummary",
						"SelectTermIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Terms Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTermIDsNotInHeadcount",
						"SelectPromoIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Promos Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPromoIDsNotInHeadcount",
						"SelectTalentIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Talent Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTalentIDsNotInHeadcount",
						"SelectHireIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Hires Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputHireIDsNotInHeadcount"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_WorkerId_HCT_Compare')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "HCTFilter"
						},
						{
							"name": "MaxYear"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "MaxYearMinus1"
						},
						{
							"name": "MaxYearMinus2"
						},
						{
							"name": "MaxYearMinus3"
						},
						{
							"name": "MaxYearMinus4"
						},
						{
							"name": "SelectWorkerAndYear"
						},
						{
							"name": "TotalWorkersMaxYear"
						},
						{
							"name": "JoinMaxMinus1"
						},
						{
							"name": "TotalWorkersMaxYearMinus1"
						},
						{
							"name": "JoinMaxMinus2"
						},
						{
							"name": "TotalWorkersMaxYearMinus2"
						},
						{
							"name": "JoinMaxMinus3"
						},
						{
							"name": "TotalWorkersMaxYearMinus3"
						},
						{
							"name": "JoinMaxMinus4"
						},
						{
							"name": "TotalWorkersMaxYearMinus4"
						},
						{
							"name": "JoinMaxMinus1forCompare"
						},
						{
							"name": "selectMax"
						},
						{
							"name": "selectMaxMinus1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinMaxMinus2forCompare"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "selectMaxMinus2"
						},
						{
							"name": "JoinMaxMinus3forCompare"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "selectMaxMinus3"
						},
						{
							"name": "JoinMaxMinus4forCompare"
						},
						{
							"name": "selectMaxMinus4"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "JoinTotalMax"
						},
						{
							"name": "FinalSelectMaxCompare"
						},
						{
							"name": "JoinTotal1P"
						},
						{
							"name": "FinalSelect1PCompare"
						},
						{
							"name": "JoinTotal2P"
						},
						{
							"name": "FinalSelect2PCompare"
						},
						{
							"name": "JoinTotal3P"
						},
						{
							"name": "FinalSelect3PCompare"
						},
						{
							"name": "MaxYearMinus5"
						},
						{
							"name": "JoinMaxMinus5"
						},
						{
							"name": "selectMaxMinus5"
						},
						{
							"name": "TotalWorkersMaxYearMinus5"
						},
						{
							"name": "JoinMaxMinus5forCompare"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinTotal4P"
						},
						{
							"name": "FinalSelect4PCompare"
						},
						{
							"name": "CalcMaxPercent"
						},
						{
							"name": "Calc1PPercent"
						},
						{
							"name": "Calc2PPercent"
						},
						{
							"name": "Calc3PPercent"
						},
						{
							"name": "Calc4PPercent"
						},
						{
							"name": "union1"
						},
						{
							"name": "TERFilter"
						},
						{
							"name": "JoinFilterMaxTER"
						},
						{
							"name": "JoinFilter1PTER"
						},
						{
							"name": "JoinFilter2PTER"
						},
						{
							"name": "JoinFilter3PTER"
						},
						{
							"name": "JoinFilter4PTER"
						},
						{
							"name": "SelectTERColumns"
						},
						{
							"name": "MaxTERExist5PHC"
						},
						{
							"name": "Terminations4PCount"
						},
						{
							"name": "MaxTERExist4PHC"
						},
						{
							"name": "Terminations3PCount"
						},
						{
							"name": "MaxTERExist3PHC"
						},
						{
							"name": "Terminations2PCount"
						},
						{
							"name": "MaxTERExist2PHC"
						},
						{
							"name": "Terminations1PCount"
						},
						{
							"name": "MaxTERExist1PHC"
						},
						{
							"name": "TerminationsMaxCount"
						},
						{
							"name": "JoinMaxTERCount"
						},
						{
							"name": "FinalSelect1P"
						},
						{
							"name": "Join1PTERCount"
						},
						{
							"name": "FinalSelect2P"
						},
						{
							"name": "Join2PTERCount"
						},
						{
							"name": "FinalSelect3P"
						},
						{
							"name": "Join3PTERCount"
						},
						{
							"name": "FinalSelect4P"
						},
						{
							"name": "Join4PTERCount"
						},
						{
							"name": "FinalSelect5P"
						},
						{
							"name": "HIRFilter"
						},
						{
							"name": "SelectHIRColumns"
						},
						{
							"name": "JoinFilterMaxHIR"
						},
						{
							"name": "HireMaxCount"
						},
						{
							"name": "MaxHIRExistMaxHC"
						},
						{
							"name": "JoinFilter1PHIR"
						},
						{
							"name": "HIR1PExist1PHC"
						},
						{
							"name": "Hire1PCount"
						},
						{
							"name": "JoinFilter2PHIR"
						},
						{
							"name": "HIR2PExist2PHC"
						},
						{
							"name": "Hire2PCount"
						},
						{
							"name": "JoinFilter3PHIR"
						},
						{
							"name": "HIR3PExist3PHC"
						},
						{
							"name": "Hire3PCount"
						},
						{
							"name": "JoinFilter4PHIR"
						},
						{
							"name": "HIR4PExist4PHC"
						},
						{
							"name": "Hire4PCount"
						},
						{
							"name": "Join4PHIRCount"
						},
						{
							"name": "Join3PHIRCount"
						},
						{
							"name": "Join2PHIRCount"
						},
						{
							"name": "Join1PHIRCount"
						},
						{
							"name": "JoinMaxHIRCount"
						},
						{
							"name": "SelectCoreDBFields"
						},
						{
							"name": "UnionWithCoreDB"
						},
						{
							"name": "RemoveDupsCore"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as integer,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CoreDB",
						"RemoveDupsCore filter({Event Code}=='HCT') ~> filter1",
						"RemoveDupsCore filter({Event Code}=='HCT') ~> HCTFilter",
						"filter1 aggregate({Event Year Last} = max({Event Year})) ~> MaxYear",
						"SelectWorkerAndYear, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMax",
						"filter1 aggregate({Event Year -1} = max({Event Year})-1) ~> MaxYearMinus1",
						"filter1 aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
						"filter1 aggregate({Event Year -3} = max({Event Year})-3) ~> MaxYearMinus3",
						"filter1 aggregate({Event Year -4} = max({Event Year})-4) ~> MaxYearMinus4",
						"HCTFilter select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerAndYear",
						"JoinMax aggregate(groupBy({Event Year Last}),",
						"     {Total Max} = count({Worker ID})) ~> TotalWorkersMaxYear",
						"SelectWorkerAndYear, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus1",
						"JoinMaxMinus1 aggregate(groupBy({Event Year -1}),",
						"     {Total Max -1} = count({Worker ID})) ~> TotalWorkersMaxYearMinus1",
						"SelectWorkerAndYear, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus2",
						"JoinMaxMinus2 aggregate(groupBy({Event Year -2}),",
						"     TotalWorkersMaxYearMinus2 = count({Worker ID})) ~> TotalWorkersMaxYearMinus2",
						"SelectWorkerAndYear, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus3",
						"JoinMaxMinus3 aggregate(groupBy({Event Year -3}),",
						"     TotalWorkersMaxYearMinus3 = count({Worker ID})) ~> TotalWorkersMaxYearMinus3",
						"SelectWorkerAndYear, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus4",
						"JoinMaxMinus4 aggregate(groupBy({Event Year -4}),",
						"     TotalWorkersMaxYearMinus4 = count({Worker ID})) ~> TotalWorkersMaxYearMinus4",
						"selectMax, selectMaxMinus1 join({Max Worker ID} == {1P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus1forCompare",
						"JoinMax select(mapColumn(",
						"          {Max Client ID} = {Client ID},",
						"          {Max Client Engagement Date} = {Client Engagement Date},",
						"          {Max Worker ID} = {Worker ID},",
						"          {Max Event Year} = {Event Year},",
						"          {Event Year Last}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMax",
						"JoinMaxMinus1 select(mapColumn(",
						"          {1P Client ID} = {Client ID},",
						"          {1P Client Engagement Date} = {Client Engagement Date},",
						"          {1P Worker ID} = {Worker ID},",
						"          {1P Event Year} = {Event Year},",
						"          {Event Year -1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus1",
						"JoinMaxMinus1forCompare aggregate(groupBy({Client ID} = {Max Client ID},",
						"          {Client Engagement Date} = {Max Client Engagement Date},",
						"          {1P Event Year},",
						"          {Max Event Year}),",
						"     {Total 1P HCT in Latest HCT} = count({1P Worker ID})) ~> aggregate1",
						"selectMaxMinus1, selectMaxMinus2 join({1P Worker ID} == {2P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus2forCompare",
						"JoinMaxMinus2forCompare aggregate(groupBy({Client ID} = {1P Client ID},",
						"          {Client Engagement Date} = {1P Client Engagement Date},",
						"          {2P Event Year},",
						"          {1P Event Year}),",
						"     {Total Max -2 in Max -1} = count({2P Worker ID})) ~> aggregate2",
						"JoinMaxMinus2 select(mapColumn(",
						"          {2P Client ID} = {Client ID},",
						"          {2P Client Engagement Date} = {Client Engagement Date},",
						"          {2P Worker ID} = {Worker ID},",
						"          {2P Event Year} = {Event Year},",
						"          {Event Year -2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus2",
						"selectMaxMinus2, selectMaxMinus3 join({2P Worker ID} == {3P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus3forCompare",
						"JoinMaxMinus3forCompare aggregate(groupBy({Client ID} = {2P Client ID},",
						"          {Client Engagement Date} = {2P Client Engagement Date},",
						"          {3P Event Year},",
						"          {2P Event Year}),",
						"     {Total Max -3 in Max -2} = count({3P Worker ID})) ~> aggregate3",
						"JoinMaxMinus3 select(mapColumn(",
						"          {3P Client ID} = {Client ID},",
						"          {3P Client Engagement Date} = {Client Engagement Date},",
						"          {3P Worker ID} = {Worker ID},",
						"          {3P Event Year} = {Event Year},",
						"          {Event Year -3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus3",
						"selectMaxMinus3, selectMaxMinus4 join({3P Worker ID} == {4P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus4forCompare",
						"JoinMaxMinus4 select(mapColumn(",
						"          {4P Client ID} = {Client ID},",
						"          {4P Client Engagement Date} = {Client Engagement Date},",
						"          {4P Worker ID} = {Worker ID},",
						"          {4P Event Year} = {Event Year},",
						"          {Event Year -4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus4",
						"JoinMaxMinus4forCompare aggregate(groupBy({Client ID} = {3P Client ID},",
						"          {Client Engagement Date} = {3P Client Engagement Date},",
						"          {4P Event Year},",
						"          {3P Event Year}),",
						"     {Total Max -4 in Max -3} = count({4P Worker ID})) ~> aggregate4",
						"aggregate1, TotalWorkersMaxYear join({Max Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinTotalMax",
						"JoinTotalMax select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {1P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total 1P HCT in Latest HCT},",
						"          {Compare Yr} = {Event Year Last},",
						"          {Compare Yr HCT} = {Total Max}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectMaxCompare",
						"aggregate2, TotalWorkersMaxYearMinus1 join({1P Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal1P",
						"JoinTotal1P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {2P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -2 in Max -1},",
						"          {Compare Yr} = {Event Year -1},",
						"          {Compare Yr HCT} = {Total Max -1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect1PCompare",
						"aggregate3, TotalWorkersMaxYearMinus2 join({2P Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal2P",
						"JoinTotal2P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {3P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -3 in Max -2},",
						"          {Compare Yr} = {Event Year -2},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect2PCompare",
						"aggregate4, TotalWorkersMaxYearMinus3 join({3P Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal3P",
						"JoinTotal3P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {4P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -4 in Max -3},",
						"          {Compare Yr} = {Event Year -3},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect3PCompare",
						"filter1 aggregate({Event Year -5} = max({Event Year})-5) ~> MaxYearMinus5",
						"SelectWorkerAndYear, MaxYearMinus5 join({Event Year} == {Event Year -5},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus5",
						"JoinMaxMinus5 select(mapColumn(",
						"          {5P Client ID} = {Client ID},",
						"          {5P Client Engagement Date} = {Client Engagement Date},",
						"          {5P Worker ID} = {Worker ID},",
						"          {5P Event Year} = {Event Year},",
						"          {Event Year -5}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus5",
						"JoinMaxMinus5 aggregate(TotalWorkersMaxYearMinus5 = count({Worker ID})) ~> TotalWorkersMaxYearMinus5",
						"selectMaxMinus4, selectMaxMinus5 join({4P Worker ID} == {5P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus5forCompare",
						"JoinMaxMinus5forCompare aggregate(groupBy({Client ID} = {4P Client ID},",
						"          {Client Engagement Date} = {4P Client Engagement Date},",
						"          {5P Event Year},",
						"          {4P Event Year}),",
						"     {Total Max -5 in Max -4} = count({4P Worker ID})) ~> aggregate5",
						"aggregate5, TotalWorkersMaxYearMinus4 join({4P Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal4P",
						"JoinTotal4P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {5P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -5 in Max -4},",
						"          {Compare Yr} = {Event Year -4},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect4PCompare",
						"FinalSelect1P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> CalcMaxPercent",
						"FinalSelect2P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc1PPercent",
						"FinalSelect3P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc2PPercent",
						"FinalSelect4P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc3PPercent",
						"FinalSelect5P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc4PPercent",
						"Calc4PPercent, Calc3PPercent, Calc2PPercent, Calc1PPercent, CalcMaxPercent union(byName: true)~> union1",
						"SelectTERColumns filter({Event Code}=='TER') ~> TERFilter",
						"TERFilter, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilterMaxTER",
						"TERFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter1PTER",
						"TERFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter2PTER",
						"TERFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter3PTER",
						"TERFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter4PTER",
						"RemoveDupsCore select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTERColumns",
						"JoinFilter4PTER, selectMaxMinus5 exists({Worker ID} == {5P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist5PHC",
						"MaxTERExist5PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations4PCount",
						"JoinFilter3PTER, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist4PHC",
						"MaxTERExist4PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations3PCount",
						"JoinFilter2PTER, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist3PHC",
						"MaxTERExist3PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations2PCount",
						"JoinFilter1PTER, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist2PHC",
						"MaxTERExist2PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations1PCount",
						"JoinFilterMaxTER, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist1PHC",
						"MaxTERExist1PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> TerminationsMaxCount",
						"FinalSelectMaxCompare, TerminationsMaxCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinMaxTERCount",
						"JoinMaxHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect1P",
						"FinalSelect1PCompare, Terminations1PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join1PTERCount",
						"Join1PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect2P",
						"FinalSelect2PCompare, Terminations2PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join2PTERCount",
						"Join2PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect3P",
						"FinalSelect3PCompare, Terminations3PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join3PTERCount",
						"Join3PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect4P",
						"FinalSelect4PCompare, Terminations4PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join4PTERCount",
						"Join4PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect5P",
						"SelectHIRColumns filter({Event Code}=='HIR') ~> HIRFilter",
						"RemoveDupsCore select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHIRColumns",
						"HIRFilter, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilterMaxHIR",
						"MaxHIRExistMaxHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> HireMaxCount",
						"JoinFilterMaxHIR, selectMax exists({Worker ID} == {Max Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> MaxHIRExistMaxHC",
						"HIRFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilter1PHIR",
						"JoinFilter1PHIR, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR1PExist1PHC",
						"HIR1PExist1PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire1PCount",
						"HIRFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilter2PHIR",
						"JoinFilter2PHIR, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR2PExist2PHC",
						"HIR2PExist2PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire2PCount",
						"HIRFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter3PHIR",
						"JoinFilter3PHIR, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR3PExist3PHC",
						"HIR3PExist3PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire3PCount",
						"HIRFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter4PHIR",
						"JoinFilter4PHIR, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR4PExist4PHC",
						"HIR4PExist4PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire4PCount",
						"Join4PTERCount, Hire4PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join4PHIRCount",
						"Join3PTERCount, Hire3PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join3PHIRCount",
						"Join2PTERCount, Hire2PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join2PHIRCount",
						"Join1PTERCount, Hire1PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join1PHIRCount",
						"JoinMaxTERCount, HireMaxCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinMaxHIRCount",
						"CoreDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreDBFields",
						"Core, SelectCoreDBFields union(byName: true)~> UnionWithCoreDB",
						"UnionWithCoreDB aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          {Event Code},",
						"          {Worker ID}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDupsCore",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs HCT Compare Over Time.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantFact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantFact",
						"ApplicantFact alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_ApplicantStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplStatusFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantStatus",
						"ApplicantStatus alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Client')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "ClientTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[ClientTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ClientTbl",
						"ClientTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DivSlateFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASlateFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DivSlateFactTbl",
						"DivSlateFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"OtherCoreFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingHistFactTbl",
						"PerfRatingHistFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		}
	]
}