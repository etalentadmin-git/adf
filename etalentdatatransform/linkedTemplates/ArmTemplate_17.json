{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Duplicate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Output Duplicate Review report.  Currently ties to the union csv in blob.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CorePromotions"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHires"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_DivSlate_File",
								"type": "DatasetReference"
							},
							"name": "DivSlates"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "EventDuplicatesReport"
						}
					],
					"transformations": [
						{
							"name": "HeadcountRowCount"
						},
						{
							"name": "HeadcountSumRowsForDups"
						},
						{
							"name": "HctDuplicates"
						},
						{
							"name": "TerminationsRowCount"
						},
						{
							"name": "TerminationsSumRowsForDups"
						},
						{
							"name": "TermDuplicates"
						},
						{
							"name": "union1"
						},
						{
							"name": "HiresRowCount"
						},
						{
							"name": "HiresSumRowsForDups"
						},
						{
							"name": "HireDuplicates"
						},
						{
							"name": "PromotionsRowCount"
						},
						{
							"name": "PromotionsSumRowsForDups"
						},
						{
							"name": "PromoDuplicates"
						},
						{
							"name": "TalentRowCount"
						},
						{
							"name": "TalentSumRowsForDups"
						},
						{
							"name": "TalentDuplicates"
						},
						{
							"name": "RequisitionsRowCount"
						},
						{
							"name": "RequisitionsSumRowsForDups"
						},
						{
							"name": "RequisitionDuplicates"
						},
						{
							"name": "ApplicantRowCount"
						},
						{
							"name": "ApplicantSumRowsForDups"
						},
						{
							"name": "ApplicantDuplicates"
						},
						{
							"name": "PromoFilterOutClientAliasHeaderRow"
						},
						{
							"name": "HeadcountFilter"
						},
						{
							"name": "TerminationFilter"
						},
						{
							"name": "HiresFilter"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "OtherRowCount"
						},
						{
							"name": "OtherSumRowsForDups"
						},
						{
							"name": "ConcatEventandEventType"
						},
						{
							"name": "OtherDuplicates"
						},
						{
							"name": "SlateRowCount"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SlateSumRowsForDups"
						},
						{
							"name": "SlateDuplicates"
						},
						{
							"name": "RemoveNullOtherRows"
						},
						{
							"name": "RemoveNullSlateRows"
						},
						{
							"name": "RemoveNullPromoRows"
						},
						{
							"name": "RemoveNullTalentRows"
						},
						{
							"name": "RemoveNullReqRows"
						},
						{
							"name": "RemoveNullApplicantRows"
						},
						{
							"name": "RemoveNullHeadcountRows"
						},
						{
							"name": "RemoveNullTermRows"
						},
						{
							"name": "RemoveNullHireRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorePromotions",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHeadcount",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTerminations",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHires",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Requisition ID} as string,",
						"          {Event Year} as string,",
						"          {Candidates StM} as string,",
						"          {Internal Candidates StM} as string,",
						"          {External Candidates StM} as string,",
						"          {Candidates Hired} as string,",
						"          {Internal Candidates Hired} as string,",
						"          {External Candidates Hired} as string,",
						"          {White Candidates StM} as string,",
						"          {Internal White Candidates StM} as string,",
						"          {External White Candidates StM} as string,",
						"          {White Candidates Hired} as string,",
						"          {Internal White Candidates Hired} as string,",
						"          {External White Candidates Hired} as string,",
						"          {Black Candidates StM} as string,",
						"          {Internal Black Candidates StM} as string,",
						"          {External Black Candidates StM} as string,",
						"          {Black Candidates Hired} as string,",
						"          {Internal Black Candidates Hired} as string,",
						"          {External Black Candidates Hired} as string,",
						"          {Latinx Candidates StM} as string,",
						"          {Internal Latinx Candidates StM} as string,",
						"          {External Latinx Candidates StM} as string,",
						"          {Latinx Candidates Hired} as string,",
						"          {Internal Latinx Candidates Hired} as string,",
						"          {External Latinx Candidates Hired} as string,",
						"          {Asian Candidates StM} as string,",
						"          {Internal Asian Candidates StM} as string,",
						"          {External Asian Candidates StM} as string,",
						"          {Asian Candidates Hired} as string,",
						"          {Internal Asian Candidates Hired} as string,",
						"          {External Asian Candidates Hired} as string,",
						"          {2+ Races Candidates StM} as string,",
						"          {Internal 2+ Races Candidates StM} as string,",
						"          {External 2+ Races Candidates StM} as string,",
						"          {2+ Races Candidates Hired} as string,",
						"          {Internal 2+ Races Candidates Hired} as string,",
						"          {External 2+ Races Candidates Hired} as string,",
						"          {Other Candidates StM} as string,",
						"          {Internal Other Candidates StM} as string,",
						"          {External Other Candidates StM} as string,",
						"          {Other Candidates Hired} as string,",
						"          {Internal Other Candidates Hired} as string,",
						"          {External Other Candidates Hired} as string,",
						"          {Male Candidates StM} as string,",
						"          {Internal Male Candidates StM} as string,",
						"          {External Male Candidates StM} as string,",
						"          {Male Candidates Hired} as string,",
						"          {Internal Male Candidates Hired} as string,",
						"          {External Male Candidates Hired} as string,",
						"          {Female Candidates StM} as string,",
						"          {Internal Female Candidates StM} as string,",
						"          {External Female Candidates StM} as string,",
						"          {Female Candidates Hired} as string,",
						"          {Internal Female Candidates Hired} as string,",
						"          {External Female Candidates Hired} as string,",
						"          {Other Gender Candidates StM} as string,",
						"          {Internal Other Gender Candidates StM} as string,",
						"          {External Other Gender Candidates StM} as string,",
						"          {Other Gender Candidates Hired} as string,",
						"          {Internal Other Gender Candidates Hired} as string,",
						"          {External Other Gender Candidates Hired} as string,",
						"          {PoC Candidates StM} as string,",
						"          {Internal PoC Candidates StM} as string,",
						"          {External PoC Candidates StM} as string,",
						"          {PoC  Candidates Hired} as string,",
						"          {Internal PoC  Candidates Hired} as string,",
						"          {External PoC  Candidates Hired} as string,",
						"          {Diverse Candidates StM} as string,",
						"          {Internal Diverse Candidates StM} as string,",
						"          {External Diverse Candidates StM} as string,",
						"          {Diverse Candidates Hired} as string,",
						"          {Internal Diverse Candidates Hired} as string,",
						"          {External Diverse Candidates Hired} as string,",
						"          {Female Not PoC Candidates StM} as string,",
						"          {Internal Female Not PoC Candidates StM} as string,",
						"          {External Female Not PoC Candidates StM} as string,",
						"          {Female Not PoC Candidates Hired} as string,",
						"          {Internal Female Not PoC Candidates Hired} as string,",
						"          {External Female Not PoC Candidates Hired} as string,",
						"          {Female PoC Candidates StM} as string,",
						"          {Internal Female PoC Candidates StM} as string,",
						"          {External Female PoC Candidates StM} as string,",
						"          {Female PoC Candidates Hired} as string,",
						"          {Internal Female PoC Candidates Hired} as string,",
						"          {External Female PoC Candidates Hired} as string,",
						"          {Not Female PoC Candidates StM} as string,",
						"          {Internal Not Female PoC Candidates StM} as string,",
						"          {External Not Female PoC Candidates StM} as string,",
						"          {Not Female PoC Candidates Hired} as string,",
						"          {Internal Not Female PoC Candidates Hired} as string,",
						"          {External Not Female PoC Candidates Hired} as string,",
						"          {Not Female Not PoC Candidates StM} as string,",
						"          {Internal Not Female Not PoC Candidates StM} as string,",
						"          {External Not Female Not PoC Candidates StM} as string,",
						"          {Not Female Not PoC Candidates Hired} as string,",
						"          {Internal Not Female Not PoC Candidates Hired} as string,",
						"          {External Not Female Not PoC Candidates Hired} as string,",
						"          {Diverse Slate} as string,",
						"          {Internal Diverse Slate} as string,",
						"          {External Diverse Slate} as string,",
						"          {No Diverse Slate} as string,",
						"          {Internal No Diverse Slate} as string,",
						"          {External No Diverse Slate} as string,",
						"          {Diverse Hired Slate} as string,",
						"          {Internal Diverse Hired Slate} as string,",
						"          {External Diverse Hired Slate} as string,",
						"          {PoC Slate} as string,",
						"          {Internal PoC Slate} as string,",
						"          {External PoC Slate} as string,",
						"          {No PoC Slate} as string,",
						"          {Internal No PoC Slate} as string,",
						"          {External No PoC Slate} as string,",
						"          {PoC Hired Slate} as string,",
						"          {Internal PoC Hired Slate} as string,",
						"          {External PoC Hired Slate} as string,",
						"          {White Slate} as string,",
						"          {Internal White Slate} as string,",
						"          {External White Slate} as string,",
						"          {No White Slate} as string,",
						"          {Internal No White Slate} as string,",
						"          {External No White Slate} as string,",
						"          {White Hired Slate} as string,",
						"          {Internal White Hired Slate} as string,",
						"          {External White Hired Slate} as string,",
						"          {Black Slate} as string,",
						"          {Internal Black Slate} as string,",
						"          {External Black Slate} as string,",
						"          {No Black Slate} as string,",
						"          {Internal No Black Slate} as string,",
						"          {External No Black Slate} as string,",
						"          {Black Hired Slate} as string,",
						"          {Internal Black Hired Slate} as string,",
						"          {External Black Hired Slate} as string,",
						"          {Latinx Slate} as string,",
						"          {Internal Latinx Slate} as string,",
						"          {External Latinx Slate} as string,",
						"          {No Latinx Slate} as string,",
						"          {Internal No Latinx Slate} as string,",
						"          {External No Latinx Slate} as string,",
						"          {Latinx Hired Slate} as string,",
						"          {Internal Latinx Hired Slate} as string,",
						"          {External Latinx Hired Slate} as string,",
						"          {Asian Slate} as string,",
						"          {Internal Asian Slate} as string,",
						"          {External Asian Slate} as string,",
						"          {No Asian Slate} as string,",
						"          {Internal No Asian Slate} as string,",
						"          {External No Asian Slate} as string,",
						"          {Asian Hired Slate} as string,",
						"          {Internal Asian Hired Slate} as string,",
						"          {External Asian Hired Slate} as string,",
						"          {2+ Races Slate} as string,",
						"          {Internal 2+ Races Slate} as string,",
						"          {External 2+ Races Slate} as string,",
						"          {No 2+ Races Slate} as string,",
						"          {Internal No 2+ Races Slate} as string,",
						"          {External No 2+ Races Slate} as string,",
						"          {2+ Races Hired Slate} as string,",
						"          {Internal 2+ Races Hired Slate} as string,",
						"          {External 2+ Races Hired Slate} as string,",
						"          {Other Race Slate} as string,",
						"          {Internal Other Race Slate} as string,",
						"          {External Other Race Slate} as string,",
						"          {No Other Race Slate} as string,",
						"          {Internal No Other Race Slate} as string,",
						"          {External No Other Race Slate} as string,",
						"          {Other Race Hired Slate} as string,",
						"          {Internal Other Race Hired Slate} as string,",
						"          {External Other Race Hired Slate} as string,",
						"          {Female Slate} as string,",
						"          {Internal Female Slate} as string,",
						"          {External Female Slate} as string,",
						"          {No Female Slate} as string,",
						"          {Internal No Female Slate} as string,",
						"          {External No Female Slate} as string,",
						"          {Female Hired Slate} as string,",
						"          {Internal Female Hired Slate} as string,",
						"          {External Female Hired Slate} as string,",
						"          {Male Slate} as string,",
						"          {Internal Male Slate} as string,",
						"          {External Male Slate} as string,",
						"          {No Male Slate} as string,",
						"          {Internal No Male Slate} as string,",
						"          {External No Male Slate} as string,",
						"          {Male Hired Slate} as string,",
						"          {Internal Male Hired Slate} as string,",
						"          {External Male Hired Slate} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DivSlates",
						"HeadcountFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> HeadcountRowCount",
						"HeadcountRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> HeadcountSumRowsForDups",
						"RemoveNullHeadcountRows filter(DuplicateCount>1) ~> HctDuplicates",
						"TerminationFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> TerminationsRowCount",
						"TerminationsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> TerminationsSumRowsForDups",
						"RemoveNullTermRows filter(DuplicateCount>1) ~> TermDuplicates",
						"HctDuplicates, TermDuplicates, HireDuplicates, PromoDuplicates, TalentDuplicates, RequisitionDuplicates, ApplicantDuplicates, OtherDuplicates, SlateDuplicates union(byName: true)~> union1",
						"HiresFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = countAll({Worker ID})) ~> HiresRowCount",
						"HiresRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> HiresSumRowsForDups",
						"RemoveNullHireRows filter(DuplicateCount>1) ~> HireDuplicates",
						"PromoFilterOutClientAliasHeaderRow aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> PromotionsRowCount",
						"PromotionsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> PromotionsSumRowsForDups",
						"RemoveNullPromoRows filter(DuplicateCount>1) ~> PromoDuplicates",
						"Talent aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> TalentRowCount",
						"TalentRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> TalentSumRowsForDups",
						"RemoveNullTalentRows filter(DuplicateCount>1) ~> TalentDuplicates",
						"Requisitions aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Requisition ID}),",
						"     RowCount = count({Requisition ID})) ~> RequisitionsRowCount",
						"RequisitionsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> RequisitionsSumRowsForDups",
						"RemoveNullReqRows filter(DuplicateCount>1) ~> RequisitionDuplicates",
						"Applicants aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Applicant ID},",
						"          {Requisition ID}),",
						"     RowCount = count({Applicant ID})) ~> ApplicantRowCount",
						"ApplicantRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Applicant ID},",
						"          {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> ApplicantSumRowsForDups",
						"RemoveNullApplicantRows filter(DuplicateCount>1) ~> ApplicantDuplicates",
						"CorePromotions filter({Event Code}=='PRO') ~> PromoFilterOutClientAliasHeaderRow",
						"CoreHeadcount filter({Event Code}=='HCT') ~> HeadcountFilter",
						"CoreTerminations filter({Event Code}=='TER') ~> TerminationFilter",
						"CoreHires filter({Event Code}=='HIR') ~> HiresFilter",
						"derivedColumn1 select(mapColumn(",
						"          Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)},",
						"          DuplicateCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"ApplicantSumRowsForDups derive({Record Id (Worker/Req/Applicant)} = toString({Record Id (Worker/Req/Applicant)})) ~> derivedColumn1",
						"union1 sort(asc(Event, true)) ~> sort1",
						"Other aggregate(groupBy(Event,",
						"          {Event (Desc)},",
						"          {Event (Type)},",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = countAll({Worker ID})) ~> OtherRowCount",
						"ConcatEventandEventType aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> OtherSumRowsForDups",
						"OtherRowCount derive(Event = concat(concat(concat(concat(Event,' '),{Event (Type)}),' '),{Event (Desc)})) ~> ConcatEventandEventType",
						"RemoveNullOtherRows filter(DuplicateCount>1) ~> OtherDuplicates",
						"derivedColumn2 aggregate(groupBy(Event,",
						"          {Event Year},",
						"          {Requisition ID}),",
						"     RowCount = countAll({Requisition ID})) ~> SlateRowCount",
						"DivSlates derive(Event = 'Slate') ~> derivedColumn2",
						"SlateRowCount aggregate(groupBy(Event,",
						"          {Event Date} = {Event Year},",
						"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> SlateSumRowsForDups",
						"RemoveNullSlateRows filter(DuplicateCount>1) ~> SlateDuplicates",
						"OtherSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullOtherRows",
						"SlateSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullSlateRows",
						"PromotionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullPromoRows",
						"TalentSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTalentRows",
						"RequisitionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullReqRows",
						"FinalSelect filter(!(isNull(Event))) ~> RemoveNullApplicantRows",
						"HeadcountSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHeadcountRows",
						"TerminationsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTermRows",
						"HiresSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHireRows",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Duplicates Review Core.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> EventDuplicatesReport"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddEhtnicityMapping"
						},
						{
							"name": "SortOnEthnicity"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMapping",
						"SortOnEvent pivot(groupBy(Race,",
						"          {Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, EthnicityMapping join(Race == {Client Race}",
						"     && {Hispanic or Latino Origin} == {Client Hispanic or Latino Origin},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddEhtnicityMapping",
						"CreatePivotEthnicityAndEventTime sort(asc(Race, true),",
						"     asc({Hispanic or Latino Origin}, true)) ~> SortOnEthnicity",
						"AddEhtnicityMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount,",
						"          {Client ID} = EthnicityMapping@{Client ID},",
						"          {Client Engagement Date} = EthnicityMapping@{Client Engagement Date},",
						"          {Client Race},",
						"          {Client Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Suggested Elloree Race},",
						"          {Suggested Elloree Hispanic or Latino Origin},",
						"          {Suggested Source},",
						"          {2017 Headcount},",
						"          {2018 Headcount},",
						"          {2018 Hire},",
						"          {2018 Promo},",
						"          {2018 Term},",
						"          {2019 Headcount},",
						"          {2019 Hire},",
						"          {2019 Promo},",
						"          {2019 Term},",
						"          {2020 Headcount},",
						"          {2020 Hire},",
						"          {2020 Promo},",
						"          {2020 Term},",
						"          {2021 Headcount},",
						"          {2021 Hire},",
						"          {2021 Promo},",
						"          {2021 Term}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnEthnicity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Ethnicity.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Event",
								"type": "DatasetReference"
							},
							"name": "EventMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEventReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEventAndEventTime"
						},
						{
							"name": "SortOnEventAndYear"
						},
						{
							"name": "AddEventMapping"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Event} as string,",
						"          {Client Event Type} as string,",
						"          {Client Event Reason} as string,",
						"          {Elloree Event} as string,",
						"          {Elloree Event Type} as string,",
						"          {Elloree Event Reason} as string,",
						"          {Elloree Termination Reason} as string,",
						"          {Suggested Elloree Event} as string,",
						"          {Suggested Elloree Event Type} as string,",
						"          {Suggested Elloree Event Reason} as string,",
						"          {Suggested Elloree Termination Reason} as string,",
						"          {Suggested Source} as string,",
						"          {2019 Headcount} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string,",
						"          {2022 Headcount} as string,",
						"          {2022 Hire} as string,",
						"          {2022 Promo} as string,",
						"          {2022 Term} as string,",
						"          {2023 Promo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EventMapping",
						"SortOnEventAndYear pivot(groupBy(Event,",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Client Id},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEventAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEventAndYear",
						"AllCoreData, EventMapping join(Event == {Client Event}",
						"     && {Event Type} == {Client Event Type}",
						"     && {Event Reason} == {Client Event Reason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddEventMapping",
						"CreatePivotEventAndEventTime sort(asc(Event, true),",
						"     asc({Event Type}, true),",
						"     asc({Event Reason}, true)) ~> SortOnEvent",
						"AddEventMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Worker Status},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Client Id} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = EventMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Event.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEventReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_EventSummary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEventSummaryReview"
						}
					],
					"transformations": [
						{
							"name": "CrosstabCountByEventAndYear"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"derivedColumn1 pivot(groupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     Count = sum(EmpCount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> CrosstabCountByEventAndYear",
						"AllCoreData derive(EmpCount = 1,",
						"          {Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> derivedColumn1",
						"CrosstabCountByEventAndYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Event Summary.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEventSummaryReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddGenderMapping"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMapping",
						"SortOnEvent pivot(groupBy(Gender,",
						"          {Elloree Gender},",
						"          {Client Id},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, GenderMapping join(Gender == {Client Gender},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddGenderMapping",
						"CreatePivotEthnicityAndEventTime sort(asc(Gender, true),",
						"     asc({Elloree Gender}, true)) ~> SortOnGender",
						"AddGenderMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Worker Status},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Gender},",
						"          {Client Id} = GenderMapping@{Client ID},",
						"          {Client Engagement Date} = GenderMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Gender.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Location",
								"type": "DatasetReference"
							},
							"name": "LocationMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotLocationAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddLocationMapping"
						},
						{
							"name": "SortOnLocation"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Work Office Location} as string,",
						"          {Client Work City} as string,",
						"          {Client Work State} as string,",
						"          {Client Work Country} as string,",
						"          {Client Strategic Work Location Ind} as string,",
						"          {Elloree Work Ofiice} as string,",
						"          {Elloree Work City} as string,",
						"          {Elloree Work State} as string,",
						"          {Elloree Work Region} as string,",
						"          {Elloree Work Country} as string,",
						"          {Elloree Strategic Location} as string,",
						"          {Elloree Location Sort Id} as string,",
						"          {Suggested Elloree Work City} as string,",
						"          {Suggested Elloree Work State} as string,",
						"          {Suggested Elloree Work Country} as string,",
						"          {Suggested Elloree Work Region} as string,",
						"          {Suggested Elloree Strategic Location} as string,",
						"          {Suggested Elloree Location Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LocationMapping",
						"SortOnEvent pivot(groupBy({Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotLocationAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, LocationMapping join({Work Office Location} == {Client Work Office Location}",
						"     && {Work City} == {Client Work City}",
						"     && {Work State} == {Client Work State}",
						"     && {Work Country} == {Client Work Country}",
						"     && {Strategic Work Location Ind} == {Client Strategic Work Location Ind},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddLocationMapping",
						"CreatePivotLocationAndEventTime sort(asc({Work City}, true),",
						"     asc({Work State}, true),",
						"     asc({Work Country}, true),",
						"     asc({Client ID}, true),",
						"     asc({Client Engagement Date}, true)) ~> SortOnLocation",
						"AddLocationMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Event Code},",
						"          {Event Type},",
						"          {Rehire Indicator},",
						"          {Event Reason},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          EmpCount,",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Client Work Country},",
						"          {Client Work State},",
						"          {Client Work City},",
						"          {Elloree Region} = {Elloree Work Region},",
						"          {Elloree Work Country},",
						"          {Elloree Work State},",
						"          {Elloree Work City},",
						"          {Elloree Location Sort} = {Elloree Location Sort Id},",
						"          {Elloree Strategic Location}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Location.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_ManagerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Identify Manager IDs that are not represented as an employee in any headcount activity.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputMgrCountbyEvent",
							"description": "Output pivot table to audit folder."
						}
					],
					"transformations": [
						{
							"name": "IdentifyMgrsNotInHCT"
						},
						{
							"name": "pivotCountMgrsByEvent",
							"description": "Pivot table displaying counts by manager and event for manager IDs that do not exist in headcount."
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "sort1"
						},
						{
							"name": "AllHeadcountData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"AllCoreData, AllHeadcountData exists(AllCoreData@{Direct Manager Worker ID} ==CoreForHCT@{Worker ID},",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'left')~> IdentifyMgrsNotInHCT",
						"SortOnEvent pivot(groupBy({Direct Manager Worker ID},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Direct Manager Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotCountMgrsByEvent",
						"IdentifyMgrsNotInHCT derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"pivotCountMgrsByEvent sort(asc({Direct Manager Worker ID}, true)) ~> sort1",
						"CoreForHCT filter({Event Code}=='HCT') ~> AllHeadcountData",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Managers Not In HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMgrCountbyEvent"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_NullValue')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData",
							"description": "Import all core data.  This workflow identifies the number of null values are in each column by event type."
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"AllCoreData derive({Event Year - Null or N/A} = iif(isNull({Event Year}), 1,0),",
						"          {Event Date  - Null} = iif(isNull({Event Date}), 1,0),",
						"          {Event - Null} = iif(isNull(Event), 1,0),",
						"          {Event Type - Null} = iif(isNull({Event Type}), 1,0),",
						"          {Event Reason - Null} = iif(isNull({Event Reason}), 1,0),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}), 1,0),",
						"          {Worker Status - Null} = iif(isNull({Worker Status}), 1,0),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}), 1,0),",
						"          {Job Title - Null} = iif(isNull({Job Title}), 1,0),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}), 1,0),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}), 1,0),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}), 1,0),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}), 1,0),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}), 1,0),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}), 1,0),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}), 1,0),",
						"          {Work City - Null} = iif(isNull({Work City}), 1,0),",
						"          {Work State - Null} = iif(isNull({Work State}), 1,0),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}), 1,0),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}), 1,0),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}), 1,0),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}), 1,0),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}), 1,0),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}), 1,0),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}), 1,0),",
						"          {Race - Null} = iif(isNull(Race), 1,0),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender), 1,0),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}), 1,0),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ), 1,0),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}), 1,0),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null or N/A}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Event Reason - Null} = sum({Event Reason - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Status - Null} = sum({Worker Status - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office Location - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy(Event),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          Event,",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Event Reason} = {Event Reason - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Status} = {Worker Status - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office Location} = {Work Office Location - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Null Review.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Applicants')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
						"          {Applicant ID - Null} = iif(isNull({Applicant ID}),1,iif({Applicant ID}=='N/A',1,0)),",
						"          {Source - Null} = iif(isNull(Source),1,iif(Source=='N/A',1,0)),",
						"          {Applicant Type - Null} = iif(isNull({Applicant Type}),1,iif({Applicant Type}=='N/A',1,0)),",
						"          {Internal Worker ID - Null} = iif(isNull({Internal Worker ID}),1,iif({Internal Worker ID}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Applicant Final Disposition - Null} = iif(isNull({Applicant Final Disposition}),1,iif({Applicant Final Disposition}=='N/A',1,0)),",
						"          {Applicant Step Before Final Disposition - Null} = iif(isNull({Applicant Step Before Final Disposition}),1,iif({Applicant Step Before Final Disposition}=='N/A',1,0)),",
						"          {Applicant Rejected Reason - Null} = iif(isNull({Applicant Rejected Reason}),1,iif({Applicant Rejected Reason}=='N/A',1,0)),",
						"          {Applicant Other (1) - Null} = iif(isNull({Applicant Other (1)}),1,iif({Applicant Other (1)}=='N/A',1,0)),",
						"          {Applicant Other (2) - Null} = iif(isNull({Applicant Other (2)}),1,iif({Applicant Other (2)}=='N/A',1,0)),",
						"          {Applicant Other (3) - Null} = iif(isNull({Applicant Other (3)}),1,iif({Applicant Other (3)}=='N/A',1,0)),",
						"          {Applicant Other (4) - Null} = iif(isNull({Applicant Other (4)}),1,iif({Applicant Other (4)}=='N/A',1,0)),",
						"          {Applicant Other (5) - Null} = iif(isNull({Applicant Other (5)}),1,iif({Applicant Other (5)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'APP') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
						"          {Applicant ID - Null} = sum({Applicant ID - Null}),",
						"          {Source - Null} = sum({Source - Null}),",
						"          {Applicant Type - Null} = sum({Applicant Type - Null}),",
						"          {Internal Worker ID - Null} = sum({Internal Worker ID - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Applicant Final Disposition - Null} = sum({Applicant Final Disposition - Null}),",
						"          {Applicant Step Before Final Disposition - Null} = sum({Applicant Step Before Final Disposition - Null}),",
						"          {Applicant Rejected Reason - Null} = sum({Applicant Rejected Reason - Null}),",
						"          {Applicant Other (1) - Null} = sum({Applicant Other (1) - Null}),",
						"          {Applicant Other (2) - Null} = sum({Applicant Other (2) - Null}),",
						"          {Applicant Other (3) - Null} = sum({Applicant Other (3) - Null}),",
						"          {Applicant Other (4) - Null} = sum({Applicant Other (4) - Null}),",
						"          {Applicant Other (5) - Null} = sum({Applicant Other (5) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Requisition ID} = {Requisition ID - Null},",
						"          {Applicant ID} = {Applicant ID - Null},",
						"          Source = {Source - Null},",
						"          {Applicant Type} = {Applicant Type - Null},",
						"          {Internal Worker ID} = {Internal Worker ID - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Applicant Final Disposition} = {Applicant Final Disposition - Null},",
						"          {Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition - Null},",
						"          {Applicant Rejected Reason} = {Applicant Rejected Reason - Null},",
						"          {Applicant Other (1)} = {Applicant Other (1) - Null},",
						"          {Applicant Other (2)} = {Applicant Other (2) - Null},",
						"          {Applicant Other (3)} = {Applicant Other (3) - Null},",
						"          {Applicant Other (4)} = {Applicant Other (4) - Null},",
						"          {Applicant Other (5)} = {Applicant Other (5) - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Applicants.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Headcount')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHeadcount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "HeadcountFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHeadcount",
						"HeadcountFilter derive({Event Year - Null or N/A} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Status - Null} = iif(isNull({Worker Status}),1,iif({Worker Status}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}),1,iif({Years in Job}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          {Generation Sort ID - Null} = iif(isNull({Generation Sort ID}),1,iif({Generation Sort ID}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null or N/A}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Status - Null} = sum({Worker Status - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Generation Sort ID - Null} = sum({Generation Sort ID - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Status} = {Worker Status - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Generation Sort ID} = {Generation Sort ID - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreHeadcount filter({Event Code}=='HCT') ~> HeadcountFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Headcount.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Hires')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHires"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "HiresFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHires",
						"HiresFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Rehire Indicator - Null} = iif(isNull({Rehire Indicator}),1,iif({Rehire Indicator}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Rehire Indicator - Null} = sum({Rehire Indicator - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Rehire Indicator} = {Rehire Indicator - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreHires filter({Event Code}=='HIR') ~> HiresFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Hires.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Other')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event (Type) - Null} = iif(isNull({Event (Type)}),1,iif({Event (Type)}=='N/A',1,0)),",
						"          {Event (Desc) - Null} = iif(isNull({Event (Desc)}),1,iif({Event (Desc)}=='N/A',1,0)),",
						"          {Other (Char Value 1) - Null} = iif(isNull({Other (Char Value 1)}),1,iif({Other (Char Value 1)}=='N/A',1,0)),",
						"          {Other (Char Value 2) - Null} = iif(isNull({Other (Char Value 2)}),1,iif({Other (Char Value 2)}=='N/A',1,0)),",
						"          {Other (Num Value 1) - Null} = iif(isNull({Other (Num Value 1)}),1,iif({Other (Num Value 2)}=='N/A',1,0)),",
						"          {Other (Num Value 2) - Null} = iif(isNull({Other (Num Value 2)}),1,iif({Other (Num Value 2)}=='N/A',1,0)),",
						"          {Other (Date Value 1) - Null} = iif(isNull({Other (Date Value 1)}),1,iif({Other (Date Value 1)}=='N/A',1,0)),",
						"          {Other (Date Value 2) - Null} = iif(isNull({Other (Date Value 2)}),1,iif({Other (Date Value 2)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'OTH') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event (Type) - Null} = sum({Event (Type) - Null}),",
						"          {Event (Desc) - Null} = sum({Event (Desc) - Null}),",
						"          {Other (Char Value 1) - Null} = sum({Other (Char Value 1) - Null}),",
						"          {Other (Char Value 2) - Null} = sum({Other (Char Value 2) - Null}),",
						"          {Other (Num Value 1) - Null} = sum({Other (Num Value 1) - Null}),",
						"          {Other (Num Value 2) - Null} = sum({Other (Num Value 2) - Null}),",
						"          {Other (Date Value 1) - Null} = sum({Other (Date Value 1) - Null}),",
						"          {Other (Date Value 2) - Null} = sum({Other (Date Value 2) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          {Event (Type)} = {Event (Type) - Null},",
						"          {Event (Desc)} = {Event (Desc) - Null},",
						"          {Other (Char Value 1)} = {Other (Char Value 1) - Null},",
						"          {Other (Char Value 2)} = {Other (Char Value 2) - Null},",
						"          {Other (Num Value 1)} = {Other (Num Value 1) - Null},",
						"          {Other (Num Value 2)} = {Other (Num Value 2) - Null},",
						"          {Other (Date Value 1)} = {Other (Date Value 1) - Null},",
						"          {Other (Date Value 2)} = {Other (Date Value 2) - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Other.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Promotions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CorePromotions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "PromotionsFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorePromotions",
						"PromotionsFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Previous Job Title - Null} = iif(isNull({Previous Job Title}),1,iif({Previous Job Title}=='N/A',1,0)),",
						"          {Previous Job Family/Function - Null} = iif(isNull({Previous Job Family/Function}),1,iif({Previous Job Family/Function}=='N/A',1,0)),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}),1,iif({Years in Job}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Previous Corporate Title - Null} = iif(isNull({Previous Corporate Title}),1,iif({Previous Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Previous Job Title - Null} = sum({Previous Job Title - Null}),",
						"          {Previous Job Family/Function - Null} = sum({Previous Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Previous Corporate Title - Null} = sum({Previous Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Previous Job Title} = {Previous Job Title - Null},",
						"          {Previous Job Family/Function} = {Previous Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Previous Corporate Title} = {Previous Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CorePromotions filter({Event Code}=='PRO') ~> PromotionsFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Promotions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Requisitions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
						"          {Requisition Type - Null} = iif(isNull({Requisition Type}),1,iif({Requisition Type}=='N/A',1,0)),",
						"          {Posting Date - Null} = iif(isNull({Posting Date}),1,iif({Posting Date}=='N/A',1,0)),",
						"          {Requisition Status - Null} = iif(isNull({Requisition Status}),1,iif({Requisition Status}=='N/A',1,0)),",
						"          {Number of Openings - Null} = iif(isNull({Number of Openings}),1,iif({Number of Openings}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Function - Null} = iif(isNull({Job Function}),1,iif({Job Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work Office City}),1,iif({Work Office City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work Office State}),1,iif({Work Office State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Office Country}),1,iif({Work Office Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Hiring Manager Worker ID - Null} = iif(isNull({Hiring Manager Worker ID}),1,iif({Hiring Manager Worker ID}=='N/A',1,0)),",
						"          {Primary Recruiter Worker ID - Null} = iif(isNull({Primary Recruiter Worker ID}),1,iif({Primary Recruiter Worker ID}=='N/A',1,0)),",
						"          {Requisition Other (1) - Null} = iif(isNull({Requisition Other (1)}),1,iif({Requisition Other (1)}=='N/A',1,0)),",
						"          {Requisition Other (2) - Null} = iif(isNull({Requisition Other (2)}),1,iif({Requisition Other (2)}=='N/A',1,0)),",
						"          {Requisition Other (3) - Null} = iif(isNull({Requisition Other (3)}),1,iif({Requisition Other (3)}=='N/A',1,0)),",
						"          {Requisition Other (4) - Null} = iif(isNull({Requisition Other (4)}),1,iif({Requisition Other (4)}=='N/A',1,0)),",
						"          {Requisition Other (5) - Null} = iif(isNull({Requisition Other (5)}),1,iif({Requisition Other (5)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'REQ') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
						"          {Requisition Type - Null} = sum({Requisition Type - Null}),",
						"          {Posting Date - Null} = sum({Posting Date - Null}),",
						"          {Requisition Status - Null} = sum({Requisition Status - Null}),",
						"          {Number of Openings - Null} = sum({Number of Openings - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Function - Null} = sum({Job Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Hiring Manager Worker ID - Null} = sum({Hiring Manager Worker ID - Null}),",
						"          {Primary Recruiter Worker ID - Null} = sum({Primary Recruiter Worker ID - Null}),",
						"          {Requisition Other (1) - Null} = sum({Requisition Other (1) - Null}),",
						"          {Requisition Other (2) - Null} = sum({Requisition Other (2) - Null}),",
						"          {Requisition Other (3) - Null} = sum({Requisition Other (2) - Null}),",
						"          {Requisition Other (4) - Null} = sum({Requisition Other (4) - Null}),",
						"          {Requisition Other (5) - Null} = sum({Requisition Other (5) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Requisition ID} = {Requisition ID - Null},",
						"          {Requisition Type} = {Requisition Type - Null},",
						"          {Posting Date} = {Posting Date - Null},",
						"          {Requisition Status} = {Requisition Status - Null},",
						"          {Number of Openings} = {Number of Openings - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Function} = {Job Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          {Hiring Manager Worker ID} = {Hiring Manager Worker ID - Null},",
						"          {Primary Recruiter Worker ID} = {Primary Recruiter Worker ID - Null},",
						"          {Requisition Other (1)} = {Requisition Other (1) - Null},",
						"          {Requisition Other (2)} = {Requisition Other (2) - Null},",
						"          {Requisition Other (3)} = {Requisition Other (3) - Null},",
						"          {Requisition Other (4)} = {Requisition Other (4) - Null},",
						"          {Requisition Other (5)} = {Requisition Other (5) - Null},",
						"          {Total Records},",
						"          {Event Review}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Requisitions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_TalentAssessment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTalent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTalent",
						"CoreTalent derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Performance Rating - Null} = iif(isNull({Performance Rating}),1,iif({Performance Rating}=='N/A',1,0)),",
						"          {Performance Rating Date - Null} = iif(isNull({Performance Rating Date}), 1,0),",
						"          {Talent Identifier (1) - Null} = iif(isNull({Talent Identifier (1)}),1,iif({Talent Identifier (1)}=='N/A',1,0)),",
						"          {Talent Identifier (2) - Null} = iif(isNull({Talent Identifier (2)}),1,iif({Talent Identifier (2)}=='N/A',1,0)),",
						"          {Talent Identifier (3) - Null} = iif(isNull({Talent Identifier (3)}),1,iif({Talent Identifier (3)}=='N/A',1,0)),",
						"          {Talent Identifier (4) - Null} = iif(isNull({Talent Identifier (4)}),1,iif({Talent Identifier (4)}=='N/A',1,0)),",
						"          {Talent Identifier (5) - Null} = iif(isNull({Talent Identifier (5)}),1,iif({Talent Identifier (5)}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Performance Rating - Null} = sum({Performance Rating - Null}),",
						"          {Performance Rating Date - Null} = sum({Performance Rating Date - Null}),",
						"          {Talent Identifier (1) - Null} = sum({Talent Identifier (1) - Null}),",
						"          {Talent Identifier (2) - Null} = sum({Talent Identifier (2) - Null}),",
						"          {Talent Identifier (3) - Null} = sum({Talent Identifier (3) - Null}),",
						"          {Talent Identifier (4) - Null} = sum({Talent Identifier (4) - Null}),",
						"          {Talent Identifier (5) - Null} = sum({Talent Identifier (5) - Null}),",
						"          Total = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Performance Rating} = {Performance Rating - Null},",
						"          {Performance Rating Date} = {Performance Rating Date - Null},",
						"          {Talent Identifier (1)} = {Talent Identifier (1) - Null},",
						"          {Talent Identifier (2)} = {Talent Identifier (2) - Null},",
						"          {Talent Identifier (3)} = {Talent Identifier (3) - Null},",
						"          {Talent Identifier (4) } = {Talent Identifier (4) - Null},",
						"          {Talent Identifier (5)} = {Talent Identifier (5) - Null},",
						"          {Total Records} = Total",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Talent Assessment.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Terminations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "TerminationsFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTerminations",
						"TerminationsFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Event Reason - Null} = iif(isNull({Event Reason}),1,iif({Event Reason}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreTerminations filter({Event Code}=='TER') ~> TerminationsFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Terminations.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of performance values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_PerformanceRating",
								"type": "DatasetReference"
							},
							"name": "PerformanceMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputPeerformanceReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotPerformanceAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddPerformanceMapping"
						},
						{
							"name": "SortOnRating"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Performance Rating} as string,",
						"          {Elloree Performance Rating} as string,",
						"          {Elloree Performance Rating Sort} as string,",
						"          {Suggested Elloree Performance Rating} as string,",
						"          {Suggested Elloree Performane Rating Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Talent Assessment} as string,",
						"          {2018 Talent Assessment} as string,",
						"          {2019 Talent Assessment} as string,",
						"          {2020 Talent Assessment} as string,",
						"          {2021 Talent Assessment} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerformanceMapping",
						"SortOnEvent pivot(groupBy({Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotPerformanceAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, PerformanceMapping join({Performance Rating} == {Client Performance Rating},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddPerformanceMapping",
						"CreatePivotPerformanceAndEventTime sort(asc({Performance Rating}, true),",
						"     asc({Elloree Performance Rating}, true)) ~> SortOnRating",
						"AddPerformanceMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)},",
						"          {Client ID} = PerformanceMapping@{Client ID},",
						"          {Client Engagement Date} = PerformanceMapping@{Client Engagement Date},",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performane Rating Sort Id},",
						"          {Suggested Source},",
						"          {2017 Talent Assessment},",
						"          {2018 Talent Assessment},",
						"          {2019 Talent Assessment},",
						"          {2020 Talent Assessment},",
						"          {2021 Talent Assessment}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"SortOnRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Performance.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPeerformanceReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Template_Column_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "TalentAssessment"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Headcount",
								"type": "DatasetReference"
							},
							"name": "HeadcountColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Hires",
								"type": "DatasetReference"
							},
							"name": "HiresColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Terminations",
								"type": "DatasetReference"
							},
							"name": "TerminationsColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Promotions",
								"type": "DatasetReference"
							},
							"name": "PromotionsColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_TalentAssessmentColumnMapping",
								"type": "DatasetReference"
							},
							"name": "TalentAssessmentColumnMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputColumnSummaryReview"
						}
					],
					"transformations": [
						{
							"name": "UnpivotToTransposeHCTColumnNames"
						},
						{
							"name": "SelectOnlyHCTColumnNameField"
						},
						{
							"name": "SelectUniqueHCTColumnRows"
						},
						{
							"name": "UnpivotToTransposeTermColumnNames"
						},
						{
							"name": "SelectUniqueTermColumnRows"
						},
						{
							"name": "SelectOnlyTermColumnNameField"
						},
						{
							"name": "UnpivotToTransposePromoColumnNames"
						},
						{
							"name": "SelectUniquePromoColumnRows"
						},
						{
							"name": "SelectOnlyPromoColumnNameField"
						},
						{
							"name": "UnpivotToTransposeHireColumnNames"
						},
						{
							"name": "SelectUniqueHireColumnRows"
						},
						{
							"name": "SelectOnlyHireColumnNameField"
						},
						{
							"name": "UnpivotToTransposeTalentAssessmentColumnNames"
						},
						{
							"name": "SelectUniqueTalentAssessmentColumnRows"
						},
						{
							"name": "SelectOnlyTalentAssessmentColumnNameField"
						},
						{
							"name": "HeadcountColumnJoinToMapping"
						},
						{
							"name": "HiresColumnJoinToMapping"
						},
						{
							"name": "TerminationsColumnJoinToMapping"
						},
						{
							"name": "PromotionsColumnJoinToMapping"
						},
						{
							"name": "TalentAssessmentColumnJoinToMapping"
						},
						{
							"name": "AddHCTColumnDescription"
						},
						{
							"name": "AddTermColumnDescription"
						},
						{
							"name": "AddPromoColumnDescription"
						},
						{
							"name": "AddHireColumnDescription"
						},
						{
							"name": "AddTalentAssessmentColumnDescription"
						},
						{
							"name": "AddHCTDerivedColumnForAggGrouping"
						},
						{
							"name": "AddTermDerivedColumnForAggGrouping"
						},
						{
							"name": "AddPromoDerivedColumnForAggGrouping"
						},
						{
							"name": "AddHireDerivedColumnForAggGrouping"
						},
						{
							"name": "AddTalentAssessmentDerivedColumnForAggGrouping"
						},
						{
							"name": "SelectHeadcountSummary"
						},
						{
							"name": "SelectTerminationSummary"
						},
						{
							"name": "SelectPromotionSummary"
						},
						{
							"name": "SelectHireSummary"
						},
						{
							"name": "SelectTalentAssessmentSummary"
						},
						{
							"name": "UnionAllEventColumnSummaries"
						},
						{
							"name": "SortEvents"
						},
						{
							"name": "HeadcountRemoveClientRefColumn"
						},
						{
							"name": "TerminationsRemoveClientRefColumn"
						},
						{
							"name": "PromotionsRemoveClientRefColumn"
						},
						{
							"name": "HiresRemoveClientRefColumn"
						},
						{
							"name": "TalentRemoveClientRefColumn"
						},
						{
							"name": "sort1"
						},
						{
							"name": "sort2"
						},
						{
							"name": "sort3"
						},
						{
							"name": "sort4"
						},
						{
							"name": "sort6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years in Job} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TalentAssessment",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HeadcountColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HiresColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TerminationsColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PromotionsColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TalentAssessmentColumnMapping",
						"AddHCTDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeHCTColumnNames",
						"SelectUniqueHCTColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyHCTColumnNameField",
						"UnpivotToTransposeHCTColumnNames aggregate(groupBy({Column Name} = Column),",
						"     {Total Count} = count(Column)) ~> SelectUniqueHCTColumnRows",
						"AddTermDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeTermColumnNames",
						"UnpivotToTransposeTermColumnNames aggregate(groupBy({Column Name} = Column),",
						"     {Total Count} = count(Column)) ~> SelectUniqueTermColumnRows",
						"SelectUniqueTermColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTermColumnNameField",
						"AddPromoDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposePromoColumnNames",
						"UnpivotToTransposePromoColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniquePromoColumnRows",
						"SelectUniquePromoColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyPromoColumnNameField",
						"AddHireDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeHireColumnNames",
						"UnpivotToTransposeHireColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueHireColumnRows",
						"SelectUniqueHireColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyHireColumnNameField",
						"AddTalentAssessmentDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeTalentAssessmentColumnNames",
						"UnpivotToTransposeTalentAssessmentColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueTalentAssessmentColumnRows",
						"SelectUniqueTalentAssessmentColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTalentAssessmentColumnNameField",
						"SelectOnlyHCTColumnNameField, HeadcountColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HeadcountColumnJoinToMapping",
						"SelectOnlyHireColumnNameField, HiresColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HiresColumnJoinToMapping",
						"SelectOnlyTermColumnNameField, TerminationsColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TerminationsColumnJoinToMapping",
						"SelectOnlyPromoColumnNameField, PromotionsColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PromotionsColumnJoinToMapping",
						"SelectOnlyTalentAssessmentColumnNameField, TalentAssessmentColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TalentAssessmentColumnJoinToMapping",
						"HeadcountColumnJoinToMapping derive({Event Template} = 'Headcount') ~> AddHCTColumnDescription",
						"TerminationsColumnJoinToMapping derive({Event Template} = 'Terminations') ~> AddTermColumnDescription",
						"PromotionsColumnJoinToMapping derive({Event Template} = 'Promotions') ~> AddPromoColumnDescription",
						"HiresColumnJoinToMapping derive({Event Template} = 'Hires') ~> AddHireColumnDescription",
						"TalentAssessmentColumnJoinToMapping derive({Event Template} = 'Talent Assessment') ~> AddTalentAssessmentColumnDescription",
						"HeadcountRemoveClientRefColumn derive({Event Sheet} = 'Headcount') ~> AddHCTDerivedColumnForAggGrouping",
						"TerminationsRemoveClientRefColumn derive({Event Sheet} = 'Terminations') ~> AddTermDerivedColumnForAggGrouping",
						"PromotionsRemoveClientRefColumn derive({Event Sheet} = 'Promotions') ~> AddPromoDerivedColumnForAggGrouping",
						"HiresRemoveClientRefColumn derive({Event Sheet} = 'Hires') ~> AddHireDerivedColumnForAggGrouping",
						"TalentRemoveClientRefColumn derive({Event Sheet} = 'Talent Assessment') ~> AddTalentAssessmentDerivedColumnForAggGrouping",
						"sort6 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHeadcountSummary",
						"sort1 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminationSummary",
						"sort2 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromotionSummary",
						"sort3 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHireSummary",
						"sort4 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentAssessmentSummary",
						"SelectHeadcountSummary, SelectTerminationSummary, SelectPromotionSummary, SelectHireSummary, SelectTalentAssessmentSummary union(byName: true)~> UnionAllEventColumnSummaries",
						"UnionAllEventColumnSummaries sort(asc({Event Template}, true)) ~> SortEvents",
						"Headcount select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HeadcountRemoveClientRefColumn",
						"Terminations select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TerminationsRemoveClientRefColumn",
						"Promotions select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PromotionsRemoveClientRefColumn",
						"Hires select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HiresRemoveClientRefColumn",
						"TalentAssessment select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Top Performer},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TalentRemoveClientRefColumn",
						"AddTermColumnDescription sort(asc({Sort Id}, true)) ~> sort1",
						"AddPromoColumnDescription sort(asc({Sort Id}, true)) ~> sort2",
						"AddHireColumnDescription sort(asc({Sort Id}, true)) ~> sort3",
						"AddTalentAssessmentColumnDescription sort(asc({Sort Id}, true)) ~> sort4",
						"AddHCTColumnDescription sort(asc({Sort Id}, true)) ~> sort6",
						"SortEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Column Review Core.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputColumnSummaryReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Template_Column_TA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Requisition",
								"type": "DatasetReference"
							},
							"name": "RequisitionColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Req_Test",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicanrColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ReqRemoveClientRefColumn"
						},
						{
							"name": "AddReqDerivedColumnForAggGrouping"
						},
						{
							"name": "UnpivotToTransposeReqColumnNames"
						},
						{
							"name": "SelectUniqueReqColumnRows"
						},
						{
							"name": "SelectOnlyReqColumnNameField"
						},
						{
							"name": "ReqColumnJoinToMapping"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectReqSummary"
						},
						{
							"name": "sort1"
						},
						{
							"name": "AppliantRemoveClientRefColumn"
						},
						{
							"name": "AddApplicantsDerivedColumnForAggGrouping"
						},
						{
							"name": "UnpivotToTransposeApplColumnNames"
						},
						{
							"name": "SelectUniqueApplColumnRows"
						},
						{
							"name": "SelectOnlyApplColumnNameField"
						},
						{
							"name": "ApplColumnJoinToMapping"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectApplSummary"
						},
						{
							"name": "sort2"
						},
						{
							"name": "union1"
						},
						{
							"name": "sort3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RequisitionColumnMapping",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicanrColumnMapping",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Requisitions select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReqRemoveClientRefColumn",
						"ReqRemoveClientRefColumn derive({Event Sheet} = 'Requisitions') ~> AddReqDerivedColumnForAggGrouping",
						"AddReqDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeReqColumnNames",
						"UnpivotToTransposeReqColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueReqColumnRows",
						"SelectUniqueReqColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyReqColumnNameField",
						"SelectOnlyReqColumnNameField, RequisitionColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ReqColumnJoinToMapping",
						"ReqColumnJoinToMapping derive({Event Template} = 'Requisitions') ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqSummary",
						"SelectReqSummary sort(asc({Sort Id}, true)) ~> sort1",
						"Applicants select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AppliantRemoveClientRefColumn",
						"AppliantRemoveClientRefColumn derive({Event Sheet} = 'Applicants') ~> AddApplicantsDerivedColumnForAggGrouping",
						"AddApplicantsDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeApplColumnNames",
						"UnpivotToTransposeApplColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueApplColumnRows",
						"SelectUniqueApplColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyApplColumnNameField",
						"SelectOnlyApplColumnNameField, ApplicanrColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ApplColumnJoinToMapping",
						"ApplColumnJoinToMapping derive({Event Template} = 'Applicants') ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          {Client Column},",
						"          {Sort Id},",
						"          {Column Name},",
						"          {Event Template}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplSummary",
						"SelectApplSummary sort(asc({Sort Id}, true)) ~> sort2",
						"sort1, sort2 union(byName: true)~> union1",
						"union1 sort(asc({Event Template}, true)) ~> sort3",
						"sort3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Column Review TA.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_WorkerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow takes unique IDs from each core event table and compares to unique worker IDs from all headcount to identify IDs not in headcount.  Results could highlight an issue with ID anonymization.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTotalSummary"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTermIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputPromoIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTalentIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputHireIDsNotInHeadcount"
						}
					],
					"transformations": [
						{
							"name": "SelectUniqueWorkerIDTerminations"
						},
						{
							"name": "SelectAllEmpIDsInTerminations"
						},
						{
							"name": "SelectUniqueEmpIDHeadcount"
						},
						{
							"name": "SelectAllEmpIDsInHeadcount"
						},
						{
							"name": "SelectTermIDsNotInHeadcount"
						},
						{
							"name": "AggregateTermIDsNotInHeadcount"
						},
						{
							"name": "TotalIDsInHeadcount"
						},
						{
							"name": "CombineHeadcountAndTermIDCounts"
						},
						{
							"name": "TagEventCheckForTerms"
						},
						{
							"name": "DisplayTotalTermIDsVSTotalHeadcount"
						},
						{
							"name": "SelectUniqueWorkerIDPromotions"
						},
						{
							"name": "SelectAllEmpIDsInPromotions"
						},
						{
							"name": "SelectPromoIDsNotInHeadcount"
						},
						{
							"name": "AggregatePromoIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndPromoIDCounts"
						},
						{
							"name": "TagEventCheckForPromos"
						},
						{
							"name": "DisplayTotalPromoIDsVSTotalHeadcount"
						},
						{
							"name": "CombineTotalWorkerIDSummaryAllEvents"
						},
						{
							"name": "SelectUniqueWorkerIDTalent"
						},
						{
							"name": "SelectAllEmpIDsInTalent"
						},
						{
							"name": "SelectTalentIDsNotInHeadcount"
						},
						{
							"name": "AggregateTalentIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndTalentIDCounts"
						},
						{
							"name": "TagEventCheckForTalent"
						},
						{
							"name": "DisplayTotalTalentIDsVSTotalHeadcount"
						},
						{
							"name": "CountTotalTerms"
						},
						{
							"name": "TotalTermsIdentifier"
						},
						{
							"name": "JoinTotalWorkerIDEventCountsWithSummary"
						},
						{
							"name": "CountTotalPromotions"
						},
						{
							"name": "TotalPromosIdentifier"
						},
						{
							"name": "CountTotalTalent"
						},
						{
							"name": "TotalTalentIdentifier"
						},
						{
							"name": "TotalEventRecords"
						},
						{
							"name": "select1"
						},
						{
							"name": "SelectUniqueWorkerIDHires"
						},
						{
							"name": "SelectAllEmpIDsInHires"
						},
						{
							"name": "SelectHireIDsNotInHeadcount"
						},
						{
							"name": "AggregateHireIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndHireIDCounts"
						},
						{
							"name": "TagEventCheckForHires"
						},
						{
							"name": "DisplayTotalHireIDsVSTotalHeadcount"
						},
						{
							"name": "CountTotalHires"
						},
						{
							"name": "TotalHireIdentifier"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "derivedColumn5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years in Job} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"select3 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTerminations",
						"SelectUniqueWorkerIDTerminations select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTerminations",
						"select2 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> SelectUniqueEmpIDHeadcount",
						"SelectUniqueEmpIDHeadcount select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHeadcount",
						"SelectAllEmpIDsInTerminations, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTerminations@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectTermIDsNotInHeadcount",
						"SelectTermIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Terminations Not in HCT} = count({Worker ID})) ~> AggregateTermIDsNotInHeadcount",
						"SelectAllEmpIDsInHeadcount aggregate(groupBy(Event),",
						"     {Total Count} = count({Worker ID})) ~> TotalIDsInHeadcount",
						"AggregateTermIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTermIDCounts",
						"CombineHeadcountAndTermIDCounts derive({Event Check} = 'Terminations') ~> TagEventCheckForTerms",
						"TagEventCheckForTerms aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Terminations Not in HCT})) ~> DisplayTotalTermIDsVSTotalHeadcount",
						"select4 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDPromotions",
						"SelectUniqueWorkerIDPromotions select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInPromotions",
						"SelectAllEmpIDsInPromotions, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInPromotions@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectPromoIDsNotInHeadcount",
						"SelectPromoIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Promotions Not in HCT} = count({Worker ID})) ~> AggregatePromoIDsNotInHeadcount",
						"AggregatePromoIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndPromoIDCounts",
						"CombineHeadcountAndPromoIDCounts derive({Event Check} = 'Promotions') ~> TagEventCheckForPromos",
						"TagEventCheckForPromos aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Promotions Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalPromoIDsVSTotalHeadcount",
						"DisplayTotalTermIDsVSTotalHeadcount, DisplayTotalPromoIDsVSTotalHeadcount, DisplayTotalTalentIDsVSTotalHeadcount, DisplayTotalHireIDsVSTotalHeadcount union(byName: true)~> CombineTotalWorkerIDSummaryAllEvents",
						"select5 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTalent",
						"SelectUniqueWorkerIDTalent select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTalent",
						"SelectAllEmpIDsInTalent, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTalent@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectTalentIDsNotInHeadcount",
						"SelectTalentIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Talent Not in HCT} = count({Worker ID})) ~> AggregateTalentIDsNotInHeadcount",
						"AggregateTalentIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTalentIDCounts",
						"CombineHeadcountAndTalentIDCounts derive({Event Check} = 'Talent') ~> TagEventCheckForTalent",
						"TagEventCheckForTalent aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Talent Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalTalentIDsVSTotalHeadcount",
						"SelectAllEmpIDsInTerminations aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTerms",
						"CountTotalTerms derive({Event Check} = 'Terminations') ~> TotalTermsIdentifier",
						"CombineTotalWorkerIDSummaryAllEvents, TotalEventRecords join(CombineTotalWorkerIDSummaryAllEvents@{Event Check} == TotalEventRecords@{Event Check},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotalWorkerIDEventCountsWithSummary",
						"SelectAllEmpIDsInPromotions aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalPromotions",
						"CountTotalPromotions derive({Event Check} = 'Promotions') ~> TotalPromosIdentifier",
						"SelectAllEmpIDsInTalent aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTalent",
						"CountTotalTalent derive({Event Check} = 'Talent') ~> TotalTalentIdentifier",
						"TotalTermsIdentifier, TotalPromosIdentifier, TotalTalentIdentifier, TotalHireIdentifier union(byName: true)~> TotalEventRecords",
						"JoinTotalWorkerIDEventCountsWithSummary select(mapColumn(",
						"          Event = CombineTotalWorkerIDSummaryAllEvents@{Event Check},",
						"          {Total IDs Not in HCT},",
						"          {Total Unique Worker ID's in Event} = {Total Event Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select6 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDHires",
						"SelectUniqueWorkerIDHires select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHires",
						"SelectAllEmpIDsInHires, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInHires@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SelectHireIDsNotInHeadcount",
						"SelectHireIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Hires Not in HCT} = count({Worker ID})) ~> AggregateHireIDsNotInHeadcount",
						"AggregateHireIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndHireIDCounts",
						"CombineHeadcountAndHireIDCounts derive({Event Check} = 'Hire') ~> TagEventCheckForHires",
						"TagEventCheckForHires aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Hires Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalHireIDsVSTotalHeadcount",
						"SelectAllEmpIDsInHires aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalHires",
						"CountTotalHires derive({Event Check} = 'Hire') ~> TotalHireIdentifier",
						"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
						"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
						"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
						"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
						"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter5",
						"derivedColumn1 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn2 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"derivedColumn3 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn4 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Top Performer},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"derivedColumn5 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"filter1 derive(Event = 'Headcount') ~> derivedColumn1",
						"filter2 derive(Event = 'Terminations') ~> derivedColumn2",
						"filter3 derive(Event = 'Promotions') ~> derivedColumn3",
						"filter4 derive(Event = 'Talent') ~> derivedColumn4",
						"filter5 derive(Event = 'Hires') ~> derivedColumn5",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker ID Review Summary.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTotalSummary",
						"SelectTermIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Terms Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTermIDsNotInHeadcount",
						"SelectPromoIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Promos Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPromoIDsNotInHeadcount",
						"SelectTalentIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Talent Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTalentIDsNotInHeadcount",
						"SelectHireIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Hires Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputHireIDsNotInHeadcount"
					]
				}
			},
			"dependsOn": []
		}
	]
}