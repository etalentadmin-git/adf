{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "LocationMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotLocationAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnLocation"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "SelectReq"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "FilterOutNullHCTEventRows"
						},
						{
							"name": "FilterOutNullReqEventRows"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "RemoveDupRows"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "SelectAppl"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "setNulltoNA"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LocationIdentifier1 as string,",
						"          LocationIdentifier2 as string,",
						"          LocationIdentifier3 as string,",
						"          LocationIdentifier4 as string,",
						"          LocationIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LocationMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State} as string,",
						"          {Applicant Country} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Work Office Location},",
						"          {Client Work City},",
						"          {Client Work State},",
						"          {Client Work Country},",
						"          {Client Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Work Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort Id},",
						"          {Suggested Elloree Work Office},",
						"          {Suggested Elloree Work City},",
						"          {Suggested Elloree Work State},",
						"          {Suggested Elloree Work Country},",
						"          {Suggested Elloree Work Region},",
						"          {Suggested Elloree Strategic Location},",
						"          {Suggested Elloree Location Sort Id},",
						"          {Suggested Source},",
						"          {Location Identifier 1},",
						"          {Location Identifier 2},",
						"          {Location Identifier 3},",
						"          {Location Identifier 4},",
						"          {Location Identifier 5}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotLocationAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotLocationAndEventTime sort(asc({Client Work Office Location}, true),",
						"     asc({Client Work City}, true),",
						"     asc({Client Work State}, true),",
						"     asc({Client Work Country}, true),",
						"     asc({Client Strategic Work Location Ind}, true)) ~> SortOnLocation",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Region} = '',",
						"          {Elloree Work Country} = '',",
						"          {Elloree Work State} = '',",
						"          {Elloree Work City} = '',",
						"          {Elloree Work Ofiice} = '',",
						"          {Elloree Location Sort} = '',",
						"          {Elloree Strategic Location} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientWorkOffice} = ClientWorkOffice,",
						"          {Unique ClientWorkCity} = ClientWorkCity,",
						"          {Unique ClientWorkState} = ClientWorkState,",
						"          {Unique ClientWorkCountry} = ClientWorkCountry,",
						"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
						"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
						"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
						"          {Unique ElloreeWorkState} = ElloreeWorkState,",
						"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
						"          {Unique  ElloreeWorkRegion} = ElloreeWorkRegion,",
						"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
						"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeRegion} = {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Work Office Location} == {Unique ClientWorkOffice}",
						"     && {Work City} == {Unique ClientWorkCity}",
						"     && {Work State} == {Unique ClientWorkState}",
						"     && {Work Country} == {Unique ClientWorkCountry}",
						"     && {Strategic Work Location Ind} == {Unique ClientStrategicLoc},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"join1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Work Office Location} = {Work Office Location},",
						"          {Client Work City} = {Work City},",
						"          {Client Work State} = {Work State},",
						"          {Client Work Country} = {Work Country},",
						"          {Client Strategic Work Location Ind} = {Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Work City} = {Unique ElloreeWorkCity},",
						"          {Suggested Elloree Work Office} = {Unique ElloreeWorkOffice},",
						"          {Suggested Elloree Work State} = {Unique ElloreeWorkState},",
						"          {Suggested Elloree Work Country} = {Unique ElloreeWorkCountry},",
						"          {Suggested Elloree Region} = {Unique ElloreeWorkRegion},",
						"          {Suggested Elloree Strategic Location} = {Unique ElloreeStrategicLoc},",
						"          {Suggested Elloree Location Sort Id} = {Unique ElloreeLocSortId},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Work Office Location} == {Unique ClientWorkOffice}",
						"     && {Client Work City} == {Unique ClientWorkCity}",
						"     && {Client Work State} == {Unique ClientWorkState}",
						"     && {Client Work Country} == {Unique ClientWorkCountry}",
						"     && {Client Strategic Work Location Ind} == {Unique ClientStrategicLoc}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"SelectFinal derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Work Office} = iif(isNull({Suggested Source}),{Unique ElloreeWorkOffice},{Suggested Elloree Work Office}),",
						"          {Suggested Elloree Work City} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCity},{Suggested Elloree Work City}),",
						"          {Suggested Elloree Work State} = iif(isNull({Suggested Source}),{Unique ElloreeWorkState},{Suggested Elloree Work State}),",
						"          {Suggested Elloree Work Country} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCountry},{Suggested Elloree Work Country}),",
						"          {Suggested Elloree Work Region} = iif(isNull({Suggested Source}),{Unique ElloreeRegion},{Suggested Elloree Work Region}),",
						"          {Suggested Elloree Strategic Location} = iif(isNull({Suggested Source}),{Unique ElloreeStrategicLoc},{Suggested Elloree Strategic Location}),",
						"          {Suggested Elloree Location Sort Id} = iif(isNull({Suggested Source}),{Unique ElloreeLocSortId},{Suggested Elloree Location Sort Id}),",
						"          {Location Identifier 1} = '',",
						"          {Location Identifier 2} = '',",
						"          {Location Identifier 3} = '',",
						"          {Location Identifier 4} = '',",
						"          {Location Identifier 5} = '') ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Work Office Location},",
						"          {Client Work City},",
						"          {Client Work State},",
						"          {Client Work Country},",
						"          {Client Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Work Region} = {Elloree Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort Id} = {Elloree Location Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Work Office},",
						"          {Suggested Elloree Work City},",
						"          {Suggested Elloree Work State},",
						"          {Suggested Elloree Work Country},",
						"          {Suggested Elloree Work Region} = {Suggested Elloree Region},",
						"          {Suggested Elloree Strategic Location},",
						"          {Suggested Elloree Location Sort Id},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutNullReqEventRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Requisition ID},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City} = {Work Office City},",
						"          {Work State} = {Work Office State},",
						"          {Work Country} = {Work Office Country},",
						"          {Strategic Work Location Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReq",
						"FilterOutNullHCTEventRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectReq, SelectAppl, selectCoreDBRecs, selectReqDBRecs union(byName: true)~> union1",
						"AllCoreData filter(not(isNull({Event Code}))) ~> FilterOutNullHCTEventRows",
						"Requisitions filter(not(isNull(Event))) ~> FilterOutNullReqEventRows",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Work Office Location} = WorkOfficeLoc,",
						"          {Work City} = WorkOfficeCity,",
						"          {Work State} = WorkOfficeState,",
						"          {Work Country} = WorkOfficeCountry,",
						"          {Strategic Work Location Ind} = WorkStrategicLocInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Work Office Location} = WorkOfficeLoc,",
						"          {Work City} = WorkOfficeCity,",
						"          {Work State} = WorkOfficeState,",
						"          {Work Country} = WorkOfficeCountry,",
						"          {Strategic Work Location Ind} = WorkStrategicLocInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
						"          {Count Unique ClientWorkCity} = {Unique ClientWorkCity},",
						"          {Count Unique ClientWorkState} = {Unique ClientWorkState},",
						"          {Count Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
						"          {Count Unique ClientStrategicLoc} = {Unique ClientStrategicLoc},",
						"          {Count Unique ElloreeWorkOffice} = {Unique ElloreeWorkOffice},",
						"          {Count Unique ElloreeWorkCity} = {Unique ElloreeWorkCity},",
						"          {Count Unique ElloreeWorkState} = {Unique ElloreeWorkState},",
						"          {Count Unique ElloreeWorkCountry} = {Unique ElloreeWorkCountry},",
						"          {Count Unique  ElloreeWorkRegion} = {Unique  ElloreeWorkRegion},",
						"          {Count Unique ElloreeStrategicLoc} = {Unique ElloreeStrategicLoc},",
						"          {Count Unique ElloreeLocSortId} = {Unique ElloreeLocSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ElloreeWorkOffice} == {Count Unique ElloreeWorkOffice}",
						"     && {Unique ElloreeWorkCity} == {Count Unique ElloreeWorkCity}",
						"     && {Unique ElloreeWorkState} == {Count Unique ElloreeWorkState}",
						"     && {Unique ElloreeWorkCountry} == {Count Unique ElloreeWorkCountry}",
						"     && {Unique  ElloreeWorkRegion} == {Count Unique  ElloreeWorkRegion}",
						"     && {Unique ElloreeStrategicLoc} == {Count Unique ElloreeStrategicLoc}",
						"     && {Unique ElloreeLocSortId} == {Count Unique ElloreeLocSortId}",
						"     && {Unique ClientWorkOffice} == {Count Unique ClientWorkOffice}",
						"     && {Unique ClientWorkCity} == {Count Unique ClientWorkCity}",
						"     && {Unique ClientWorkState} == {Count Unique ClientWorkState}",
						"     && {Unique ClientWorkCountry} == {Count Unique ClientWorkCountry}",
						"     && {Unique ClientStrategicLoc} == {Count Unique ClientStrategicLoc},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
						"          {Agg Unique ClientWorkCity} = {Unique ClientWorkCity},",
						"          {Agg Unique ClientWorkState} = {Unique ClientWorkState},",
						"          {Agg Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
						"          {Agg Unique ClientStrategicLoc} = {Unique ClientStrategicLoc}),",
						"     {Agg Unique ElloreeWorkOffice} = first({Unique ElloreeWorkOffice}),",
						"          {Agg Unique ElloreeWorkCity} = first({Unique ElloreeWorkCity}),",
						"          {Agg Unique ElloreeWorkState} = first({Unique ElloreeWorkState}),",
						"          {Agg Unique ElloreeWorkCountry} = first({Unique ElloreeWorkCountry}),",
						"          {Agg Unique ElloreeWorkRegion} = first({Unique  ElloreeWorkRegion}),",
						"          {Agg Unique ElloreeStrategicLoc} = first({Unique ElloreeStrategicLoc}),",
						"          {Agg Unique ElloreeLocSortId} = first({Unique ElloreeLocSortId})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeWorkOffice} == {Agg Unique ElloreeWorkOffice}",
						"     && {Unique ElloreeWorkCity} == {Agg Unique ElloreeWorkCity}",
						"     && {Unique ElloreeWorkState} == {Agg Unique ElloreeWorkState}",
						"     && {Unique ElloreeWorkCountry} == {Agg Unique ElloreeWorkCountry}",
						"     && {Unique  ElloreeWorkRegion} == {Agg Unique ElloreeWorkRegion}",
						"     && {Unique ElloreeStrategicLoc} == {Agg Unique ElloreeStrategicLoc}",
						"     && {Unique ElloreeLocSortId} == {Agg Unique ElloreeLocSortId}",
						"     && {Unique ClientWorkOffice} == {Agg Unique ClientWorkOffice}",
						"     && {Unique ClientWorkCity} == {Agg Unique ClientWorkCity}",
						"     && {Unique ClientWorkState} == {Agg Unique ClientWorkState}",
						"     && {Unique ClientWorkCountry} == {Agg Unique ClientWorkCountry}",
						"     && {Unique ClientStrategicLoc} == {Agg Unique ClientStrategicLoc},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"LocationMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"LocationMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientWorkOffice} = ClientWorkOffice,",
						"          {Unique ClientWorkCity} = ClientWorkCity,",
						"          {Unique ClientWorkState} = ClientWorkState,",
						"          {Unique ClientWorkCountry} = ClientWorkCountry,",
						"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
						"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
						"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
						"          {Unique ElloreeWorkState} = ElloreeWorkState,",
						"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
						"          {Unique ElloreeWorkRegion} = ElloreeWorkRegion,",
						"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
						"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"setNulltoNA aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"Applicants aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country}),",
						"     MaxId = max({Applicant ID})) ~> aggregate2",
						"derivedColumn2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Applicant ID},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City} = {Applicant City},",
						"          {Work State} = {Applicant State},",
						"          {Work Country} = {Applicant Country},",
						"          {Strategic Work Location Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAppl",
						"aggregate2 derive({Strategic Work Location Ind} = \"N/A\",",
						"          {Work Office Location} = \"N/A\") ~> derivedColumn2",
						"union1 derive({Work Office Location} = iif(isNull({Work Office Location}),\"N/A\",{Work Office Location}),",
						"          {Work City} = iif(isNull({Work City}),\"N/A\",{Work City}),",
						"          {Work State} = iif(isNull({Work State}),\"N/A\",{Work State}),",
						"          {Work Country} = iif(isNull({Work Country}),\"N/A\",{Work Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),\"N/A\",{Strategic Work Location Ind})) ~> setNulltoNA",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['location_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Performance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of performance values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerfromanceRatingMapTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseTalentRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepPerformanceMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotPerformanceAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "selectTalentDBRecs"
						},
						{
							"name": "selectTalentColumns"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectWokerDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PerfromanceRatingMapTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date,",
						"          SalaryRange as string,",
						"          Bonus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseTalentRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performance Rating Sort Id},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotPerformanceAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotPerformanceAndEventTime sort(asc({Client Performance Rating}, true)) ~> SortOnGender",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ','PER')),",
						"          {Elloree Performance Rating} = '',",
						"          {Elloree Performance Rating Sort} = '',",
						"          {Performance Rating} = iif(isNull({Performance Rating}),'N/A',{Performance Rating})) ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientPerfRating} = ClientPerfRating,",
						"          {Unique ElloreePerfRating} = ElloreePerfRating,",
						"          {Unique ElloreePerfRatingSortId} = ElloreePerfRatingSortId),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Performance Rating} == {Unique ClientPerfRating},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"join1 select(mapColumn(",
						"          {Client Performance Rating} = {Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Performance Rating} = {Unique ElloreePerfRating},",
						"          {Suggested Elloree Performance Rating Sort Id} = {Unique ElloreePerfRatingSortId},",
						"          {Worker ID} = {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Performance Rating} == {Unique ClientPerfRating}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"Select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Performance Rating} = iif(isNull({Suggested Source}),{Unique ElloreePerfRating},{Suggested Elloree Performance Rating}),",
						"          {Suggested Elloree Performance Rating Sort Id} = iif(isNull({Suggested Source}),{Unique ElloreePerfRatingSortId},{Suggested Elloree Performance Rating Sort Id})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performance Rating Sort Id},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select2",
						"selectWokerDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          Event,",
						"          {Event Year} = EventYear,",
						"          {Performance Rating} = PerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTalentDBRecs",
						"Talent select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Worker ID},",
						"          {Performance Rating}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTalentColumns",
						"selectTalentColumns, selectTalentDBRecs union(byName: true)~> union1",
						"DatabaseTalentRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          Event,",
						"          EventYear,",
						"          PerfRating),",
						"     TotalRecCount = count(WorkerId)) ~> selectWokerDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientPerfRating} = {Unique ClientPerfRating},",
						"          {Count Unique ElloreePerfRating} = {Unique ElloreePerfRating},",
						"          {Count Unique ElloreePerfRatingSortId} = {Unique ElloreePerfRatingSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientPerfRating} == {Count Unique ClientPerfRating}",
						"     && {Unique ElloreePerfRating} == {Count Unique ElloreePerfRating}",
						"     && {Unique ElloreePerfRatingSortId} == {Count Unique ElloreePerfRatingSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientPerfRating} = {Unique ClientPerfRating}),",
						"     {Agg Unique ElloreePerfRating} = first({Unique ElloreePerfRating}),",
						"          {Agg Unique ElloreePerfRatingSortId} = first({Unique ElloreePerfRatingSortId})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientPerfRating} == {Agg Unique ClientPerfRating}",
						"     && {Unique ElloreePerfRating} == {Agg Unique ElloreePerfRating}",
						"     && {Unique ElloreePerfRatingSortId} == {Agg Unique ElloreePerfRatingSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"PerfromanceRatingMapTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"PerfromanceRatingMapTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientPerfRating} = ClientPerfRating,",
						"          {Unique ElloreePerfRating} = ElloreePerfRating,",
						"          {Unique ElloreePerfRatingSortId} = ElloreePerfRatingSortId),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id},",
						"          {Performance Rating}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['perf_rating_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepPerformanceMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "AllReqData"
						},
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqStatusMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotReqStatusAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnReqStatus"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "select5"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "exists1"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllReqData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqStatusMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Suggested Elloree Requisition Status},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Requisition ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotReqStatusAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotReqStatusAndEventTime sort(asc({Client Requisition Status}, true)) ~> SortOnReqStatus",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Requisition Status} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientReqStatus} = ClientReqStatus,",
						"          {Unique ElloreeReqStatus} = ElloreeReqStatus),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Requisition Status} == {Unique ClientReqStatus},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Requisition Status} = {Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Requisition Status} = {Unique ElloreeReqStatus},",
						"          {Requisition ID} = {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, select1 join({Client ID} != {Unique ClientId}",
						"     && {Client Requisition Status} == {Unique ClientReqStatus},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Requisition Status} = iif(isNull({Suggested Source}),{Unique ClientReqStatus},{Suggested Elloree Requisition Status})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Requisition Status},",
						"          {Requisition ID},",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Requisition Status} = ReqStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"AllReqData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Requisition ID},",
						"          {Requisition Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, selectReqDBRecs union(byName: true)~> union1",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          ReqStatus),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientReqStatus} = {Unique ClientReqStatus},",
						"          {Count Unique ElloreeReqStatus} = {Unique ElloreeReqStatus}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientReqStatus} == {Count Unique ClientReqStatus}",
						"     && {Unique ElloreeReqStatus} == {Count Unique ElloreeReqStatus},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientReqStatus} = {Unique ClientReqStatus}),",
						"     {Agg Unique ElloreeReqStatus} = first({Unique ElloreeReqStatus})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientReqStatus} == {Agg Unique ClientReqStatus}",
						"     && {Unique ElloreeReqStatus} == {Agg Unique ElloreeReqStatus},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ReqStatusMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ReqStatusMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientReqStatus} = ClientReqStatus,",
						"          {Unique ElloreeReqStatus} = ElloreeReqStatus),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> exists1",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"exists1 select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id},",
						"          {Requisition Status}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnReqStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['reqstatus_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepReqStatusMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "AllReqData"
						},
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqTypeMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepReqTypeMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotReqTypeAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnReqType"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectExistingReqTypeMapping"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "select4"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllReqData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqTypeMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Suggested Elloree Requisition Type},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Requisition ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotReqTypeAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotReqTypeAndEventTime sort(asc({Client Requisition Type}, true)) ~> SortOnReqType",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Requisition Type} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientReqType} = ClientReqType,",
						"          {Unique ElloreeReqType} = ElloreeReqType),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingReqTypeMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Requisition Type} == {Unique ClientReqType},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Requisition Type} = {Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Requisition Type} = {Unique ElloreeReqType},",
						"          {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectExistingReqTypeMapping join({Client ID} != {Unique ClientId}",
						"     && {Client Requisition Type} == {Unique ClientReqType},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Requisition Type} = iif(isNull({Suggested Source}),{Unique ClientReqType},{Suggested Elloree Requisition Type})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Requisition Type},",
						"          {Requisition ID},",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Requisition ID} = ReqId,",
						"          {Requisition Type} = ReqType",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"AllReqData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, selectReqDBRecs union(byName: true)~> union1",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          ReqType),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientReqType} = {Unique ClientReqType},",
						"          {Count Unique ElloreeReqType} = {Unique ElloreeReqType}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientReqType} == {Count Unique ClientReqType}",
						"     && {Unique ElloreeReqType} == {Count Unique ElloreeReqType},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientReqType} = {Unique ClientReqType}),",
						"     {Agg Unique ElloreeReqType} = first({Unique ElloreeReqType})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientReqType} == {Agg Unique ClientReqType}",
						"     && {Unique ElloreeReqType} == {Agg Unique ElloreeReqType},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientReqType},",
						"          {Unique ElloreeReqType}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ReqTypeMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ReqTypeMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientReqType} = ClientReqType,",
						"          {Unique ElloreeReqType} = ElloreeReqType),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnReqType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['reqtype_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepReqTypeMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of veteran values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "VeteranMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepVeteranMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotVeteranAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnVeteran"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> VeteranMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Veteran},",
						"          {Elloree Veteran},",
						"          {Suggested Elloree Veteran},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotVeteranAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotVeteranAndEventTime sort(asc({Client Veteran}, true)) ~> SortOnVeteran",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Veteran} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientVeteran} = ClientVeteran,",
						"          {Unique ElloreeVeteran} = ElloreeVeteran),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Veteran Ind} == {Unique ClientVeteran},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Veteran} = {Veteran Ind},",
						"          {Elloree Veteran},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Veteran} = {Unique ElloreeVeteran},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Veteran} == {Unique ClientVeteran},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Veteran} = iif(isNull({Suggested Source}),{Unique ClientVeteran},{Suggested Elloree Veteran})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Veteran},",
						"          {Elloree Veteran},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Veteran},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Veteran Ind} = Veteran",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Veteran Ind} = Veteran),",
						"     TotRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          Veteran),",
						"     TotWorkers = count(WorkerId)) ~> aggregate2",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Veteran Ind}),",
						"     TotAplicants = count({Applicant ID})) ~> aggregate3",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientVeteran} = {Unique ClientVeteran},",
						"          {Count Unique ElloreeVeteran} = {Unique ElloreeVeteran}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientVeteran} == {Count Unique ClientVeteran}",
						"     && {Unique ElloreeVeteran} == {Count Unique ElloreeVeteran},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientVeteran} = {Unique ClientVeteran}),",
						"     {Agg Unique ElloreeVeteran} = first({Unique ElloreeVeteran})) ~> aggregate5",
						"SelectMappingWithMostClients, aggregate5 join({Unique ElloreeVeteran} == {Agg Unique ElloreeVeteran}",
						"     && {Unique ClientVeteran} == {Agg Unique ClientVeteran},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"VeteranMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"VeteranMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientVeteran} = ClientVeteran,",
						"          {Unique ElloreeVeteran} = ElloreeVeteran),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnVeteran sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['veteran_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepVeteranMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Anonymized')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Audit_Identifier",
								"type": "DatasetReference"
							},
							"name": "Identifiers"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreFactTblTemplate"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "ReqFactTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "OtherCoreTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectBusLvl1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "SelectUniqueBusLvl1"
						},
						{
							"name": "JoinIdentifiertoLevel1Business"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select2"
						},
						{
							"name": "selectBusLvl2"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "selectUniqueBusLvl2"
						},
						{
							"name": "JoinIdentifiertoLevel2Business"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select3"
						},
						{
							"name": "selectBusLvl3"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "selectUniqueBusLvl3"
						},
						{
							"name": "JoinIdentifiertoLevel3Business"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "select4"
						},
						{
							"name": "selectBusLvl4"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "selectUniqueBusLvl4"
						},
						{
							"name": "JoinIdentifiertoLevel4Business"
						},
						{
							"name": "derivedColumn9"
						},
						{
							"name": "select5"
						},
						{
							"name": "filterBusinessLvl3FlaggedY"
						},
						{
							"name": "filterBusinessLvl4FlaggedY"
						},
						{
							"name": "filterBusinessLvl2FlaggedY"
						},
						{
							"name": "filterBusinessLvl1FlaggedY"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectJobTitle"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "derivedColumn10"
						},
						{
							"name": "selectUniqueJobTitle"
						},
						{
							"name": "JoinIdentifiertoJobTitle"
						},
						{
							"name": "derivedColumn11"
						},
						{
							"name": "select6"
						},
						{
							"name": "filterJobTitleFlaggedY"
						},
						{
							"name": "selectPrevJobTitle"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "derivedColumn12"
						},
						{
							"name": "selectUniquePrevJobTitle"
						},
						{
							"name": "JoinIdentifiertoPrevJobTitle"
						},
						{
							"name": "derivedColumn13"
						},
						{
							"name": "select7"
						},
						{
							"name": "filterPrevJobTitleFlaggedY"
						},
						{
							"name": "selectJobFamilyFunction"
						},
						{
							"name": "aggregate7"
						},
						{
							"name": "derivedColumn14"
						},
						{
							"name": "selectUniqueJobFamilyFunction"
						},
						{
							"name": "JoinIdentifiertoJobFamilyFunction"
						},
						{
							"name": "derivedColumn15"
						},
						{
							"name": "select8"
						},
						{
							"name": "filterJobFamilyFunctionFlaggedY"
						},
						{
							"name": "selectPrevJobFamilyFunction"
						},
						{
							"name": "aggregate8"
						},
						{
							"name": "derivedColumn16"
						},
						{
							"name": "selectUniquePrevJobFamilyFunction"
						},
						{
							"name": "JoinIdentifiertoPrevJobFamilyFunction"
						},
						{
							"name": "derivedColumn17"
						},
						{
							"name": "select9"
						},
						{
							"name": "filterPrevJobFamilyFunctionFlaggedY"
						},
						{
							"name": "selectReqJobTitle"
						},
						{
							"name": "aggregate9"
						},
						{
							"name": "derivedColumn18"
						},
						{
							"name": "selectUniqueReqJobTitle"
						},
						{
							"name": "selectReqBusLvl1"
						},
						{
							"name": "aggregate10"
						},
						{
							"name": "derivedColumn19"
						},
						{
							"name": "selectUniqueReqBusLvl1"
						},
						{
							"name": "selectReqBusLvl2"
						},
						{
							"name": "aggregate11"
						},
						{
							"name": "derivedColumn20"
						},
						{
							"name": "selectUniqueReqBusLvl2"
						},
						{
							"name": "selectReqBusLvl3"
						},
						{
							"name": "aggregate12"
						},
						{
							"name": "derivedColumn21"
						},
						{
							"name": "selectUniqueReqBusLvl3"
						},
						{
							"name": "selectReqBusLvl4"
						},
						{
							"name": "aggregate13"
						},
						{
							"name": "derivedColumn22"
						},
						{
							"name": "selectUniqueReqBusLvl4"
						},
						{
							"name": "JoinIdentifiertoReqJobTitle"
						},
						{
							"name": "derivedColumn23"
						},
						{
							"name": "select10"
						},
						{
							"name": "filterJobTitleReqFlaggedY"
						},
						{
							"name": "JoinIdentifiertoReqBusLvl1"
						},
						{
							"name": "derivedColumn24"
						},
						{
							"name": "select11"
						},
						{
							"name": "filterBusLvl1ReqFlaggedY"
						},
						{
							"name": "JoinIdentifiertoReqBusLvl2"
						},
						{
							"name": "derivedColumn25"
						},
						{
							"name": "select12"
						},
						{
							"name": "filterBusLvl2ReqFlaggedY"
						},
						{
							"name": "JoinIdentifiertoReqBusLvl3"
						},
						{
							"name": "derivedColumn26"
						},
						{
							"name": "select13"
						},
						{
							"name": "filterBusLvl3ReqFlaggedY"
						},
						{
							"name": "JoinIdentifiertoReqBusLvl4"
						},
						{
							"name": "derivedColumn27"
						},
						{
							"name": "select14"
						},
						{
							"name": "filterBusLvl4ReqFlaggedY"
						},
						{
							"name": "select15"
						},
						{
							"name": "selectOtherFactEventType"
						},
						{
							"name": "aggregate14"
						},
						{
							"name": "derivedColumn28"
						},
						{
							"name": "selectUniqueOtherFactEventType"
						},
						{
							"name": "selectOtherFactEventDesc"
						},
						{
							"name": "aggregate15"
						},
						{
							"name": "derivedColumn29"
						},
						{
							"name": "selectUniqueOtherFactEventDesc"
						},
						{
							"name": "selectOtherFactOtherChar1"
						},
						{
							"name": "aggregate16"
						},
						{
							"name": "derivedColumn30"
						},
						{
							"name": "selectUniqueOtherFactOtherChar1"
						},
						{
							"name": "selectOtherFactOtherChar2"
						},
						{
							"name": "aggregate17"
						},
						{
							"name": "derivedColumn31"
						},
						{
							"name": "selectUniqueOtherFactOtherChar2"
						},
						{
							"name": "JoinIdentifiertoUniqueOtherFactEventType"
						},
						{
							"name": "derivedColumn32"
						},
						{
							"name": "select16"
						},
						{
							"name": "filterOtherFactEventTypeFlaggedY"
						},
						{
							"name": "JoinIdentifiertoUniqueOtherFactEventDesc"
						},
						{
							"name": "derivedColumn33"
						},
						{
							"name": "select17"
						},
						{
							"name": "filterOtherFactEventDescFlaggedY"
						},
						{
							"name": "JoinIdentifiertoUniqueOtherCharVal1"
						},
						{
							"name": "derivedColumn34"
						},
						{
							"name": "select18"
						},
						{
							"name": "filterOtherFactOtherChar1FlaggedY"
						},
						{
							"name": "JoinIdentifiertoUniqueOtherCharVal2"
						},
						{
							"name": "derivedColumn35"
						},
						{
							"name": "select19"
						},
						{
							"name": "filterOtherFactOtherChar2FlaggedY"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TagIdentifier as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Identifiers",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreFactTblTemplate",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReqFactTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherCoreTbl",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBusLvl1",
						"selectBusLvl1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 1}),",
						"     {Reccord Count} = count({Client ID})) ~> aggregate1",
						"derivedColumn2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 1},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueBusLvl1",
						"derivedColumn1, SelectUniqueBusLvl1 join(derivedColumn1@IdentifierKey == SelectUniqueBusLvl1@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoLevel1Business",
						"Identifiers derive(IdentifierKey = 1) ~> derivedColumn1",
						"aggregate1 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn2",
						"JoinIdentifiertoLevel1Business derive(IdentifierFlag = iif(instr({Business Group Level 1},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 1},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Business Group Level 1\") ~> derivedColumn3",
						"derivedColumn3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 1},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBusLvl2",
						"selectBusLvl2 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 2}),",
						"     {Reccord Count} = count({Client ID})) ~> aggregate2",
						"aggregate2 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 2},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueBusLvl2",
						"derivedColumn1, selectUniqueBusLvl2 join(derivedColumn1@IdentifierKey == selectUniqueBusLvl2@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoLevel2Business",
						"JoinIdentifiertoLevel2Business derive(IdentifierFlag = iif(instr({Business Group Level 2},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 2},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Business Group Level 2') ~> derivedColumn5",
						"derivedColumn5 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 2},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBusLvl3",
						"selectBusLvl3 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 3}),",
						"     {Record Count} = count({Client ID})) ~> aggregate3",
						"aggregate3 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn6",
						"derivedColumn6 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 3},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueBusLvl3",
						"derivedColumn1, selectUniqueBusLvl3 join(derivedColumn1@IdentifierKey == selectUniqueBusLvl3@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoLevel3Business",
						"JoinIdentifiertoLevel3Business derive(IdentifierFlag = iif(instr({Business Group Level 3},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 3},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Business Group Level 3') ~> derivedColumn7",
						"derivedColumn7 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 3},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBusLvl4",
						"selectBusLvl4 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 4}),",
						"     {Record Count} = count({Client ID})) ~> aggregate4",
						"aggregate4 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn8",
						"derivedColumn8 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 4},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueBusLvl4",
						"derivedColumn1, selectUniqueBusLvl4 join(derivedColumn1@IdentifierKey == selectUniqueBusLvl4@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoLevel4Business",
						"JoinIdentifiertoLevel4Business derive(IdentifierFlag = iif(instr({Business Group Level 4},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 4},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Business Group Level 4') ~> derivedColumn9",
						"derivedColumn9 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 4},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select4 filter(IdentifierFlag=='Y') ~> filterBusinessLvl3FlaggedY",
						"select5 filter(IdentifierFlag=='Y') ~> filterBusinessLvl4FlaggedY",
						"select3 filter(IdentifierFlag=='Y') ~> filterBusinessLvl2FlaggedY",
						"select2 filter(IdentifierFlag=='Y') ~> filterBusinessLvl1FlaggedY",
						"filterBusinessLvl1FlaggedY, filterBusinessLvl2FlaggedY, filterBusinessLvl3FlaggedY, filterBusinessLvl4FlaggedY, filterJobTitleFlaggedY, filterPrevJobTitleFlaggedY, filterJobFamilyFunctionFlaggedY, filterPrevJobFamilyFunctionFlaggedY, filterJobTitleReqFlaggedY, filterBusLvl1ReqFlaggedY, filterBusLvl2ReqFlaggedY, filterBusLvl3ReqFlaggedY, filterBusLvl4ReqFlaggedY, filterOtherFactEventTypeFlaggedY, filterOtherFactEventDescFlaggedY, filterOtherFactOtherChar1FlaggedY, filterOtherFactOtherChar2FlaggedY union(byName: true)~> union1",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJobTitle",
						"selectJobTitle aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Job Title}),",
						"     {Record Count} = count({Client ID})) ~> aggregate5",
						"aggregate5 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn10",
						"derivedColumn10 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Job Title},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueJobTitle",
						"derivedColumn1, selectUniqueJobTitle join(derivedColumn1@IdentifierKey == selectUniqueJobTitle@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoJobTitle",
						"JoinIdentifiertoJobTitle derive(IdentifierFlag = iif(instr({Job Title},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Job Title},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Job Title') ~> derivedColumn11",
						"derivedColumn11 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Job Title},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6 filter(IdentifierFlag=='Y') ~> filterJobTitleFlaggedY",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Previous Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPrevJobTitle",
						"selectPrevJobTitle aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Previous Job Title}),",
						"     {Record Count} = count({Client ID})) ~> aggregate6",
						"aggregate6 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn12",
						"derivedColumn12 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Previous Job Title},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniquePrevJobTitle",
						"derivedColumn1, selectUniquePrevJobTitle join(derivedColumn1@IdentifierKey == selectUniquePrevJobTitle@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoPrevJobTitle",
						"JoinIdentifiertoPrevJobTitle derive(IdentifierFlag = iif(instr({Previous Job Title},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Previous Job Title},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Prev Job Title') ~> derivedColumn13",
						"derivedColumn13 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Previous Job Title},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7 filter(IdentifierFlag=='Y') ~> filterPrevJobTitleFlaggedY",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Job Function}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJobFamilyFunction",
						"selectJobFamilyFunction aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Job Function}),",
						"     {Record Count} = count({Client ID})) ~> aggregate7",
						"aggregate7 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn14",
						"derivedColumn14 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Job Function},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueJobFamilyFunction",
						"derivedColumn1, selectUniqueJobFamilyFunction join(derivedColumn1@IdentifierKey == selectUniqueJobFamilyFunction@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoJobFamilyFunction",
						"JoinIdentifiertoJobFamilyFunction derive(IdentifierFlag = iif(instr({Job Function},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Job Function},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Job Family/Function') ~> derivedColumn15",
						"derivedColumn15 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Job Function},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"select8 filter(IdentifierFlag=='Y') ~> filterJobFamilyFunctionFlaggedY",
						"CoreFactTblTemplate select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Previous Job Function}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPrevJobFamilyFunction",
						"selectPrevJobFamilyFunction aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Previous Job Function}),",
						"     {Record Count} = count({Client ID})) ~> aggregate8",
						"aggregate8 derive(IdentifierKey = 1,",
						"          Table = 'Core') ~> derivedColumn16",
						"derivedColumn16 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Previous Job Function},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniquePrevJobFamilyFunction",
						"derivedColumn1, selectUniquePrevJobFamilyFunction join(derivedColumn1@IdentifierKey == selectUniquePrevJobFamilyFunction@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoPrevJobFamilyFunction",
						"JoinIdentifiertoPrevJobFamilyFunction derive(IdentifierFlag = iif(instr({Previous Job Function},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Previous Job Function},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Prev Job Family/Function') ~> derivedColumn17",
						"derivedColumn17 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Previous Job Function},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"select9 filter(IdentifierFlag=='Y') ~> filterPrevJobFamilyFunctionFlaggedY",
						"ReqFactTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqJobTitle",
						"selectReqJobTitle aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Job Title}),",
						"     {Record Count} = count({Client ID})) ~> aggregate9",
						"aggregate9 derive(IdentifierKey = 1,",
						"          Table = 'Requisitions') ~> derivedColumn18",
						"derivedColumn18 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Job Title},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueReqJobTitle",
						"ReqFactTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqBusLvl1",
						"selectReqBusLvl1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 1}),",
						"     {Record Count} = count({Client ID})) ~> aggregate10",
						"aggregate10 derive(IdentifierKey = 1,",
						"          Table = 'Requisitions') ~> derivedColumn19",
						"derivedColumn19 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 1},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueReqBusLvl1",
						"ReqFactTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqBusLvl2",
						"selectReqBusLvl2 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 2}),",
						"     {Record Count} = count({Client ID})) ~> aggregate11",
						"aggregate11 derive(IdentifierKey = 1,",
						"          Table = 'Requisitions') ~> derivedColumn20",
						"derivedColumn20 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 2},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueReqBusLvl2",
						"ReqFactTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqBusLvl3",
						"selectReqBusLvl3 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 3}),",
						"     {Record Count} = count({Client ID})) ~> aggregate12",
						"aggregate12 derive(IdentifierKey = 1,",
						"          Table = 'Requisitions') ~> derivedColumn21",
						"derivedColumn21 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 3},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueReqBusLvl3",
						"ReqFactTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqBusLvl4",
						"selectReqBusLvl4 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Business Group Level 4}),",
						"     {Record Count} = count({Client ID})) ~> aggregate13",
						"aggregate13 derive(IdentifierKey = 1,",
						"          Table = 'Requisitions') ~> derivedColumn22",
						"derivedColumn22 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Business Group Level 4},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueReqBusLvl4",
						"derivedColumn1, selectUniqueReqJobTitle join(derivedColumn1@IdentifierKey == selectUniqueReqJobTitle@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoReqJobTitle",
						"JoinIdentifiertoReqJobTitle derive(IdentifierFlag = iif(instr({Job Title},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Job Title},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = 'Job Title') ~> derivedColumn23",
						"derivedColumn23 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Job Title},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"select10 filter(IdentifierFlag=='Y') ~> filterJobTitleReqFlaggedY",
						"derivedColumn1, selectUniqueReqBusLvl1 join(derivedColumn1@IdentifierKey == selectUniqueReqBusLvl1@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoReqBusLvl1",
						"JoinIdentifiertoReqBusLvl1 derive(IdentifierFlag = iif(instr({Business Group Level 1},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 1},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Business Group Level 1\") ~> derivedColumn24",
						"derivedColumn24 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 1},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"select11 filter(IdentifierFlag=='Y') ~> filterBusLvl1ReqFlaggedY",
						"derivedColumn1, selectUniqueReqBusLvl2 join(derivedColumn1@IdentifierKey == selectUniqueReqBusLvl2@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoReqBusLvl2",
						"JoinIdentifiertoReqBusLvl2 derive(IdentifierFlag = iif(instr({Business Group Level 2},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 2},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Business Group Level 2\") ~> derivedColumn25",
						"derivedColumn25 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 2},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select12",
						"select12 filter(IdentifierFlag=='Y') ~> filterBusLvl2ReqFlaggedY",
						"derivedColumn1, selectUniqueReqBusLvl3 join(derivedColumn1@IdentifierKey == selectUniqueReqBusLvl3@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoReqBusLvl3",
						"JoinIdentifiertoReqBusLvl3 derive(IdentifierFlag = iif(instr({Business Group Level 3},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 3},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Business Group Level 3\") ~> derivedColumn26",
						"derivedColumn26 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 3},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select13",
						"select13 filter(IdentifierFlag=='Y') ~> filterBusLvl3ReqFlaggedY",
						"derivedColumn1, selectUniqueReqBusLvl4 join(derivedColumn1@IdentifierKey == selectUniqueReqBusLvl4@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoReqBusLvl4",
						"JoinIdentifiertoReqBusLvl4 derive(IdentifierFlag = iif(instr({Business Group Level 4},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Business Group Level 4},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Business Group Level 4\") ~> derivedColumn27",
						"derivedColumn27 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Business Group Level 4},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select14",
						"select14 filter(IdentifierFlag=='Y') ~> filterBusLvl4ReqFlaggedY",
						"union1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value},",
						"          TagIdentifier",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select15",
						"OtherCoreTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event (Type)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOtherFactEventType",
						"selectOtherFactEventType aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event (Type)}),",
						"     {Record Count} = count({Client ID})) ~> aggregate14",
						"aggregate14 derive(IdentifierKey = 1,",
						"          Table = 'Other Core') ~> derivedColumn28",
						"derivedColumn28 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Event (Type)},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueOtherFactEventType",
						"OtherCoreTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event (Desc)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOtherFactEventDesc",
						"selectOtherFactEventDesc aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event (Desc)}),",
						"     {Record Count} = count({Client ID})) ~> aggregate15",
						"aggregate15 derive(IdentifierKey = 1,",
						"          Table = 'Other Core') ~> derivedColumn29",
						"derivedColumn29 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Event (Desc)},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueOtherFactEventDesc",
						"OtherCoreTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Other (Char Value 1)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOtherFactOtherChar1",
						"selectOtherFactOtherChar1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Other (Char Value 1)}),",
						"     {Record Count} = count({Client ID})) ~> aggregate16",
						"aggregate16 derive(IdentifierKey = 1,",
						"          Table = 'Other Core') ~> derivedColumn30",
						"derivedColumn30 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Other (Char Value 1)},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueOtherFactOtherChar1",
						"OtherCoreTbl select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Other (Char Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOtherFactOtherChar2",
						"selectOtherFactOtherChar2 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Other (Char Value 2)}),",
						"     {Record Count} = count({Client ID})) ~> aggregate17",
						"aggregate17 derive(IdentifierKey = 1,",
						"          Table = 'Other Core') ~> derivedColumn31",
						"derivedColumn31 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          {Other (Char Value 2)},",
						"          IdentifierKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueOtherFactOtherChar2",
						"derivedColumn1, selectUniqueOtherFactEventType join(derivedColumn1@IdentifierKey == selectUniqueOtherFactEventType@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoUniqueOtherFactEventType",
						"JoinIdentifiertoUniqueOtherFactEventType derive(IdentifierFlag = iif(instr({Event (Type)},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Event (Type)},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Event Type\") ~> derivedColumn32",
						"derivedColumn32 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Event (Type)},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select16",
						"select16 filter(IdentifierFlag=='Y') ~> filterOtherFactEventTypeFlaggedY",
						"derivedColumn1, selectUniqueOtherFactEventDesc join(derivedColumn1@IdentifierKey == selectUniqueOtherFactEventDesc@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoUniqueOtherFactEventDesc",
						"JoinIdentifiertoUniqueOtherFactEventDesc derive(IdentifierFlag = iif(instr({Event (Desc)},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Event (Desc)},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Event Desc\") ~> derivedColumn33",
						"derivedColumn33 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Event (Desc)},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select17",
						"select17 filter(IdentifierFlag=='Y') ~> filterOtherFactEventDescFlaggedY",
						"derivedColumn1, selectUniqueOtherFactOtherChar1 join(derivedColumn1@IdentifierKey == selectUniqueOtherFactOtherChar1@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoUniqueOtherCharVal1",
						"JoinIdentifiertoUniqueOtherCharVal1 derive(IdentifierFlag = iif(instr({Other (Char Value 1)},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Other (Char Value 1)},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Char Val 1\") ~> derivedColumn34",
						"derivedColumn34 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Other (Char Value 1)},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select18",
						"select18 filter(IdentifierFlag=='Y') ~> filterOtherFactOtherChar1FlaggedY",
						"derivedColumn1, selectUniqueOtherFactOtherChar2 join(derivedColumn1@IdentifierKey == selectUniqueOtherFactOtherChar2@IdentifierKey,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinIdentifiertoUniqueOtherCharVal2",
						"JoinIdentifiertoUniqueOtherCharVal2 derive(IdentifierFlag = iif(instr({Other (Char Value 2)},' ' + TagIdentifier + ' ')>0, \"Y\", iif(instr({Other (Char Value 2)},TagIdentifier + ' ')==1, \"Y\", \"N\")),",
						"          Field = \"Char Val 2\") ~> derivedColumn35",
						"derivedColumn35 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Table,",
						"          Field,",
						"          {Field Value} = {Other (Char Value 2)},",
						"          TagIdentifier,",
						"          IdentifierFlag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select19",
						"select19 filter(IdentifierFlag=='Y') ~> filterOtherFactOtherChar2FlaggedY",
						"select15 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['AnonymizationReview.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_ApplicantID')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "ApplicantTemplate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputAudit"
						}
					],
					"transformations": [
						{
							"name": "GroupUniqueCandidateIDandWorkerIDs"
						},
						{
							"name": "CountCandidateIds"
						},
						{
							"name": "FilterForMultipleCandidateIDs"
						},
						{
							"name": "JoinForWorkerId"
						},
						{
							"name": "SelectFinalOutput"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as date 'yyyy-MM-dd',",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State} as string,",
						"          {Applicant Country} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantTemplate",
						"ApplicantTemplate aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RecordCount = countDistinct(concat({Applicant ID},{Internal Worker ID}))) ~> GroupUniqueCandidateIDandWorkerIDs",
						"GroupUniqueCandidateIDandWorkerIDs aggregate(groupBy({Applicant ID}),",
						"     InternalWorkerIDCount = sum(RecordCount)) ~> CountCandidateIds",
						"CountCandidateIds filter(InternalWorkerIDCount>1) ~> FilterForMultipleCandidateIDs",
						"FilterForMultipleCandidateIDs, GroupUniqueCandidateIDandWorkerIDs join(CountCandidateIds@{Applicant ID} == GroupUniqueCandidateIDandWorkerIDs@{Applicant ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinForWorkerId",
						"JoinForWorkerId select(mapColumn(",
						"          {Applicant ID} = CountCandidateIds@{Applicant ID},",
						"          {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"SelectFinalOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Applicant Id with Multiple Worker Ids.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputAudit"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_ApplicantReq')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "AllReqData"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "ApplicantData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputReqApplicantReview"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputReqWithSameApplicantMoreThanOnce"
						}
					],
					"transformations": [
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddApplicantCount"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "ReqApplicantCount"
						},
						{
							"name": "SelectReqInfo"
						},
						{
							"name": "ReqApplicantCountforDupes"
						},
						{
							"name": "ReqsWithSameApplicantAppliedMultiple"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllReqData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantData",
						"SelectColumns sort(asc({Requisition Status}, true),",
						"     asc({Applicant Count}, true)) ~> SortOnEvent",
						"SelectReqInfo, ReqApplicantCount join(SelectReqInfo@{Requisition ID} == ReqApplicantCount@{Requisition ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddApplicantCount",
						"AddApplicantCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Requisition ID} = SelectReqInfo@{Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Applicant Count} = ApplicantCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"ApplicantData aggregate(groupBy({Requisition ID}),",
						"     ApplicantCount = countAll({Applicant ID})) ~> ReqApplicantCount",
						"AllReqData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqInfo",
						"ApplicantData aggregate(groupBy({Requisition ID},",
						"          {Applicant ID}),",
						"     {Applicant Count} = count({Applicant ID})) ~> ReqApplicantCountforDupes",
						"ReqApplicantCountforDupes filter({Applicant Count}>1) ~> ReqsWithSameApplicantAppliedMultiple",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Req Applicant Count Review.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputReqApplicantReview",
						"ReqsWithSameApplicantAppliedMultiple sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Req Applicant Applied 2+ Times Review.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputReqWithSameApplicantMoreThanOnce"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "BusinessMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "BSOutputAllHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "BSOutputLOBlvl1Hierarchy"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "pivot2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort3"
						},
						{
							"name": "sort4"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort5"
						},
						{
							"name": "sort6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as date,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as integer,",
						"          RowCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BusinessMapping",
						"sort4 pivot(groupBy({Business Group Level 1},",
						"          {Elloree Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Elloree Business Group Level 2}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"sort3 pivot(groupBy({Business Group Level 1},",
						"          {Elloree Business Group Level 1}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot2",
						"select1 derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year}))),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(asc({Event Quarter and Year}, true),",
						"     partitionBy('hash', 1)) ~> sort3",
						"derivedColumn1 sort(asc({Event Quarter and Year}, true)) ~> sort4",
						"AllCoreData, BusinessMapping join({Business Group Level 1} == {Client Business Group Level 1}",
						"     && {Business Group Level 2} == {Client Business Group Level 2},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"pivot1 sort(asc({Elloree Business Group Level 1}, true),",
						"     asc({Elloree Business Group Level 2}, true)) ~> sort5",
						"pivot2 sort(asc({Elloree Business Group Level 1}, true)) ~> sort6",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BSOutputAllHierarchy",
						"sort6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Lvl 1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BSOutputLOBlvl1Hierarchy"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_BusHierarchyCheck')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData1",
							"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData2",
							"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputOrphanHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OuputOrphanAndCurrHrchyCounts"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputWorkerHierarchyDetail"
						}
					],
					"transformations": [
						{
							"name": "MaxEventDt"
						},
						{
							"name": "CurrentHCTEvent",
							"description": "Join on max HCT event date in order to pull only the Current headcount records"
						},
						{
							"name": "UniqueHierarchyRecords",
							"description": "Select unique hierarchy for current headcount records."
						},
						{
							"name": "SelectUniqueHierarchyCurrHCT",
							"description": "Select key and hierarchy fields."
						},
						{
							"name": "UniqueHierarchyAllEvents"
						},
						{
							"name": "SelectUniqueHierarchyFields"
						},
						{
							"name": "SelectCoreWithNoCurrentHierarchy"
						},
						{
							"name": "PullRecordsWithOrphans",
							"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
						},
						{
							"name": "UniqueWorkerWithOrphanHrchy",
							"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
						},
						{
							"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
						},
						{
							"name": "PullCurrentHierarchyIfExists",
							"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
						},
						{
							"name": "SelectWorkerIDandHierarcy",
							"description": "Select worker ID and hierarchy fields"
						},
						{
							"name": "CreateWorkerCountsbyHierarchy",
							"description": "Create counts for unique orphan and current hierarchy records"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HCTFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as integer,",
						"          RowCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData1",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as integer,",
						"          RowCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData2",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as integer,",
						"          RowCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"HCTFilter aggregate(groupBy(EventUnique = Event),",
						"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
						"derivedColumn3, MaxEventDt join({Event Date} == MaxEventDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrentHCTEvent",
						"CurrentHCTEvent aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
						"UniqueHierarchyRecords select(mapColumn(",
						"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
						"          {Business Group Level 1 HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
						"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
						"UniqueHierarchyAllEvents select(mapColumn(",
						"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
						"          {Business Group Level 1 ALL} = {Business Group Level 1},",
						"          {Business Group Level 2 ALL} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
						"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
						"     negate:true,",
						"     broadcast: 'auto')~> SelectCoreWithNoCurrentHierarchy",
						"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullRecordsWithOrphans",
						"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
						"          {Business Group Level 1 Unique} = {Business Group Level 1},",
						"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
						"UniqueWorkerWithOrphanHrchy select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Unique}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
						"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
						"PullCurrentHierarchyIfExists select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
						"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
						"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
						"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
						"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
						"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
						"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
						"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
						"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1}, {Business Group Level 2})) ~> derivedColumn2",
						"HCTFilter derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
						"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
						"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
						"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
						"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_CorpTitle",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputCorpTitleReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotCorpTitleEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddCorpTitleMapping"
						},
						{
							"name": "SortOnCorpTitle"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TitleReview_ClientId as string,",
						"     TitleReview_ClientDt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as date,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as integer,",
						"          RowCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Corporate Title} as string,",
						"          {Elloree Corporate Title} as string,",
						"          {Client Elloree Corporate Title} as string,",
						"          {Elloree Corporate Title Sort} as string,",
						"          {Suggested Elloree Corporate Title} as string,",
						"          {Suggested Client Elloree Corporate Title} as string,",
						"          {Suggested Elloree Corporate Title Sort} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount Curr Title} as string,",
						"          {2017 Headcount Prev Title} as string,",
						"          {2018 Headcount Curr Title} as string,",
						"          {2018 Headcount Prev Title} as string,",
						"          {2018 Hire Curr Title} as string,",
						"          {2018 Hire Prev Title} as string,",
						"          {2018 Promo Curr Title} as string,",
						"          {2018 Promo Prev Title} as string,",
						"          {2018 Term Curr Title} as string,",
						"          {2018 Term Prev Title} as string,",
						"          {2019 Headcount Curr Title} as string,",
						"          {2019 Headcount Prev Title} as string,",
						"          {2019 Hire Curr Title} as string,",
						"          {2019 Hire Prev Title} as string,",
						"          {2019 Promo Curr Title} as string,",
						"          {2019 Promo Prev Title} as string,",
						"          {2019 Term Curr Title} as string,",
						"          {2019 Term Prev Title} as string,",
						"          {2020 Headcount Curr Title} as string,",
						"          {2020 Headcount Prev Title} as string,",
						"          {2020 Hire Curr Title} as string,",
						"          {2020 Hire Prev Title} as string,",
						"          {2020 Promo Curr Title} as string,",
						"          {2020 Promo Prev Title} as string,",
						"          {2020 Term Curr Title} as string,",
						"          {2020 Term Prev Title} as string,",
						"          {2021 Headcount Curr Title} as string,",
						"          {2021 Headcount Prev Title} as string,",
						"          {2021 Hire Curr Title} as string,",
						"          {2021 Hire Prev Title} as string,",
						"          {2021 Promo Curr Title} as string,",
						"          {2021 Promo Prev Title} as string,",
						"          {2021 Term Curr Title} as string,",
						"          {2021 Term Prev Title} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorpTitleMapping",
						"SortOnEvent pivot(groupBy({Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotCorpTitleEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, CorpTitleMapping join({Corporate Title} == {Client Corporate Title},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddCorpTitleMapping",
						"CreatePivotCorpTitleEventTime sort(asc({Corporate Title}, true)) ~> SortOnCorpTitle",
						"AddCorpTitleMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Client Engagement Date} = CorpTitleMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Corporate Title.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputCorpTitleReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Duplicate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Output Duplicate Review report.  Currently ties to the union csv in blob.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CorePromotions"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHires"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_DivSlate_File",
								"type": "DatasetReference"
							},
							"name": "DivSlates"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "EventDuplicatesReport"
						}
					],
					"transformations": [
						{
							"name": "HeadcountRowCount"
						},
						{
							"name": "HeadcountSumRowsForDups"
						},
						{
							"name": "HctDuplicates"
						},
						{
							"name": "TerminationsRowCount"
						},
						{
							"name": "TerminationsSumRowsForDups"
						},
						{
							"name": "TermDuplicates"
						},
						{
							"name": "union1"
						},
						{
							"name": "HiresRowCount"
						},
						{
							"name": "HiresSumRowsForDups"
						},
						{
							"name": "HireDuplicates"
						},
						{
							"name": "PromotionsRowCount"
						},
						{
							"name": "PromotionsSumRowsForDups"
						},
						{
							"name": "PromoDuplicates"
						},
						{
							"name": "TalentRowCount"
						},
						{
							"name": "TalentSumRowsForDups"
						},
						{
							"name": "TalentDuplicates"
						},
						{
							"name": "RequisitionsRowCount"
						},
						{
							"name": "RequisitionsSumRowsForDups"
						},
						{
							"name": "RequisitionDuplicates"
						},
						{
							"name": "ApplicantRowCount"
						},
						{
							"name": "ApplicantSumRowsForDups"
						},
						{
							"name": "ApplicantDuplicates"
						},
						{
							"name": "PromoFilterOutClientAliasHeaderRow"
						},
						{
							"name": "HeadcountFilter"
						},
						{
							"name": "TerminationFilter"
						},
						{
							"name": "HiresFilter"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "OtherRowCount"
						},
						{
							"name": "OtherSumRowsForDups"
						},
						{
							"name": "ConcatEventandEventType"
						},
						{
							"name": "OtherDuplicates"
						},
						{
							"name": "SlateRowCount"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SlateSumRowsForDups"
						},
						{
							"name": "SlateDuplicates"
						},
						{
							"name": "RemoveNullOtherRows"
						},
						{
							"name": "RemoveNullSlateRows"
						},
						{
							"name": "RemoveNullPromoRows"
						},
						{
							"name": "RemoveNullTalentRows"
						},
						{
							"name": "RemoveNullReqRows"
						},
						{
							"name": "RemoveNullApplicantRows"
						},
						{
							"name": "RemoveNullHeadcountRows"
						},
						{
							"name": "RemoveNullTermRows"
						},
						{
							"name": "RemoveNullHireRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorePromotions",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string,",
						"          {Salary Range} as string,",
						"          Bonus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHeadcount",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTerminations",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHires",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Requisition ID} as string,",
						"          {Event Year} as string,",
						"          {Candidates StM} as string,",
						"          {Internal Candidates StM} as string,",
						"          {External Candidates StM} as string,",
						"          {Candidates Hired} as string,",
						"          {Internal Candidates Hired} as string,",
						"          {External Candidates Hired} as string,",
						"          {White Candidates StM} as string,",
						"          {Internal White Candidates StM} as string,",
						"          {External White Candidates StM} as string,",
						"          {White Candidates Hired} as string,",
						"          {Internal White Candidates Hired} as string,",
						"          {External White Candidates Hired} as string,",
						"          {Black Candidates StM} as string,",
						"          {Internal Black Candidates StM} as string,",
						"          {External Black Candidates StM} as string,",
						"          {Black Candidates Hired} as string,",
						"          {Internal Black Candidates Hired} as string,",
						"          {External Black Candidates Hired} as string,",
						"          {Latinx Candidates StM} as string,",
						"          {Internal Latinx Candidates StM} as string,",
						"          {External Latinx Candidates StM} as string,",
						"          {Latinx Candidates Hired} as string,",
						"          {Internal Latinx Candidates Hired} as string,",
						"          {External Latinx Candidates Hired} as string,",
						"          {Asian Candidates StM} as string,",
						"          {Internal Asian Candidates StM} as string,",
						"          {External Asian Candidates StM} as string,",
						"          {Asian Candidates Hired} as string,",
						"          {Internal Asian Candidates Hired} as string,",
						"          {External Asian Candidates Hired} as string,",
						"          {2+ Races Candidates StM} as string,",
						"          {Internal 2+ Races Candidates StM} as string,",
						"          {External 2+ Races Candidates StM} as string,",
						"          {2+ Races Candidates Hired} as string,",
						"          {Internal 2+ Races Candidates Hired} as string,",
						"          {External 2+ Races Candidates Hired} as string,",
						"          {Other Candidates StM} as string,",
						"          {Internal Other Candidates StM} as string,",
						"          {External Other Candidates StM} as string,",
						"          {Other Candidates Hired} as string,",
						"          {Internal Other Candidates Hired} as string,",
						"          {External Other Candidates Hired} as string,",
						"          {Male Candidates StM} as string,",
						"          {Internal Male Candidates StM} as string,",
						"          {External Male Candidates StM} as string,",
						"          {Male Candidates Hired} as string,",
						"          {Internal Male Candidates Hired} as string,",
						"          {External Male Candidates Hired} as string,",
						"          {Female Candidates StM} as string,",
						"          {Internal Female Candidates StM} as string,",
						"          {External Female Candidates StM} as string,",
						"          {Female Candidates Hired} as string,",
						"          {Internal Female Candidates Hired} as string,",
						"          {External Female Candidates Hired} as string,",
						"          {Other Gender Candidates StM} as string,",
						"          {Internal Other Gender Candidates StM} as string,",
						"          {External Other Gender Candidates StM} as string,",
						"          {Other Gender Candidates Hired} as string,",
						"          {Internal Other Gender Candidates Hired} as string,",
						"          {External Other Gender Candidates Hired} as string,",
						"          {PoC Candidates StM} as string,",
						"          {Internal PoC Candidates StM} as string,",
						"          {External PoC Candidates StM} as string,",
						"          {PoC  Candidates Hired} as string,",
						"          {Internal PoC  Candidates Hired} as string,",
						"          {External PoC  Candidates Hired} as string,",
						"          {Diverse Candidates StM} as string,",
						"          {Internal Diverse Candidates StM} as string,",
						"          {External Diverse Candidates StM} as string,",
						"          {Diverse Candidates Hired} as string,",
						"          {Internal Diverse Candidates Hired} as string,",
						"          {External Diverse Candidates Hired} as string,",
						"          {Female Not PoC Candidates StM} as string,",
						"          {Internal Female Not PoC Candidates StM} as string,",
						"          {External Female Not PoC Candidates StM} as string,",
						"          {Female Not PoC Candidates Hired} as string,",
						"          {Internal Female Not PoC Candidates Hired} as string,",
						"          {External Female Not PoC Candidates Hired} as string,",
						"          {Female PoC Candidates StM} as string,",
						"          {Internal Female PoC Candidates StM} as string,",
						"          {External Female PoC Candidates StM} as string,",
						"          {Female PoC Candidates Hired} as string,",
						"          {Internal Female PoC Candidates Hired} as string,",
						"          {External Female PoC Candidates Hired} as string,",
						"          {Not Female PoC Candidates StM} as string,",
						"          {Internal Not Female PoC Candidates StM} as string,",
						"          {External Not Female PoC Candidates StM} as string,",
						"          {Not Female PoC Candidates Hired} as string,",
						"          {Internal Not Female PoC Candidates Hired} as string,",
						"          {External Not Female PoC Candidates Hired} as string,",
						"          {Not Female Not PoC Candidates StM} as string,",
						"          {Internal Not Female Not PoC Candidates StM} as string,",
						"          {External Not Female Not PoC Candidates StM} as string,",
						"          {Not Female Not PoC Candidates Hired} as string,",
						"          {Internal Not Female Not PoC Candidates Hired} as string,",
						"          {External Not Female Not PoC Candidates Hired} as string,",
						"          {Diverse Slate} as string,",
						"          {Internal Diverse Slate} as string,",
						"          {External Diverse Slate} as string,",
						"          {No Diverse Slate} as string,",
						"          {Internal No Diverse Slate} as string,",
						"          {External No Diverse Slate} as string,",
						"          {Diverse Hired Slate} as string,",
						"          {Internal Diverse Hired Slate} as string,",
						"          {External Diverse Hired Slate} as string,",
						"          {PoC Slate} as string,",
						"          {Internal PoC Slate} as string,",
						"          {External PoC Slate} as string,",
						"          {No PoC Slate} as string,",
						"          {Internal No PoC Slate} as string,",
						"          {External No PoC Slate} as string,",
						"          {PoC Hired Slate} as string,",
						"          {Internal PoC Hired Slate} as string,",
						"          {External PoC Hired Slate} as string,",
						"          {White Slate} as string,",
						"          {Internal White Slate} as string,",
						"          {External White Slate} as string,",
						"          {No White Slate} as string,",
						"          {Internal No White Slate} as string,",
						"          {External No White Slate} as string,",
						"          {White Hired Slate} as string,",
						"          {Internal White Hired Slate} as string,",
						"          {External White Hired Slate} as string,",
						"          {Black Slate} as string,",
						"          {Internal Black Slate} as string,",
						"          {External Black Slate} as string,",
						"          {No Black Slate} as string,",
						"          {Internal No Black Slate} as string,",
						"          {External No Black Slate} as string,",
						"          {Black Hired Slate} as string,",
						"          {Internal Black Hired Slate} as string,",
						"          {External Black Hired Slate} as string,",
						"          {Latinx Slate} as string,",
						"          {Internal Latinx Slate} as string,",
						"          {External Latinx Slate} as string,",
						"          {No Latinx Slate} as string,",
						"          {Internal No Latinx Slate} as string,",
						"          {External No Latinx Slate} as string,",
						"          {Latinx Hired Slate} as string,",
						"          {Internal Latinx Hired Slate} as string,",
						"          {External Latinx Hired Slate} as string,",
						"          {Asian Slate} as string,",
						"          {Internal Asian Slate} as string,",
						"          {External Asian Slate} as string,",
						"          {No Asian Slate} as string,",
						"          {Internal No Asian Slate} as string,",
						"          {External No Asian Slate} as string,",
						"          {Asian Hired Slate} as string,",
						"          {Internal Asian Hired Slate} as string,",
						"          {External Asian Hired Slate} as string,",
						"          {2+ Races Slate} as string,",
						"          {Internal 2+ Races Slate} as string,",
						"          {External 2+ Races Slate} as string,",
						"          {No 2+ Races Slate} as string,",
						"          {Internal No 2+ Races Slate} as string,",
						"          {External No 2+ Races Slate} as string,",
						"          {2+ Races Hired Slate} as string,",
						"          {Internal 2+ Races Hired Slate} as string,",
						"          {External 2+ Races Hired Slate} as string,",
						"          {Other Race Slate} as string,",
						"          {Internal Other Race Slate} as string,",
						"          {External Other Race Slate} as string,",
						"          {No Other Race Slate} as string,",
						"          {Internal No Other Race Slate} as string,",
						"          {External No Other Race Slate} as string,",
						"          {Other Race Hired Slate} as string,",
						"          {Internal Other Race Hired Slate} as string,",
						"          {External Other Race Hired Slate} as string,",
						"          {Female Slate} as string,",
						"          {Internal Female Slate} as string,",
						"          {External Female Slate} as string,",
						"          {No Female Slate} as string,",
						"          {Internal No Female Slate} as string,",
						"          {External No Female Slate} as string,",
						"          {Female Hired Slate} as string,",
						"          {Internal Female Hired Slate} as string,",
						"          {External Female Hired Slate} as string,",
						"          {Male Slate} as string,",
						"          {Internal Male Slate} as string,",
						"          {External Male Slate} as string,",
						"          {No Male Slate} as string,",
						"          {Internal No Male Slate} as string,",
						"          {External No Male Slate} as string,",
						"          {Male Hired Slate} as string,",
						"          {Internal Male Hired Slate} as string,",
						"          {External Male Hired Slate} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DivSlates",
						"HeadcountFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> HeadcountRowCount",
						"HeadcountRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> HeadcountSumRowsForDups",
						"RemoveNullHeadcountRows filter(DuplicateCount>1) ~> HctDuplicates",
						"TerminationFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> TerminationsRowCount",
						"TerminationsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> TerminationsSumRowsForDups",
						"RemoveNullTermRows filter(DuplicateCount>1) ~> TermDuplicates",
						"HctDuplicates, TermDuplicates, HireDuplicates, PromoDuplicates, TalentDuplicates, RequisitionDuplicates, ApplicantDuplicates, OtherDuplicates, SlateDuplicates union(byName: true)~> union1",
						"HiresFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = countAll({Worker ID})) ~> HiresRowCount",
						"HiresRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> HiresSumRowsForDups",
						"RemoveNullHireRows filter(DuplicateCount>1) ~> HireDuplicates",
						"PromoFilterOutClientAliasHeaderRow aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> PromotionsRowCount",
						"PromotionsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> PromotionsSumRowsForDups",
						"RemoveNullPromoRows filter(DuplicateCount>1) ~> PromoDuplicates",
						"Talent aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> TalentRowCount",
						"TalentRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> TalentSumRowsForDups",
						"RemoveNullTalentRows filter(DuplicateCount>1) ~> TalentDuplicates",
						"Requisitions aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Requisition ID}),",
						"     RowCount = count({Requisition ID})) ~> RequisitionsRowCount",
						"RequisitionsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> RequisitionsSumRowsForDups",
						"RemoveNullReqRows filter(DuplicateCount>1) ~> RequisitionDuplicates",
						"Applicants aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Applicant ID},",
						"          {Requisition ID}),",
						"     RowCount = count({Applicant ID})) ~> ApplicantRowCount",
						"ApplicantRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Applicant ID},",
						"          {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> ApplicantSumRowsForDups",
						"RemoveNullApplicantRows filter(DuplicateCount>1) ~> ApplicantDuplicates",
						"CorePromotions filter({Event Code}=='PRO') ~> PromoFilterOutClientAliasHeaderRow",
						"CoreHeadcount filter({Event Code}=='HCT') ~> HeadcountFilter",
						"CoreTerminations filter({Event Code}=='TER') ~> TerminationFilter",
						"CoreHires filter({Event Code}=='HIR') ~> HiresFilter",
						"derivedColumn1 select(mapColumn(",
						"          Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)},",
						"          DuplicateCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"ApplicantSumRowsForDups derive({Record Id (Worker/Req/Applicant)} = toString({Record Id (Worker/Req/Applicant)})) ~> derivedColumn1",
						"union1 sort(asc(Event, true)) ~> sort1",
						"Other aggregate(groupBy(Event,",
						"          {Event (Desc)},",
						"          {Event (Type)},",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = countAll({Worker ID})) ~> OtherRowCount",
						"ConcatEventandEventType aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> OtherSumRowsForDups",
						"OtherRowCount derive(Event = concat(concat(concat(concat(Event,' '),{Event (Type)}),' '),{Event (Desc)})) ~> ConcatEventandEventType",
						"RemoveNullOtherRows filter(DuplicateCount>1) ~> OtherDuplicates",
						"derivedColumn2 aggregate(groupBy(Event,",
						"          {Event Year},",
						"          {Requisition ID}),",
						"     RowCount = countAll({Requisition ID})) ~> SlateRowCount",
						"DivSlates derive(Event = 'Slate') ~> derivedColumn2",
						"SlateRowCount aggregate(groupBy(Event,",
						"          {Event Date} = {Event Year},",
						"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> SlateSumRowsForDups",
						"RemoveNullSlateRows filter(DuplicateCount>1) ~> SlateDuplicates",
						"OtherSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullOtherRows",
						"SlateSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullSlateRows",
						"PromotionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullPromoRows",
						"TalentSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTalentRows",
						"RequisitionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullReqRows",
						"FinalSelect filter(!(isNull(Event))) ~> RemoveNullApplicantRows",
						"HeadcountSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHeadcountRows",
						"TerminationsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTermRows",
						"HiresSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHireRows",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Duplicates Review Core.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> EventDuplicatesReport"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddEhtnicityMapping"
						},
						{
							"name": "SortOnEthnicity"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMapping",
						"SortOnEvent pivot(groupBy(Race,",
						"          {Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, EthnicityMapping join(Race == {Client Race}",
						"     && {Hispanic or Latino Origin} == {Client Hispanic or Latino Origin},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddEhtnicityMapping",
						"CreatePivotEthnicityAndEventTime sort(asc(Race, true),",
						"     asc({Hispanic or Latino Origin}, true)) ~> SortOnEthnicity",
						"AddEhtnicityMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount,",
						"          {Client ID} = EthnicityMapping@{Client ID},",
						"          {Client Engagement Date} = EthnicityMapping@{Client Engagement Date},",
						"          {Client Race},",
						"          {Client Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Suggested Elloree Race},",
						"          {Suggested Elloree Hispanic or Latino Origin},",
						"          {Suggested Source},",
						"          {2017 Headcount},",
						"          {2018 Headcount},",
						"          {2018 Hire},",
						"          {2018 Promo},",
						"          {2018 Term},",
						"          {2019 Headcount},",
						"          {2019 Hire},",
						"          {2019 Promo},",
						"          {2019 Term},",
						"          {2020 Headcount},",
						"          {2020 Hire},",
						"          {2020 Promo},",
						"          {2020 Term},",
						"          {2021 Headcount},",
						"          {2021 Hire},",
						"          {2021 Promo},",
						"          {2021 Term}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnEthnicity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Ethnicity.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Event",
								"type": "DatasetReference"
							},
							"name": "EventMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEventReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEventAndEventTime"
						},
						{
							"name": "SortOnEventAndYear"
						},
						{
							"name": "AddEventMapping"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Event} as string,",
						"          {Client Event Type} as string,",
						"          {Client Event Reason} as string,",
						"          {Elloree Event} as string,",
						"          {Elloree Event Type} as string,",
						"          {Elloree Event Reason} as string,",
						"          {Elloree Termination Reason} as string,",
						"          {Suggested Elloree Event} as string,",
						"          {Suggested Elloree Event Type} as string,",
						"          {Suggested Elloree Event Reason} as string,",
						"          {Suggested Elloree Termination Reason} as string,",
						"          {Suggested Source} as string,",
						"          {2019 Headcount} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string,",
						"          {2022 Headcount} as string,",
						"          {2022 Hire} as string,",
						"          {2022 Promo} as string,",
						"          {2022 Term} as string,",
						"          {2023 Promo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EventMapping",
						"SortOnEventAndYear pivot(groupBy(Event,",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Client Id},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEventAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEventAndYear",
						"AllCoreData, EventMapping join(Event == {Client Event}",
						"     && {Event Type} == {Client Event Type}",
						"     && {Event Reason} == {Client Event Reason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddEventMapping",
						"CreatePivotEventAndEventTime sort(asc(Event, true),",
						"     asc({Event Type}, true),",
						"     asc({Event Reason}, true)) ~> SortOnEvent",
						"AddEventMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Client Id} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = EventMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Event.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEventReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_EventSummary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEventSummaryReview"
						}
					],
					"transformations": [
						{
							"name": "CrosstabCountByEventAndYear"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"derivedColumn1 pivot(groupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     Count = sum(EmpCount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> CrosstabCountByEventAndYear",
						"AllCoreData derive(EmpCount = 1,",
						"          {Event Quarter and Year} = concat(concat(' Q',toString({Event Quarter})),concat(' ',toString({Event Year})))) ~> derivedColumn1",
						"CrosstabCountByEventAndYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Event Summary.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEventSummaryReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddGenderMapping"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMapping",
						"SortOnEvent pivot(groupBy(Gender,",
						"          {Elloree Gender},",
						"          {Client Id},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, GenderMapping join(Gender == {Client Gender},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddGenderMapping",
						"CreatePivotEthnicityAndEventTime sort(asc(Gender, true),",
						"     asc({Elloree Gender}, true)) ~> SortOnGender",
						"AddGenderMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Gender},",
						"          {Client Id} = GenderMapping@{Client ID},",
						"          {Client Engagement Date} = GenderMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Gender.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Location",
								"type": "DatasetReference"
							},
							"name": "LocationMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotLocationAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddLocationMapping"
						},
						{
							"name": "SortOnLocation"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Work Office Location} as string,",
						"          {Client Work City} as string,",
						"          {Client Work State} as string,",
						"          {Client Work Country} as string,",
						"          {Client Strategic Work Location Ind} as string,",
						"          {Elloree Work Ofiice} as string,",
						"          {Elloree Work City} as string,",
						"          {Elloree Work State} as string,",
						"          {Elloree Work Region} as string,",
						"          {Elloree Work Country} as string,",
						"          {Elloree Strategic Location} as string,",
						"          {Elloree Location Sort Id} as string,",
						"          {Suggested Elloree Work City} as string,",
						"          {Suggested Elloree Work State} as string,",
						"          {Suggested Elloree Work Country} as string,",
						"          {Suggested Elloree Work Region} as string,",
						"          {Suggested Elloree Strategic Location} as string,",
						"          {Suggested Elloree Location Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LocationMapping",
						"SortOnEvent pivot(groupBy({Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotLocationAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, LocationMapping join({Work Office Location} == {Client Work Office Location}",
						"     && {Work City} == {Client Work City}",
						"     && {Work State} == {Client Work State}",
						"     && {Work Country} == {Client Work Country}",
						"     && {Strategic Work Location Ind} == {Client Strategic Work Location Ind},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddLocationMapping",
						"CreatePivotLocationAndEventTime sort(asc({Work City}, true),",
						"     asc({Work State}, true),",
						"     asc({Work Country}, true),",
						"     asc({Client ID}, true),",
						"     asc({Client Engagement Date}, true)) ~> SortOnLocation",
						"AddLocationMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Event Code},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Previous Job Title},",
						"          {Previous Job Function},",
						"          {Previous Corporate Title},",
						"          EmpCount,",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Client Work Country},",
						"          {Client Work State},",
						"          {Client Work City},",
						"          {Elloree Region} = {Elloree Work Region},",
						"          {Elloree Work Country},",
						"          {Elloree Work State},",
						"          {Elloree Work City},",
						"          {Elloree Location Sort} = {Elloree Location Sort Id},",
						"          {Elloree Strategic Location}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Location.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_ManagerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Identify Manager IDs that are not represented as an employee in any headcount activity.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "HeadcountDatabase"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputMgrCountbyEvent",
							"description": "Output pivot table to audit folder."
						}
					],
					"transformations": [
						{
							"name": "IdentifyMgrsNotInHCT"
						},
						{
							"name": "pivotCountMgrsByEvent",
							"description": "Pivot table displaying counts by manager and event for manager IDs that do not exist in headcount."
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "sort1"
						},
						{
							"name": "GroupByWorkerIDfromDatabaseHCT"
						},
						{
							"name": "GroupByWorkerIDfromTemplateHCT"
						},
						{
							"name": "SelectHCTTemplateColumns"
						},
						{
							"name": "SelectDatbaseHCTColumns"
						},
						{
							"name": "SelectUnionTeplateAndDatabaseHCT"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT'\"),",
						"     format: 'query') ~> HeadcountDatabase",
						"AllCoreData, SelectUnionTeplateAndDatabaseHCT exists({Direct Manager Worker ID}==SelectUnionTeplateAndDatabaseHCT@{Worker ID},",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'left')~> IdentifyMgrsNotInHCT",
						"SortOnEvent pivot(groupBy({Direct Manager Worker ID},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Direct Manager Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotCountMgrsByEvent",
						"IdentifyMgrsNotInHCT derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"pivotCountMgrsByEvent sort(asc({Direct Manager Worker ID}, true)) ~> sort1",
						"HeadcountDatabase aggregate(groupBy(WorkerId,",
						"          Event),",
						"     Count = count(ClientId)) ~> GroupByWorkerIDfromDatabaseHCT",
						"filter1 aggregate(groupBy({Worker ID}),",
						"     Count = count({Client ID})) ~> GroupByWorkerIDfromTemplateHCT",
						"GroupByWorkerIDfromTemplateHCT select(mapColumn(",
						"          {Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHCTTemplateColumns",
						"GroupByWorkerIDfromDatabaseHCT select(mapColumn(",
						"          {Worker ID} = WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDatbaseHCTColumns",
						"SelectHCTTemplateColumns, SelectDatbaseHCTColumns union(byName: true)~> SelectUnionTeplateAndDatabaseHCT",
						"CoreForHCT filter({Event Code}=='HCT') ~> filter1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Managers Not In HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMgrCountbyEvent"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_NullValue')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData",
							"description": "Import all core data.  This workflow identifies the number of null values are in each column by event type."
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"AllCoreData derive({Event Year - Null or N/A} = iif(isNull({Event Year}), 1,0),",
						"          {Event Date  - Null} = iif(isNull({Event Date}), 1,0),",
						"          {Event - Null} = iif(isNull(Event), 1,0),",
						"          {Event Type - Null} = iif(isNull({Event Type}), 1,0),",
						"          {Event Reason - Null} = iif(isNull({Event Reason}), 1,0),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}), 1,0),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}), 1,0),",
						"          {Job Title - Null} = iif(isNull({Job Title}), 1,0),",
						"          {Job Function - Null} = iif(isNull({Job Function}), 1,0),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}), 1,0),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}), 1,0),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}), 1,0),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}), 1,0),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}), 1,0),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}), 1,0),",
						"          {Work City - Null} = iif(isNull({Work City}), 1,0),",
						"          {Work State - Null} = iif(isNull({Work State}), 1,0),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}), 1,0),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}), 1,0),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}), 1,0),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}), 1,0),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}), 1,0),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}), 1,0),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}), 1,0),",
						"          {Race - Null} = iif(isNull(Race), 1,0),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender), 1,0),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}), 1,0),",
						"          {LGBTQ - Null} = iif(isNull(LGBTQ), 1,0),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}), 1,0),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null or N/A}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Event Reason - Null} = sum({Event Reason - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Function - Null} = sum({Job Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office Location - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {LGBTQ - Null} = sum({LGBTQ - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy(Event),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          Event,",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Event Reason} = {Event Reason - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Function} = {Job Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office Location} = {Work Office Location - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          LGBTQ = {LGBTQ - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Null Review.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Applicants')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State} as string,",
						"          {Applicant Country} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
						"          {Applicant ID - Null} = iif(isNull({Applicant ID}),1,iif({Applicant ID}=='N/A',1,0)),",
						"          {Source - Null} = iif(isNull(Source),1,iif(Source=='N/A',1,0)),",
						"          {Applicant Type - Null} = iif(isNull({Applicant Type}),1,iif({Applicant Type}=='N/A',1,0)),",
						"          {Internal Worker ID - Null} = iif(isNull({Internal Worker ID}),1,iif({Internal Worker ID}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGBTQ - Null} = iif(isNull(LGBTQ),1,iif(LGBTQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Applicant Final Disposition - Null} = iif(isNull({Applicant Final Disposition}),1,iif({Applicant Final Disposition}=='N/A',1,0)),",
						"          {Applicant Step Before Final Disposition - Null} = iif(isNull({Applicant Step Before Final Disposition}),1,iif({Applicant Step Before Final Disposition}=='N/A',1,0)),",
						"          {Applicant Rejected Reason - Null} = iif(isNull({Applicant Rejected Reason}),1,iif({Applicant Rejected Reason}=='N/A',1,0)),",
						"          {Applicant Other (1) - Null} = iif(isNull({Applicant Other (1)}),1,iif({Applicant Other (1)}=='N/A',1,0)),",
						"          {Applicant Other (2) - Null} = iif(isNull({Applicant Other (2)}),1,iif({Applicant Other (2)}=='N/A',1,0)),",
						"          {Applicant Other (3) - Null} = iif(isNull({Applicant Other (3)}),1,iif({Applicant Other (3)}=='N/A',1,0)),",
						"          {Applicant Other (4) - Null} = iif(isNull({Applicant Other (4)}),1,iif({Applicant Other (4)}=='N/A',1,0)),",
						"          {Applicant Other (5) - Null} = iif(isNull({Applicant Other (5)}),1,iif({Applicant Other (5)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'APP') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
						"          {Applicant ID - Null} = sum({Applicant ID - Null}),",
						"          {Source - Null} = sum({Source - Null}),",
						"          {Applicant Type - Null} = sum({Applicant Type - Null}),",
						"          {Internal Worker ID - Null} = sum({Internal Worker ID - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGBTQ - Null} = sum({LGBTQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Applicant Final Disposition - Null} = sum({Applicant Final Disposition - Null}),",
						"          {Applicant Step Before Final Disposition - Null} = sum({Applicant Step Before Final Disposition - Null}),",
						"          {Applicant Rejected Reason - Null} = sum({Applicant Rejected Reason - Null}),",
						"          {Applicant Other (1) - Null} = sum({Applicant Other (1) - Null}),",
						"          {Applicant Other (2) - Null} = sum({Applicant Other (2) - Null}),",
						"          {Applicant Other (3) - Null} = sum({Applicant Other (3) - Null}),",
						"          {Applicant Other (4) - Null} = sum({Applicant Other (4) - Null}),",
						"          {Applicant Other (5) - Null} = sum({Applicant Other (5) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Requisition ID} = {Requisition ID - Null},",
						"          {Applicant ID} = {Applicant ID - Null},",
						"          Source = {Source - Null},",
						"          {Applicant Type} = {Applicant Type - Null},",
						"          {Internal Worker ID} = {Internal Worker ID - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGBTQ = {LGBTQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Applicant Final Disposition} = {Applicant Final Disposition - Null},",
						"          {Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition - Null},",
						"          {Applicant Rejected Reason} = {Applicant Rejected Reason - Null},",
						"          {Applicant Other (1)} = {Applicant Other (1) - Null},",
						"          {Applicant Other (2)} = {Applicant Other (2) - Null},",
						"          {Applicant Other (3)} = {Applicant Other (3) - Null},",
						"          {Applicant Other (4)} = {Applicant Other (4) - Null},",
						"          {Applicant Other (5)} = {Applicant Other (5) - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Applicants.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": []
		}
	]
}