{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'All',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, women',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, men',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_Fact_OtherCoreAnalysis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Adhoc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T1OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T2OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T3OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T4OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T5OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T6OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T7OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T8OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T9OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T10OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T11OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T12OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T13OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T14OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T15OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T16OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T17OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T18OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T19OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T20OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T21OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T22OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T23OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T24OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T25OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T26OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T27OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T28OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T29OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T30OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T31OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T32OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T33OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T34OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T35OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T36OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T37OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T38OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T39OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T40OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T41OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T42OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T43OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T44OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T45OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T46OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T47OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T48OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T49OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T50OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFullPop"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "join1"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "SelectCleanup"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          T1_WorkerId as string,",
						"          T1_EventType as string,",
						"          T1_CharVal1 as string,",
						"          T1_CharVal2 as string,",
						"          T1_NumVal1 as double,",
						"          T1_NumVal2 as double,",
						"          T1_DtVal1 as date,",
						"          T1_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T1_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T1_EventType,OtherCharVal11 T1_CharVal1,OtherCharVal2 T1_CharVal2,OtherNumVal1 as T1_NumVal1,OtherNumVal2 as T1_NumVal2,OtherDtVal1 as T1_DtVal1,OtherDtVal2 as T1_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=1)\"),",
						"     format: 'query') ~> T1OtherCore",
						"source(output(",
						"          T2_WorkerId as string,",
						"          T2_EventType as string,",
						"          T2_CharVal1 as string,",
						"          T2_CharVal2 as string,",
						"          T2_NumVal1 as double,",
						"          T2_NumVal2 as double,",
						"          T2_DtVal1 as date,",
						"          T2_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T2_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T2_EventType,OtherCharVal11 T2_CharVal1,OtherCharVal2 T2_CharVal2,OtherNumVal1 as T2_NumVal1,OtherNumVal2 as T2_NumVal2,OtherDtVal1 as T2_DtVal1,OtherDtVal2 as T2_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=2)\"),",
						"     format: 'query') ~> T2OtherCore",
						"source(output(",
						"          T3_WorkerId as string,",
						"          T3_EventType as string,",
						"          T3_CharVal1 as string,",
						"          T3_CharVal2 as string,",
						"          T3_NumVal1 as double,",
						"          T3_NumVal2 as double,",
						"          T3_DtVal1 as date,",
						"          T3_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T3_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T3_EventType,OtherCharVal11 T3_CharVal1,OtherCharVal2 T3_CharVal2,OtherNumVal1 as T3_NumVal1,OtherNumVal2 as T3_NumVal2,OtherDtVal1 as T3_DtVal1,OtherDtVal2 as T3_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=3)\"),",
						"     format: 'query') ~> T3OtherCore",
						"source(output(",
						"          T4_WorkerId as string,",
						"          T4_EventType as string,",
						"          T4_CharVal1 as string,",
						"          T4_CharVal2 as string,",
						"          T4_NumVal1 as double,",
						"          T4_NumVal2 as double,",
						"          T4_DtVal1 as date,",
						"          T4_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T4_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T4_EventType,OtherCharVal11 T4_CharVal1,OtherCharVal2 T4_CharVal2,OtherNumVal1 as T4_NumVal1,OtherNumVal2 as T4_NumVal2,OtherDtVal1 as T4_DtVal1,OtherDtVal2 as T4_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=4)\"),",
						"     format: 'query') ~> T4OtherCore",
						"source(output(",
						"          T5_WorkerId as string,",
						"          T5_EventType as string,",
						"          T5_CharVal1 as string,",
						"          T5_CharVal2 as string,",
						"          T5_NumVal1 as double,",
						"          T5_NumVal2 as double,",
						"          T5_DtVal1 as date,",
						"          T5_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T5_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T5_EventType,OtherCharVal11 T5_CharVal1,OtherCharVal2 T5_CharVal2,OtherNumVal1 as T5_NumVal1,OtherNumVal2 as T5_NumVal2,OtherDtVal1 as T5_DtVal1,OtherDtVal2 as T5_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=5)\"),",
						"     format: 'query') ~> T5OtherCore",
						"source(output(",
						"          T6_WorkerId as string,",
						"          T6_EventType as string,",
						"          T6_CharVal1 as string,",
						"          T6_CharVal2 as string,",
						"          T6_NumVal1 as double,",
						"          T6_NumVal2 as double,",
						"          T6_DtVal1 as date,",
						"          T6_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T6_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T6_EventType,OtherCharVal11 T6_CharVal1,OtherCharVal2 T6_CharVal2,OtherNumVal1 as T6_NumVal1,OtherNumVal2 as T6_NumVal2,OtherDtVal1 as T6_DtVal1,OtherDtVal2 as T6_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=6)\"),",
						"     format: 'query') ~> T6OtherCore",
						"source(output(",
						"          T7_WorkerId as string,",
						"          T7_EventType as string,",
						"          T7_CharVal1 as string,",
						"          T7_CharVal2 as string,",
						"          T7_NumVal1 as double,",
						"          T7_NumVal2 as double,",
						"          T7_DtVal1 as date,",
						"          T7_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T7_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T7_EventType,OtherCharVal11 T7_CharVal1,OtherCharVal2 T7_CharVal2,OtherNumVal1 as T7_NumVal1,OtherNumVal2 as T7_NumVal2,OtherDtVal1 as T7_DtVal1,OtherDtVal2 as T7_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=7)\"),",
						"     format: 'query') ~> T7OtherCore",
						"source(output(",
						"          T8_WorkerId as string,",
						"          T8_EventType as string,",
						"          T8_CharVal1 as string,",
						"          T8_CharVal2 as string,",
						"          T8_NumVal1 as double,",
						"          T8_NumVal2 as double,",
						"          T8_DtVal1 as date,",
						"          T8_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T8_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T8_EventType,OtherCharVal11 T8_CharVal1,OtherCharVal2 T8_CharVal2,OtherNumVal1 as T8_NumVal1,OtherNumVal2 as T8_NumVal2,OtherDtVal1 as T8_DtVal1,OtherDtVal2 as T8_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=8)\"),",
						"     format: 'query') ~> T8OtherCore",
						"source(output(",
						"          T9_WorkerId as string,",
						"          T9_EventType as string,",
						"          T9_CharVal1 as string,",
						"          T9_CharVal2 as string,",
						"          T9_NumVal1 as double,",
						"          T9_NumVal2 as double,",
						"          T9_DtVal1 as date,",
						"          T9_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T9_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T9_EventType,OtherCharVal11 T9_CharVal1,OtherCharVal2 T9_CharVal2,OtherNumVal1 as T9_NumVal1,OtherNumVal2 as T9_NumVal2,OtherDtVal1 as T9_DtVal1,OtherDtVal2 as T9_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=9)\"),",
						"     format: 'query') ~> T9OtherCore",
						"source(output(",
						"          T10_WorkerId as string,",
						"          T10_EventType as string,",
						"          T10_CharVal1 as string,",
						"          T10_CharVal2 as string,",
						"          T10_NumVal1 as double,",
						"          T10_NumVal2 as double,",
						"          T10_DtVal1 as date,",
						"          T10_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T10_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T10_EventType,OtherCharVal11 T10_CharVal1,OtherCharVal2 T10_CharVal2,OtherNumVal1 as T10_NumVal1,OtherNumVal2 as T10_NumVal2,OtherDtVal1 as T10_DtVal1,OtherDtVal2 as T10_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=10)\"),",
						"     format: 'query') ~> T10OtherCore",
						"source(output(",
						"          T11_WorkerId as string,",
						"          T11_EventType as string,",
						"          T11_CharVal1 as string,",
						"          T11_CharVal2 as string,",
						"          T11_NumVal1 as double,",
						"          T11_NumVal2 as double,",
						"          T11_DtVal1 as date,",
						"          T11_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T11_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T11_EventType,OtherCharVal11 T11_CharVal1,OtherCharVal2 T11_CharVal2,OtherNumVal1 as T11_NumVal1,OtherNumVal2 as T11_NumVal2,OtherDtVal1 as T11_DtVal1,OtherDtVal2 as T11_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=11)\"),",
						"     format: 'query') ~> T11OtherCore",
						"source(output(",
						"          T12_WorkerId as string,",
						"          T12_EventType as string,",
						"          T12_CharVal1 as string,",
						"          T12_CharVal2 as string,",
						"          T12_NumVal1 as double,",
						"          T12_NumVal2 as double,",
						"          T12_DtVal1 as date,",
						"          T12_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T12_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T12_EventType,OtherCharVal11 T12_CharVal1,OtherCharVal2 T12_CharVal2,OtherNumVal1 as T12_NumVal1,OtherNumVal2 as T12_NumVal2,OtherDtVal1 as T12_DtVal1,OtherDtVal2 as T12_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=12)\"),",
						"     format: 'query') ~> T12OtherCore",
						"source(output(",
						"          T13_WorkerId as string,",
						"          T13_EventType as string,",
						"          T13_CharVal1 as string,",
						"          T13_CharVal2 as string,",
						"          T13_NumVal1 as double,",
						"          T13_NumVal2 as double,",
						"          T13_DtVal1 as date,",
						"          T13_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T13_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T13_EventType,OtherCharVal11 T13_CharVal1,OtherCharVal2 T13_CharVal2,OtherNumVal1 as T13_NumVal1,OtherNumVal2 as T13_NumVal2,OtherDtVal1 as T13_DtVal1,OtherDtVal2 as T13_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=13)\"),",
						"     format: 'query') ~> T13OtherCore",
						"source(output(",
						"          T14_WorkerId as string,",
						"          T14_EventType as string,",
						"          T14_CharVal1 as string,",
						"          T14_CharVal2 as string,",
						"          T14_NumVal1 as double,",
						"          T14_NumVal2 as double,",
						"          T14_DtVal1 as date,",
						"          T14_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T14_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T14_EventType,OtherCharVal11 T14_CharVal1,OtherCharVal2 T14_CharVal2,OtherNumVal1 as T14_NumVal1,OtherNumVal2 as T14_NumVal2,OtherDtVal1 as T14_DtVal1,OtherDtVal2 as T14_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=14)\"),",
						"     format: 'query') ~> T14OtherCore",
						"source(output(",
						"          T15_WorkerId as string,",
						"          T15_EventType as string,",
						"          T15_CharVal1 as string,",
						"          T15_CharVal2 as string,",
						"          T15_NumVal1 as double,",
						"          T15_NumVal2 as double,",
						"          T15_DtVal1 as date,",
						"          T15_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T15_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T15_EventType,OtherCharVal11 T15_CharVal1,OtherCharVal2 T15_CharVal2,OtherNumVal1 as T15_NumVal1,OtherNumVal2 as T15_NumVal2,OtherDtVal1 as T15_DtVal1,OtherDtVal2 as T15_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=15)\"),",
						"     format: 'query') ~> T15OtherCore",
						"source(output(",
						"          T16_WorkerId as string,",
						"          T16_EventType as string,",
						"          T16_CharVal1 as string,",
						"          T16_CharVal2 as string,",
						"          T16_NumVal1 as double,",
						"          T16_NumVal2 as double,",
						"          T16_DtVal1 as date,",
						"          T16_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T16_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T16_EventType,OtherCharVal11 T16_CharVal1,OtherCharVal2 T16_CharVal2,OtherNumVal1 as T16_NumVal1,OtherNumVal2 as T16_NumVal2,OtherDtVal1 as T16_DtVal1,OtherDtVal2 as T16_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=16)\"),",
						"     format: 'query') ~> T16OtherCore",
						"source(output(",
						"          T17_WorkerId as string,",
						"          T17_EventType as string,",
						"          T17_CharVal1 as string,",
						"          T17_CharVal2 as string,",
						"          T17_NumVal1 as double,",
						"          T17_NumVal2 as double,",
						"          T17_DtVal1 as date,",
						"          T17_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T17_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T17_EventType,OtherCharVal11 T17_CharVal1,OtherCharVal2 T17_CharVal2,OtherNumVal1 as T17_NumVal1,OtherNumVal2 as T17_NumVal2,OtherDtVal1 as T17_DtVal1,OtherDtVal2 as T17_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=17)\"),",
						"     format: 'query') ~> T17OtherCore",
						"source(output(",
						"          T18_WorkerId as string,",
						"          T18_EventType as string,",
						"          T18_CharVal1 as string,",
						"          T18_CharVal2 as string,",
						"          T18_NumVal1 as double,",
						"          T18_NumVal2 as double,",
						"          T18_DtVal1 as date,",
						"          T18_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T18_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T18_EventType,OtherCharVal11 T18_CharVal1,OtherCharVal2 T18_CharVal2,OtherNumVal1 as T18_NumVal1,OtherNumVal2 as T18_NumVal2,OtherDtVal1 as T18_DtVal1,OtherDtVal2 as T18_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=18)\"),",
						"     format: 'query') ~> T18OtherCore",
						"source(output(",
						"          T19_WorkerId as string,",
						"          T19_EventType as string,",
						"          T19_CharVal1 as string,",
						"          T19_CharVal2 as string,",
						"          T19_NumVal1 as double,",
						"          T19_NumVal2 as double,",
						"          T19_DtVal1 as date,",
						"          T19_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T19_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T19_EventType,OtherCharVal11 T19_CharVal1,OtherCharVal2 T19_CharVal2,OtherNumVal1 as T19_NumVal1,OtherNumVal2 as T19_NumVal2,OtherDtVal1 as T19_DtVal1,OtherDtVal2 as T19_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=19)\"),",
						"     format: 'query') ~> T19OtherCore",
						"source(output(",
						"          T20_WorkerId as string,",
						"          T20_EventType as string,",
						"          T20_CharVal1 as string,",
						"          T20_CharVal2 as string,",
						"          T20_NumVal1 as double,",
						"          T20_NumVal2 as double,",
						"          T20_DtVal1 as date,",
						"          T20_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T20_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T20_EventType,OtherCharVal11 T20_CharVal1,OtherCharVal2 T20_CharVal2,OtherNumVal1 as T20_NumVal1,OtherNumVal2 as T20_NumVal2,OtherDtVal1 as T20_DtVal1,OtherDtVal2 as T20_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=20)\"),",
						"     format: 'query') ~> T20OtherCore",
						"source(output(",
						"          T21_WorkerId as string,",
						"          T21_EventType as string,",
						"          T21_CharVal1 as string,",
						"          T21_CharVal2 as string,",
						"          T21_NumVal1 as double,",
						"          T21_NumVal2 as double,",
						"          T21_DtVal1 as date,",
						"          T21_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T21_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T21_EventType,OtherCharVal11 T21_CharVal1,OtherCharVal2 T21_CharVal2,OtherNumVal1 as T21_NumVal1,OtherNumVal2 as T21_NumVal2,OtherDtVal1 as T21_DtVal1,OtherDtVal2 as T21_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=21)\"),",
						"     format: 'query') ~> T21OtherCore",
						"source(output(",
						"          T22_WorkerId as string,",
						"          T22_EventType as string,",
						"          T22_CharVal1 as string,",
						"          T22_CharVal2 as string,",
						"          T22_NumVal1 as double,",
						"          T22_NumVal2 as double,",
						"          T22_DtVal1 as date,",
						"          T22_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T22_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T22_EventType,OtherCharVal11 T22_CharVal1,OtherCharVal2 T22_CharVal2,OtherNumVal1 as T22_NumVal1,OtherNumVal2 as T22_NumVal2,OtherDtVal1 as T22_DtVal1,OtherDtVal2 as T22_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=22)\"),",
						"     format: 'query') ~> T22OtherCore",
						"source(output(",
						"          T23_WorkerId as string,",
						"          T23_EventType as string,",
						"          T23_CharVal1 as string,",
						"          T23_CharVal2 as string,",
						"          T23_NumVal1 as double,",
						"          T23_NumVal2 as double,",
						"          T23_DtVal1 as date,",
						"          T23_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T23_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T23_EventType,OtherCharVal11 T23_CharVal1,OtherCharVal2 T23_CharVal2,OtherNumVal1 as T23_NumVal1,OtherNumVal2 as T23_NumVal2,OtherDtVal1 as T23_DtVal1,OtherDtVal2 as T23_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=23)\"),",
						"     format: 'query') ~> T23OtherCore",
						"source(output(",
						"          T24_WorkerId as string,",
						"          T24_EventType as string,",
						"          T24_CharVal1 as string,",
						"          T24_CharVal2 as string,",
						"          T24_NumVal1 as double,",
						"          T24_NumVal2 as double,",
						"          T24_DtVal1 as date,",
						"          T24_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T24_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T24_EventType,OtherCharVal11 T24_CharVal1,OtherCharVal2 T24_CharVal2,OtherNumVal1 as T24_NumVal1,OtherNumVal2 as T24_NumVal2,OtherDtVal1 as T24_DtVal1,OtherDtVal2 as T24_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=24)\"),",
						"     format: 'query') ~> T24OtherCore",
						"source(output(",
						"          T25_WorkerId as string,",
						"          T25_EventType as string,",
						"          T25_CharVal1 as string,",
						"          T25_CharVal2 as string,",
						"          T25_NumVal1 as double,",
						"          T25_NumVal2 as double,",
						"          T25_DtVal1 as date,",
						"          T25_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T25_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T25_EventType,OtherCharVal11 T25_CharVal1,OtherCharVal2 T25_CharVal2,OtherNumVal1 as T25_NumVal1,OtherNumVal2 as T25_NumVal2,OtherDtVal1 as T25_DtVal1,OtherDtVal2 as T25_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=25)\"),",
						"     format: 'query') ~> T25OtherCore",
						"source(output(",
						"          T26_WorkerId as string,",
						"          T26_EventType as string,",
						"          T26_CharVal1 as string,",
						"          T26_CharVal2 as string,",
						"          T26_NumVal1 as double,",
						"          T26_NumVal2 as double,",
						"          T26_DtVal1 as date,",
						"          T26_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T26_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T26_EventType,OtherCharVal11 T26_CharVal1,OtherCharVal2 T26_CharVal2,OtherNumVal1 as T26_NumVal1,OtherNumVal2 as T26_NumVal2,OtherDtVal1 as T26_DtVal1,OtherDtVal2 as T26_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=26)\"),",
						"     format: 'query') ~> T26OtherCore",
						"source(output(",
						"          T27_WorkerId as string,",
						"          T27_EventType as string,",
						"          T27_CharVal1 as string,",
						"          T27_CharVal2 as string,",
						"          T27_NumVal1 as double,",
						"          T27_NumVal2 as double,",
						"          T27_DtVal1 as date,",
						"          T27_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T27_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T27_EventType,OtherCharVal11 T27_CharVal1,OtherCharVal2 T27_CharVal2,OtherNumVal1 as T27_NumVal1,OtherNumVal2 as T27_NumVal2,OtherDtVal1 as T27_DtVal1,OtherDtVal2 as T27_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=27)\"),",
						"     format: 'query') ~> T27OtherCore",
						"source(output(",
						"          T28_WorkerId as string,",
						"          T28_EventType as string,",
						"          T28_CharVal1 as string,",
						"          T28_CharVal2 as string,",
						"          T28_NumVal1 as double,",
						"          T28_NumVal2 as double,",
						"          T28_DtVal1 as date,",
						"          T28_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T28_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T28_EventType,OtherCharVal11 T28_CharVal1,OtherCharVal2 T28_CharVal2,OtherNumVal1 as T28_NumVal1,OtherNumVal2 as T28_NumVal2,OtherDtVal1 as T28_DtVal1,OtherDtVal2 as T28_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=28)\"),",
						"     format: 'query') ~> T28OtherCore",
						"source(output(",
						"          T29_WorkerId as string,",
						"          T29_EventType as string,",
						"          T29_CharVal1 as string,",
						"          T29_CharVal2 as string,",
						"          T29_NumVal1 as double,",
						"          T29_NumVal2 as double,",
						"          T29_DtVal1 as date,",
						"          T29_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T29_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T29_EventType,OtherCharVal11 T29_CharVal1,OtherCharVal2 T29_CharVal2,OtherNumVal1 as T29_NumVal1,OtherNumVal2 as T29_NumVal2,OtherDtVal1 as T29_DtVal1,OtherDtVal2 as T29_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=29)\"),",
						"     format: 'query') ~> T29OtherCore",
						"source(output(",
						"          T30_WorkerId as string,",
						"          T30_EventType as string,",
						"          T30_CharVal1 as string,",
						"          T30_CharVal2 as string,",
						"          T30_NumVal1 as double,",
						"          T30_NumVal2 as double,",
						"          T30_DtVal1 as date,",
						"          T30_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T30_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T30_EventType,OtherCharVal11 T30_CharVal1,OtherCharVal2 T30_CharVal2,OtherNumVal1 as T30_NumVal1,OtherNumVal2 as T30_NumVal2,OtherDtVal1 as T30_DtVal1,OtherDtVal2 as T30_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=30)\"),",
						"     format: 'query') ~> T30OtherCore",
						"source(output(",
						"          T31_WorkerId as string,",
						"          T31_EventType as string,",
						"          T31_CharVal1 as string,",
						"          T31_CharVal2 as string,",
						"          T31_NumVal1 as double,",
						"          T31_NumVal2 as double,",
						"          T31_DtVal1 as date,",
						"          T31_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T31_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T31_EventType,OtherCharVal11 T31_CharVal1,OtherCharVal2 T31_CharVal2,OtherNumVal1 as T31_NumVal1,OtherNumVal2 as T31_NumVal2,OtherDtVal1 as T31_DtVal1,OtherDtVal2 as T31_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=31)\"),",
						"     format: 'query') ~> T31OtherCore",
						"source(output(",
						"          T32_WorkerId as string,",
						"          T32_EventType as string,",
						"          T32_CharVal1 as string,",
						"          T32_CharVal2 as string,",
						"          T32_NumVal1 as double,",
						"          T32_NumVal2 as double,",
						"          T32_DtVal1 as date,",
						"          T32_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T32_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T32_EventType,OtherCharVal11 T32_CharVal1,OtherCharVal2 T32_CharVal2,OtherNumVal1 as T32_NumVal1,OtherNumVal2 as T32_NumVal2,OtherDtVal1 as T32_DtVal1,OtherDtVal2 as T32_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=32)\"),",
						"     format: 'query') ~> T32OtherCore",
						"source(output(",
						"          T33_WorkerId as string,",
						"          T33_EventType as string,",
						"          T33_CharVal1 as string,",
						"          T33_CharVal2 as string,",
						"          T33_NumVal1 as double,",
						"          T33_NumVal2 as double,",
						"          T33_DtVal1 as date,",
						"          T33_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T33_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T33_EventType,OtherCharVal11 T33_CharVal1,OtherCharVal2 T33_CharVal2,OtherNumVal1 as T33_NumVal1,OtherNumVal2 as T33_NumVal2,OtherDtVal1 as T33_DtVal1,OtherDtVal2 as T33_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=33)\"),",
						"     format: 'query') ~> T33OtherCore",
						"source(output(",
						"          T34_WorkerId as string,",
						"          T34_EventType as string,",
						"          T34_CharVal1 as string,",
						"          T34_CharVal2 as string,",
						"          T34_NumVal1 as double,",
						"          T34_NumVal2 as double,",
						"          T34_DtVal1 as date,",
						"          T34_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T34_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T34_EventType,OtherCharVal11 T34_CharVal1,OtherCharVal2 T34_CharVal2,OtherNumVal1 as T34_NumVal1,OtherNumVal2 as T34_NumVal2,OtherDtVal1 as T34_DtVal1,OtherDtVal2 as T34_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=34)\"),",
						"     format: 'query') ~> T34OtherCore",
						"source(output(",
						"          T35_WorkerId as string,",
						"          T35_EventType as string,",
						"          T35_CharVal1 as string,",
						"          T35_CharVal2 as string,",
						"          T35_NumVal1 as double,",
						"          T35_NumVal2 as double,",
						"          T35_DtVal1 as date,",
						"          T35_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T35_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T35_EventType,OtherCharVal11 T35_CharVal1,OtherCharVal2 T35_CharVal2,OtherNumVal1 as T35_NumVal1,OtherNumVal2 as T35_NumVal2,OtherDtVal1 as T35_DtVal1,OtherDtVal2 as T35_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=35)\"),",
						"     format: 'query') ~> T35OtherCore",
						"source(output(",
						"          T36_WorkerId as string,",
						"          T36_EventType as string,",
						"          T36_CharVal1 as string,",
						"          T36_CharVal2 as string,",
						"          T36_NumVal1 as double,",
						"          T36_NumVal2 as double,",
						"          T36_DtVal1 as date,",
						"          T36_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T36_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T36_EventType,OtherCharVal11 T36_CharVal1,OtherCharVal2 T36_CharVal2,OtherNumVal1 as T36_NumVal1,OtherNumVal2 as T36_NumVal2,OtherDtVal1 as T36_DtVal1,OtherDtVal2 as T36_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=36)\"),",
						"     format: 'query') ~> T36OtherCore",
						"source(output(",
						"          T37_WorkerId as string,",
						"          T37_EventType as string,",
						"          T37_CharVal1 as string,",
						"          T37_CharVal2 as string,",
						"          T37_NumVal1 as double,",
						"          T37_NumVal2 as double,",
						"          T37_DtVal1 as date,",
						"          T37_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T37_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T37_EventType,OtherCharVal11 T37_CharVal1,OtherCharVal2 T37_CharVal2,OtherNumVal1 as T37_NumVal1,OtherNumVal2 as T37_NumVal2,OtherDtVal1 as T37_DtVal1,OtherDtVal2 as T37_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=37)\"),",
						"     format: 'query') ~> T37OtherCore",
						"source(output(",
						"          T38_WorkerId as string,",
						"          T38_EventType as string,",
						"          T38_CharVal1 as string,",
						"          T38_CharVal2 as string,",
						"          T38_NumVal1 as double,",
						"          T38_NumVal2 as double,",
						"          T38_DtVal1 as date,",
						"          T38_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T38_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T38_EventType,OtherCharVal11 T38_CharVal1,OtherCharVal2 T38_CharVal2,OtherNumVal1 as T38_NumVal1,OtherNumVal2 as T38_NumVal2,OtherDtVal1 as T38_DtVal1,OtherDtVal2 as T38_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=38)\"),",
						"     format: 'query') ~> T38OtherCore",
						"source(output(",
						"          T39_WorkerId as string,",
						"          T39_EventType as string,",
						"          T39_CharVal1 as string,",
						"          T39_CharVal2 as string,",
						"          T39_NumVal1 as double,",
						"          T39_NumVal2 as double,",
						"          T39_DtVal1 as date,",
						"          T39_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T39_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T39_EventType,OtherCharVal11 T39_CharVal1,OtherCharVal2 T39_CharVal2,OtherNumVal1 as T39_NumVal1,OtherNumVal2 as T39_NumVal2,OtherDtVal1 as T39_DtVal1,OtherDtVal2 as T39_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=39)\"),",
						"     format: 'query') ~> T39OtherCore",
						"source(output(",
						"          T40_WorkerId as string,",
						"          T40_EventType as string,",
						"          T40_CharVal1 as string,",
						"          T40_CharVal2 as string,",
						"          T40_NumVal1 as double,",
						"          T40_NumVal2 as double,",
						"          T40_DtVal1 as date,",
						"          T40_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T40_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T40_EventType,OtherCharVal11 T40_CharVal1,OtherCharVal2 T40_CharVal2,OtherNumVal1 as T40_NumVal1,OtherNumVal2 as T40_NumVal2,OtherDtVal1 as T40_DtVal1,OtherDtVal2 as T40_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=40)\"),",
						"     format: 'query') ~> T40OtherCore",
						"source(output(",
						"          T41_WorkerId as string,",
						"          T41_EventType as string,",
						"          T41_CharVal1 as string,",
						"          T41_CharVal2 as string,",
						"          T41_NumVal1 as double,",
						"          T41_NumVal2 as double,",
						"          T41_DtVal1 as date,",
						"          T41_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T41_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T41_EventType,OtherCharVal11 T41_CharVal1,OtherCharVal2 T41_CharVal2,OtherNumVal1 as T41_NumVal1,OtherNumVal2 as T41_NumVal2,OtherDtVal1 as T41_DtVal1,OtherDtVal2 as T41_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=41)\"),",
						"     format: 'query') ~> T41OtherCore",
						"source(output(",
						"          T42_WorkerId as string,",
						"          T42_EventType as string,",
						"          T42_CharVal1 as string,",
						"          T42_CharVal2 as string,",
						"          T42_NumVal1 as double,",
						"          T42_NumVal2 as double,",
						"          T42_DtVal1 as date,",
						"          T42_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T42_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T42_EventType,OtherCharVal11 T42_CharVal1,OtherCharVal2 T42_CharVal2,OtherNumVal1 as T42_NumVal1,OtherNumVal2 as T42_NumVal2,OtherDtVal1 as T42_DtVal1,OtherDtVal2 as T42_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=42)\"),",
						"     format: 'query') ~> T42OtherCore",
						"source(output(",
						"          T43_WorkerId as string,",
						"          T43_EventType as string,",
						"          T43_CharVal1 as string,",
						"          T43_CharVal2 as string,",
						"          T43_NumVal1 as double,",
						"          T43_NumVal2 as double,",
						"          T43_DtVal1 as date,",
						"          T43_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T43_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T43_EventType,OtherCharVal11 T43_CharVal1,OtherCharVal2 T43_CharVal2,OtherNumVal1 as T43_NumVal1,OtherNumVal2 as T43_NumVal2,OtherDtVal1 as T43_DtVal1,OtherDtVal2 as T43_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=43)\"),",
						"     format: 'query') ~> T43OtherCore",
						"source(output(",
						"          T44_WorkerId as string,",
						"          T44_EventType as string,",
						"          T44_CharVal1 as string,",
						"          T44_CharVal2 as string,",
						"          T44_NumVal1 as double,",
						"          T44_NumVal2 as double,",
						"          T44_DtVal1 as date,",
						"          T44_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T44_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T44_EventType,OtherCharVal11 T44_CharVal1,OtherCharVal2 T44_CharVal2,OtherNumVal1 as T44_NumVal1,OtherNumVal2 as T44_NumVal2,OtherDtVal1 as T44_DtVal1,OtherDtVal2 as T44_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=44)\"),",
						"     format: 'query') ~> T44OtherCore",
						"source(output(",
						"          T45_WorkerId as string,",
						"          T45_EventType as string,",
						"          T45_CharVal1 as string,",
						"          T45_CharVal2 as string,",
						"          T45_NumVal1 as double,",
						"          T45_NumVal2 as double,",
						"          T45_DtVal1 as date,",
						"          T45_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T45_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T45_EventType,OtherCharVal11 T45_CharVal1,OtherCharVal2 T45_CharVal2,OtherNumVal1 as T45_NumVal1,OtherNumVal2 as T45_NumVal2,OtherDtVal1 as T45_DtVal1,OtherDtVal2 as T45_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=45)\"),",
						"     format: 'query') ~> T45OtherCore",
						"source(output(",
						"          T46_WorkerId as string,",
						"          T46_EventType as string,",
						"          T46_CharVal1 as string,",
						"          T46_CharVal2 as string,",
						"          T46_NumVal1 as double,",
						"          T46_NumVal2 as double,",
						"          T46_DtVal1 as date,",
						"          T46_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T46_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T46_EventType,OtherCharVal11 T46_CharVal1,OtherCharVal2 T46_CharVal2,OtherNumVal1 as T46_NumVal1,OtherNumVal2 as T46_NumVal2,OtherDtVal1 as T46_DtVal1,OtherDtVal2 as T46_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=46)\"),",
						"     format: 'query') ~> T46OtherCore",
						"source(output(",
						"          T47_WorkerId as string,",
						"          T47_EventType as string,",
						"          T47_CharVal1 as string,",
						"          T47_CharVal2 as string,",
						"          T47_NumVal1 as double,",
						"          T47_NumVal2 as double,",
						"          T47_DtVal1 as date,",
						"          T47_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T47_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T47_EventType,OtherCharVal11 T47_CharVal1,OtherCharVal2 T47_CharVal2,OtherNumVal1 as T47_NumVal1,OtherNumVal2 as T47_NumVal2,OtherDtVal1 as T47_DtVal1,OtherDtVal2 as T47_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=47)\"),",
						"     format: 'query') ~> T47OtherCore",
						"source(output(",
						"          T48_WorkerId as string,",
						"          T48_EventType as string,",
						"          T48_CharVal1 as string,",
						"          T48_CharVal2 as string,",
						"          T48_NumVal1 as double,",
						"          T48_NumVal2 as double,",
						"          T48_DtVal1 as date,",
						"          T48_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T48_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T48_EventType,OtherCharVal11 T48_CharVal1,OtherCharVal2 T48_CharVal2,OtherNumVal1 as T48_NumVal1,OtherNumVal2 as T48_NumVal2,OtherDtVal1 as T48_DtVal1,OtherDtVal2 as T48_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=48)\"),",
						"     format: 'query') ~> T48OtherCore",
						"source(output(",
						"          T49_WorkerId as string,",
						"          T49_EventType as string,",
						"          T49_CharVal1 as string,",
						"          T49_CharVal2 as string,",
						"          T49_NumVal1 as double,",
						"          T49_NumVal2 as double,",
						"          T49_DtVal1 as date,",
						"          T49_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T49_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T49_EventType,OtherCharVal11 T49_CharVal1,OtherCharVal2 T49_CharVal2,OtherNumVal1 as T49_NumVal1,OtherNumVal2 as T49_NumVal2,OtherDtVal1 as T49_DtVal1,OtherDtVal2 as T49_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=49)\"),",
						"     format: 'query') ~> T49OtherCore",
						"source(output(",
						"          T50_WorkerId as string,",
						"          T50_EventType as string,",
						"          T50_CharVal1 as string,",
						"          T50_CharVal2 as string,",
						"          T50_NumVal1 as double,",
						"          T50_NumVal2 as double,",
						"          T50_DtVal1 as date,",
						"          T50_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T50_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T50_EventType,OtherCharVal11 T50_CharVal1,OtherCharVal2 T50_CharVal2,OtherNumVal1 as T50_NumVal1,OtherNumVal2 as T50_NumVal2,OtherDtVal1 as T50_DtVal1,OtherDtVal2 as T50_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=50)\"),",
						"     format: 'query') ~> T50OtherCore",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFullPop",
						"OtherCoreFullPop, T1OtherCore join(WorkerId == T1_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, T2OtherCore join(WorkerId == T2_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, T3OtherCore join(WorkerId == T3_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, T4OtherCore join(WorkerId == T4_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, T5OtherCore join(WorkerId == T5_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, T6OtherCore join(WorkerId == T6_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, T7OtherCore join(WorkerId == T7_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT7, T8OtherCore join(WorkerId == T8_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"joinT8, T9OtherCore join(WorkerId == T9_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, T10OtherCore join(WorkerId == T10_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, T11OtherCore join(WorkerId == T11_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, T12OtherCore join(WorkerId == T12_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, T13OtherCore join(WorkerId == T13_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, T14OtherCore join(WorkerId == T14_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, T15OtherCore join(WorkerId == T15_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, T16OtherCore join(WorkerId == T16_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, T17OtherCore join(WorkerId == T17_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, T18OtherCore join(WorkerId == T18_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, T19OtherCore join(WorkerId == T19_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, T20OtherCore join(WorkerId == T20_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, T21OtherCore join(WorkerId == T21_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, T22OtherCore join(WorkerId == T22_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, T23OtherCore join(WorkerId == T23_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, T24OtherCore join(WorkerId == T24_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, T25OtherCore join(WorkerId == T25_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, T26OtherCore join(WorkerId == T26_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, T27OtherCore join(WorkerId == T27_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, T28OtherCore join(WorkerId == T28_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, T29OtherCore join(WorkerId == T29_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, T30OtherCore join(WorkerId == T30_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, T31OtherCore join(WorkerId == T31_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, T32OtherCore join(WorkerId == T32_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, T33OtherCore join(WorkerId == T33_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, T34OtherCore join(WorkerId == T34_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, T35OtherCore join(WorkerId == T35_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, T36OtherCore join(WorkerId == T36_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, T37OtherCore join(WorkerId == T37_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, T38OtherCore join(WorkerId == T38_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, T39OtherCore join(WorkerId == T39_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, T40OtherCore join(WorkerId == T40_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40, T41OtherCore join(WorkerId == T41_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, T42OtherCore join(WorkerId == T42_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, T43OtherCore join(WorkerId == T43_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, T44OtherCore join(WorkerId == T44_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, T45OtherCore join(WorkerId == T45_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, T46OtherCore join(WorkerId == T46_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, T47OtherCore join(WorkerId == T47_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, T48OtherCore join(WorkerId == T48_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, T49OtherCore join(WorkerId == T49_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, T50OtherCore join(WorkerId == T50_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"joinT50 select(mapColumn(",
						"          WorkerId,",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          T1_EventType,",
						"          T1_CharVal1,",
						"          T1_CharVal2,",
						"          T1_NumVal1,",
						"          T1_NumVal2,",
						"          T1_DtVal1,",
						"          T1_DtVal2,",
						"          T2_EventType,",
						"          T2_CharVal1,",
						"          T2_CharVal2,",
						"          T2_NumVal1,",
						"          T2_NumVal2,",
						"          T2_DtVal1,",
						"          T2_DtVal2,",
						"          T3_EventType,",
						"          T3_CharVal1,",
						"          T3_CharVal2,",
						"          T3_NumVal1,",
						"          T3_NumVal2,",
						"          T3_DtVal1,",
						"          T3_DtVal2,",
						"          T4_EventType,",
						"          T4_CharVal1,",
						"          T4_CharVal2,",
						"          T4_NumVal1,",
						"          T4_NumVal2,",
						"          T4_DtVal1,",
						"          T4_DtVal2,",
						"          T5_EventType,",
						"          T5_CharVal1,",
						"          T5_CharVal2,",
						"          T5_NumVal1,",
						"          T5_NumVal2,",
						"          T5_DtVal1,",
						"          T5_DtVal2,",
						"          T6_EventType,",
						"          T6_CharVal1,",
						"          T6_CharVal2,",
						"          T6_NumVal1,",
						"          T6_NumVal2,",
						"          T6_DtVal1,",
						"          T6_DtVal2,",
						"          T7_EventType,",
						"          T7_CharVal1,",
						"          T7_CharVal2,",
						"          T7_NumVal1,",
						"          T7_NumVal2,",
						"          T7_DtVal1,",
						"          T7_DtVal2,",
						"          T8_EventType,",
						"          T8_CharVal1,",
						"          T8_CharVal2,",
						"          T8_NumVal1,",
						"          T8_NumVal2,",
						"          T8_DtVal1,",
						"          T8_DtVal2,",
						"          T9_EventType,",
						"          T9_CharVal1,",
						"          T9_CharVal2,",
						"          T9_NumVal1,",
						"          T9_NumVal2,",
						"          T9_DtVal1,",
						"          T9_DtVal2,",
						"          T10_EventType,",
						"          T10_CharVal1,",
						"          T10_CharVal2,",
						"          T10_NumVal1,",
						"          T10_NumVal2,",
						"          T10_DtVal1,",
						"          T10_DtVal2,",
						"          T11_EventType,",
						"          T11_CharVal1,",
						"          T11_CharVal2,",
						"          T11_NumVal1,",
						"          T11_NumVal2,",
						"          T11_DtVal1,",
						"          T11_DtVal2,",
						"          T12_EventType,",
						"          T12_CharVal1,",
						"          T12_CharVal2,",
						"          T12_NumVal1,",
						"          T12_NumVal2,",
						"          T12_DtVal1,",
						"          T12_DtVal2,",
						"          T13_EventType,",
						"          T13_CharVal1,",
						"          T13_CharVal2,",
						"          T13_NumVal1,",
						"          T13_NumVal2,",
						"          T13_DtVal1,",
						"          T13_DtVal2,",
						"          T14_EventType,",
						"          T14_CharVal1,",
						"          T14_CharVal2,",
						"          T14_NumVal1,",
						"          T14_NumVal2,",
						"          T14_DtVal1,",
						"          T14_DtVal2,",
						"          T15_EventType,",
						"          T15_CharVal1,",
						"          T15_CharVal2,",
						"          T15_NumVal1,",
						"          T15_NumVal2,",
						"          T15_DtVal1,",
						"          T15_DtVal2,",
						"          T16_EventType,",
						"          T16_CharVal1,",
						"          T16_CharVal2,",
						"          T16_NumVal1,",
						"          T16_NumVal2,",
						"          T16_DtVal1,",
						"          T16_DtVal2,",
						"          T17_EventType,",
						"          T17_CharVal1,",
						"          T17_CharVal2,",
						"          T17_NumVal1,",
						"          T17_NumVal2,",
						"          T17_DtVal1,",
						"          T17_DtVal2,",
						"          T18_EventType,",
						"          T18_CharVal1,",
						"          T18_CharVal2,",
						"          T18_NumVal1,",
						"          T18_NumVal2,",
						"          T18_DtVal1,",
						"          T18_DtVal2,",
						"          T19_EventType,",
						"          T19_CharVal1,",
						"          T19_CharVal2,",
						"          T19_NumVal1,",
						"          T19_NumVal2,",
						"          T19_DtVal1,",
						"          T19_DtVal2,",
						"          T20_EventType,",
						"          T20_CharVal1,",
						"          T20_CharVal2,",
						"          T20_NumVal1,",
						"          T20_NumVal2,",
						"          T20_DtVal1,",
						"          T20_DtVal2,",
						"          T21_EventType,",
						"          T21_CharVal1,",
						"          T21_CharVal2,",
						"          T21_NumVal1,",
						"          T21_NumVal2,",
						"          T21_DtVal1,",
						"          T21_DtVal2,",
						"          T22_EventType,",
						"          T22_CharVal1,",
						"          T22_CharVal2,",
						"          T22_NumVal1,",
						"          T22_NumVal2,",
						"          T22_DtVal1,",
						"          T22_DtVal2,",
						"          T23_EventType,",
						"          T23_CharVal1,",
						"          T23_CharVal2,",
						"          T23_NumVal1,",
						"          T23_NumVal2,",
						"          T23_DtVal1,",
						"          T23_DtVal2,",
						"          T24_EventType,",
						"          T24_CharVal1,",
						"          T24_CharVal2,",
						"          T24_NumVal1,",
						"          T24_NumVal2,",
						"          T24_DtVal1,",
						"          T24_DtVal2,",
						"          T25_EventType,",
						"          T25_CharVal1,",
						"          T25_CharVal2,",
						"          T25_NumVal1,",
						"          T25_NumVal2,",
						"          T25_DtVal1,",
						"          T25_DtVal2,",
						"          T26_EventType,",
						"          T26_CharVal1,",
						"          T26_CharVal2,",
						"          T26_NumVal1,",
						"          T26_NumVal2,",
						"          T26_DtVal1,",
						"          T26_DtVal2,",
						"          T27_EventType,",
						"          T27_CharVal1,",
						"          T27_CharVal2,",
						"          T27_NumVal1,",
						"          T27_NumVal2,",
						"          T27_DtVal1,",
						"          T27_DtVal2,",
						"          T28_EventType,",
						"          T28_CharVal1,",
						"          T28_CharVal2,",
						"          T28_NumVal1,",
						"          T28_NumVal2,",
						"          T28_DtVal1,",
						"          T28_DtVal2,",
						"          T29_EventType,",
						"          T29_CharVal1,",
						"          T29_CharVal2,",
						"          T29_NumVal1,",
						"          T29_NumVal2,",
						"          T29_DtVal1,",
						"          T29_DtVal2,",
						"          T30_EventType,",
						"          T30_CharVal1,",
						"          T30_CharVal2,",
						"          T30_NumVal1,",
						"          T30_NumVal2,",
						"          T30_DtVal1,",
						"          T30_DtVal2,",
						"          T31_EventType,",
						"          T31_CharVal1,",
						"          T31_CharVal2,",
						"          T31_NumVal1,",
						"          T31_NumVal2,",
						"          T31_DtVal1,",
						"          T31_DtVal2,",
						"          T32_EventType,",
						"          T32_CharVal1,",
						"          T32_CharVal2,",
						"          T32_NumVal1,",
						"          T32_NumVal2,",
						"          T32_DtVal1,",
						"          T32_DtVal2,",
						"          T33_EventType,",
						"          T33_CharVal1,",
						"          T33_CharVal2,",
						"          T33_NumVal1,",
						"          T33_NumVal2,",
						"          T33_DtVal1,",
						"          T33_DtVal2,",
						"          T34_EventType,",
						"          T34_CharVal1,",
						"          T34_CharVal2,",
						"          T34_NumVal1,",
						"          T34_NumVal2,",
						"          T34_DtVal1,",
						"          T34_DtVal2,",
						"          T35_EventType,",
						"          T35_CharVal1,",
						"          T35_CharVal2,",
						"          T35_NumVal1,",
						"          T35_NumVal2,",
						"          T35_DtVal1,",
						"          T35_DtVal2,",
						"          T36_EventType,",
						"          T36_CharVal1,",
						"          T36_CharVal2,",
						"          T36_NumVal1,",
						"          T36_NumVal2,",
						"          T36_DtVal1,",
						"          T36_DtVal2,",
						"          T37_EventType,",
						"          T37_CharVal1,",
						"          T37_CharVal2,",
						"          T37_NumVal1,",
						"          T37_NumVal2,",
						"          T37_DtVal1,",
						"          T37_DtVal2,",
						"          T38_EventType,",
						"          T38_CharVal1,",
						"          T38_CharVal2,",
						"          T38_NumVal1,",
						"          T38_NumVal2,",
						"          T38_DtVal1,",
						"          T38_DtVal2,",
						"          T39_EventType,",
						"          T39_CharVal1,",
						"          T39_CharVal2,",
						"          T39_NumVal1,",
						"          T39_NumVal2,",
						"          T39_DtVal1,",
						"          T39_DtVal2,",
						"          T40_EventType,",
						"          T40_CharVal1,",
						"          T40_CharVal2,",
						"          T40_NumVal1,",
						"          T40_NumVal2,",
						"          T40_DtVal1,",
						"          T40_DtVal2,",
						"          T41_EventType,",
						"          T41_CharVal1,",
						"          T41_CharVal2,",
						"          T41_NumVal1,",
						"          T41_NumVal2,",
						"          T41_DtVal1,",
						"          T41_DtVal2,",
						"          T42_EventType,",
						"          T42_CharVal1,",
						"          T42_CharVal2,",
						"          T42_NumVal1,",
						"          T42_NumVal2,",
						"          T42_DtVal1,",
						"          T42_DtVal2,",
						"          T43_EventType,",
						"          T43_CharVal1,",
						"          T43_CharVal2,",
						"          T43_NumVal1,",
						"          T43_NumVal2,",
						"          T43_DtVal1,",
						"          T43_DtVal2,",
						"          T44_EventType,",
						"          T44_CharVal1,",
						"          T44_CharVal2,",
						"          T44_NumVal1,",
						"          T44_NumVal2,",
						"          T44_DtVal1,",
						"          T44_DtVal2,",
						"          T45_EventType,",
						"          T45_CharVal1,",
						"          T45_CharVal2,",
						"          T45_NumVal1,",
						"          T45_NumVal2,",
						"          T45_DtVal1,",
						"          T45_DtVal2,",
						"          T46_EventType,",
						"          T46_CharVal1,",
						"          T46_CharVal2,",
						"          T46_NumVal1,",
						"          T46_NumVal2,",
						"          T46_DtVal1,",
						"          T46_DtVal2,",
						"          T47_EventType,",
						"          T47_CharVal1,",
						"          T47_CharVal2,",
						"          T47_NumVal1,",
						"          T47_NumVal2,",
						"          T47_DtVal1,",
						"          T47_DtVal2,",
						"          T48_EventType,",
						"          T48_CharVal1,",
						"          T48_CharVal2,",
						"          T48_NumVal1,",
						"          T48_NumVal2,",
						"          T48_DtVal1,",
						"          T48_DtVal2,",
						"          T49_EventType,",
						"          T49_CharVal1,",
						"          T49_CharVal2,",
						"          T49_NumVal1,",
						"          T49_NumVal2,",
						"          T49_DtVal1,",
						"          T49_DtVal2,",
						"          T50_EventType,",
						"          T50_CharVal1,",
						"          T50_CharVal2,",
						"          T50_NumVal1,",
						"          T50_NumVal2,",
						"          T50_DtVal1,",
						"          T50_DtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCleanup",
						"SelectCleanup derive({Analysis Year} = left(T1_EventType,4)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherAnalysisFctTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherAnaylysis_Curr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_Curr",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as short,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By WorkerId,ClientId,ClientEngagementDt\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          ClientId as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select ClientId, MAX(CAST(LEFT(TYPE, 4) as INT)) as Year from [dbo].[OtherCoreAnalysisRefTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By ClientId\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          ClientId = OtherCoreWorkers@ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          Curr_DataCollectionYear = {Data Collection Year},",
						"          Curr_DataCollectionQuarter = {Data Collection Quarter},",
						"          Curr_EventYear = Year,",
						"          Curr_T1Type = {T1 Type},",
						"          Curr_T1OtherCharVal1 = {T1 OtherCharVal1},",
						"          Curr_T1OtherCharVal2 = {T1 OtherCharVal2},",
						"          Curr_T1OtherNumVal1 = {T1 OtherNumVal1},",
						"          Curr_T1OtherNumVal2 = {T1 OtherNumVal2},",
						"          Curr_T1OtherDtVal1 = {T1 OtherDtVal1},",
						"          Curr_T1OtherDtVal2 = {T1 OtherDtVal2},",
						"          Curr_T2Type = {T2 Type},",
						"          Curr_T2OtherCharVal1 = {T2 OtherCharVal1},",
						"          Curr_T2OtherCharVal2 = {T2 OtherCharVal2},",
						"          Curr_T2OtherNumVal1 = {T2 OtherNumVal1},",
						"          Curr_T2OtherNumVal2 = {T2 OtherNumVal2},",
						"          Curr_T2OtherDtVal1 = {T2 OtherDtVal1},",
						"          Curr_T2OtherDtVal2 = {T2 OtherDtVal2},",
						"          Curr_T3Type = {T3 Type},",
						"          Curr_T3OtherCharVal1 = {T3 OtherCharVal1},",
						"          Curr_T3OtherCharVal2 = {T3 OtherCharVal2},",
						"          Curr_T3OtherNumVal1 = {T3 OtherNumVal1},",
						"          Curr_T3OtherNumVal2 = {T3 OtherNumVal2},",
						"          Curr_T3OtherDtVal1 = {T3 OtherDtVal1},",
						"          Curr_T3OtherDtVal2 = {T3 OtherDtVal2},",
						"          Curr_T4Type = {T4 Type},",
						"          Curr_T4OtherCharVal1 = {T4 OtherCharVal1},",
						"          Curr_T4OtherCharVal2 = {T4 OtherCharVal2},",
						"          Curr_T4OtherNumVal1 = {T4 OtherNumVal1},",
						"          Curr_T4OtherNumVal2 = {T4 OtherNumVal2},",
						"          Curr_T4OtherDtVal1 = {T4 OtherDtVal1},",
						"          Curr_T4OtherDtVal2 = {T4 OtherDtVal2},",
						"          Curr_T5Type = {T5 Type},",
						"          Curr_T5OtherCharVal1 = {T5 OtherCharVal1},",
						"          Curr_T5OtherCharVal2 = {T5 OtherCharVal2},",
						"          Curr_T5OtherNumVal1 = {T5 OtherNumVal1},",
						"          Curr_T5OtherNumVal2 = {T5 OtherNumVal2},",
						"          Curr_T5OtherDtVal1 = {T5 OtherDtVal1},",
						"          Curr_T5OtherDtVal2 = {T5 OtherDtVal2},",
						"          Curr_T6Type = {T6 Type},",
						"          Curr_T6OtherCharVal1 = {T6 OtherCharVal1},",
						"          Curr_T6OtherCharVal2 = {T6 OtherCharVal2},",
						"          Curr_T6OtherNumVal1 = {T6 OtherNumVal1},",
						"          Curr_T6OtherNumVal2 = {T6 OtherNumVal2},",
						"          Curr_T6OtherDtVal1 = {T6 OtherDtVal1},",
						"          Curr_T6OtherDtVal2 = {T6 OtherDtVal2},",
						"          Curr_T7Type = {T7 Type},",
						"          Curr_T7OtherCharVal1 = {T7 OtherCharVal1},",
						"          Curr_T7OtherCharVal2 = {T7 OtherCharVal2},",
						"          Curr_T7OtherNumVal1 = {T7 OtherNumVal1},",
						"          Curr_T7OtherNumVal2 = {T7 OtherNumVal2},",
						"          Curr_T7OtherDtVal1 = {T7 OtherDtVal1},",
						"          Curr_T7OtherDtVal2 = {T7 OtherDtVal2},",
						"          Curr_T8Type = {T8 Type},",
						"          Curr_T8OtherCharVal1 = {T8 OtherCharVal1},",
						"          Curr_T8OtherCharVal2 = {T8 OtherCharVal2},",
						"          Curr_T8OtherNumVal1 = {T8 OtherNumVal1},",
						"          Curr_T8OtherNumVal2 = {T8 OtherNumVal2},",
						"          Curr_T8OtherDtVal1 = {T8 OtherDtVal1},",
						"          Curr_T8OtherDtVal2 = {T8 OtherDtVal2},",
						"          Curr_T9Type = {T9 Type},",
						"          Curr_T9OtherCharVal1 = {T9 OtherCharVal1},",
						"          Curr_T9OtherCharVal2 = {T9 OtherCharVal2},",
						"          Curr_T9OtherNumVal1 = {T9 OtherNumVal1},",
						"          Curr_T9OtherNumVal2 = {T9 OtherNumVal2},",
						"          Curr_T9OtherDtVal1 = {T9 OtherDtVal1},",
						"          Curr_T9OtherDtVal2 = {T9 OtherDtVal2},",
						"          Curr_T10Type = {T10 Type},",
						"          Curr_T10OtherCharVal1 = {T10 OtherCharVal1},",
						"          Curr_T10OtherCharVal2 = {T10 OtherCharVal2},",
						"          Curr_T10OtherNumVal1 = {T10 OtherNumVal1},",
						"          Curr_T10OtherNumVal2 = {T10 OtherNumVal2},",
						"          Curr_T10OtherDtVal1 = {T10 OtherDtVal1},",
						"          Curr_T10OtherDtVal2 = {T10 OtherDtVal2},",
						"          Curr_T11Type = {T11 Type},",
						"          Curr_T11OtherCharVal1 = {T11 OtherCharVal1},",
						"          Curr_T11OtherCharVal2 = {T11 OtherCharVal2},",
						"          Curr_T11OtherNumVal1 = {T11 OtherNumVal1},",
						"          Curr_T11OtherNumVal2 = {T11 OtherNumVal2},",
						"          Curr_T11OtherDtVal1 = {T11 OtherDtVal1},",
						"          Curr_T11OtherDtVal2 = {T11 OtherDtVal2},",
						"          Curr_T12Type = {T12 Type},",
						"          Curr_T12OtherCharVal1 = {T12 OtherCharVal1},",
						"          Curr_T12OtherCharVal2 = {T12 OtherCharVal2},",
						"          Curr_T12OtherNumVal1 = {T12 OtherNumVal1},",
						"          Curr_T12OtherNumVal2 = {T12 OtherNumVal2},",
						"          Curr_T12OtherDtVal1 = {T12 OtherDtVal1},",
						"          Curr_T12OtherDtVal2 = {T12 OtherDtVal2},",
						"          Curr_T13Type = {T13 Type},",
						"          Curr_T13OtherCharVal1 = {T13 OtherCharVal1},",
						"          Curr_T13OtherCharVal2 = {T13 OtherCharVal2},",
						"          Curr_T13OtherNumVal1 = {T13 OtherNumVal1},",
						"          Curr_T13OtherNumVal2 = {T13 OtherNumVal2},",
						"          Curr_T13OtherDtVal1 = {T13 OtherDtVal1},",
						"          Curr_T13OtherDtVal2 = {T13 OtherDtVal2},",
						"          Curr_T14Type = {T14 Type},",
						"          Curr_T14OtherCharVal1 = {T14 OtherCharVal1},",
						"          Curr_T14OtherCharVal2 = {T14 OtherCharVal2},",
						"          Curr_T14OtherNumVal1 = {T14 OtherNumVal1},",
						"          Curr_T14OtherNumVal2 = {T14 OtherNumVal2},",
						"          Curr_T14OtherDtVal1 = {T14 OtherDtVal1},",
						"          Curr_T14OtherDtVal2 = {T14 OtherDtVal2},",
						"          Curr_T15Type = {T15 Type},",
						"          Curr_T15OtherCharVal1 = {T15 OtherCharVal1},",
						"          Curr_T15OtherCharVal2 = {T15 OtherCharVal2},",
						"          Curr_T15OtherNumVal1 = {T15 OtherNumVal1},",
						"          Curr_T15OtherNumVal2 = {T15 OtherNumVal2},",
						"          Curr_T15OtherDtVal1 = {T15 OtherDtVal1},",
						"          Curr_T15OtherDtVal2 = {T15 OtherDtVal2},",
						"          Curr_T16Type = {T16 Type},",
						"          Curr_T16OtherCharVal1 = {T16 OtherCharVal1},",
						"          Curr_T16OtherCharVal2 = {T16 OtherCharVal2},",
						"          Curr_T16OtherNumVal1 = {T16 OtherNumVal1},",
						"          Curr_T16OtherNumVal2 = {T16 OtherNumVal2},",
						"          Curr_T16OtherDtVal1 = {T16 OtherDtVal1},",
						"          Curr_T16OtherDtVal2 = {T16 OtherDtVal2},",
						"          Curr_T17Type = {T17 Type},",
						"          Curr_T17OtherCharVal1 = {T17 OtherCharVal1},",
						"          Curr_T17OtherCharVal2 = {T17 OtherCharVal2},",
						"          Curr_T17OtherNumVal1 = {T17 OtherNumVal1},",
						"          Curr_T17OtherNumVal2 = {T17 OtherNumVal2},",
						"          Curr_T17OtherDtVal1 = {T17 OtherDtVal1},",
						"          Curr_T17OtherDtVal2 = {T17 OtherDtVal2},",
						"          Curr_T18Type = {T18 Type},",
						"          Curr_T18OtherCharVal1 = {T18 OtherCharVal1},",
						"          Curr_T18OtherCharVal2 = {T18 OtherCharVal2},",
						"          Curr_T18OtherNumVal1 = {T18 OtherNumVal1},",
						"          Curr_T18OtherNumVal2 = {T18 OtherNumVal2},",
						"          Curr_T18OtherDtVal1 = {T18 OtherDtVal1},",
						"          Curr_T18OtherDtVal2 = {T18 OtherDtVal2},",
						"          Curr_T19Type = {T19 Type},",
						"          Curr_T19OtherCharVal1 = {T19 OtherCharVal1},",
						"          Curr_T19OtherCharVal2 = {T19 OtherCharVal2},",
						"          Curr_T19OtherNumVal1 = {T19 OtherNumVal1},",
						"          Curr_T19OtherNumVal2 = {T19 OtherNumVal2},",
						"          Curr_T19OtherDtVal1 = {T19 OtherDtVal1},",
						"          Curr_T19OtherDtVal2 = {T19 OtherDtVal2},",
						"          Curr_T20Type = {T20 Type},",
						"          Curr_T20OtherCharVal1 = {T20 OtherCharVal1},",
						"          Curr_T20OtherCharVal2 = {T20 OtherCharVal2},",
						"          Curr_T20OtherNumVal1 = {T20 OtherNumVal1},",
						"          Curr_T20OtherNumVal2 = {T20 OtherNumVal2},",
						"          Curr_T20OtherDtVal1 = {T20 OtherDtVal1},",
						"          Curr_T20OtherDtVal2 = {T20 OtherDtVal2},",
						"          Curr_T21Type = {T21 Type},",
						"          Curr_T21OtherCharVal1 = {T21 OtherCharVal1},",
						"          Curr_T21OtherCharVal2 = {T21 OtherCharVal2},",
						"          Curr_T21OtherNumVal1 = {T21 OtherNumVal1},",
						"          Curr_T21OtherNumVal2 = {T21 OtherNumVal2},",
						"          Curr_T21OtherDtVal1 = {T21 OtherDtVal1},",
						"          Curr_T21OtherDtVal2 = {T21 OtherDtVal2},",
						"          Curr_T22Type = {T22 Type},",
						"          Curr_T22OtherCharVal1 = {T22 OtherCharVal1},",
						"          Curr_T22OtherCharVal2 = {T22 OtherCharVal2},",
						"          Curr_T22OtherNumVal1 = {T22 OtherNumVal1},",
						"          Curr_T22OtherNumVal2 = {T22 OtherNumVal2},",
						"          Curr_T22OtherDtVal1 = {T22 OtherDtVal1},",
						"          Curr_T22OtherDtVal2 = {T22 OtherDtVal2},",
						"          Curr_T23Type = {T23 Type},",
						"          Curr_T23OtherCharVal1 = {T23 OtherCharVal1},",
						"          Curr_T23OtherCharVal2 = {T23 OtherCharVal2},",
						"          Curr_T23OtherNumVal1 = {T23 OtherNumVal1},",
						"          Curr_T23OtherNumVal2 = {T23 OtherNumVal2},",
						"          Curr_T23OtherDtVal1 = {T23 OtherDtVal1},",
						"          Curr_T23OtherDtVal2 = {T23 OtherDtVal2},",
						"          Curr_T24Type = {T24 Type},",
						"          Curr_T24OtherCharVal1 = {T24 OtherCharVal1},",
						"          Curr_T24OtherCharVal2 = {T24 OtherCharVal2},",
						"          Curr_T24OtherNumVal1 = {T24 OtherNumVal1},",
						"          Curr_T24OtherNumVal2 = {T24 OtherNumVal2},",
						"          Curr_T24OtherDtVal1 = {T24 OtherDtVal1},",
						"          Curr_T24OtherDtVal2 = {T24 OtherDtVal2},",
						"          Curr_T24Type = {T25 Type},",
						"          Curr_T25OtherCharVal1 = {T25 OtherCharVal1},",
						"          Curr_T25OtherCharVal2 = {T25 OtherCharVal2},",
						"          Curr_T25OtherNumVal1 = {T25 OtherNumVal1},",
						"          Curr_T25OtherNumVal2 = {T25 OtherNumVal2},",
						"          Curr_T25OtherDtVal1 = {T25 OtherDtVal1},",
						"          Curr_T25OtherDtVal2 = {T25 OtherDtVal2},",
						"          Curr_T26Type = {T26 Type},",
						"          Curr_T26OtherCharVal1 = {T26 OtherCharVal1},",
						"          Curr_T26OtherCharVal2 = {T26 OtherCharVal2},",
						"          Curr_T26OtherNumVal1 = {T26 OtherNumVal1},",
						"          Curr_T26OtherNumVal2 = {T26 OtherNumVal2},",
						"          Curr_T26OtherDtVal1 = {T26 OtherDtVal1},",
						"          Curr_T26OtherDtVal2 = {T26 OtherDtVal2},",
						"          Curr_T27Type = {T27 Type},",
						"          Curr_T27OtherCharVal1 = {T27 OtherCharVal1},",
						"          Curr_T27OtherCharVal2 = {T27 OtherCharVal2},",
						"          Curr_T27OtherNumVal1 = {T27 OtherNumVal1},",
						"          Curr_T27OtherNumVal2 = {T27 OtherNumVal2},",
						"          Curr_T27OtherDtVal1 = {T27 OtherDtVal1},",
						"          Curr_T27OtherDtVal2 = {T27 OtherDtVal2},",
						"          Curr_T28Type = {T28 Type},",
						"          Curr_T28OtherCharVal1 = {T28 OtherCharVal1},",
						"          Curr_T28OtherCharVal2 = {T28 OtherCharVal2},",
						"          Curr_T28OtherNumVal1 = {T28 OtherNumVal1},",
						"          Curr_T28OtherNumVal2 = {T28 OtherNumVal2},",
						"          Curr_T28OtherDtVal1 = {T28 OtherDtVal1},",
						"          Curr_T28OtherDtVal2 = {T28 OtherDtVal2},",
						"          Curr_T29Type = {T29 Type},",
						"          Curr_T29OtherCharVal1 = {T29 OtherCharVal1},",
						"          Curr_T29OtherCharVal2 = {T29 OtherCharVal2},",
						"          Curr_T29OtherNumVal1 = {T29 OtherNumVal1},",
						"          Curr_T29OtherNumVal2 = {T29 OtherNumVal2},",
						"          Curr_T29OtherDtVal1 = {T29 OtherDtVal1},",
						"          Curr_T29OtherDtVal2 = {T29 OtherDtVal2},",
						"          Curr_T30Type = {T30 Type},",
						"          Curr_T30OtherCharVal1 = {T30 OtherCharVal1},",
						"          Curr_T30OtherCharVal2 = {T30 OtherCharVal2},",
						"          Curr_T30OtherNumVal1 = {T30 OtherNumVal1},",
						"          Curr_T30OtherNumVal2 = {T30 OtherNumVal2},",
						"          Curr_T30OtherDtVal1 = {T30 OtherDtVal1},",
						"          Curr_T30OtherDtVal2 = {T30 OtherDtVal2},",
						"          Curr_T31Type = {T31 Type},",
						"          Curr_T31OtherCharVal1 = {T31 OtherCharVal1},",
						"          Curr_T31OtherCharVal2 = {T31 OtherCharVal2},",
						"          Curr_T31OtherNumVal1 = {T31 OtherNumVal1},",
						"          Curr_T31OtherNumVal2 = {T31 OtherNumVal2},",
						"          Curr_T31OtherDtVal1 = {T31 OtherDtVal1},",
						"          Curr_T31OtherDtVal2 = {T31 OtherDtVal2},",
						"          Curr_T32Type = {T32 Type},",
						"          Curr_T32OtherCharVal1 = {T32 OtherCharVal1},",
						"          Curr_T32OtherCharVal2 = {T32 OtherCharVal2},",
						"          Curr_T32OtherNumVal1 = {T32 OtherNumVal1},",
						"          Curr_T32OtherNumVal2 = {T32 OtherNumVal2},",
						"          Curr_T32OtherDtVal1 = {T32 OtherDtVal1},",
						"          Curr_T32OtherDtVal2 = {T32 OtherDtVal2},",
						"          Curr_T33Type = {T33 Type},",
						"          Curr_T33OtherCharVal1 = {T33 OtherCharVal1},",
						"          Curr_T33OtherCharVal2 = {T33 OtherCharVal2},",
						"          Curr_T33OtherNumVal1 = {T33 OtherNumVal1},",
						"          Curr_T33OtherNumVal2 = {T33 OtherNumVal2},",
						"          Curr_T33OtherDtVal1 = {T33 OtherDtVal1},",
						"          Curr_T33OtherDtVal2 = {T33 OtherDtVal2},",
						"          Curr_T34Type = {T34 Type},",
						"          Curr_T34OtherCharVal1 = {T34 OtherCharVal1},",
						"          Curr_T34OtherCharVal2 = {T34 OtherCharVal2},",
						"          Curr_T34OtherNumVal1 = {T34 OtherNumVal1},",
						"          Curr_T34OtherNumVal2 = {T34 OtherNumVal2},",
						"          Curr_T34OtherDtVal1 = {T34 OtherDtVal1},",
						"          Curr_T34OtherDtVal2 = {T34 OtherDtVal2},",
						"          Curr_T35Type = {T35 Type},",
						"          Curr_T35OtherCharVal1 = {T35 OtherCharVal1},",
						"          Curr_T35OtherCharVal2 = {T35 OtherCharVal2},",
						"          Curr_T35OtherNumVal1 = {T35 OtherNumVal1},",
						"          Curr_T35OtherNumVal2 = {T35 OtherNumVal2},",
						"          Curr_T35OtherDtVal1 = {T35 OtherDtVal1},",
						"          Curr_T35OtherDtVal2 = {T35 OtherDtVal2},",
						"          Curr_T36Type = {T36 Type},",
						"          Curr_T36OtherCharVal1 = {T36 OtherCharVal1},",
						"          Curr_T36OtherCharVal2 = {T36 OtherCharVal2},",
						"          Curr_T36OtherNumVal1 = {T36 OtherNumVal1},",
						"          Curr_T36OtherNumVal2 = {T36 OtherNumVal2},",
						"          Curr_T36OtherDtVal1 = {T36 OtherDtVal1},",
						"          Curr_T36OtherDtVal2 = {T36 OtherDtVal2},",
						"          Curr_T37Type = {T37 Type},",
						"          Curr_T37OtherCharVal1 = {T37 OtherCharVal1},",
						"          Curr_T37OtherCharVal2 = {T37 OtherCharVal2},",
						"          Curr_T37OtherNumVal1 = {T37 OtherNumVal1},",
						"          Curr_T37OtherNumVal2 = {T37 OtherNumVal2},",
						"          Curr_T37OtherDtVal1 = {T37 OtherDtVal1},",
						"          Curr_T37OtherDtVal2 = {T37 OtherDtVal2},",
						"          Curr_T38Type = {T38 Type},",
						"          Curr_T38OtherCharVal1 = {T38 OtherCharVal1},",
						"          Curr_T38OtherCharVal2 = {T38 OtherCharVal2},",
						"          Curr_T38OtherNumVal1 = {T38 OtherNumVal1},",
						"          Curr_T38OtherNumVal2 = {T38 OtherNumVal2},",
						"          Curr_T38OtherDtVal1 = {T38 OtherDtVal1},",
						"          Curr_T38OtherDtVal2 = {T38 OtherDtVal2},",
						"          Curr_T39Type = {T39 Type},",
						"          Curr_T39OtherCharVal1 = {T39 OtherCharVal1},",
						"          Curr_T39OtherCharVal2 = {T39 OtherCharVal2},",
						"          Curr_T39OtherNumVal1 = {T39 OtherNumVal1},",
						"          Curr_T39OtherNumVal2 = {T39 OtherNumVal2},",
						"          Curr_T39OtherDtVal1 = {T39 OtherDtVal1},",
						"          Curr_T39OtherDtVal2 = {T39 OtherDtVal2},",
						"          Curr_T40Type = {T40 Type},",
						"          Curr_T40OtherCharVal1 = {T40 OtherCharVal1},",
						"          Curr_T40OtherCharVal2 = {T40 OtherCharVal2},",
						"          Curr_T40OtherNumVal1 = {T40 OtherNumVal1},",
						"          Curr_T40OtherNumVal2 = {T40 OtherNumVal2},",
						"          Curr_T40OtherDtVal1 = {T40 OtherDtVal1},",
						"          Curr_T40OtherDtVal2 = {T40 OtherDtVal2},",
						"          Curr_T41Type = {T41 Type},",
						"          Curr_T41OtherCharVal1 = {T41 OtherCharVal1},",
						"          Curr_T41OtherCharVal2 = {T41 OtherCharVal2},",
						"          Curr_T41OtherNumVal1 = {T41 OtherNumVal1},",
						"          Curr_T41OtherNumVal2 = {T41 OtherNumVal2},",
						"          Curr_T41OtherDtVal1 = {T41 OtherDtVal1},",
						"          Curr_T41OtherDtVal2 = {T41 OtherDtVal2},",
						"          Curr_T42Type = {T42 Type},",
						"          Curr_T42OtherCharVal1 = {T42 OtherCharVal1},",
						"          Curr_T42OtherCharVal2 = {T42 OtherCharVal2},",
						"          Curr_T42OtherNumVal1 = {T42 OtherNumVal1},",
						"          Curr_T42OtherNumVal2 = {T42 OtherNumVal2},",
						"          Curr_T42OtherDtVal1 = {T42 OtherDtVal1},",
						"          Curr_T42OtherDtVal2 = {T42 OtherDtVal2},",
						"          Curr_T43Type = {T43 Type},",
						"          Curr_T43OtherCharVal1 = {T43 OtherCharVal1},",
						"          Curr_T43OtherCharVal2 = {T43 OtherCharVal2},",
						"          Curr_T43OtherNumVal1 = {T43 OtherNumVal1},",
						"          Curr_T43OtherNumVal2 = {T43 OtherNumVal2},",
						"          Curr_T43OtherDtVal1 = {T43 OtherDtVal1},",
						"          Curr_T43OtherDtVal2 = {T43 OtherDtVal2},",
						"          Curr_T44Type = {T44 Type},",
						"          Curr_T44OtherCharVal1 = {T44 OtherCharVal1},",
						"          Curr_T44OtherCharVal2 = {T44 OtherCharVal2},",
						"          Curr_T44OtherNumVal1 = {T44 OtherNumVal1},",
						"          Curr_T44OtherNumVal2 = {T44 OtherNumVal2},",
						"          Curr_T44OtherDtVal1 = {T44 OtherDtVal1},",
						"          Curr_T44OtherDtVal2 = {T44 OtherDtVal2},",
						"          Curr_T45Type = {T45 Type},",
						"          Curr_T45OtherCharVal1 = {T45 OtherCharVal1},",
						"          Curr_T45OtherCharVal2 = {T45 OtherCharVal2},",
						"          Curr_T45OtherNumVal1 = {T45 OtherNumVal1},",
						"          Curr_T45OtherNumVal2 = {T45 OtherNumVal2},",
						"          Curr_T45OtherDtVal1 = {T45 OtherDtVal1},",
						"          Curr_T45OtherDtVal2 = {T45 OtherDtVal2},",
						"          Curr_T46Type = {T46 Type},",
						"          Curr_T46OtherCharVal1 = {T46 OtherCharVal1},",
						"          Curr_T46OtherCharVal2 = {T46 OtherCharVal2},",
						"          Curr_T46OtherNumVal1 = {T46 OtherNumVal1},",
						"          Curr_T46OtherNumVal2 = {T46 OtherNumVal2},",
						"          Curr_T46OtherDtVal1 = {T46 OtherDtVal1},",
						"          Curr_T46OtherDtVal2 = {T46 OtherDtVal2},",
						"          Curr_T47Type = {T47 Type},",
						"          Curr_T47OtherCharVal1 = {T47 OtherCharVal1},",
						"          Curr_T47OtherCharVal2 = {T47 OtherCharVal2},",
						"          Curr_T47OtherNumVal1 = {T47 OtherNumVal1},",
						"          Curr_T47OtherNumVal2 = {T47 OtherNumVal2},",
						"          Curr_T47OtherDtVal1 = {T47 OtherDtVal1},",
						"          Curr_T47OtherDtVal2 = {T47 OtherDtVal2},",
						"          Curr_T48Type = {T48 Type},",
						"          Curr_T48OtherCharVal1 = {T48 OtherCharVal1},",
						"          Curr_T48OtherCharVal2 = {T48 OtherCharVal2},",
						"          Curr_T48OtherNumVal1 = {T48 OtherNumVal1},",
						"          Curr_T48OtherNumVal2 = {T48 OtherNumVal2},",
						"          Curr_T48OtherDtVal1 = {T48 OtherDtVal1},",
						"          Curr_T48OtherDtVal2 = {T48 OtherDtVal2},",
						"          Curr_T49Type = {T49 Type},",
						"          Curr_T49OtherCharVal1 = {T49 OtherCharVal1},",
						"          Curr_T49OtherCharVal2 = {T49 OtherCharVal2},",
						"          Curr_T49OtherNumVal1 = {T49 OtherNumVal1},",
						"          Curr_T49OtherNumVal2 = {T49 OtherNumVal2},",
						"          Curr_T49OtherDtVal1 = {T49 OtherDtVal1},",
						"          Curr_T49OtherDtVal2 = {T49 OtherDtVal2},",
						"          Curr_T50Type = {T50 Type},",
						"          Curr_T50OtherCharVal1 = {T50 OtherCharVal1},",
						"          Curr_T50OtherCharVal2 = {T50 OtherCharVal2},",
						"          Curr_T50OtherNumVal1 = {T50 OtherNumVal1},",
						"          Curr_T50OtherNumVal2 = {T50 OtherNumVal2},",
						"          Curr_T50OtherDtVal1 = {T50 OtherDtVal1},",
						"          Curr_T50OtherDtVal2 = {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreYear join(OtherCoreWorkers@ClientId == OtherCoreYear@ClientId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreAnalysisTbl_Curr.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherAnaylysis_P1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_1P",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By WorkerId,ClientId,ClientEngagementDt\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          ClientId as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select ClientId, MAX(CAST(LEFT(TYPE, 4) as INT))-1 as Year from [dbo].[OtherCoreAnalysisRefTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By ClientId\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          ClientId = OtherCoreWorkers@ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          P1_DataCollectionYear = {Data Collection Year},",
						"          P1_DataCollectionQuarter = {Data Collection Quarter},",
						"          P1_EventYear = Year,",
						"          P1_T1Type = {T1 Type},",
						"          P1_T1OtherCharVal1 = {T1 OtherCharVal1},",
						"          P1_T1OtherCharVal2 = {T1 OtherCharVal2},",
						"          P1_T1OtherNumVal1 = {T1 OtherNumVal1},",
						"          P1_T1OtherNumVal2 = {T1 OtherNumVal2},",
						"          P1_T1OtherDtVal1 = {T1 OtherDtVal1},",
						"          P1_T1OtherDtVal2 = {T1 OtherDtVal2},",
						"          P1_T2Type = {T2 Type},",
						"          P1_T2OtherCharVal1 = {T2 OtherCharVal1},",
						"          P1_T2OtherCharVal2 = {T2 OtherCharVal2},",
						"          P1_T2OtherNumVal1 = {T2 OtherNumVal1},",
						"          P1_T2OtherNumVal2 = {T2 OtherNumVal2},",
						"          P1_T2OtherDtVal1 = {T2 OtherDtVal1},",
						"          P1_T2OtherDtVal2 = {T2 OtherDtVal2},",
						"          P1_T3Type = {T3 Type},",
						"          P1_T3OtherCharVal1 = {T3 OtherCharVal1},",
						"          P1_T3OtherCharVal2 = {T3 OtherCharVal2},",
						"          P1_T3OtherNumVal1 = {T3 OtherNumVal1},",
						"          P1_T3OtherNumVal2 = {T3 OtherNumVal2},",
						"          P1_T3OtherDtVal1 = {T3 OtherDtVal1},",
						"          P1_T3OtherDtVal2 = {T3 OtherDtVal2},",
						"          P1_T4Type = {T4 Type},",
						"          P1_T4OtherCharVal1 = {T4 OtherCharVal1},",
						"          P1_T4OtherCharVal2 = {T4 OtherCharVal2},",
						"          P1_T4OtherNumVal1 = {T4 OtherNumVal1},",
						"          P1_T4OtherNumVal2 = {T4 OtherNumVal2},",
						"          P1_T4OtherDtVal1 = {T4 OtherDtVal1},",
						"          P1_T4OtherDtVal2 = {T4 OtherDtVal2},",
						"          {P1_T5 Type} = {T5 Type},",
						"          P1_T5OtherCharVal1 = {T5 OtherCharVal1},",
						"          P1_T5OtherCharVal2 = {T5 OtherCharVal2},",
						"          P1_T5OtherNumVal1 = {T5 OtherNumVal1},",
						"          P1_T5OtherNumVal2 = {T5 OtherNumVal2},",
						"          P1_T5OtherDtVal1 = {T5 OtherDtVal1},",
						"          P1_T5OtherDtVal2 = {T5 OtherDtVal2},",
						"          P1_T6Type = {T6 Type},",
						"          P1_T6OtherCharVal1 = {T6 OtherCharVal1},",
						"          P1_T6OtherCharVal2 = {T6 OtherCharVal2},",
						"          P1_T6OtherNumVal1 = {T6 OtherNumVal1},",
						"          P1_T6OtherNumVal2 = {T6 OtherNumVal2},",
						"          P1_T6OtherDtVal1 = {T6 OtherDtVal1},",
						"          P1_T6OtherDtVal2 = {T6 OtherDtVal2},",
						"          P1_T7Type = {T7 Type},",
						"          P1_T7OtherCharVal1 = {T7 OtherCharVal1},",
						"          P1_T7OtherCharVal2 = {T7 OtherCharVal2},",
						"          P1_T7OtherNumVal1 = {T7 OtherNumVal1},",
						"          P1_T7OtherNumVal2 = {T7 OtherNumVal2},",
						"          P1_T7OtherDtVal1 = {T7 OtherDtVal1},",
						"          P1_T7OtherDtVal2 = {T7 OtherDtVal2},",
						"          P1_T8Type = {T8 Type},",
						"          P1_T8OtherCharVal1 = {T8 OtherCharVal1},",
						"          P1_T8OtherCharVal2 = {T8 OtherCharVal2},",
						"          P1_T8OtherNumVal1 = {T8 OtherNumVal1},",
						"          P1_T8OtherNumVal2 = {T8 OtherNumVal2},",
						"          P1_T8OtherDtVal1 = {T8 OtherDtVal1},",
						"          P1_T8OtherDtVal2 = {T8 OtherDtVal2},",
						"          P1_T9Type = {T9 Type},",
						"          P1_T9OtherCharVal1 = {T9 OtherCharVal1},",
						"          P1_T9OtherCharVal2 = {T9 OtherCharVal2},",
						"          P1_T9OtherNumVal1 = {T9 OtherNumVal1},",
						"          P1_T9OtherNumVal2 = {T9 OtherNumVal2},",
						"          P1_T9OtherDtVal1 = {T9 OtherDtVal1},",
						"          P1_T9OtherDtVal2 = {T9 OtherDtVal2},",
						"          P1_T10Type = {T10 Type},",
						"          P1_T10OtherCharVal1 = {T10 OtherCharVal1},",
						"          P1_T10OtherCharVal2 = {T10 OtherCharVal2},",
						"          P1_T10OtherNumVal1 = {T10 OtherNumVal1},",
						"          P1_T10OtherNumVal2 = {T10 OtherNumVal2},",
						"          P1_T10OtherDtVal1 = {T10 OtherDtVal1},",
						"          P1_T10OtherDtVal2 = {T10 OtherDtVal2},",
						"          P1_T11Type = {T11 Type},",
						"          P1_T11OtherCharVal1 = {T11 OtherCharVal1},",
						"          P1_T11OtherCharVal2 = {T11 OtherCharVal2},",
						"          P1_T11OtherNumVal1 = {T11 OtherNumVal1},",
						"          P1_T11OtherNumVal2 = {T11 OtherNumVal2},",
						"          P1_T11OtherDtVal1 = {T11 OtherDtVal1},",
						"          P1_T11OtherDtVal2 = {T11 OtherDtVal2},",
						"          P1_T12Type = {T12 Type},",
						"          P1_T12OtherCharVal1 = {T12 OtherCharVal1},",
						"          P1_T12OtherCharVal2 = {T12 OtherCharVal2},",
						"          P1_T12OtherNumVal1 = {T12 OtherNumVal1},",
						"          P1_T12OtherNumVal2 = {T12 OtherNumVal2},",
						"          P1_T12OtherDtVal1 = {T12 OtherDtVal1},",
						"          P1_T12OtherDtVal2 = {T12 OtherDtVal2},",
						"          P1_T13Type = {T13 Type},",
						"          P1_T13OtherCharVal1 = {T13 OtherCharVal1},",
						"          P1_T13OtherCharVal2 = {T13 OtherCharVal2},",
						"          P1_T13OtherNumVal1 = {T13 OtherNumVal1},",
						"          P1_T13OtherNumVal2 = {T13 OtherNumVal2},",
						"          P1_T13OtherDtVal1 = {T13 OtherDtVal1},",
						"          P1_T13OtherDtVal2 = {T13 OtherDtVal2},",
						"          P1_T14Type = {T14 Type},",
						"          P1_T14OtherCharVal1 = {T14 OtherCharVal1},",
						"          P1_T14OtherCharVal2 = {T14 OtherCharVal2},",
						"          P1_T14OtherNumVal1 = {T14 OtherNumVal1},",
						"          P1_T14OtherNumVal2 = {T14 OtherNumVal2},",
						"          P1_T14OtherDtVal1 = {T14 OtherDtVal1},",
						"          P1_T14OtherDtVal2 = {T14 OtherDtVal2},",
						"          P1_T15Type = {T15 Type},",
						"          P1_T15OtherCharVal1 = {T15 OtherCharVal1},",
						"          P1_T15OtherCharVal2 = {T15 OtherCharVal2},",
						"          P1_T15OtherNumVal1 = {T15 OtherNumVal1},",
						"          P1_T15OtherNumVal2 = {T15 OtherNumVal2},",
						"          P1_T15OtherDtVal1 = {T15 OtherDtVal1},",
						"          P1_T15OtherDtVal2 = {T15 OtherDtVal2},",
						"          P1_T16Type = {T16 Type},",
						"          P1_T16OtherCharVal1 = {T16 OtherCharVal1},",
						"          P1_T16OtherCharVal2 = {T16 OtherCharVal2},",
						"          P1_T16OtherNumVal1 = {T16 OtherNumVal1},",
						"          P1_T16OtherNumVal2 = {T16 OtherNumVal2},",
						"          P1_T16OtherDtVal1 = {T16 OtherDtVal1},",
						"          P1_T16OtherDtVal2 = {T16 OtherDtVal2},",
						"          P1_T17Type = {T17 Type},",
						"          P1_T17OtherCharVal1 = {T17 OtherCharVal1},",
						"          P1_T17OtherCharVal2 = {T17 OtherCharVal2},",
						"          P1_T17OtherNumVal1 = {T17 OtherNumVal1},",
						"          P1_T17OtherNumVal2 = {T17 OtherNumVal2},",
						"          P1_T17OtherDtVal1 = {T17 OtherDtVal1},",
						"          P1_T17OtherDtVal2 = {T17 OtherDtVal2},",
						"          P1_T18Type = {T18 Type},",
						"          P1_T18OtherCharVal1 = {T18 OtherCharVal1},",
						"          P1_T18OtherCharVal2 = {T18 OtherCharVal2},",
						"          P1_T18OtherNumVal1 = {T18 OtherNumVal1},",
						"          P1_T18OtherNumVal2 = {T18 OtherNumVal2},",
						"          P1_T18OtherDtVal1 = {T18 OtherDtVal1},",
						"          P1_T18OtherDtVal2 = {T18 OtherDtVal2},",
						"          P1_T19Type = {T19 Type},",
						"          P1_T19OtherCharVal1 = {T19 OtherCharVal1},",
						"          P1_T19OtherCharVal2 = {T19 OtherCharVal2},",
						"          P1_T19OtherNumVal1 = {T19 OtherNumVal1},",
						"          P1_T19OtherNumVal2 = {T19 OtherNumVal2},",
						"          P1_T19OtherDtVal1 = {T19 OtherDtVal1},",
						"          P1_T19OtherDtVal2 = {T19 OtherDtVal2},",
						"          P1_T20Type = {T20 Type},",
						"          P1_T20OtherCharVal1 = {T20 OtherCharVal1},",
						"          P1_T20OtherCharVal2 = {T20 OtherCharVal2},",
						"          P1_T20OtherNumVal1 = {T20 OtherNumVal1},",
						"          P1_T20OtherNumVal2 = {T20 OtherNumVal2},",
						"          P1_T20OtherDtVal1 = {T20 OtherDtVal1},",
						"          P1_T20OtherDtVal2 = {T20 OtherDtVal2},",
						"          P1_T21Type = {T21 Type},",
						"          P1_T21OtherCharVal1 = {T21 OtherCharVal1},",
						"          P1_T21OtherCharVal2 = {T21 OtherCharVal2},",
						"          P1_T21OtherNumVal1 = {T21 OtherNumVal1},",
						"          P1_T21OtherNumVal2 = {T21 OtherNumVal2},",
						"          P1_T21OtherDtVal1 = {T21 OtherDtVal1},",
						"          P1_T21OtherDtVal2 = {T21 OtherDtVal2},",
						"          P1_T22Type = {T22 Type},",
						"          P1_T22OtherCharVal1 = {T22 OtherCharVal1},",
						"          P1_T22OtherCharVal2 = {T22 OtherCharVal2},",
						"          P1_T22OtherNumVal1 = {T22 OtherNumVal1},",
						"          P1_T22OtherNumVal2 = {T22 OtherNumVal2},",
						"          P1_T22OtherDtVal1 = {T22 OtherDtVal1},",
						"          P1_T22OtherDtVal2 = {T22 OtherDtVal2},",
						"          P1_T23Type = {T23 Type},",
						"          P1_T23OtherCharVal1 = {T23 OtherCharVal1},",
						"          P1_T23OtherCharVal2 = {T23 OtherCharVal2},",
						"          P1_T23OtherNumVal1 = {T23 OtherNumVal1},",
						"          P1_T23OtherNumVal2 = {T23 OtherNumVal2},",
						"          P1_T23OtherDtVal1 = {T23 OtherDtVal1},",
						"          P1_T23OtherDtVal2 = {T23 OtherDtVal2},",
						"          P1_T24Type = {T24 Type},",
						"          P1_T24OtherCharVal1 = {T24 OtherCharVal1},",
						"          P1_T24OtherCharVal2 = {T24 OtherCharVal2},",
						"          P1_T24OtherNumVal1 = {T24 OtherNumVal1},",
						"          P1_T24OtherNumVal2 = {T24 OtherNumVal2},",
						"          P1_T24OtherDtVal1 = {T24 OtherDtVal1},",
						"          P1_T24OtherDtVal2 = {T24 OtherDtVal2},",
						"          P1_T25Type = {T25 Type},",
						"          P1_T25OtherCharVal1 = {T25 OtherCharVal1},",
						"          P1_T25OtherCharVal2 = {T25 OtherCharVal2},",
						"          P1_T25OtherNumVal1 = {T25 OtherNumVal1},",
						"          P1_T25OtherNumVal2 = {T25 OtherNumVal2},",
						"          P1_T25OtherDtVal1 = {T25 OtherDtVal1},",
						"          P1_T25OtherDtVal2 = {T25 OtherDtVal2},",
						"          P1_T26Type = {T26 Type},",
						"          P1_T26OtherCharVal1 = {T26 OtherCharVal1},",
						"          P1_T26OtherCharVal2 = {T26 OtherCharVal2},",
						"          P1_T26OtherNumVal1 = {T26 OtherNumVal1},",
						"          P1_T26OtherNumVal2 = {T26 OtherNumVal2},",
						"          P1_T26OtherDtVal1 = {T26 OtherDtVal1},",
						"          P1_T26OtherDtVal2 = {T26 OtherDtVal2},",
						"          P1_T27Type = {T27 Type},",
						"          P1_T27OtherCharVal1 = {T27 OtherCharVal1},",
						"          P1_T27OtherCharVal2 = {T27 OtherCharVal2},",
						"          P1_T27OtherNumVal1 = {T27 OtherNumVal1},",
						"          P1_T27OtherNumVal2 = {T27 OtherNumVal2},",
						"          P1_T27OtherDtVal1 = {T27 OtherDtVal1},",
						"          P1_T27OtherDtVal2 = {T27 OtherDtVal2},",
						"          P1_T28Type = {T28 Type},",
						"          P1_T28OtherCharVal1 = {T28 OtherCharVal1},",
						"          P1_T28OtherCharVal2 = {T28 OtherCharVal2},",
						"          P1_T28OtherNumVal1 = {T28 OtherNumVal1},",
						"          P1_T28OtherNumVal2 = {T28 OtherNumVal2},",
						"          P1_T28OtherDtVal1 = {T28 OtherDtVal1},",
						"          P1_T28OtherDtVal2 = {T28 OtherDtVal2},",
						"          P1_T29Type = {T29 Type},",
						"          P1_T29OtherCharVal1 = {T29 OtherCharVal1},",
						"          P1_T29OtherCharVal2 = {T29 OtherCharVal2},",
						"          P1_T29OtherNumVal1 = {T29 OtherNumVal1},",
						"          P1_T29OtherNumVal2 = {T29 OtherNumVal2},",
						"          P1_T29OtherDtVal1 = {T29 OtherDtVal1},",
						"          P1_T29OtherDtVal2 = {T29 OtherDtVal2},",
						"          P1_T30Type = {T30 Type},",
						"          P1_T30OtherCharVal1 = {T30 OtherCharVal1},",
						"          P1_T30OtherCharVal2 = {T30 OtherCharVal2},",
						"          P1_T30OtherNumVal1 = {T30 OtherNumVal1},",
						"          P1_T30OtherNumVal2 = {T30 OtherNumVal2},",
						"          P1_T30OtherDtVal1 = {T30 OtherDtVal1},",
						"          P1_T30OtherDtVal2 = {T30 OtherDtVal2},",
						"          P1_T31Type = {T31 Type},",
						"          P1_T31OtherCharVal1 = {T31 OtherCharVal1},",
						"          P1_T31OtherCharVal2 = {T31 OtherCharVal2},",
						"          P1_T31OtherNumVal1 = {T31 OtherNumVal1},",
						"          P1_T31OtherNumVal2 = {T31 OtherNumVal2},",
						"          P1_T31OtherDtVal1 = {T31 OtherDtVal1},",
						"          P1_T31OtherDtVal2 = {T31 OtherDtVal2},",
						"          P1_T32Type = {T32 Type},",
						"          P1_T32OtherCharVal1 = {T32 OtherCharVal1},",
						"          P1_T32OtherCharVal2 = {T32 OtherCharVal2},",
						"          P1_T32OtherNumVal1 = {T32 OtherNumVal1},",
						"          P1_T32OtherNumVal2 = {T32 OtherNumVal2},",
						"          P1_T32OtherDtVal1 = {T32 OtherDtVal1},",
						"          P1_T32OtherDtVal2 = {T32 OtherDtVal2},",
						"          P1_T33Type = {T33 Type},",
						"          P1_T33OtherCharVal1 = {T33 OtherCharVal1},",
						"          P1_T33OtherCharVal2 = {T33 OtherCharVal2},",
						"          P1_T33OtherNumVal1 = {T33 OtherNumVal1},",
						"          P1_T33OtherNumVal2 = {T33 OtherNumVal2},",
						"          P1_T33OtherDtVal1 = {T33 OtherDtVal1},",
						"          P1_T33OtherDtVal2 = {T33 OtherDtVal2},",
						"          P1_T34Type = {T34 Type},",
						"          P1_T34OtherCharVal1 = {T34 OtherCharVal1},",
						"          P1_T34OtherCharVal2 = {T34 OtherCharVal2},",
						"          P1_T34OtherNumVal1 = {T34 OtherNumVal1},",
						"          P1_T34OtherNumVal2 = {T34 OtherNumVal2},",
						"          P1_T34OtherDtVal1 = {T34 OtherDtVal1},",
						"          P1_T34OtherDtVal2 = {T34 OtherDtVal2},",
						"          P1_T35Type = {T35 Type},",
						"          P1_T35OtherCharVal1 = {T35 OtherCharVal1},",
						"          P1_T35OtherCharVal2 = {T35 OtherCharVal2},",
						"          P1_T35OtherNumVal1 = {T35 OtherNumVal1},",
						"          P1_T35OtherNumVal2 = {T35 OtherNumVal2},",
						"          P1_T35OtherDtVal1 = {T35 OtherDtVal1},",
						"          P1_T35OtherDtVal2 = {T35 OtherDtVal2},",
						"          P1_T36Type = {T36 Type},",
						"          P1_T36OtherCharVal1 = {T36 OtherCharVal1},",
						"          P1_T36OtherCharVal2 = {T36 OtherCharVal2},",
						"          P1_T36OtherNumVal1 = {T36 OtherNumVal1},",
						"          P1_T36OtherNumVal2 = {T36 OtherNumVal2},",
						"          P1_T36OtherDtVal1 = {T36 OtherDtVal1},",
						"          P1_T36OtherDtVal2 = {T36 OtherDtVal2},",
						"          P1_T37Type = {T37 Type},",
						"          P1_T37OtherCharVal1 = {T37 OtherCharVal1},",
						"          P1_T37OtherCharVal2 = {T37 OtherCharVal2},",
						"          P1_T37OtherNumVal1 = {T37 OtherNumVal1},",
						"          P1_T37OtherNumVal2 = {T37 OtherNumVal2},",
						"          P1_T37OtherDtVal1 = {T37 OtherDtVal1},",
						"          P1_T37OtherDtVal2 = {T37 OtherDtVal2},",
						"          P1_T38Type = {T38 Type},",
						"          P1_T38OtherCharVal1 = {T38 OtherCharVal1},",
						"          P1_T38OtherCharVal2 = {T38 OtherCharVal2},",
						"          P1_T38OtherNumVal1 = {T38 OtherNumVal1},",
						"          P1_T38OtherNumVal2 = {T38 OtherNumVal2},",
						"          P1_T38OtherDtVal1 = {T38 OtherDtVal1},",
						"          P1_T38OtherDtVal2 = {T38 OtherDtVal2},",
						"          P1_T39Type = {T39 Type},",
						"          P1_T39OtherCharVal1 = {T39 OtherCharVal1},",
						"          P1_T39OtherCharVal2 = {T39 OtherCharVal2},",
						"          P1_T39OtherNumVal1 = {T39 OtherNumVal1},",
						"          P1_T39OtherNumVal2 = {T39 OtherNumVal2},",
						"          P1_T39OtherDtVal1 = {T39 OtherDtVal1},",
						"          P1_T39OtherDtVal2 = {T39 OtherDtVal2},",
						"          P1_T40Type = {T40 Type},",
						"          P1_T40OtherCharVal1 = {T40 OtherCharVal1},",
						"          P1_T40OtherCharVal2 = {T40 OtherCharVal2},",
						"          P1_T40OtherNumVal1 = {T40 OtherNumVal1},",
						"          P1_T40OtherNumVal2 = {T40 OtherNumVal2},",
						"          P1_T40OtherDtVal1 = {T40 OtherDtVal1},",
						"          P1_T40OtherDtVal2 = {T40 OtherDtVal2},",
						"          P1_T41Type = {T41 Type},",
						"          P1_T41OtherCharVal1 = {T41 OtherCharVal1},",
						"          P1_T41OtherCharVal2 = {T41 OtherCharVal2},",
						"          P1_T41OtherNumVal1 = {T41 OtherNumVal1},",
						"          P1_T41OtherNumVal2 = {T41 OtherNumVal2},",
						"          P1_T41OtherDtVal1 = {T41 OtherDtVal1},",
						"          P1_T41OtherDtVal2 = {T41 OtherDtVal2},",
						"          P1_T42Type = {T42 Type},",
						"          P1_T42OtherCharVal1 = {T42 OtherCharVal1},",
						"          P1_T42OtherCharVal2 = {T42 OtherCharVal2},",
						"          P1_T42OtherNumVal1 = {T42 OtherNumVal1},",
						"          P1_T42OtherNumVal2 = {T42 OtherNumVal2},",
						"          P1_T42OtherDtVal1 = {T42 OtherDtVal1},",
						"          P1_T42OtherDtVal2 = {T42 OtherDtVal2},",
						"          P1_T43Type = {T43 Type},",
						"          P1_T43OtherCharVal1 = {T43 OtherCharVal1},",
						"          P1_T43OtherCharVal2 = {T43 OtherCharVal2},",
						"          P1_T43OtherNumVal1 = {T43 OtherNumVal1},",
						"          P1_T43OtherNumVal2 = {T43 OtherNumVal2},",
						"          P1_T43OtherDtVal1 = {T43 OtherDtVal1},",
						"          P1_T43OtherDtVal2 = {T43 OtherDtVal2},",
						"          P1_T44Type = {T44 Type},",
						"          P1_T44OtherCharVal1 = {T44 OtherCharVal1},",
						"          P1_T44OtherCharVal2 = {T44 OtherCharVal2},",
						"          P1_T44OtherNumVal1 = {T44 OtherNumVal1},",
						"          P1_T44OtherNumVal2 = {T44 OtherNumVal2},",
						"          P1_T44OtherDtVal1 = {T44 OtherDtVal1},",
						"          P1_T44OtherDtVal2 = {T44 OtherDtVal2},",
						"          P1_T45Type = {T45 Type},",
						"          P1_T45OtherCharVal1 = {T45 OtherCharVal1},",
						"          P1_T45OtherCharVal2 = {T45 OtherCharVal2},",
						"          P1_T45OtherNumVal1 = {T45 OtherNumVal1},",
						"          P1_T45OtherNumVal2 = {T45 OtherNumVal2},",
						"          P1_T45OtherDtVal1 = {T45 OtherDtVal1},",
						"          P1_T45OtherDtVal2 = {T45 OtherDtVal2},",
						"          P1_T46Type = {T46 Type},",
						"          P1_T46OtherCharVal1 = {T46 OtherCharVal1},",
						"          P1_T46OtherCharVal2 = {T46 OtherCharVal2},",
						"          P1_T46OtherNumVal1 = {T46 OtherNumVal1},",
						"          P1_T46OtherNumVal2 = {T46 OtherNumVal2},",
						"          P1_T46OtherDtVal1 = {T46 OtherDtVal1},",
						"          P1_T46OtherDtVal2 = {T46 OtherDtVal2},",
						"          P1_T47Type = {T47 Type},",
						"          P1_T47OtherCharVal1 = {T47 OtherCharVal1},",
						"          P1_T47OtherCharVal2 = {T47 OtherCharVal2},",
						"          P1_T47OtherNumVal1 = {T47 OtherNumVal1},",
						"          P1_T47OtherNumVal2 = {T47 OtherNumVal2},",
						"          P1_T47OtherDtVal1 = {T47 OtherDtVal1},",
						"          P1_T47OtherDtVal2 = {T47 OtherDtVal2},",
						"          P1_T48Type = {T48 Type},",
						"          P1_T48OtherCharVal1 = {T48 OtherCharVal1},",
						"          P1_T48OtherCharVal2 = {T48 OtherCharVal2},",
						"          P1_T48OtherNumVal1 = {T48 OtherNumVal1},",
						"          P1_T48OtherNumVal2 = {T48 OtherNumVal2},",
						"          P1_T48OtherDtVal1 = {T48 OtherDtVal1},",
						"          P1_T48OtherDtVal2 = {T48 OtherDtVal2},",
						"          P1_T49Type = {T49 Type},",
						"          P1_T49OtherCharVal1 = {T49 OtherCharVal1},",
						"          P1_T49OtherCharVal2 = {T49 OtherCharVal2},",
						"          P1_T49OtherNumVal1 = {T49 OtherNumVal1},",
						"          P1_T49OtherNumVal2 = {T49 OtherNumVal2},",
						"          P1_T49OtherDtVal1 = {T49 OtherDtVal1},",
						"          P1_T49OtherDtVal2 = {T49 OtherDtVal2},",
						"          P1_T50Type = {T50 Type},",
						"          P1_T50OtherCharVal1 = {T50 OtherCharVal1},",
						"          P1_T50OtherCharVal2 = {T50 OtherCharVal2},",
						"          P1_T50OtherNumVal1 = {T50 OtherNumVal1},",
						"          P1_T50OtherNumVal2 = {T50 OtherNumVal2},",
						"          P1_T50OtherDtVal1 = {T50 OtherDtVal1},",
						"          P1_T50OtherDtVal2 = {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreYear join(OtherCoreWorkers@ClientId == OtherCoreYear@ClientId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreAnalysisTbl_P1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherAnaylysis_P2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_2P",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "OtherCoreAnalysisMaxYearOutput"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By WorkerId,ClientId,ClientEngagementDt\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          ClientId as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select ClientId, MAX(CAST(LEFT(TYPE, 4) as INT))-2 as Year from [dbo].[OtherCoreAnalysisRefTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By ClientId\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          ClientId = OtherCoreWorkers@ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          P2_DataCollectionYear = {Data Collection Year},",
						"          P2_DataCollectionQuarter = {Data Collection Quarter},",
						"          P2_EventYear = Year,",
						"          P2_T1Type = {T1 Type},",
						"          P2_T1OtherCharVal1 = {T1 OtherCharVal1},",
						"          P2_T1OtherCharVal2 = {T1 OtherCharVal2},",
						"          P2_T1OtherNumVal1 = {T1 OtherNumVal1},",
						"          P2_T1OtherNumVal2 = {T1 OtherNumVal2},",
						"          P2_T1OtherDtVal1 = {T1 OtherDtVal1},",
						"          P2_T1OtherDtVal2 = {T1 OtherDtVal2},",
						"          P2_T2Type = {T2 Type},",
						"          P2_T2OtherCharVal1 = {T2 OtherCharVal1},",
						"          P2_T2OtherCharVal2 = {T2 OtherCharVal2},",
						"          P2_T2OtherNumVal1 = {T2 OtherNumVal1},",
						"          P2_T2OtherNumVal2 = {T2 OtherNumVal2},",
						"          P2_T2OtherDtVal1 = {T2 OtherDtVal1},",
						"          P2_T2OtherDtVal2 = {T2 OtherDtVal2},",
						"          P2_T3Type = {T3 Type},",
						"          P2_T3OtherCharVal1 = {T3 OtherCharVal1},",
						"          P2_T3OtherCharVal2 = {T3 OtherCharVal2},",
						"          P2_T3OtherNumVal1 = {T3 OtherNumVal1},",
						"          P2_T3OtherNumVal2 = {T3 OtherNumVal2},",
						"          P2_T3OtherDtVal1 = {T3 OtherDtVal1},",
						"          P2_T3OtherDtVal2 = {T3 OtherDtVal2},",
						"          P2_T4Type = {T4 Type},",
						"          P2_T4OtherCharVal1 = {T4 OtherCharVal1},",
						"          P2_T4OtherCharVal2 = {T4 OtherCharVal2},",
						"          P2_T4OtherNumVal1 = {T4 OtherNumVal1},",
						"          P2_T4OtherNumVal2 = {T4 OtherNumVal2},",
						"          P2_T4OtherDtVal1 = {T4 OtherDtVal1},",
						"          P2_T4OtherDtVal2 = {T4 OtherDtVal2},",
						"          P2_T5Type = {T5 Type},",
						"          P2_T5OtherCharVal1 = {T5 OtherCharVal1},",
						"          P2_T5OtherCharVal2 = {T5 OtherCharVal2},",
						"          P2_T5OtherNumVal1 = {T5 OtherNumVal1},",
						"          P2_T5OtherNumVal2 = {T5 OtherNumVal2},",
						"          P2_T5OtherDtVal1 = {T5 OtherDtVal1},",
						"          P2_T5OtherDtVal2 = {T5 OtherDtVal2},",
						"          P2_T6Type = {T6 Type},",
						"          P2_T6OtherCharVal1 = {T6 OtherCharVal1},",
						"          P2_T6OtherCharVal2 = {T6 OtherCharVal2},",
						"          P2_T6OtherNumVal1 = {T6 OtherNumVal1},",
						"          P2_T6OtherNumVal2 = {T6 OtherNumVal2},",
						"          P2_T6OtherDtVal1 = {T6 OtherDtVal1},",
						"          P2_T6OtherDtVal2 = {T6 OtherDtVal2},",
						"          P2_T7Type = {T7 Type},",
						"          P2_T7OtherCharVal1 = {T7 OtherCharVal1},",
						"          P2_T7OtherCharVal2 = {T7 OtherCharVal2},",
						"          P2_T7OtherNumVal1 = {T7 OtherNumVal1},",
						"          P2_T7OtherNumVal2 = {T7 OtherNumVal2},",
						"          P2_T7OtherDtVal1 = {T7 OtherDtVal1},",
						"          P2_T7OtherDtVal2 = {T7 OtherDtVal2},",
						"          P2_T8Type = {T8 Type},",
						"          P2_T8OtherCharVal1 = {T8 OtherCharVal1},",
						"          P2_T8OtherCharVal2 = {T8 OtherCharVal2},",
						"          P2_T8OtherNumVal1 = {T8 OtherNumVal1},",
						"          P2_T8OtherNumVal2 = {T8 OtherNumVal2},",
						"          P2_T8OtherDtVal1 = {T8 OtherDtVal1},",
						"          P2_T8OtherDtVal2 = {T8 OtherDtVal2},",
						"          P2_T9Type = {T9 Type},",
						"          P2_T9OtherCharVal1 = {T9 OtherCharVal1},",
						"          P2_T9OtherCharVal2 = {T9 OtherCharVal2},",
						"          P2_T9OtherNumVal1 = {T9 OtherNumVal1},",
						"          P2_T9OtherNumVal2 = {T9 OtherNumVal2},",
						"          P2_T9OtherDtVal1 = {T9 OtherDtVal1},",
						"          P2_T9OtherDtVal2 = {T9 OtherDtVal2},",
						"          P2_T10Type = {T10 Type},",
						"          P2_T10OtherCharVal1 = {T10 OtherCharVal1},",
						"          P2_T10OtherCharVal2 = {T10 OtherCharVal2},",
						"          P2_T10OtherNumVal1 = {T10 OtherNumVal1},",
						"          P2_T10OtherNumVal2 = {T10 OtherNumVal2},",
						"          P2_T10OtherDtVal1 = {T10 OtherDtVal1},",
						"          P2_T10OtherDtVal2 = {T10 OtherDtVal2},",
						"          P2_T11Type = {T11 Type},",
						"          P2_T11OtherCharVal1 = {T11 OtherCharVal1},",
						"          P2_T11OtherCharVal2 = {T11 OtherCharVal2},",
						"          P2_T11OtherNumVal1 = {T11 OtherNumVal1},",
						"          P2_T11OtherNumVal2 = {T11 OtherNumVal2},",
						"          P2_T11OtherDtVal1 = {T11 OtherDtVal1},",
						"          P2_T11OtherDtVal2 = {T11 OtherDtVal2},",
						"          P2_T12Type = {T12 Type},",
						"          P2_T12OtherCharVal1 = {T12 OtherCharVal1},",
						"          P2_T12OtherCharVal2 = {T12 OtherCharVal2},",
						"          P2_T12OtherNumVal1 = {T12 OtherNumVal1},",
						"          P2_T12OtherNumVal2 = {T12 OtherNumVal2},",
						"          P2_T12OtherDtVal1 = {T12 OtherDtVal1},",
						"          P2_T12OtherDtVal2 = {T12 OtherDtVal2},",
						"          P2_T13Type = {T13 Type},",
						"          P2_T13OtherCharVal1 = {T13 OtherCharVal1},",
						"          P2_T13OtherCharVal2 = {T13 OtherCharVal2},",
						"          P2_T13OtherNumVal1 = {T13 OtherNumVal1},",
						"          P2_T13OtherNumVal2 = {T13 OtherNumVal2},",
						"          P2_T13OtherDtVal1 = {T13 OtherDtVal1},",
						"          P2_T13OtherDtVal2 = {T13 OtherDtVal2},",
						"          P2_T14Type = {T14 Type},",
						"          P2_T14OtherCharVal1 = {T14 OtherCharVal1},",
						"          P2_T14OtherCharVal2 = {T14 OtherCharVal2},",
						"          P2_T14OtherNumVal1 = {T14 OtherNumVal1},",
						"          P2_T14OtherNumVal2 = {T14 OtherNumVal2},",
						"          P2_T14OtherDtVal1 = {T14 OtherDtVal1},",
						"          P2_T14OtherDtVal2 = {T14 OtherDtVal2},",
						"          P2_T15Type = {T15 Type},",
						"          P2_T15OtherCharVal1 = {T15 OtherCharVal1},",
						"          P2_T15OtherCharVal2 = {T15 OtherCharVal2},",
						"          P2_T15OtherNumVal1 = {T15 OtherNumVal1},",
						"          P2_T15OtherNumVal2 = {T15 OtherNumVal2},",
						"          P2_T15OtherDtVal1 = {T15 OtherDtVal1},",
						"          P2_T15OtherDtVal2 = {T15 OtherDtVal2},",
						"          P2_T16Type = {T16 Type},",
						"          P2_T16OtherCharVal1 = {T16 OtherCharVal1},",
						"          P2_T16OtherCharVal2 = {T16 OtherCharVal2},",
						"          P2_T16OtherNumVal1 = {T16 OtherNumVal1},",
						"          P2_T16OtherNumVal2 = {T16 OtherNumVal2},",
						"          P2_T16OtherDtVal1 = {T16 OtherDtVal1},",
						"          P2_T16OtherDtVal2 = {T16 OtherDtVal2},",
						"          P2_T17Type = {T17 Type},",
						"          P2_T17OtherCharVal1 = {T17 OtherCharVal1},",
						"          P2_T17OtherCharVal2 = {T17 OtherCharVal2},",
						"          P2_T17OtherNumVal1 = {T17 OtherNumVal1},",
						"          P2_T17OtherNumVal2 = {T17 OtherNumVal2},",
						"          P2_T17OtherDtVal1 = {T17 OtherDtVal1},",
						"          P2_T17OtherDtVal2 = {T17 OtherDtVal2},",
						"          P2_T18Type = {T18 Type},",
						"          P2_T18OtherCharVal1 = {T18 OtherCharVal1},",
						"          P2_T18OtherCharVal2 = {T18 OtherCharVal2},",
						"          P2_T18OtherNumVal1 = {T18 OtherNumVal1},",
						"          P2_T18OtherNumVal2 = {T18 OtherNumVal2},",
						"          P2_T18OtherDtVal1 = {T18 OtherDtVal1},",
						"          P2_T18OtherDtVal2 = {T18 OtherDtVal2},",
						"          P2_T19Type = {T19 Type},",
						"          P2_T19OtherCharVal1 = {T19 OtherCharVal1},",
						"          P2_T19OtherCharVal2 = {T19 OtherCharVal2},",
						"          P2_T19OtherNumVal1 = {T19 OtherNumVal1},",
						"          P2_T19OtherNumVal2 = {T19 OtherNumVal2},",
						"          P2_T19OtherDtVal1 = {T19 OtherDtVal1},",
						"          P2_T19OtherDtVal2 = {T19 OtherDtVal2},",
						"          P2_T20Type = {T20 Type},",
						"          P2_T20OtherCharVal1 = {T20 OtherCharVal1},",
						"          P2_T20OtherCharVal2 = {T20 OtherCharVal2},",
						"          P2_T20OtherNumVal1 = {T20 OtherNumVal1},",
						"          P2_T20OtherNumVal2 = {T20 OtherNumVal2},",
						"          P2_T20OtherDtVal1 = {T20 OtherDtVal1},",
						"          P2_T20OtherDtVal2 = {T20 OtherDtVal2},",
						"          P2_T21Type = {T21 Type},",
						"          P2_T21OtherCharVal1 = {T21 OtherCharVal1},",
						"          P2_T21OtherCharVal2 = {T21 OtherCharVal2},",
						"          P2_T21OtherNumVal1 = {T21 OtherNumVal1},",
						"          P2_T21OtherNumVal2 = {T21 OtherNumVal2},",
						"          P2_T21OtherDtVal1 = {T21 OtherDtVal1},",
						"          P2_T21OtherDtVal2 = {T21 OtherDtVal2},",
						"          P2_T22Type = {T22 Type},",
						"          P2_T22OtherCharVal1 = {T22 OtherCharVal1},",
						"          P2_T22OtherCharVal2 = {T22 OtherCharVal2},",
						"          P2_T22OtherNumVal1 = {T22 OtherNumVal1},",
						"          P2_T22OtherNumVal2 = {T22 OtherNumVal2},",
						"          P2_T22OtherDtVal1 = {T22 OtherDtVal1},",
						"          P2_T22OtherDtVal2 = {T22 OtherDtVal2},",
						"          P2_T23Type = {T23 Type},",
						"          P2_T23OtherCharVal1 = {T23 OtherCharVal1},",
						"          P2_T23OtherCharVal2 = {T23 OtherCharVal2},",
						"          P2_T23OtherNumVal1 = {T23 OtherNumVal1},",
						"          P2_T23OtherNumVal2 = {T23 OtherNumVal2},",
						"          P2_T23OtherDtVal1 = {T23 OtherDtVal1},",
						"          P2_T23OtherDtVal2 = {T23 OtherDtVal2},",
						"          P2_T24Type = {T24 Type},",
						"          P2_T24OtherCharVal1 = {T24 OtherCharVal1},",
						"          P2_T24OtherCharVal2 = {T24 OtherCharVal2},",
						"          P2_T24OtherNumVal1 = {T24 OtherNumVal1},",
						"          P2_T24OtherNumVal2 = {T24 OtherNumVal2},",
						"          P2_T24OtherDtVal1 = {T24 OtherDtVal1},",
						"          P2_T24OtherDtVal2 = {T24 OtherDtVal2},",
						"          P2_T25Type = {T25 Type},",
						"          P2_T25OtherCharVal1 = {T25 OtherCharVal1},",
						"          P2_T25OtherCharVal2 = {T25 OtherCharVal2},",
						"          P2_T25OtherNumVal1 = {T25 OtherNumVal1},",
						"          P2_T25OtherNumVal2 = {T25 OtherNumVal2},",
						"          P2_T25OtherDtVal1 = {T25 OtherDtVal1},",
						"          P2_T25OtherDtVal2 = {T25 OtherDtVal2},",
						"          P2_T26Type = {T26 Type},",
						"          P2_T26OtherCharVal1 = {T26 OtherCharVal1},",
						"          P2_T26OtherCharVal2 = {T26 OtherCharVal2},",
						"          P2_T26OtherNumVal1 = {T26 OtherNumVal1},",
						"          P2_T26OtherNumVal2 = {T26 OtherNumVal2},",
						"          P2_T26OtherDtVal1 = {T26 OtherDtVal1},",
						"          P2_T26OtherDtVal2 = {T26 OtherDtVal2},",
						"          P2_T27Type = {T27 Type},",
						"          P2_T27OtherCharVal1 = {T27 OtherCharVal1},",
						"          P2_T27OtherCharVal2 = {T27 OtherCharVal2},",
						"          P2_T27OtherNumVal1 = {T27 OtherNumVal1},",
						"          P2_T27OtherNumVal2 = {T27 OtherNumVal2},",
						"          P2_T27OtherDtVal1 = {T27 OtherDtVal1},",
						"          P2_T27OtherDtVal2 = {T27 OtherDtVal2},",
						"          P2_T28Type = {T28 Type},",
						"          P2_T28OtherCharVal1 = {T28 OtherCharVal1},",
						"          P2_T28OtherCharVal2 = {T28 OtherCharVal2},",
						"          P2_T28OtherNumVal1 = {T28 OtherNumVal1},",
						"          P2_T28OtherNumVal2 = {T28 OtherNumVal2},",
						"          P2_T28OtherDtVal1 = {T28 OtherDtVal1},",
						"          P2_T28OtherDtVal2 = {T28 OtherDtVal2},",
						"          P2_T29Type = {T29 Type},",
						"          P2_T29OtherCharVal1 = {T29 OtherCharVal1},",
						"          P2_T29OtherCharVal2 = {T29 OtherCharVal2},",
						"          P2_T29OtherNumVal1 = {T29 OtherNumVal1},",
						"          P2_T29OtherNumVal2 = {T29 OtherNumVal2},",
						"          P2_T29OtherDtVal1 = {T29 OtherDtVal1},",
						"          P2_T29OtherDtVal2 = {T29 OtherDtVal2},",
						"          P2_T30Type = {T30 Type},",
						"          P2_T30OtherCharVal1 = {T30 OtherCharVal1},",
						"          P2_T30OtherCharVal2 = {T30 OtherCharVal2},",
						"          P2_T30OtherNumVal1 = {T30 OtherNumVal1},",
						"          P2_T30OtherNumVal2 = {T30 OtherNumVal2},",
						"          P2_T30OtherDtVal1 = {T30 OtherDtVal1},",
						"          P2_T30OtherDtVal2 = {T30 OtherDtVal2},",
						"          P2_T31Type = {T31 Type},",
						"          P2_T31OtherCharVal1 = {T31 OtherCharVal1},",
						"          P2_T31OtherCharVal2 = {T31 OtherCharVal2},",
						"          P2_T31OtherNumVal1 = {T31 OtherNumVal1},",
						"          P2_T31OtherNumVal2 = {T31 OtherNumVal2},",
						"          P2_T31OtherDtVal1 = {T31 OtherDtVal1},",
						"          P2_T31OtherDtVal2 = {T31 OtherDtVal2},",
						"          P2_T32Type = {T32 Type},",
						"          P2_T32OtherCharVal1 = {T32 OtherCharVal1},",
						"          P2_T32OtherCharVal2 = {T32 OtherCharVal2},",
						"          P2_T32OtherNumVal1 = {T32 OtherNumVal1},",
						"          P2_T32OtherNumVal2 = {T32 OtherNumVal2},",
						"          P2_T32OtherDtVal1 = {T32 OtherDtVal1},",
						"          P2_T32OtherDtVal2 = {T32 OtherDtVal2},",
						"          P2_T33Type = {T33 Type},",
						"          P2_T33OtherCharVal1 = {T33 OtherCharVal1},",
						"          P2_T33OtherCharVal2 = {T33 OtherCharVal2},",
						"          P2_T33OtherNumVal1 = {T33 OtherNumVal1},",
						"          P2_T33OtherNumVal2 = {T33 OtherNumVal2},",
						"          P2_T33OtherDtVal1 = {T33 OtherDtVal1},",
						"          P2_T33OtherDtVal2 = {T33 OtherDtVal2},",
						"          P2_T34Type = {T34 Type},",
						"          P2_T34OtherCharVal1 = {T34 OtherCharVal1},",
						"          P2_T34OtherCharVal2 = {T34 OtherCharVal2},",
						"          P2_T34OtherNumVal1 = {T34 OtherNumVal1},",
						"          P2_T34OtherNumVal2 = {T34 OtherNumVal2},",
						"          P2_T34OtherDtVal1 = {T34 OtherDtVal1},",
						"          P2_T34OtherDtVal2 = {T34 OtherDtVal2},",
						"          P2_T35Type = {T35 Type},",
						"          P2_T35OtherCharVal1 = {T35 OtherCharVal1},",
						"          P2_T35OtherCharVal2 = {T35 OtherCharVal2},",
						"          P2_T35OtherNumVal1 = {T35 OtherNumVal1},",
						"          P2_T35OtherNumVal2 = {T35 OtherNumVal2},",
						"          P2_T35OtherDtVal1 = {T35 OtherDtVal1},",
						"          P2_T35OtherDtVal2 = {T35 OtherDtVal2},",
						"          P2_T36Type = {T36 Type},",
						"          P2_T36OtherCharVal1 = {T36 OtherCharVal1},",
						"          P2_T36OtherCharVal2 = {T36 OtherCharVal2},",
						"          P2_T36OtherNumVal1 = {T36 OtherNumVal1},",
						"          P2_T36OtherNumVal2 = {T36 OtherNumVal2},",
						"          P2_T36OtherDtVal1 = {T36 OtherDtVal1},",
						"          P2_T36OtherDtVal2 = {T36 OtherDtVal2},",
						"          P2_T37Type = {T37 Type},",
						"          P2_T37OtherCharVal1 = {T37 OtherCharVal1},",
						"          P2_T37OtherCharVal2 = {T37 OtherCharVal2},",
						"          P2_T37OtherNumVal1 = {T37 OtherNumVal1},",
						"          P2_T37OtherNumVal2 = {T37 OtherNumVal2},",
						"          P2_T37OtherDtVal1 = {T37 OtherDtVal1},",
						"          P2_T37OtherDtVal2 = {T37 OtherDtVal2},",
						"          P2_T38Type = {T38 Type},",
						"          P2_T38OtherCharVal1 = {T38 OtherCharVal1},",
						"          P2_T38OtherCharVal2 = {T38 OtherCharVal2},",
						"          P2_T38OtherNumVal1 = {T38 OtherNumVal1},",
						"          P2_T38OtherNumVal2 = {T38 OtherNumVal2},",
						"          P2_T38OtherDtVal1 = {T38 OtherDtVal1},",
						"          P2_T38OtherDtVal2 = {T38 OtherDtVal2},",
						"          P2_T39Type = {T39 Type},",
						"          P2_T39OtherCharVal1 = {T39 OtherCharVal1},",
						"          P2_T39OtherCharVal2 = {T39 OtherCharVal2},",
						"          P2_T39OtherNumVal1 = {T39 OtherNumVal1},",
						"          P2_T39OtherNumVal2 = {T39 OtherNumVal2},",
						"          P2_T39OtherDtVal1 = {T39 OtherDtVal1},",
						"          P2_T39OtherDtVal2 = {T39 OtherDtVal2},",
						"          P2_T40Type = {T40 Type},",
						"          P2_T40OtherCharVal1 = {T40 OtherCharVal1},",
						"          P2_T40OtherCharVal2 = {T40 OtherCharVal2},",
						"          P2_T40OtherNumVal1 = {T40 OtherNumVal1},",
						"          P2_T40OtherNumVal2 = {T40 OtherNumVal2},",
						"          P2_T40OtherDtVal1 = {T40 OtherDtVal1},",
						"          P2_T40OtherDtVal2 = {T40 OtherDtVal2},",
						"          P2_T41Type = {T41 Type},",
						"          P2_T41OtherCharVal1 = {T41 OtherCharVal1},",
						"          P2_T41OtherCharVal2 = {T41 OtherCharVal2},",
						"          P2_T41OtherNumVal1 = {T41 OtherNumVal1},",
						"          P2_T41OtherNumVal2 = {T41 OtherNumVal2},",
						"          P2_T41OtherDtVal1 = {T41 OtherDtVal1},",
						"          P2_T41OtherDtVal2 = {T41 OtherDtVal2},",
						"          P2_T42Type = {T42 Type},",
						"          P2_T42OtherCharVal1 = {T42 OtherCharVal1},",
						"          P2_T42OtherCharVal2 = {T42 OtherCharVal2},",
						"          P2_T42OtherNumVal1 = {T42 OtherNumVal1},",
						"          P2_T42OtherNumVal2 = {T42 OtherNumVal2},",
						"          P2_T42OtherDtVal1 = {T42 OtherDtVal1},",
						"          P2_T42OtherDtVal2 = {T42 OtherDtVal2},",
						"          P2_T43Type = {T43 Type},",
						"          P2_T43OtherCharVal1 = {T43 OtherCharVal1},",
						"          P2_T43OtherCharVal2 = {T43 OtherCharVal2},",
						"          P2_T43OtherNumVal1 = {T43 OtherNumVal1},",
						"          P2_T43OtherNumVal2 = {T43 OtherNumVal2},",
						"          P2_T43OtherDtVal1 = {T43 OtherDtVal1},",
						"          P2_T43OtherDtVal2 = {T43 OtherDtVal2},",
						"          P2_T44Type = {T44 Type},",
						"          P2_T44OtherCharVal1 = {T44 OtherCharVal1},",
						"          P2_T44OtherCharVal2 = {T44 OtherCharVal2},",
						"          P2_T44OtherNumVal1 = {T44 OtherNumVal1},",
						"          P2_T44OtherNumVal2 = {T44 OtherNumVal2},",
						"          P2_T44OtherDtVal1 = {T44 OtherDtVal1},",
						"          P2_T44OtherDtVal2 = {T44 OtherDtVal2},",
						"          P2_T45Type = {T45 Type},",
						"          P2_T45OtherCharVal1 = {T45 OtherCharVal1},",
						"          P2_T45OtherCharVal2 = {T45 OtherCharVal2},",
						"          P2_T45OtherNumVal1 = {T45 OtherNumVal1},",
						"          P2_T45OtherNumVal2 = {T45 OtherNumVal2},",
						"          P2_T45OtherDtVal1 = {T45 OtherDtVal1},",
						"          P2_T45OtherDtVal2 = {T45 OtherDtVal2},",
						"          P2_T46Type = {T46 Type},",
						"          P2_T46OtherCharVal1 = {T46 OtherCharVal1},",
						"          P2_T46OtherCharVal2 = {T46 OtherCharVal2},",
						"          P2_T46OtherNumVal1 = {T46 OtherNumVal1},",
						"          P2_T46OtherNumVal2 = {T46 OtherNumVal2},",
						"          P2_T46OtherDtVal1 = {T46 OtherDtVal1},",
						"          P2_T46OtherDtVal2 = {T46 OtherDtVal2},",
						"          P2_T47Type = {T47 Type},",
						"          P2_T47OtherCharVal1 = {T47 OtherCharVal1},",
						"          P2_T47OtherCharVal2 = {T47 OtherCharVal2},",
						"          P2_T47OtherNumVal1 = {T47 OtherNumVal1},",
						"          P2_T47OtherNumVal2 = {T47 OtherNumVal2},",
						"          P2_T47OtherDtVal1 = {T47 OtherDtVal1},",
						"          P2_T47OtherDtVal2 = {T47 OtherDtVal2},",
						"          P2_T48Type = {T48 Type},",
						"          P2_T48OtherCharVal1 = {T48 OtherCharVal1},",
						"          P2_T48OtherCharVal2 = {T48 OtherCharVal2},",
						"          P2_T48OtherNumVal1 = {T48 OtherNumVal1},",
						"          P2_T48OtherNumVal2 = {T48 OtherNumVal2},",
						"          P2_T48OtherDtVal1 = {T48 OtherDtVal1},",
						"          P2_T48OtherDtVal2 = {T48 OtherDtVal2},",
						"          P2_T49Type = {T49 Type},",
						"          P2_T49OtherCharVal1 = {T49 OtherCharVal1},",
						"          P2_T49OtherCharVal2 = {T49 OtherCharVal2},",
						"          P2_T49OtherNumVal1 = {T49 OtherNumVal1},",
						"          P2_T49OtherNumVal2 = {T49 OtherNumVal2},",
						"          P2_T49OtherDtVal1 = {T49 OtherDtVal1},",
						"          P2_T49OtherDtVal2 = {T49 OtherDtVal2},",
						"          P2_T50Type = {T50 Type},",
						"          P2_T50OtherCharVal1 = {T50 OtherCharVal1},",
						"          P2_T50OtherCharVal2 = {T50 OtherCharVal2},",
						"          P2_T50OtherNumVal1 = {T50 OtherNumVal1},",
						"          P2_T50OtherNumVal2 = {T50 OtherNumVal2},",
						"          P2_T50OtherDtVal1 = {T50 OtherDtVal1},",
						"          P2_T50OtherDtVal2 = {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreAnalysisMaxYearOutput join(OtherCoreWorkers@ClientId == {Client Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"OtherCoreYear derive({Client Id} = $Flow_Client_Id) ~> OtherCoreAnalysisMaxYearOutput",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreAnalysisTbl_P2.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}