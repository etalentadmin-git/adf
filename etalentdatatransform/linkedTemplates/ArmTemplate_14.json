{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Applicant_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Applicant_Append",
								"type": "DatasetReference"
							},
							"name": "ApplicantAppendFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantAppendFile",
						"ApplicantAppendFile filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Job Applicant') ~> AddDerived",
						"AddDerived derive(Event = iif(isNull(Event),'Job Applicant',Event),",
						"          Source = iif(isNull(Source),'N/A',Source),",
						"          {Applicant Type} = iif(isNull({Applicant Type}),'N/A',{Applicant Type}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGTBQ = iif(isNull(LGTBQ),'N/A',LGTBQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Applicant Step Before Final Disposition} = iif(isNull({Applicant Step Before Final Disposition}),'N/A',{Applicant Step Before Final Disposition}),",
						"          {Applicant Rejected Reason} = iif(isNull({Applicant Rejected Reason}),'N/A',{Applicant Rejected Reason})) ~> ConvertNullsForKeyFields",
						"SelectFinal, Applicants union(byName: true)~> union1",
						"union1 aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOutput",
						"SelectOutput aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     RowCount = count({Applicant ID})) ~> aggregate1",
						"aggregate1 aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RowCount = count({Requisition ID})) ~> aggregate2",
						"aggregate2 derive(WorkerIDValue = iif(length(trim({Internal Worker ID}))>0, 'Y','N')) ~> derivedColumn1",
						"derivedColumn1 filter(WorkerIDValue=='Y') ~> filter1",
						"filter1 select(mapColumn(",
						"          {Applicant ID},",
						"          {Internal Worker ID for Match} = {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)},",
						"          RowCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ApplicantTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Core_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MergeEvents"
						},
						{
							"name": "AddDerived",
							"description": "Add employee count column for aggregations."
						},
						{
							"name": "select1"
						},
						{
							"name": "TagHeadcountEvent"
						},
						{
							"name": "TagTerminationEvent"
						},
						{
							"name": "TagHireEvent"
						},
						{
							"name": "TagPromotionEvent"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "filter4"
						},
						{
							"name": "select5"
						},
						{
							"name": "CalcNullDates"
						},
						{
							"name": "CalcServiceforNulls"
						},
						{
							"name": "RemoveNullWorkerIdRowsHCT"
						},
						{
							"name": "RemoveNullWorkerIdRowsTER"
						},
						{
							"name": "RemoveNullWorkerIdRowsHIR"
						},
						{
							"name": "RemoveNullWorkerIdRowsPRO"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveDuplicates"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years in Job} as double,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"TagHeadcountEvent, TagHireEvent, TagTerminationEvent, TagPromotionEvent union(byName: true)~> MergeEvents",
						"CalcServiceforNulls derive(EmpCount = 1,",
						"          {Generation Desc} = iif(not(isNull({Birth Year})), iif({Birth Year}<1946,'Pre-Boomer (<1946)', iif(between({Birth Year},1946,1964),'Boomer (1946-1964)', \r",
						"iif(between({Birth Year}, 1965, 1978),'Gen X (1965-1978)', \r",
						"iif(between({Birth Year},1979,1996),'Gen Y (1979-1996)', \r",
						"iif({Birth Year}>=1997,'Gen Z (>=1997)','Unknown'))))),{Generation Desc}),",
						"          {Generation Sort ID} = iif({Birth Year}<1946,1,  iif(between({Birth Year},1946,1964),2,  iif(between({Birth Year}, 1965, 1978),3,  iif(between({Birth Year},1979,1996),4,  iif({Birth Year}>=1997,5,6))))),",
						"          {Years of Service Band} = iif(between({Years of Service},0,0.25),'0-3 Months', \r",
						"iif(between({Years of Service},0.26,0.5),'4-6 Months', \r",
						"iif(between({Years of Service},0.51,0.99),'7-11 Months', \r",
						"iif(between({Years of Service},1,1.99),'1-2 Years', \r",
						"iif(between({Years of Service},2,4.99),'2-5 Years', \r",
						"iif(between({Years of Service},5,9.99),'5-10 Years', \r",
						"iif(between({Years of Service},10,14.99),'10-15 Years', \r",
						"iif(between({Years of Service},15,24.99),'15-25 Years', \r",
						"iif({Years of Service}>=25,'25+ Years', 'Unknown'))))))))),",
						"          {Years of Service Sort ID} = iif(between({Years of Service},0,0.25),9, \r",
						"iif(between({Years of Service},0.26,0.5),8, \r",
						"iif(between({Years of Service},0.51,0.99),7, \r",
						"iif(between({Years of Service},1,1.99),6, \r",
						"iif(between({Years of Service},2,4.99),5, \r",
						"iif(between({Years of Service},5,9.99),4, \r",
						"iif(between({Years of Service},10,14.99),3, \r",
						"iif(between({Years of Service},15,24.99),2, \r",
						"iif({Years of Service}>=25,1, 10))))))))),",
						"          {Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddDerived",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select2 derive(Event = 'Headcount',",
						"          {Event Code} = 'HCT') ~> TagHeadcountEvent",
						"select3 derive(Event = 'Termination',",
						"          {Event Code} = 'TER') ~> TagTerminationEvent",
						"select4 derive(Event = 'Hire',",
						"          {Event Code} = 'HIR') ~> TagHireEvent",
						"select5 derive(Event = 'Promotion',",
						"          {Event Code} = 'PRO') ~> TagPromotionEvent",
						"AddDerived derive({Event Type} = iif(isNull({Event Type}),'N/A',{Event Type}),",
						"          {Event Reason} = iif(isNull({Event Reason}),'N/A',{Event Reason}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Previous Corporate Title} = iif(isNull({Previous Corporate Title}),'N/A',{Previous Corporate Title}),",
						"          {Job Title} = iif(isNull({Job Title}),'N/A',{Job Title}),",
						"          {Job Family/Function} = iif(isNull({Job Family/Function}),'N/A',{Job Family/Function}),",
						"          {Previous Job Title} = iif(isNull({Previous Job Title}),'N/A',{Previous Job Family/Function}),",
						"          {Previous Job Family/Function} = iif(isNull({Previous Job Family/Function}),'N/A',{Previous Job Family/Function}),",
						"          {Rehire Indicator} = iif(isNull({Rehire Indicator}),'N/A',{Rehire Indicator}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work City} = iif(isNull({Work City}),'N/A',{Work City}),",
						"          {Work State} = iif(isNull({Work State}),'N/A',{Work State}),",
						"          {Work Country} = iif(isNull({Work Country}),'N/A',{Work Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Direct Manager Worker ID} = iif(isNull({Direct Manager Worker ID}),'N/A',{Direct Manager Worker ID}),",
						"          {Legacy Organization} = iif(isNull({Legacy Organization}),'N/A',{Legacy Organization}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGTBQ = iif(isNull(LGTBQ),'N/A',LGTBQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Generation Desc} = iif(isNull({Generation Desc}),'N/A',{Generation Desc}),",
						"          {Manager Indicator} = iif(isNull({Manager Indicator}),'N/A',{Manager Indicator})) ~> ConvertNullsForKeyFields",
						"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
						"RemoveNullWorkerIdRowsHCT select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
						"RemoveNullWorkerIdRowsTER select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
						"RemoveNullWorkerIdRowsHIR select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
						"RemoveNullWorkerIdRowsPRO select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"MergeEvents derive({Current Hire Date} = iif(isNull({Current Hire Date}),{Original Hire Date},{Current Hire Date})) ~> CalcNullDates",
						"CalcNullDates derive({Years of Service} = round({Years of Service},1),",
						"          {Years in Job} = round({Years in Job},1)) ~> CalcServiceforNulls",
						"filter1 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHCT",
						"filter2 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsTER",
						"filter3 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHIR",
						"filter4 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsPRO",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date})) ~> derivedColumn1",
						"select1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Event Date},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount),",
						"     RowCount = count({Worker ID})) ~> RemoveDuplicates",
						"RemoveDuplicates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['CoreFctTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_DivSlate_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "JoinEthMap"
						},
						{
							"name": "JoinGenderMap"
						},
						{
							"name": "SelectEthnicity"
						},
						{
							"name": "SelectGender"
						},
						{
							"name": "JoinApplicantMap"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectToRemoveJoinFields"
						},
						{
							"name": "CalcDivApplicantCount"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"Applicant select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectEthnicity join({Client ID} == {Ethnicity Client ID}",
						"     && {Client Engagement Date} == {Ethnicity Client Engagement Date}",
						"     && Race == {Ethnicity Client Race}",
						"     && {Hispanic or Latino Origin} == {Ethnicity Client Hispanic or Latino Origin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEthMap",
						"JoinEthMap, SelectGender join({Client ID} == {Gender Client ID}",
						"     && {Client Engagement Date} == {Gender Client Engagement Date}",
						"     && Gender == {Gender Client Gender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGenderMap",
						"EthnicityMap select(mapColumn(",
						"          {Ethnicity Client ID} = {Client ID},",
						"          {Ethnicity Client Engagement Date} = {Client Engagement Date},",
						"          {Ethnicity Client Race} = {Client Race},",
						"          {Ethnicity Client Hispanic or Latino Origin} = {Client Hispanic or Latino Origin},",
						"          {Ethnicity Elloree Race} = {Elloree Race},",
						"          {Ethnicity Elloree Hispanic or Latino Origin} = {Elloree Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEthnicity",
						"GenderMap select(mapColumn(",
						"          {Gender Client ID} = {Client ID},",
						"          {Gender Client Engagement Date} = {Client Engagement Date},",
						"          {Gender Client Gender} = {Client Gender},",
						"          {Gender Elloree Gender} = {Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGender",
						"JoinGenderMap, SelectApplicant join({Client ID} == {Applicant Client ID}",
						"     && {Client Engagement Date} == {Applicant Client Engagement Date}",
						"     && {Applicant Final Disposition} == {Applicant Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Applicant Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Applicant Client Applicant Rejected Reason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinApplicantMap",
						"ApplicantMap select(mapColumn(",
						"          {Applicant Client ID} = {Client ID},",
						"          {Applicant Client Engagement Date} = {Client Engagement Date},",
						"          {Applicant Client Applicant Final Disposition} = {Client Applicant Final Disposition},",
						"          {Applicant Client Applicant Step Before Final Disposition} = {Client Applicant Step Before Final Disposition},",
						"          {Applicant Client Applicant Rejected Reason} = {Client Applicant Rejected Reason},",
						"          {Applicant Elloree Applicant Final Disposition} = {Elloree Applicant Final Disposition},",
						"          {Applicant Elloree Applicant Category} = {Elloree Applicant Category},",
						"          {Applicant Elloree Submitted to Mgr Fl} = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"JoinApplicantMap select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Elloree Race} = {Ethnicity Elloree Race},",
						"          {Hispanic or Latino Origin},",
						"          {Elloree Hispanic or Latino Origin} = {Ethnicity Elloree Hispanic or Latino Origin},",
						"          Gender,",
						"          {Gender Elloree Gender},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition} = {Applicant Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category} = {Applicant Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl} = {Applicant Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectToRemoveJoinFields",
						"SelectToRemoveJoinFields derive({Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),1,0),",
						"          {Internal Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {External Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",1,0),0),",
						"          {Internal Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {External Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='White',1,0),0),",
						"          {Internal White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),",
						"          {External White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),",
						"          {White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='White',1,0),0),0),",
						"          {Internal White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),0),",
						"          {External White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),0),",
						"          {Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Black',1,0),0),",
						"          {Internal Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),",
						"          {External Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),",
						"          {Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Black',1,0),0),0),",
						"          {Internal Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),0),",
						"          {External Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),0),",
						"          {Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Asian',1,0),0),",
						"          {Internal Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),",
						"          {External Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),",
						"          {Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Asian',1,0),0),0),",
						"          {Internal Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {External Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {Latinx Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Internal Latinx Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {External Latinx Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {Internal Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {External Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),",
						"          {Internal 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {External 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Internal 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {External 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Other',1,0),0),",
						"          {Internal Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Other'),1,0),0),",
						"          {External Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Other'),1,0),0),",
						"          {Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {Internal Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {External Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {Internal PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {External PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),",
						"          {Internal Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {External Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Internal Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {External Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),",
						"          {Internal Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {External Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Internal Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {External Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),",
						"          {Internal Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {External Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Internal Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {External Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Diverse Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Internal Diverse Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {External Diverse Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Diverse Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Internal Diverse Candidates Hired} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {External Diverse Candidates Hired} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0)) ~> CalcDivApplicantCount",
						"CalcDivApplicantCount aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Requisition ID},",
						"          {Event Year}),",
						"     {Candidates StM} = sum({Candidates StM}),",
						"          {Internal Candidates StM} = sum({Internal Candidates StM}),",
						"          {External Candidates StM} = sum({External Candidates StM}),",
						"          {Candidates Hired} = sum({Candidates Hired}),",
						"          {Internal Candidates Hired} = sum({Internal Candidates Hired}),",
						"          {External Candidates Hired} = sum({External Candidates Hired}),",
						"          {White Candidates StM} = sum({White Candidates StM}),",
						"          {Internal White Candidates StM} = sum({Internal White Candidates StM}),",
						"          {External White Candidates StM} = sum({External White Candidates StM}),",
						"          {White Candidates Hired} = sum({White Candidates Hired}),",
						"          {Internal White Candidates Hired} = sum({Internal White Candidates Hired}),",
						"          {External White Candidates Hired} = sum({External White Candidates Hired}),",
						"          {Black Candidates StM} = sum({Black Candidates StM}),",
						"          {Internal Black Candidates StM} = sum({Internal Black Candidates StM}),",
						"          {External Black Candidates StM} = sum({External Black Candidates StM}),",
						"          {Black Candidates Hired} = sum({Black Candidates Hired}),",
						"          {Internal Black Candidates Hired} = sum({Internal Black Candidates Hired}),",
						"          {External Black Candidates Hired} = sum({External Black Candidates Hired}),",
						"          {Latinx Candidates StM} = sum({Latinx Candidates StM}),",
						"          {Internal Latinx Candidates StM} = sum({Internal Latinx Candidates StM}),",
						"          {External Latinx Candidates StM} = sum({External Latinx Candidates StM}),",
						"          {Latinx Candidates Hired} = sum({Latinx Candidates Hired}),",
						"          {Internal Latinx Candidates Hired} = sum({Internal Latinx Candidates Hired}),",
						"          {External Latinx Candidates Hired} = sum({External Latinx Candidates Hired}),",
						"          {Asian Candidates StM} = sum({Asian Candidates StM}),",
						"          {Internal Asian Candidates StM} = sum({Internal Asian Candidates StM}),",
						"          {External Asian Candidates StM} = sum({External Asian Candidates StM}),",
						"          {Asian Candidates Hired} = sum({Asian Candidates Hired}),",
						"          {Internal Asian Candidates Hired} = sum({Internal Asian Candidates Hired}),",
						"          {External Asian Candidates Hired} = sum({External Asian Candidates Hired}),",
						"          {2+ Races Candidates StM} = sum({2+ Races Candidates StM}),",
						"          {Internal 2+ Races Candidates StM} = sum({Internal 2+ Races Candidates StM}),",
						"          {External 2+ Races Candidates StM} = sum({External 2+ Races Candidates StM}),",
						"          {2+ Races Candidates Hired} = sum({2+ Races Candidates Hired}),",
						"          {Internal 2+ Races Candidates Hired} = sum({Internal 2+ Races Candidates Hired}),",
						"          {External 2+ Races Candidates Hired} = sum({External 2+ Races Candidates Hired}),",
						"          {Other Candidates StM} = sum({Other Candidates StM}),",
						"          {Internal Other Candidates StM} = sum({Internal Other Candidates StM}),",
						"          {External Other Candidates StM} = sum({External Other Candidates StM}),",
						"          {Other Candidates Hired} = sum({Other Candidates Hired}),",
						"          {Internal Other Candidates Hired} = sum({Internal Other Candidates Hired}),",
						"          {External Other Candidates Hired} = sum({External Other Candidates Hired}),",
						"          {Male Candidates StM} = sum({Male Candidates StM}),",
						"          {Internal Male Candidates StM} = sum({Internal Male Candidates StM}),",
						"          {External Male Candidates StM} = sum({External Male Candidates StM}),",
						"          {Male Candidates Hired} = sum({Male Candidates Hired}),",
						"          {Internal Male Candidates Hired} = sum({Internal Male Candidates Hired}),",
						"          {External Male Candidates Hired} = sum({External Male Candidates Hired}),",
						"          {Female Candidates StM} = sum({Female Candidates StM}),",
						"          {Internal Female Candidates StM} = sum({Internal Female Candidates StM}),",
						"          {External Female Candidates StM} = sum({External Female Candidates StM}),",
						"          {Female Candidates Hired} = sum({Female Candidates Hired}),",
						"          {Internal Female Candidates Hired} = sum({Internal Female Candidates Hired}),",
						"          {External Female Candidates Hired} = sum({External Female Candidates Hired}),",
						"          {Other Gender Candidates StM} = sum({Other Gender Candidates StM}),",
						"          {Internal Other Gender Candidates StM} = sum({Internal Other Gender Candidates StM}),",
						"          {External Other Gender Candidates StM} = sum({External Other Gender Candidates StM}),",
						"          {Other Gender Candidates Hired} = sum({Other Gender Candidates Hired}),",
						"          {Internal Other Gender Candidates Hired} = sum({Internal Other Gender Candidates Hired}),",
						"          {External Other Gender Candidates Hired} = sum({External Other Gender Candidates Hired}),",
						"          {PoC Candidates StM} = sum({PoC Candidates StM}),",
						"          {Internal PoC Candidates StM} = sum({Internal PoC Candidates StM}),",
						"          {External PoC Candidates StM} = sum({External PoC Candidates StM}),",
						"          {PoC  Candidates Hired} = sum({PoC Candidates Hired}),",
						"          {Internal PoC  Candidates Hired} = sum({Internal PoC Candidates Hired}),",
						"          {External PoC  Candidates Hired} = sum({External PoC Candidates Hired}),",
						"          {Diverse Candidates StM} = sum({Diverse Candidates StM}),",
						"          {Internal Diverse Candidates StM} = sum({Internal Diverse Candidates StM}),",
						"          {External Diverse Candidates StM} = sum({External Diverse Candidates StM}),",
						"          {Diverse Candidates Hired} = sum({Diverse Candidates Hired}),",
						"          {Internal Diverse Candidates Hired} = sum({Internal Diverse Candidates Hired}),",
						"          {External Diverse Candidates Hired} = sum({External Diverse Candidates Hired}),",
						"          {Female Not PoC Candidates StM} = sum({Female Not PoC Candidates StM}),",
						"          {Internal Female Not PoC Candidates StM} = sum({Internal Female Not PoC Candidates StM}),",
						"          {External Female Not PoC Candidates StM} = sum({External Female Not PoC Candidates StM}),",
						"          {Female Not PoC Candidates Hired} = sum({Female Not PoC Candidates Hired}),",
						"          {Internal Female Not PoC Candidates Hired} = sum({Internal Female Not PoC Candidates Hired}),",
						"          {External Female Not PoC Candidates Hired} = sum({External Female Not PoC Candidates Hired}),",
						"          {Female PoC Candidates StM} = sum({Female PoC Candidates StM}),",
						"          {Internal Female PoC Candidates StM} = sum({Internal Female PoC Candidates StM}),",
						"          {External Female PoC Candidates StM} = sum({External Female PoC Candidates StM}),",
						"          {Female PoC Candidates Hired} = sum({Female PoC Candidates Hired}),",
						"          {Internal Female PoC Candidates Hired} = sum({Internal Female PoC Candidates Hired}),",
						"          {External Female PoC Candidates Hired} = sum({External Female PoC Candidates Hired}),",
						"          {Not Female PoC Candidates StM} = sum({Not Female PoC Candidates StM}),",
						"          {Internal Not Female PoC Candidates StM} = sum({Internal Not Female PoC Candidates StM}),",
						"          {External Not Female PoC Candidates StM} = sum({External Not Female PoC Candidates StM}),",
						"          {Not Female PoC Candidates Hired} = sum({Not Female PoC Candidates Hired}),",
						"          {Internal Not Female PoC Candidates Hired} = sum({Internal Not Female PoC Candidates Hired}),",
						"          {External Not Female PoC Candidates Hired} = sum({External Not Female PoC Candidates Hired}),",
						"          {Not Female Not PoC Candidates StM} = sum({Not Female Not PoC Candidates StM}),",
						"          {Internal Not Female Not PoC Candidates StM} = sum({Internal Not Female Not PoC Candidates StM}),",
						"          {External Not Female Not PoC Candidates StM} = sum({External Not Female Not PoC Candidates StM}),",
						"          {Not Female Not PoC Candidates Hired} = sum({Not Female Not PoC Candidates Hired}),",
						"          {Internal Not Female Not PoC Candidates Hired} = sum({Internal Not Female Not PoC Candidates Hired}),",
						"          {External Not Female Not PoC Candidates Hired} = sum({External Not Female Not PoC Candidates Hired})) ~> aggregate1",
						"aggregate1 derive({Diverse Slate} = iif((iif({Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {Internal Diverse Slate} = iif((iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {External Diverse Slate} = iif((iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {No Diverse Slate} = iif({Diverse Candidates StM}==0,'Y','N'),",
						"          {Internal No Diverse Slate} = iif({Internal Diverse Candidates StM}==0,'Y','N'),",
						"          {External No Diverse Slate} = iif({External Diverse Candidates StM}==0,'Y','N'),",
						"          {Diverse Hired Slate} = iif({Diverse Candidates Hired}>0,'Y','N'),",
						"          {Internal Diverse Hired Slate} = iif({Internal Diverse Candidates Hired}>0,'Y','N'),",
						"          {External Diverse Hired Slate} = iif({External Diverse Candidates Hired}>0,'Y','N'),",
						"          {PoC Slate} = iif({PoC Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal PoC Slate} = iif({Internal PoC Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External PoC Slate} = iif({External PoC Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No PoC Slate} = iif({PoC Candidates StM}==0,'Y','N'),",
						"          {Internal No PoC Slate} = iif({Internal PoC Candidates StM}==0,'Y','N'),",
						"          {External No PoC Slate} = iif({External PoC Candidates StM}==0,'Y','N'),",
						"          {PoC Hired Slate} = iif({PoC  Candidates Hired}>0,'Y','N'),",
						"          {Internal PoC Hired Slate} = iif({Internal PoC  Candidates Hired}>0,'Y','N'),",
						"          {External PoC Hired Slate} = iif({External PoC  Candidates Hired}>0,'Y','N'),",
						"          {White Slate} = iif({White Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal White Slate} = iif({Internal White Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External White Slate} = iif({External White Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No White Slate} = iif({White Candidates StM}==0,'Y','N'),",
						"          {Internal No White Slate} = iif({Internal White Candidates StM}==0,'Y','N'),",
						"          {External No White Slate} = iif({External White Candidates StM}==0,'Y','N'),",
						"          {White Hired Slate} = iif({White Candidates Hired}>0,'Y','N'),",
						"          {Internal White Hired Slate} = iif({Internal White Candidates Hired}>0,'Y','N'),",
						"          {External White Hired Slate} = iif({External White Candidates Hired}>0,'Y','N'),",
						"          {Black Slate} = iif({Black Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Black Slate} = iif({Internal Black Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Black Slate} = iif({External Black Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Black Slate} = iif({Black Candidates StM}==0,'Y','N'),",
						"          {Internal No Black Slate} = iif({Internal Black Candidates StM}==0,'Y','N'),",
						"          {External No Black Slate} = iif({External Black Candidates StM}==0,'Y','N'),",
						"          {Black Hired Slate} = iif({Black Candidates Hired}>0,'Y','N'),",
						"          {Internal Black Hired Slate} = iif({Internal Black Candidates Hired}>0,'Y','N'),",
						"          {External Black Hired Slate} = iif({External Black Candidates Hired}>0,'Y','N'),",
						"          {Latinx Slate} = iif({Latinx Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Latinx Slate} = iif({Internal Latinx Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Latinx Slate} = iif({External Latinx Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Latinx Slate} = iif({Latinx Candidates StM}==0,'Y','N'),",
						"          {Internal No Latinx Slate} = iif({Internal Latinx Candidates StM}==0,'Y','N'),",
						"          {External No Latinx Slate} = iif({External Latinx Candidates StM}==0,'Y','N'),",
						"          {Latinx Hired Slate} = iif({Latinx Candidates Hired}>0,'Y','N'),",
						"          {Internal Latinx Hired Slate} = iif({Internal Latinx Candidates Hired}>0,'Y','N'),",
						"          {External Latinx Hired Slate} = iif({External Latinx Candidates Hired}>0,'Y','N'),",
						"          {Asian Slate} = iif({Asian Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Asian Slate} = iif({Internal Asian Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Asian Slate} = iif({External Asian Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Asian Slate} = iif({Asian Candidates StM}==0,'Y','N'),",
						"          {Internal No Asian Slate} = iif({Internal Asian Candidates StM}==0,'Y','N'),",
						"          {External No Asian Slate} = iif({External Asian Candidates StM}==0,'Y','N'),",
						"          {Asian Hired Slate} = iif({Asian Candidates Hired}>0,'Y','N'),",
						"          {Internal Asian Hired Slate} = iif({Internal Asian Candidates Hired}>0,'Y','N'),",
						"          {External Asian Hired Slate} = iif({External Asian Candidates Hired}>0,'Y','N'),",
						"          {2+ Races Slate} = iif({2+ Races Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External 2+ Races Slate} = iif({External 2+ Races Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No 2+ Races Slate} = iif({2+ Races Candidates StM}==0,'Y','N'),",
						"          {Internal No 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}==0,'Y','N'),",
						"          {External No 2+ Races Slate} = iif({External 2+ Races Candidates StM}==0,'Y','N'),",
						"          {2+ Races Hired Slate} = iif({2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Internal 2+ Races Hired Slate} = iif({Internal 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {External 2+ Races Hired Slate} = iif({External 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Other Race Slate} = iif({Other Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Other Race Slate} = iif({Internal Other Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Other Race Slate} = iif({External Other Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Other Race Slate} = iif({Other Candidates StM}==0,'Y','N'),",
						"          {Internal No Other Race Slate} = iif({Internal Other Candidates StM}==0,'Y','N'),",
						"          {External No Other Race Slate} = iif({External Other Candidates StM}==0,'Y','N'),",
						"          {Other Race Hired Slate} = iif({Other Candidates Hired}>0,'Y','N'),",
						"          {Internal Other Race Hired Slate} = iif({Internal Other Candidates Hired}>0,'Y','N'),",
						"          {External Other Race Hired Slate} = iif({External Other Candidates Hired}>0,'Y','N'),",
						"          {Female Slate} = iif({Female Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Female Slate} = iif({Internal Female Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Female Slate} = iif({External Female Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Female Slate} = iif({Female Candidates StM}==0,'Y','N'),",
						"          {Internal No Female Slate} = iif({Internal Female Candidates StM}==0,'Y','N'),",
						"          {External No Female Slate} = iif({External Female Candidates StM}==0,'Y','N'),",
						"          {Female Hired Slate} = iif({Female Candidates Hired}>0,'Y','N'),",
						"          {Internal Female Hired Slate} = iif({Internal Female Candidates Hired}>0,'Y','N'),",
						"          {External Female Hired Slate} = iif({External Female Candidates Hired}>0,'Y','N'),",
						"          {Male Slate} = iif({Male Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Male Slate} = iif({Internal Male Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Male Slate} = iif({External Male Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Male Slate} = iif({Male Candidates StM}==0,'Y','N'),",
						"          {Internal No Male Slate} = iif({Internal Male Candidates StM}==0,'Y','N'),",
						"          {External No Male Slate} = iif({External Male Candidates StM}==0,'Y','N'),",
						"          {Male Hired Slate} = iif({Male Candidates Hired}>0,'Y','N'),",
						"          {Internal Male Hired Slate} = iif({Internal Male Candidates Hired}>0,'Y','N'),",
						"          {External Male Hired Slate} = iif({External Male Candidates Hired}>0,'Y','N')) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TASlateFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_JobReq_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Req_Test",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "RemoveNullReqIDRows"
						},
						{
							"name": "tagEvent"
						},
						{
							"name": "AddEventMonth"
						},
						{
							"name": "RemoveDupRowsandAddRowCount"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"tagEvent derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddParameters",
						"AddEventMonth derive(Event = iif(isNull(Event),'N/A',Event),",
						"          {Requisition Type} = iif(isNull({Requisition Type}),'N/A',{Requisition Type}),",
						"          {Requisition Status} = iif(isNull({Requisition Status}),'N/A',{Requisition Status}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work Office City} = iif(isNull({Work Office City}),'N/A',{Work Office City}),",
						"          {Work Office State} = iif(isNull({Work Office State}),'N/A',{Work Office State}),",
						"          {Work Office Country} = iif(isNull({Work Office Country}),'N/A',{Work Office Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4})) ~> ConvertNullsForKeyFields",
						"FilterOutClientHeaderRowAndColumn filter(not(isNull({Event Date})) && not(isNull({Requisition ID}))) ~> RemoveNullReqIDRows",
						"RemoveNullReqIDRows derive(Event = 'Requisition',",
						"          EventId = 'REQ') ~> tagEvent",
						"AddParameters derive(EventMonth = month({Event Date})) ~> AddEventMonth",
						"SelectFinal aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}),",
						"     RowCount = count({Requisition ID})) ~> RemoveDupRowsandAddRowCount",
						"RemoveDupRowsandAddRowCount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ReqTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_JobReq_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "JobRegFactTableFile"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_JobReq_Append",
								"type": "DatasetReference"
							},
							"name": "JobReqAppendFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "AddEventMonth"
						},
						{
							"name": "RemoveNullReqID"
						},
						{
							"name": "tagEvent"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobRegFactTableFile",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobReqAppendFile",
						"JobReqAppendFile filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"AddEventMonth select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"tagEvent derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddParameters",
						"AddParameters derive(Event = iif(isNull(Event),'N/A',Event),",
						"          {Requisition Type} = iif(isNull({Requisition Type}),'N/A',{Requisition Type}),",
						"          {Requisition Status} = iif(isNull({Requisition Status}),'N/A',{Requisition Status}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work Office City} = iif(isNull({Work Office City}),'N/A',{Work Office City}),",
						"          {Work Office Country} = iif(isNull({Work Office Country}),'N/A',{Work Office Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4})) ~> ConvertNullsForKeyFields",
						"SelectFinal, JobRegFactTableFile union(byName: true)~> union1",
						"RemoveDuplicates aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}),",
						"     RowCount = count({Requisition ID})) ~> SelectOutput",
						"union1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicates",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date})) ~> AddEventMonth",
						"FilterOutClientHeaderRowAndColumn filter(not(isNull({Event Date})) && not(isNull({Requisition ID}))) ~> RemoveNullReqID",
						"RemoveNullReqID derive(Event = 'Requisition',",
						"          EventId = 'REQ') ~> tagEvent",
						"SelectOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ReqTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherCore_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_OtherCore",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerivedColumns"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"Other filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRows derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Other',",
						"          {Event ID} = 'OTH',",
						"          EventMonth = month({Event Date})) ~> AddDerivedColumns",
						"AddDerivedColumns derive({Event (Type)} = iif(isNull({Event (Type)}),'N/A',{Event (Type)}),",
						"          {Event (Desc)} = iif(isNull({Event (Desc)}),'N/A',{Event (Desc)}),",
						"          {Other (Char Value 1)} = iif(isNull({Other (Char Value 1)}),'N/A',{Other (Char Value 1)}),",
						"          {Other (Char Value 2)} = iif(isNull({Other (Char Value 2)}),'N/A',{Other (Char Value 2)}),",
						"          {Other (Num Value 1)} = iif(isNull({Other (Num Value 1)}),'N/A',{Other (Num Value 1)}),",
						"          {Other (Num Value 2)} = iif(isNull({Other (Num Value 2)}),'N/A',{Other (Num Value 2)}),",
						"          {Other (Date Value 1)} = iif(isNull({Other (Date Value 1)}),'N/A',{Other (Date Value 1)}),",
						"          {Other (Date Value 2)} = iif(isNull({Other (Date Value 2)}),'N/A',{Other (Date Value 2)})) ~> ConvertNullsForKeyFields",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"SelectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OthrCoreFlexTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherCore_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_OtherCore_Append",
								"type": "DatasetReference"
							},
							"name": "OtherAppend"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherAppend",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"OtherAppend filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRows derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Other',",
						"          {Event ID} = 'OTH',",
						"          EventMonth = month({Event Date})) ~> AddDerived",
						"AddDerived derive({Event (Type)} = iif(isNull({Event (Type)}),'N/A',{Event (Type)}),",
						"          {Event (Desc)} = iif(isNull({Event (Desc)}),'N/A',{Event (Desc)}),",
						"          {Other (Char Value 1)} = iif(isNull({Other (Char Value 1)}),'N/A',{Other (Char Value 1)}),",
						"          {Other (Char Value 2)} = iif(isNull({Other (Char Value 2)}),'N/A',{Other (Char Value 2)}),",
						"          {Other (Num Value 1)} = iif(isNull({Other (Num Value 1)}),'N/A',{Other (Num Value 1)}),",
						"          {Other (Num Value 2)} = iif(isNull({Other (Num Value 2)}),'N/A',{Other (Num Value 2)}),",
						"          {Other (Date Value 1)} = iif(isNull({Other (Date Value 1)}),'N/A',{Other (Date Value 1)}),",
						"          {Other (Date Value 2)} = iif(isNull({Other (Date Value 2)}),'N/A',{Other (Date Value 2)})) ~> ConvertNullsForKeyFields",
						"SelectFinal, Other union(byName: true)~> union1",
						"union1 aggregate(groupBy({Client Engagement Date},",
						"          {Event Quarter},",
						"          {Worker ID},",
						"          {Event Year},",
						"          EventMonth,",
						"          {Event Date},",
						"          Event,",
						"          {Event ID},",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOutput",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"SelectOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OthrCoreFlexTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Final_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "PerformanceHistory"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCTEventYears"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistFactTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDBHist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CreateTalentTagScore"
						},
						{
							"name": "CreateCurTalentTag"
						},
						{
							"name": "select1"
						},
						{
							"name": "SelectCoreValues"
						},
						{
							"name": "HCTFilter"
						},
						{
							"name": "MaxYearMinus2"
						},
						{
							"name": "JoinEventYrMinus2"
						},
						{
							"name": "SumEmpCountFor3Yr"
						},
						{
							"name": "join1"
						},
						{
							"name": "RemoveNullWorkerIDRows"
						},
						{
							"name": "SelectLastTalentTag"
						},
						{
							"name": "join2"
						},
						{
							"name": "union1"
						},
						{
							"name": "SelectHistoricalCoreDB"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "FilterHCTOnly"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as short,",
						"          {Curr Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as integer,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as short,",
						"          {P1 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as integer,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as short,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as integer,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as short,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as integer,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerformanceHistory",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as double,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCTEventYears",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingHistFactTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventID = 'HCT'\"),",
						"     format: 'query') ~> CoreDBHist",
						"join2 derive({Group 1-3 Scoring} = iif({Curr Elloree Performance Rating}=='Outstanding',1,0)\r",
						"+iif({P1 Elloree Performance Rating}=='Outstanding',1,0)\r",
						"+iif({P2 Elloree Performance Rating}=='Outstanding',1,0),",
						"          {Group 4-6 Scoring} = iif({Curr Elloree Performance Rating}=='Exceeds',1,0)\r",
						"+iif({P1 Elloree Performance Rating}=='Exceeds',1,0)\r",
						"+iif({P2 Elloree Performance Rating}=='Exceeds',1,0),",
						"          {Group 3 Flag} = iif({Curr Elloree Performance Rating}=='Outstanding', 'Y','N'),",
						"          {Group 6 Flag} = iif({Curr Elloree Performance Rating}=='Exceeds', 'Y','N')) ~> CreateTalentTagScore",
						"CreateTalentTagScore derive({Talent Tag} = iif({3 Yr TotalEmpCount}==3, iif({Group 1-3 Scoring}==3,'Group 1', \r",
						"iif({Group 1-3 Scoring}==2,'Group 2',\r",
						"iif({Group 3 Flag}=='Y','Group 3',\r",
						"iif({Group 4-6 Scoring}==3,'Group 4',\r",
						"iif({Group 4-6 Scoring}==2,'Group 5',\r",
						"iif({Group 6 Flag}=='Y','Group 6', 'N/A')))))),'N/A')) ~> CreateCurTalentTag",
						"CreateCurTalentTag select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Last Top Talent Ind},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Talent Tag} = {Talent Tag},",
						"          {Last Talent Tag},",
						"          {Last Talent Tag Year} = {Last Talent Tag PerfYear},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P1 Top Talent Ind},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P2 Top Talent Ind},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P3 Top Talent Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreValues",
						"CoreForHCTEventYears filter({Event Code}=='HCT') ~> HCTFilter",
						"HCTFilter aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
						"SelectCoreValues, MaxYearMinus2 join({Event Year} >= {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinEventYrMinus2",
						"JoinEventYrMinus2 aggregate(groupBy({Worker ID 3Yr Count} = {Worker ID}),",
						"     {3 Yr TotalEmpCount} = sum(EmpCount)) ~> SumEmpCountFor3Yr",
						"PerformanceHistory, SumEmpCountFor3Yr join({Worker ID} == {Worker ID 3Yr Count},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"select1 filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
						"PerfRatingHistFactTbl select(mapColumn(",
						"          {Last Talent Tag WorkerId} = WorkerId,",
						"          {Last Talent Tag PerfYear} = CurrPerfYear,",
						"          {Last Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLastTalentTag",
						"join1, SelectLastTalentTag join({Worker ID} == {Last Talent Tag WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectColumns, SelectHistoricalCoreDB union(byName: true)~> union1",
						"CoreDBHist select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHistoricalCoreDB",
						"FilterHCTOnly select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount),",
						"     RowCount = count({Worker ID})) ~> RemoveDups",
						"Core filter({Event Code}=='HCT') ~> FilterHCTOnly",
						"RemoveNullWorkerIDRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Init_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Performance"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerformanceMapping"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalCoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalTalentDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinToPerfMapping"
						},
						{
							"name": "PerformanceWithMapping"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "CurrJoin"
						},
						{
							"name": "CurrSelect"
						},
						{
							"name": "P1Join"
						},
						{
							"name": "P1Select"
						},
						{
							"name": "P2Join"
						},
						{
							"name": "P2Select"
						},
						{
							"name": "P3Join"
						},
						{
							"name": "P3Select"
						},
						{
							"name": "SelectPrep"
						},
						{
							"name": "TransformNulls"
						},
						{
							"name": "CalcLast"
						},
						{
							"name": "AddTopTalent"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "RemoveNullWorkerId"
						},
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "selectHistoricalCoreDB"
						},
						{
							"name": "select2"
						},
						{
							"name": "selectHistoricalTalentDB"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as date,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Performance",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerformanceMapping",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalCoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalTalentDB",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}),",
						"     EmpCount = count({Worker ID})) ~> aggregate1",
						"union2, PerformanceMapping join({Client ID} == ClientId",
						"     && {Client Engagement Date} == ClientEngagementDt",
						"     && {Performance Rating} == ClientPerfRating,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinToPerfMapping",
						"JoinToPerfMapping select(mapColumn(",
						"          {Perf Client ID} = {Client ID},",
						"          {Perf Client Engagement Date} = {Client Engagement Date},",
						"          {Perf Event Year} = {Event Year},",
						"          {Perf Worker ID} = {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          ElloreePerfRating,",
						"          ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PerformanceWithMapping",
						"select1 derive({Curr Performance Year} = toShort({Event Year}),",
						"          {P1 Performance Year} = toShort({Event Year} - 1),",
						"          {P2 Performance Year} = toShort({Event Year} - 2),",
						"          {P3 Performance Year} = toShort({Event Year} - 3)) ~> derivedColumn1",
						"derivedColumn1, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {Curr Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrJoin",
						"CurrJoin select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P1 Performance Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Client Performance Rating} = {Performance Rating},",
						"          {Curr Performance Rating Date} = {Performance Rating Date},",
						"          {Curr ElloreePerfRating} = ElloreePerfRating,",
						"          {Curr ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CurrSelect",
						"CurrSelect, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P1 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1Join",
						"P1Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date} = {Performance Rating Date},",
						"          {P1 Client Performance Rating} = {Performance Rating},",
						"          {P1 ElloreePerfRating} = ElloreePerfRating,",
						"          {P1 ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P1Select",
						"P1Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P2 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2Join",
						"P2Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 ElloreePerfRating},",
						"          {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating} = {Performance Rating},",
						"          {P2 Performance Rating Date} = {Performance Rating Date},",
						"          {P2 ElloreePerfRating} = ElloreePerfRating,",
						"          {P2 ElloreePerfRatingSortId} = ElloreePerfRatingSortId,",
						"          {P3 Performance Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P2Select",
						"P2Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P3 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P3Join",
						"P3Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating} = {Curr ElloreePerfRating},",
						"          {Curr Elloree Performance Rating Sort Id} = {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating} = {P1 ElloreePerfRating},",
						"          {P1 Elloree Performance Rating Sort Id} = {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating} = {P2 ElloreePerfRating},",
						"          {P2 Elloree Performance Rating Sort Id} = {P2 ElloreePerfRatingSortId},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating} = {Performance Rating},",
						"          {P3 Performance Rating Date} = {Performance Rating Date},",
						"          {P3 Elloree Performance Rating} = ElloreePerfRating,",
						"          {P3 Elloree Performance Rating Sort Id} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P3Select",
						"CalcLast select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPrep",
						"SelectPrep derive({Last Client Performance Rating} = iif(isNull({Last Client Performance Rating}),'N/A',{Last Client Performance Rating}),",
						"          {Last Elloree Performance Rating} = iif(isNull({Last Elloree Performance Rating}),'N/A',{Last Elloree Performance Rating}),",
						"          {Last Elloree Performance Rating Sort Id} = iif(isNull({Last Elloree Performance Rating Sort Id}),99,{Last Elloree Performance Rating Sort Id}),",
						"          {Last Performance Rating Date} = iif(isNull({Last Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Last Performance Rating Date})),",
						"          {Curr Client Performance Rating} = iif(isNull({Curr Client Performance Rating}),'N/A',{Curr Client Performance Rating}),",
						"          {Curr Elloree Performance Rating} = iif(isNull({Curr Elloree Performance Rating}),'N/A',{Curr Elloree Performance Rating}),",
						"          {Curr Elloree Performance Rating Sort Id} = iif(isNull({Curr Elloree Performance Rating Sort Id}),99,{Curr Elloree Performance Rating Sort Id}),",
						"          {Curr Performance Rating Date} = iif(isNull({Curr Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Curr Performance Rating Date})),",
						"          {P1 Performance Rating Date} = iif(isNull({P1 Performance Rating Date}),concat('12/31/',toString({P1 Performance Year})),toString({P1 Performance Rating Date})),",
						"          {P1 Client Performance Rating} = iif(isNull({P1 Client Performance Rating}),'N/A',{P1 Client Performance Rating}),",
						"          {P1 Elloree Performance Rating} = iif(isNull({P1 Elloree Performance Rating}),'N/A',{P1 Elloree Performance Rating}),",
						"          {P1 Elloree Performance Rating Sort Id} = iif(isNull({P1 Elloree Performance Rating Sort Id}),99,{P1 Elloree Performance Rating Sort Id}),",
						"          {P2 Client Performance Rating} = iif(isNull({P2 Client Performance Rating}),'N/A',{P2 Client Performance Rating}),",
						"          {P2 Elloree Performance Rating} = iif(isNull({P2 Elloree Performance Rating}),'N/A',{P2 Elloree Performance Rating}),",
						"          {P2 Elloree Performance Rating Sort Id} = iif(isNull({P2 Elloree Performance Rating Sort Id}),99,{P2 Elloree Performance Rating Sort Id}),",
						"          {P2 Performance Rating Date} = iif(isNull({P2 Performance Rating Date}),concat('12/31/',toString({P2 Performance Year})),toString({P2 Performance Rating Date})),",
						"          {P3 Client Performance Rating} = iif(isNull({P3 Client Performance Rating}),'N/A',{P3 Client Performance Rating}),",
						"          {P3 Elloree Performance Rating} = iif(isNull({P3 Elloree Performance Rating}),'N/A',{P3 Elloree Performance Rating}),",
						"          {P3 Elloree Performance Rating Sort Id} = iif(isNull({P3 Elloree Performance Rating Sort Id}),99,{P3 Elloree Performance Rating Sort Id}),",
						"          {P3 Performance Rating Date} = iif(isNull({P3 Performance Rating Date}),concat('12/31/',toString({P3 Performance Year})),toString({P3 Performance Rating Date}))) ~> TransformNulls",
						"P3Select derive({Last Performance Year} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Year},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Year},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Year},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Year},{Curr Performance Year})))),",
						"          {Last Performance Rating Date} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Rating Date},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Rating Date},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Rating Date},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Rating Date},{Curr Performance Rating Date})))),",
						"          {Last Client Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Client Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Client Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Client Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Client Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating Sort Id} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating Sort Id},99))))) ~> CalcLast",
						"TransformNulls derive({Last Top Talent Ind} = iif({Last Elloree Performance Rating}=='Outstanding','Y',iif({Last Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {Curr Top Talent Ind} = iif({Curr Elloree Performance Rating}=='Outstanding','Y',iif({Curr Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P1 Top Talent Ind} = iif({P1 Elloree Performance Rating}=='Outstanding','Y',iif({P1 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P2 Top Talent Ind} = iif({P2 Elloree Performance Rating}=='Outstanding','Y',iif({P2 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P3 Top Talent Ind} = iif({P3 Elloree Performance Rating}=='Outstanding','Y',iif({P3 Elloree Performance Rating}=='Exceeds','Y','N'))) ~> AddTopTalent",
						"aggregate2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Last Top Talent Ind},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P1 Top Talent Ind},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P2 Top Talent Ind},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P3 Top Talent Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"AddTopTalent aggregate(groupBy({Client ID},",
						"          {P2 Top Talent Ind},",
						"          {Last Elloree Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P3 Top Talent Ind},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Top Talent Ind},",
						"          {Last Top Talent Ind},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id}),",
						"     EmpCount = count({Worker ID})) ~> aggregate2",
						"FinalSelect filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerId",
						"select2, selectHistoricalCoreDB union(byName: true)~> union1",
						"select3, selectHistoricalTalentDB union(byName: true)~> union2",
						"HistoricalCoreDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalCoreDB",
						"Core select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"HistoricalTalentDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Performance Rating} = PerfRating,",
						"          {Performance Rating Date} = PerfRatingDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalTalentDB",
						"Performance select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"RemoveNullWorkerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_SilverMedalApplicant_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "HiredApplicants"
						},
						{
							"name": "JointoApplicantMap"
						},
						{
							"name": "GroupHiredApplicantsByYear"
						},
						{
							"name": "Interviewed"
						},
						{
							"name": "GroupInterviewedApplicantsandYear"
						},
						{
							"name": "selectApplicants"
						},
						{
							"name": "JoinHires"
						},
						{
							"name": "CalcSilverMedalist"
						},
						{
							"name": "selectColumnsForFactTbl"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"JointoApplicantMap filter({Elloree Applicant Final Disposition}=='Hired') ~> HiredApplicants",
						"Applicant, ApplicantMap join({Applicant Final Disposition} == {Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Client Applicant Rejected Reason}",
						"     && Applicant@{Client ID} == ApplicantMap@{Client ID}",
						"     && Applicant@{Client Engagement Date} == ApplicantMap@{Client Engagement Date},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JointoApplicantMap",
						"HiredApplicants aggregate(groupBy({Hired Client ID} = Applicant@{Client ID},",
						"          {Hired Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Hired  Applicant ID} = {Applicant ID},",
						"          {Hired  Event Year} = {Event Year}),",
						"     HiredReqCount = count({Requisition ID})) ~> GroupHiredApplicantsByYear",
						"selectApplicants filter({Elloree Applicant Final Disposition}=='Interviewed') ~> Interviewed",
						"Interviewed aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Event Year},",
						"          {Requisition ID}),",
						"     InterviewedReqCount = count({Requisition ID})) ~> GroupInterviewedApplicantsandYear",
						"JointoApplicantMap select(mapColumn(",
						"          {Client ID} = Applicant@{Client ID},",
						"          {Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicants",
						"GroupInterviewedApplicantsandYear, GroupHiredApplicantsByYear join({Client ID} == {Hired Client ID}",
						"     && {Client Engagement Date} == {Hired Client Engagement Date}",
						"     && {Applicant ID} == {Hired  Applicant ID}",
						"     && {Event Year} == {Hired  Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinHires",
						"JoinHires derive({Silver Medalist Ind} = iif((HiredReqCount)>=1,'N','Y')) ~> CalcSilverMedalist",
						"CalcSilverMedalist select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Requisition ID},",
						"          {Silver Medalist Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumnsForFactTbl",
						"selectColumnsForFactTbl sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SilverMedalistFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"AllCore, Select3PYear join(EventYear == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
						"     && EventYear == {Talent EventYear},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y',\r",
						"iif(TalentIdentifier1=='Group 1 (O-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 2 (O-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 3 (O-1)','Y',\r",
						"iif(TalentIdentifier1=='Group 4 (E-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 5 (E-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 6 (E-1)','Y','N'))))))),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"AllCore, Select3PYear join(EventYear == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Evergreen')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y',\r",
						"iif(TalentIdentifier1=='Group 1 (O-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 2 (O-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 3 (O-1)','Y',\r",
						"iif(TalentIdentifier1=='Group 4 (E-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 5 (E-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 6 (E-1)','Y','N'))))))),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"AllCore, Select3PYear join(EventYear == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Baseline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif({Applicant Five or More}=='Y','Y','N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif({Silver Medalist Ind}=='Y','Y','N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif(ManagerCount>=3,'Y','N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"AllCore, Select3PYear join(EventYear == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select3PYear join(EventYear >= Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = CoreHCT@WorkerId,",
						"          ManagerInd,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = CoreHCT@EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(CoreHCT@WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(CoreHCT@WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(CoreHCT@WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(CoreHCT@WorkerId == {Applicant ID Calculated}",
						"     && CoreHCT@EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(CoreHCT@WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && CoreHCT@EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(CoreHCT@WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select3PYear join(EventYear >= Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"Talent select(mapColumn(",
						"          WorkerId,",
						"          EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(CoreHCT@WorkerId == SelectTalentColumns@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Talent_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "RemoveNullWorkerIDRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"RemoveNullWorkerIDRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'PER',",
						"          {Performance Rating} = iif(isNull({Performance Rating}), 'N/A',{Performance Rating})) ~> AddParameters",
						"AddParameters aggregate(groupBy({Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)},",
						"          {Client ID}),",
						"     {Client Engagement Date} = max({Client Engagement Date})) ~> RemoveDuplicates",
						"RemoveDuplicates filter(not(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
						"SelectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TalentFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_YearRefTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputYearRefTable"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"Core aggregate(groupBy({Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year} = max({Event Year})) ~> aggregate1",
						"aggregate1 derive(CurrEventYear = toShort({Event Year}),",
						"          P1EventYear = toShort({Event Year} - 1),",
						"          P2EventYear = toShort({Event Year} - 2),",
						"          P3EventYear = toShort({Event Year} - 3),",
						"          P4EventYear = toShort({Event Year} - 4),",
						"          P5EventYear = toShort({Event Year} - 5),",
						"          {Client Engagement Date} = toDate({Client Engagement Date},'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          CurrEventYear,",
						"          P1EventYear,",
						"          P2EventYear,",
						"          P3EventYear,",
						"          P4EventYear,",
						"          P5EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(!(isNull({Client ID}))) ~> RemoveNullRows",
						"RemoveNullRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['YearRefTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputYearRefTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HierarchyCheck')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData1",
							"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData2",
							"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputOrphanHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OuputOrphanAndCurrHrchyCounts"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputWorkerHierarchyDetail"
						}
					],
					"transformations": [
						{
							"name": "MaxEventDt"
						},
						{
							"name": "CurrentHCTEvent",
							"description": "Join on max HCT event date in order to pull only the Current headcount records"
						},
						{
							"name": "UniqueHierarchyRecords",
							"description": "Select unique hierarchy for current headcount records."
						},
						{
							"name": "SelectUniqueHierarchyCurrHCT",
							"description": "Select key and hierarchy fields."
						},
						{
							"name": "UniqueHierarchyAllEvents"
						},
						{
							"name": "SelectUniqueHierarchyFields"
						},
						{
							"name": "SelectCoreWithNoCurrentHierarchy"
						},
						{
							"name": "PullRecordsWithOrphans",
							"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
						},
						{
							"name": "UniqueWorkerWithOrphanHrchy",
							"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
						},
						{
							"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
						},
						{
							"name": "PullCurrentHierarchyIfExists",
							"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
						},
						{
							"name": "SelectWorkerIDandHierarcy",
							"description": "Select worker ID and hierarchy fields"
						},
						{
							"name": "CreateWorkerCountsbyHierarchy",
							"description": "Create counts for unique orphan and current hierarchy records"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HCTFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData1",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData2",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"HCTFilter aggregate(groupBy(EventUnique = Event),",
						"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
						"select1, MaxEventDt join({Event Date} == MaxEventDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrentHCTEvent",
						"derivedColumn3 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
						"UniqueHierarchyRecords select(mapColumn(",
						"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
						"          {Business Group Level 1 HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
						"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
						"UniqueHierarchyAllEvents select(mapColumn(",
						"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
						"          {Business Group Level 1 ALL} = {Business Group Level 1},",
						"          {Business Group Level 2 ALL} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
						"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
						"     negate:true,",
						"     broadcast: 'both')~> SelectCoreWithNoCurrentHierarchy",
						"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullRecordsWithOrphans",
						"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
						"          {Business Group Level 1 Unique} = {Business Group Level 1},",
						"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
						"UniqueWorkerWithOrphanHrchy select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Unique}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
						"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
						"PullCurrentHierarchyIfExists select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
						"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
						"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
						"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
						"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
						"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
						"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
						"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
						"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn2",
						"HCTFilter select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CurrentHCTEvent derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
						"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
						"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
						"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
						"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "AllApplicantData"
						},
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplFlowMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantDatabaseRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingApplFlowMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepApplFlowMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotApplFlowAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnApplFlow"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectExistingApplFlowMapping"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "SelectDBApplicantData"
						},
						{
							"name": "union1"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "CollapsePossibleDuplicates"
						},
						{
							"name": "selectApplDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllApplicantData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ApplFlowMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantDatabaseRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Applicant ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotApplFlowAndEventTime",
						"derivedColumn2 sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotApplFlowAndEventTime sort(asc({Client Applicant Final Disposition}, true),",
						"     asc({Client Applicant Step Before Final Disposition}, true),",
						"     asc({Client Applicant Rejected Reason}, true)) ~> SortOnApplFlow",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingApplFlowMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Applicant Rejected Reason} == {Unique ClientApplRejectedReason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Applicant Final Disposition} = {Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason} = {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Applicant Final Disposition} = {Unique ElloreeApplFinalDisp},",
						"          {Suggested Elloree Applicant Category} = {Unique ElloreeApplCategory},",
						"          {Suggested Elloree Submitted to Manager Fl} = {Unique ElloreeSubmittedtoMgrFl},",
						"          {Applicant ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectExistingApplFlowMapping join({Client Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Client Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Client Applicant Rejected Reason} == {Unique ClientApplRejectedReason}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Applicant Final Disposition} = iif(isNull({Suggested Source}),{Unique ClientApplFinalDisp},{Suggested Elloree Applicant Final Disposition}),",
						"          {Suggested Elloree Applicant Category} = iif(isNull({Suggested Source}),{Unique ElloreeApplCategory},{Suggested Elloree Applicant Category}),",
						"          {Suggested Elloree Submitted to Mgr Fl} = iif(isNull({Suggested Source}),{Unique ElloreeSubmittedtoMgrFl},{Suggested Elloree Submitted to Mgr Fl})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl} = {Suggested Elloree Submitted to Manager Fl},",
						"          {Applicant ID},",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectApplDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Applicant ID} = ApplicantId,",
						"          {Applicant Final Disposition} = ApplFinalDisp,",
						"          {Applicant Step Before Final Disposition} = ApplStepBeforeFinalDisp,",
						"          {Applicant Rejected Reason} = ApplRejectedReason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDBApplicantData",
						"select4, SelectDBApplicantData union(byName: true)~> union1",
						"AllApplicantData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"CollapsePossibleDuplicates derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Applicant Final Disposition} = '',",
						"          {Elloree Applicant Category} = '',",
						"          {Elloree Submitted to Mgr Fl} = '') ~> derivedColumn2",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Step Before Final Disposition}),",
						"     TotApplCount = count({Applicant ID})) ~> CollapsePossibleDuplicates",
						"ApplicantDatabaseRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ApplicantId,",
						"          ApplType,",
						"          ApplFinalDisp,",
						"          ApplStepBeforeFinalDisp,",
						"          ApplRejectedReason),",
						"     TotRecCount = count(ApplicantId)) ~> selectApplDBRecsInit",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Count Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Count Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason},",
						"          {Count Unique ElloreeApplFinalDisp} = {Unique ElloreeApplFinalDisp},",
						"          {Count Unique ElloreeApplCategory} = {Unique ElloreeApplCategory},",
						"          {Count Unique ElloreeSubmittedtoMgrFl} = {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientApplFinalDisp} == {Count Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Count Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Count Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Count Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Count Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Count Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Agg Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Agg Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason}),",
						"     {Agg Unique ElloreeApplFinalDisp} = first({Unique ElloreeApplFinalDisp}),",
						"          {Agg Unique ElloreeApplCategory} = first({Unique ElloreeApplCategory}),",
						"          {Agg Unique ElloreeSubmittedtoMgrFl} = first({Unique ElloreeSubmittedtoMgrFl})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientApplFinalDisp} == {Agg Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Agg Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Agg Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Agg Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Agg Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Agg Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ApplFlowMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ApplFlowMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingApplFlowMapping",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepApplFlowMapping"
					]
				}
			},
			"dependsOn": []
		}
	]
}