{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Init_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Performance"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerformanceMapping"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalCoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalTalentDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinToPerfMapping"
						},
						{
							"name": "PerformanceWithMapping"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "CurrJoin"
						},
						{
							"name": "CurrSelect"
						},
						{
							"name": "P1Join"
						},
						{
							"name": "P1Select"
						},
						{
							"name": "P2Join"
						},
						{
							"name": "P2Select"
						},
						{
							"name": "P3Join"
						},
						{
							"name": "P3Select"
						},
						{
							"name": "SelectPrep"
						},
						{
							"name": "TransformNulls"
						},
						{
							"name": "CalcLast"
						},
						{
							"name": "AddTopTalent"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "RemoveNullWorkerId"
						},
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "selectHistoricalCoreDB"
						},
						{
							"name": "select2"
						},
						{
							"name": "selectHistoricalTalentDB"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as date,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Performance",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerformanceMapping",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalCoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalTalentDB",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}),",
						"     EmpCount = count({Worker ID})) ~> aggregate1",
						"union2, PerformanceMapping join({Client ID} == ClientId",
						"     && {Client Engagement Date} == ClientEngagementDt",
						"     && {Performance Rating} == ClientPerfRating,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinToPerfMapping",
						"JoinToPerfMapping select(mapColumn(",
						"          {Perf Client ID} = {Client ID},",
						"          {Perf Client Engagement Date} = {Client Engagement Date},",
						"          {Perf Event Year} = {Event Year},",
						"          {Perf Worker ID} = {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          ElloreePerfRating,",
						"          ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PerformanceWithMapping",
						"select1 derive({Curr Performance Year} = toShort({Event Year}),",
						"          {P1 Performance Year} = toShort({Event Year} - 1),",
						"          {P2 Performance Year} = toShort({Event Year} - 2),",
						"          {P3 Performance Year} = toShort({Event Year} - 3)) ~> derivedColumn1",
						"derivedColumn1, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {Curr Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrJoin",
						"CurrJoin select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P1 Performance Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Client Performance Rating} = {Performance Rating},",
						"          {Curr Performance Rating Date} = {Performance Rating Date},",
						"          {Curr ElloreePerfRating} = ElloreePerfRating,",
						"          {Curr ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CurrSelect",
						"CurrSelect, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P1 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1Join",
						"P1Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date} = {Performance Rating Date},",
						"          {P1 Client Performance Rating} = {Performance Rating},",
						"          {P1 ElloreePerfRating} = ElloreePerfRating,",
						"          {P1 ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P1Select",
						"P1Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P2 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2Join",
						"P2Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 ElloreePerfRating},",
						"          {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating} = {Performance Rating},",
						"          {P2 Performance Rating Date} = {Performance Rating Date},",
						"          {P2 ElloreePerfRating} = ElloreePerfRating,",
						"          {P2 ElloreePerfRatingSortId} = ElloreePerfRatingSortId,",
						"          {P3 Performance Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P2Select",
						"P2Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P3 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P3Join",
						"P3Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating} = {Curr ElloreePerfRating},",
						"          {Curr Elloree Performance Rating Sort Id} = {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating} = {P1 ElloreePerfRating},",
						"          {P1 Elloree Performance Rating Sort Id} = {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating} = {P2 ElloreePerfRating},",
						"          {P2 Elloree Performance Rating Sort Id} = {P2 ElloreePerfRatingSortId},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating} = {Performance Rating},",
						"          {P3 Performance Rating Date} = {Performance Rating Date},",
						"          {P3 Elloree Performance Rating} = ElloreePerfRating,",
						"          {P3 Elloree Performance Rating Sort Id} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P3Select",
						"CalcLast select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPrep",
						"SelectPrep derive({Last Client Performance Rating} = iif(isNull({Last Client Performance Rating}),'N/A',{Last Client Performance Rating}),",
						"          {Last Elloree Performance Rating} = iif(isNull({Last Elloree Performance Rating}),'N/A',{Last Elloree Performance Rating}),",
						"          {Last Elloree Performance Rating Sort Id} = iif(isNull({Last Elloree Performance Rating Sort Id}),99,{Last Elloree Performance Rating Sort Id}),",
						"          {Last Performance Rating Date} = iif(isNull({Last Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Last Performance Rating Date})),",
						"          {Curr Client Performance Rating} = iif(isNull({Curr Client Performance Rating}),'N/A',{Curr Client Performance Rating}),",
						"          {Curr Elloree Performance Rating} = iif(isNull({Curr Elloree Performance Rating}),'N/A',{Curr Elloree Performance Rating}),",
						"          {Curr Elloree Performance Rating Sort Id} = iif(isNull({Curr Elloree Performance Rating Sort Id}),99,{Curr Elloree Performance Rating Sort Id}),",
						"          {Curr Performance Rating Date} = iif(isNull({Curr Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Curr Performance Rating Date})),",
						"          {P1 Performance Rating Date} = iif(isNull({P1 Performance Rating Date}),concat('12/31/',toString({P1 Performance Year})),toString({P1 Performance Rating Date})),",
						"          {P1 Client Performance Rating} = iif(isNull({P1 Client Performance Rating}),'N/A',{P1 Client Performance Rating}),",
						"          {P1 Elloree Performance Rating} = iif(isNull({P1 Elloree Performance Rating}),'N/A',{P1 Elloree Performance Rating}),",
						"          {P1 Elloree Performance Rating Sort Id} = iif(isNull({P1 Elloree Performance Rating Sort Id}),99,{P1 Elloree Performance Rating Sort Id}),",
						"          {P2 Client Performance Rating} = iif(isNull({P2 Client Performance Rating}),'N/A',{P2 Client Performance Rating}),",
						"          {P2 Elloree Performance Rating} = iif(isNull({P2 Elloree Performance Rating}),'N/A',{P2 Elloree Performance Rating}),",
						"          {P2 Elloree Performance Rating Sort Id} = iif(isNull({P2 Elloree Performance Rating Sort Id}),99,{P2 Elloree Performance Rating Sort Id}),",
						"          {P2 Performance Rating Date} = iif(isNull({P2 Performance Rating Date}),concat('12/31/',toString({P2 Performance Year})),toString({P2 Performance Rating Date})),",
						"          {P3 Client Performance Rating} = iif(isNull({P3 Client Performance Rating}),'N/A',{P3 Client Performance Rating}),",
						"          {P3 Elloree Performance Rating} = iif(isNull({P3 Elloree Performance Rating}),'N/A',{P3 Elloree Performance Rating}),",
						"          {P3 Elloree Performance Rating Sort Id} = iif(isNull({P3 Elloree Performance Rating Sort Id}),99,{P3 Elloree Performance Rating Sort Id}),",
						"          {P3 Performance Rating Date} = iif(isNull({P3 Performance Rating Date}),concat('12/31/',toString({P3 Performance Year})),toString({P3 Performance Rating Date}))) ~> TransformNulls",
						"P3Select derive({Last Performance Year} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Year},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Year},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Year},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Year},{Curr Performance Year})))),",
						"          {Last Performance Rating Date} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Rating Date},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Rating Date},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Rating Date},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Rating Date},{Curr Performance Rating Date})))),",
						"          {Last Client Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Client Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Client Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Client Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Client Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating Sort Id} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating Sort Id},99))))) ~> CalcLast",
						"TransformNulls derive({Last Top Talent Ind} = iif({Last Elloree Performance Rating}=='Outstanding','Y',iif({Last Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {Curr Top Talent Ind} = iif({Curr Elloree Performance Rating}=='Outstanding','Y',iif({Curr Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P1 Top Talent Ind} = iif({P1 Elloree Performance Rating}=='Outstanding','Y',iif({P1 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P2 Top Talent Ind} = iif({P2 Elloree Performance Rating}=='Outstanding','Y',iif({P2 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P3 Top Talent Ind} = iif({P3 Elloree Performance Rating}=='Outstanding','Y',iif({P3 Elloree Performance Rating}=='Exceeds','Y','N'))) ~> AddTopTalent",
						"aggregate2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Last Top Talent Ind},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P1 Top Talent Ind},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P2 Top Talent Ind},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P3 Top Talent Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"AddTopTalent aggregate(groupBy({Client ID},",
						"          {P2 Top Talent Ind},",
						"          {Last Elloree Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P3 Top Talent Ind},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Top Talent Ind},",
						"          {Last Top Talent Ind},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id}),",
						"     EmpCount = count({Worker ID})) ~> aggregate2",
						"FinalSelect filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerId",
						"select2, selectHistoricalCoreDB union(byName: true)~> union1",
						"select3, selectHistoricalTalentDB union(byName: true)~> union2",
						"HistoricalCoreDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalCoreDB",
						"Core select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"HistoricalTalentDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Performance Rating} = PerfRating,",
						"          {Performance Rating Date} = PerfRatingDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalTalentDB",
						"Performance select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"RemoveNullWorkerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Update_Curr_Prior')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "PerformanceHistory"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputHistoricalPerfRatingFctTbl"
						}
					],
					"transformations": [
						{
							"name": "filterCurrentEventYear"
						},
						{
							"name": "SetEventYeartoCurrentYear"
						},
						{
							"name": "filterAllExcludingCurrentEventYear"
						},
						{
							"name": "unionAllEventYears"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Client_Year as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as short,",
						"          {Curr Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as integer,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as short,",
						"          {P1 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as integer,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as short,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as integer,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as short,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as integer,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerformanceHistory",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date,",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as string,",
						"          {Curr Performance Rating Date} as string,",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as string,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as string,",
						"          {P1 Performance Rating Date} as string,",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as string,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as string,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as string,",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as string,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as string,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as string,",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as string,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"PerformanceHistory filter({Event Year}==(toShort($Flow_Client_Year)-1)) ~> filterCurrentEventYear",
						"filterCurrentEventYear derive({Event Year} = toShort($Flow_Client_Year)) ~> SetEventYeartoCurrentYear",
						"PerformanceHistory filter({Event Year}!=toShort($Flow_Client_Year)) ~> filterAllExcludingCurrentEventYear",
						"filterAllExcludingCurrentEventYear, SetEventYeartoCurrentYear union(byName: true)~> unionAllEventYears",
						"unionAllEventYears sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputHistoricalPerfRatingFctTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_SilverMedalApplicant_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "HiredApplicants"
						},
						{
							"name": "JointoApplicantMap"
						},
						{
							"name": "GroupHiredApplicantsByYear"
						},
						{
							"name": "Interviewed"
						},
						{
							"name": "GroupInterviewedApplicantsandYear"
						},
						{
							"name": "selectApplicants"
						},
						{
							"name": "JoinHires"
						},
						{
							"name": "CalcSilverMedalist"
						},
						{
							"name": "selectColumnsForFactTbl"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"JointoApplicantMap filter({Elloree Applicant Final Disposition}=='Hired') ~> HiredApplicants",
						"Applicant, ApplicantMap join({Applicant Final Disposition} == {Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Client Applicant Rejected Reason}",
						"     && Applicant@{Client ID} == ApplicantMap@{Client ID}",
						"     && Applicant@{Client Engagement Date} == ApplicantMap@{Client Engagement Date},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JointoApplicantMap",
						"HiredApplicants aggregate(groupBy({Hired Client ID} = Applicant@{Client ID},",
						"          {Hired Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Hired  Applicant ID} = {Applicant ID},",
						"          {Hired  Event Year} = {Event Year}),",
						"     HiredReqCount = count({Requisition ID})) ~> GroupHiredApplicantsByYear",
						"selectApplicants filter({Elloree Applicant Final Disposition}=='Interviewed') ~> Interviewed",
						"Interviewed aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Event Year},",
						"          {Requisition ID}),",
						"     InterviewedReqCount = count({Requisition ID})) ~> GroupInterviewedApplicantsandYear",
						"JointoApplicantMap select(mapColumn(",
						"          {Client ID} = Applicant@{Client ID},",
						"          {Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicants",
						"GroupInterviewedApplicantsandYear, GroupHiredApplicantsByYear join({Client ID} == {Hired Client ID}",
						"     && {Client Engagement Date} == {Hired Client Engagement Date}",
						"     && {Applicant ID} == {Hired  Applicant ID}",
						"     && {Event Year} == {Hired  Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinHires",
						"JoinHires derive({Silver Medalist Ind} = iif((HiredReqCount)>=1,'N','Y')) ~> CalcSilverMedalist",
						"CalcSilverMedalist select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Requisition ID},",
						"          {Silver Medalist Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumnsForFactTbl",
						"selectColumnsForFactTbl sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SilverMedalistFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
						"     && EventYear == {Talent EventYear},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "AdjustMgrELValueforSpeedbumpCalc"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          CorpTitle,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr CorpTitle} = CorpTitle,",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"AdjustMgrELValueforSpeedbumpCalc derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y',\r",
						"iif(TalentIdentifier1=='Group 1 (O-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 2 (O-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 3 (O-1)','Y',\r",
						"iif(TalentIdentifier1=='Group 4 (E-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 5 (E-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 6 (E-1)','Y','N'))))))),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title Sort}==1,'N',iif(toInteger({Mgr CorpTitle})<=toInteger(CorpTitle),'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A',iif({Mgr Years of Service}>=3,'Y','N'),'N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=2,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"Join3YrWorkerMgrCount derive(CorpTitle = iif(CorpTitle=='EL','13',CorpTitle),",
						"          {Mgr CorpTitle} = iif({Mgr CorpTitle}=='EL','13',{Mgr CorpTitle})) ~> AdjustMgrELValueforSpeedbumpCalc",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Bonsai')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreWorkerIDandEventYr"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "Workers1P"
						},
						{
							"name": "selectWorkers1P"
						},
						{
							"name": "Workers2P"
						},
						{
							"name": "selectWorkers2P"
						},
						{
							"name": "WorkersIn1Pand2P"
						},
						{
							"name": "WorkersTenure3Yrs"
						},
						{
							"name": "Join3YrWorkerFlag"
						},
						{
							"name": "WorkersIn1Pand2PandCurr"
						},
						{
							"name": "WorkersCurr"
						},
						{
							"name": "JoinCurrYearForBonus"
						},
						{
							"name": "SelectCurrentBonus"
						},
						{
							"name": "JoinBonusFromOtherCore"
						},
						{
							"name": "CalculatingLeftBehind"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          WorkerId as string,",
						"          EventYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId, EventYear from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' group by WorkerId, EventYear\"),",
						"     format: 'query') ~> CoreWorkerIDandEventYr",
						"source(output(",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          OtherNumVal1 as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId, EventYear, OtherNumVal1 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"JoinBonusFromOtherCore select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = CoreFact@WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = CoreFact@EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          LegacyOrg,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Curr Top Talent Ind} = {Emp Perf Rating Curr Top Talent Ind},",
						"          {Curr Perf Rating} = {Emp Perf Elloree Rating},",
						"          {P1 Top Talent Ind} = {Emp Perf Rating P1 Top Talent Ind},",
						"          {P2 Top Talent Ind} = {Emp Perf Rating P2 Top Talent Ind},",
						"          ManagerInd,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          Bonus = OtherNumVal1,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
						"          {Emp Perf Rating Curr Top Talent Ind} = CurrTopTalentInd,",
						"          {Emp Perf Rating P1 Top Talent Ind} = P1TopTalentInd,",
						"          {Emp Perf Rating P2 Top Talent Ind} = P2TopTalentInd,",
						"          {Emp Perf Elloree Rating} = CurrElloreePerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag},",
						"          {Mgr LegacyOrg} = LegacyOrg",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerFlag derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y',iif({3YrWorker}=='Y','Y','N')),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Elloree Corporate Title Sort}==2, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y'))))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributor',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (senior talent) ',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',\r",
						"iif({Elloree Corporate Title Sort}<=4,\r",
						"iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = '9 Box Rating',",
						"          {Speedbump 9 Desc} = '9 Box Value (Talent Identifier #1 in our Data) =Talent Risk (1), Inconsistent (3), Too New to Rate or Wrong in Role (6) or NO 9 Box Value Exists ',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',\r",
						"iif(TalentIdentifier1=='1','Y',\r",
						"iif(TalentIdentifier1=='3','Y',\r",
						"iif(TalentIdentifier1=='6','Y',\r",
						"iif(isNull(TalentIdentifier1),'Y','N')))),\r",
						"'N'),",
						"          {Speedbump 10 Name} = 'Flight Risk',",
						"          {Speedbump 10 Desc} = '(Flight Risk Info) 3 of 4 criteria met. (1)No promo in last 3 yrs. (2)Yrs of Svc MDir/Prt>10, Sr Mgr/Mgr>5, Other>3. (3)Wkr or Mgr was acq. (4)Top perf. in 2021/22 not 23',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif((\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 0,\r",
						"iif({Elloree Corporate Title Sort}==2, 0,\r",
						"iif({Curr Promo}=='Y',0,\r",
						"iif({P1 Promo}=='Y',0,\r",
						"iif({P2 Promo}=='Y',0,\r",
						"iif(isNull(CoreLastPromoDt),1,\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,0,1))))))),0)\r",
						"+\r",
						"iif((iif({Years of Service}>10,iif({Elloree Corporate Title Sort}==1,1,0),0)+\r",
						"iif({Years of Service}>10,iif({Elloree Corporate Title Sort}==2,1,0),0)+\r",
						"iif({Years of Service}>5,iif({Elloree Corporate Title Sort}==3,1,0),0)+\r",
						"iif({Years of Service}>5,iif({Elloree Corporate Title Sort}==4,1,0),0)+\r",
						"iif({Years of Service}>3,iif({Elloree Corporate Title Sort}>4,1,0),0))>0,1,0)\r",
						"+\r",
						"iif((iif(isNull(LegacyOrg),0,iif(LegacyOrg=='Non-Merger',0,iif(LegacyOrg=='N/A',0,1))))+(iif(isNull({Mgr LegacyOrg}),0,iif({Mgr LegacyOrg}=='Non-Merger',0,iif({Mgr LegacyOrg}=='N/A',0,1))))>0,1,0)\r",
						"+\r",
						"iif(\r",
						"(\r",
						"iif({Elloree Corporate Title Sort}==2,iif(Bonus<5,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==3,iif(Bonus<4,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==4,iif(Bonus<4,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==5,iif(Bonus<3,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==6,iif(Bonus<2,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==7,iif(Bonus<1,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==8,iif(Bonus<1,1,0),0)\r",
						")>0,1,0)\r",
						"+\r",
						"iif({Curr Top Talent Ind}=='Y',0,iif({P1 Top Talent Ind}=='Y',iif({P2 Top Talent Ind}=='Y',1,0),0)))>=3,'Y','N'),'N/A'),",
						"          {Speedbump 11 Name} = 'Left Behind B',",
						"          {Speedbump 11 Desc} = 'Workers with a current performance rating of \"Partially Meets\" or \"No Rating\", and a 9 Box (Talent Identifier1) of 7,8 or 9',",
						"          {Speedbump 11 Flag} = iif($SB11_Placeholder=='Y',\r",
						"iif((iif({Curr Perf Rating}=='Partially Meets',1,0)+\r",
						"iif({Curr Perf Rating}=='No Rating',1,0)+\r",
						"iif(TalentIdentifier1=='7',1,0)+\r",
						"iif(TalentIdentifier1=='8',1,0)+\r",
						"iif(TalentIdentifier1=='9',1,0))==2,'Left Behind (B)','N/A'),'N/A'),",
						"          {Speedbump 12 Name} = 'Left Behind A',",
						"          {Speedbump 12 Desc} = 'Used for Left Behind Calc',",
						"          {Speedbump 12 Flag} = iif({Curr Top Talent Ind}=='Y','N/A',iif({P1 Top Talent Ind}=='Y',iif({P2 Top Talent Ind}=='Y','Left Behind (A)','N/A'),'N/A')),",
						"          {Speedbump 13 Name} = 'Bonus',",
						"          {Speedbump 13 Desc} = 'Average bonus',",
						"          {Speedbump 13 Flag} = iif($SB13_Placeholder=='Y',\r",
						"iif(\r",
						"(\r",
						"iif({Elloree Corporate Title Sort}==2,iif(Bonus<5,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==3,iif(Bonus<4,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==4,iif(Bonus<4,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==5,iif(Bonus<3,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==6,iif(Bonus<2,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==7,iif(Bonus<1,1,0),0)+\r",
						"iif({Elloree Corporate Title Sort}==8,iif(Bonus<1,1,0),0)\r",
						")>0,'Y','N'),'N/A'),",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalculatingLeftBehind select(mapColumn(",
						"          {Client ID} = SelectCoreForMgrPopulation@{Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
						"     && EventYear == {Talent EventYear},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"CoreWorkerIDandEventYr, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Workers1P",
						"Workers1P select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWorkers1P",
						"CoreWorkerIDandEventYr, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Workers2P",
						"Workers2P select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWorkers2P",
						"selectWorkers1P, selectWorkers2P exists(selectWorkers1P@WorkerId == selectWorkers2P@WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> WorkersIn1Pand2P",
						"WorkersIn1Pand2PandCurr derive({3YrWorker} = \"Y\") ~> WorkersTenure3Yrs",
						"Join3YrWorkerMgrCount, WorkersTenure3Yrs join({Worker ID} == WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerFlag",
						"WorkersCurr, WorkersIn1Pand2P exists(CoreWorkerIDandEventYr@WorkerId == selectWorkers1P@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> WorkersIn1Pand2PandCurr",
						"CoreWorkerIDandEventYr, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> WorkersCurr",
						"OtherCoreFactTbl, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrYearForBonus",
						"JoinCurrYearForBonus select(mapColumn(",
						"          WorkerId,",
						"          EventYear,",
						"          OtherNumVal1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCurrentBonus",
						"Join5OrMoreApplied, SelectCurrentBonus join(CoreFact@WorkerId == SelectCurrentBonus@WorkerId",
						"     && CoreFact@EventYear == SelectCurrentBonus@EventYear,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBonusFromOtherCore",
						"CalcSpeedBumps derive({Speedbump 11 Flag} = iif(\r",
						"(iif({Speedbump 11 Flag}=='Left Behind (B)',1,0)+\r",
						"iif({Speedbump 12 Flag}=='Left Behind (A)',1,0))==2,'Left Behind (A/B)',\r",
						"iif({Speedbump 11 Flag}=='Left Behind (B)','Left Behind (B)',\r",
						"iif({Speedbump 12 Flag}=='Left Behind (A)','Left Behind (A)','N/A'))),",
						"          {Speedbump 11 Name} = 'Left Behind Category',",
						"          {Speedbump 11 Desc} = 'Description reference',",
						"          {Speedbump 12 Flag} = iif(\r",
						"(iif({Speedbump 11 Flag}=='Left Behind (B)',1,0)+\r",
						"iif({Speedbump 12 Flag}=='Left Behind (A)',1,0))>0,'Y','N'),",
						"          {Speedbump 12 Name} = 'Left Behind',",
						"          {Speedbump 12 Desc} = 'Left Behind Speedbump Flag') ~> CalculatingLeftBehind",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Evergreen_2022')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "FilterEngagementSurveyeSat"
						},
						{
							"name": "CalceSatSurveyAvg"
						},
						{
							"name": "derivedSpeedBump8eSat"
						},
						{
							"name": "SelectSpeedbump8"
						},
						{
							"name": "FilterEngagementSurveySafeBelongMatter"
						},
						{
							"name": "CalcBelongSurveyAvg"
						},
						{
							"name": "derivedSpeedBump9Belong"
						},
						{
							"name": "SelectSpeedbump9"
						},
						{
							"name": "FilterEngagementSurveyGrowth"
						},
						{
							"name": "CalcGrowthSurveyAvg"
						},
						{
							"name": "derivedSpeedBump10Growth"
						},
						{
							"name": "SelectSpeedbump10"
						},
						{
							"name": "FilterEngagementSurveyMgrFBkConvo"
						},
						{
							"name": "CalcMgrFBkConvoSurveyAvg"
						},
						{
							"name": "derivedSpeedBump11MgrFBkConvo"
						},
						{
							"name": "SelectSpeedbump11"
						},
						{
							"name": "FilterEngagementSurveyPotential"
						},
						{
							"name": "derivedSpeedBump12Potential"
						},
						{
							"name": "SelectSpeedbump12"
						},
						{
							"name": "joinSurveySpeedbump8"
						},
						{
							"name": "joinSpeedbump9"
						},
						{
							"name": "joinSpeedbump10"
						},
						{
							"name": "joinSpeedbump11"
						},
						{
							"name": "joinSpeedbump12"
						},
						{
							"name": "CleanupJoinFields"
						},
						{
							"name": "FilterEngagementSurveyGoals"
						},
						{
							"name": "SelectSurveyGoals"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSurveyValues"
						},
						{
							"name": "joinSurveyGoals"
						},
						{
							"name": "joinSurveyValues"
						},
						{
							"name": "SpecialCalcForFlightRisk"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> OtherCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
						"          {Emp Curr Elloree Perf Rating} = CurrElloreePerfRating,",
						"          {Emp P1 Elloree Perf Rating} = P1ElloreePerfRating,",
						"          {Emp P2 Elloree Perf Rating} = P2ElloreePerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"CleanupJoinFields derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',iif({Years of Service}>=5,iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Employee Satisfaction',",
						"          {Speedbump 8 Desc} = 'Employees with an average score below 82.8 when asked about satisfaction with working at the company',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif(not(isNull(eSatSpeedbump8)),eSatSpeedbump8,'N'),'N'),",
						"          {Speedbump 9 Name} = 'Employee Belonging',",
						"          {Speedbump 9 Desc} = 'Employees with an average score below 84.7 when asked about being themselves and belomging at the company',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(not(isNull(BelongSpeedbump9)),BelongSpeedbump9,'N'),'N'),",
						"          {Speedbump 10 Name} = 'Employee Growth',",
						"          {Speedbump 10 Desc} = 'Employees with an average score below 81.2 when asked about opportunities to learn and develop their skillset at the company',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(not(isNull(GrowthSpeedbump10)),GrowthSpeedbump10,'N'),'N'),",
						"          {Speedbump 11 Name} = 'Mgr Supp., Fdbck, Conv',",
						"          {Speedbump 11 Desc} = 'Employees with an avg. score below 82.5 when asked about their Manager prioritizing their wellbeing, providing feedback and having quarterly conversations.',",
						"          {Speedbump 11 Flag} = iif($SB11_Placeholder=='Y',iif(not(isNull(MgrFBkConvoSpeedbump11)),MgrFBkConvoSpeedbump11,'N'),'N'),",
						"          {Speedbump 12 Name} = 'Employee Potential',",
						"          {Speedbump 12 Desc} = 'Perf Review - Final Calibrated Potential Value',",
						"          {Speedbump 12 Flag} = iif($SB12_Placeholder=='Y',iif(not(isNull(PotentialSpeedbump12)),PotentialSpeedbump12,'N'),'N'),",
						"          {Speedbump 13 Name} = 'Left Behind',",
						"          {Speedbump 13 Desc} = 'Employees rated as Meets or lower that were top performers in prior 2 years.',",
						"          {Speedbump 13 Flag} = iif($SB13_Placeholder=='Y',\r",
						"iif({Emp Curr Elloree Perf Rating}=='Meets' || {Emp Curr Elloree Perf Rating}=='Does Not Meet',\r",
						"iif({Emp P1 Elloree Perf Rating}=='Exceeds' || {Emp P1 Elloree Perf Rating}=='Outstanding', \r",
						"iif({Emp P2 Elloree Perf Rating}=='Exceeds' ||{Emp P2 Elloree Perf Rating}=='Outstanding', \r",
						"iif({Potential Survey Val}=='High' || {Potential Survey Val}=='Medium',\r",
						"iif({Goals Survey Val}=='Accomplished' || {Goals Survey Val}=='Exceeded', \r",
						"iif({Values Survey Val}=='Always' ||{Values Survey Val}=='Often','Y','N'),'N'),'N'),'N'),'N'),'N'),'N'),",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"SpecialCalcForFlightRisk select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"OtherCore filter(EventType=='Engagement Survey - eSat') ~> FilterEngagementSurveyeSat",
						"FilterEngagementSurveyeSat aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveryValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalceSatSurveyAvg",
						"CalceSatSurveyAvg derive(eSatSpeedbump8 = iif(SurveryAvg<82.8, 'Y','N')) ~> derivedSpeedBump8eSat",
						"derivedSpeedBump8eSat select(mapColumn(",
						"          WorkerId,",
						"          eSatSpeedbump8",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump8",
						"OtherCore filter(EventType=='Engagement Survey - Safe_Belong_Matter' && EventDesc=='I can be myself and belong at Equinix.') ~> FilterEngagementSurveySafeBelongMatter",
						"FilterEngagementSurveySafeBelongMatter aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcBelongSurveyAvg",
						"CalcBelongSurveyAvg derive(BelongSpeedbump9 = iif(SurveryAvg<84.7, 'Y','N')) ~> derivedSpeedBump9Belong",
						"derivedSpeedBump9Belong select(mapColumn(",
						"          WorkerId,",
						"          BelongSpeedbump9",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump9",
						"OtherCore filter(EventType=='Engagement Survey - Growth_Devt') ~> FilterEngagementSurveyGrowth",
						"FilterEngagementSurveyGrowth aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcGrowthSurveyAvg",
						"CalcGrowthSurveyAvg derive(GrowthSpeedbump10 = iif(SurveryAvg<81.2, 'Y','N')) ~> derivedSpeedBump10Growth",
						"derivedSpeedBump10Growth select(mapColumn(",
						"          WorkerId,",
						"          GrowthSpeedbump10",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump10",
						"OtherCore filter(EventType=='Engagement Survey - Well_Being_Mgr' || EventType=='Engagement Survey - Feedback' || EventType=='Engagement Survey - Quarter_Convo') ~> FilterEngagementSurveyMgrFBkConvo",
						"FilterEngagementSurveyMgrFBkConvo aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcMgrFBkConvoSurveyAvg",
						"CalcMgrFBkConvoSurveyAvg derive(MgrFBkConvoSpeedbump11 = iif(SurveryAvg<82.5, 'Y','N')) ~> derivedSpeedBump11MgrFBkConvo",
						"derivedSpeedBump11MgrFBkConvo select(mapColumn(",
						"          WorkerId,",
						"          MgrFBkConvoSpeedbump11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump11",
						"OtherCore filter(EventType=='Potential') ~> FilterEngagementSurveyPotential",
						"FilterEngagementSurveyPotential derive(PotentialSpeedbump12 = iif(OtherCharVal11=='At Potential / Well Placed', 'Y','N')) ~> derivedSpeedBump12Potential",
						"derivedSpeedBump12Potential select(mapColumn(",
						"          WorkerId,",
						"          PotentialSpeedbump12,",
						"          {Potential Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump12",
						"joinSurveyValues, SelectSpeedbump8 join({Worker ID} == SelectSpeedbump8@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveySpeedbump8",
						"joinSurveySpeedbump8, SelectSpeedbump9 join({Worker ID} == SelectSpeedbump9@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump9",
						"joinSpeedbump9, SelectSpeedbump10 join({Worker ID} == SelectSpeedbump10@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump10",
						"joinSpeedbump10, SelectSpeedbump11 join({Worker ID} == SelectSpeedbump11@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump11",
						"joinSpeedbump11, SelectSpeedbump12 join({Worker ID} == SelectSpeedbump12@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump12",
						"joinSpeedbump12 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          ManagerInd,",
						"          {Core Event Id},",
						"          {Core Event Date},",
						"          EventQuarter,",
						"          {Event Year},",
						"          {Years of Service},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID},",
						"          CoreLastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo},",
						"          {P1 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5,",
						"          {Mgr Worker ID},",
						"          {Mgr Years of Service},",
						"          {Mgr Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag},",
						"          WorkerIdForMgrCount,",
						"          ManagerCount,",
						"          eSatSpeedbump8,",
						"          BelongSpeedbump9,",
						"          GrowthSpeedbump10,",
						"          MgrFBkConvoSpeedbump11,",
						"          PotentialSpeedbump12,",
						"          {Goals Survey Val},",
						"          {Potential Survey Val},",
						"          {Values Survey Val}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinFields",
						"OtherCore filter(EventType=='Goals') ~> FilterEngagementSurveyGoals",
						"FilterEngagementSurveyGoals select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Goals Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyGoals",
						"OtherCore filter(EventType=='Values') ~> filter1",
						"filter1 select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Values Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyValues",
						"Join3YrWorkerMgrCount, SelectSurveyGoals join({Worker ID} == WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveyGoals",
						"joinSurveyGoals, SelectSurveyValues join({Worker ID} == SelectSurveyValues@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveyValues",
						"CalcSpeedBumps derive({Speedbump 14 Name} = 'Flight Risk',",
						"          {Speedbump 14 Desc} = 'Flight Risk based on Level, Tenure, Promo, Emp. Satisfaction and Belonging.',",
						"          {Speedbump 14 Flag} = iif($SB14_Placeholder=='Y',iif((iif(({Elloree Corporate Title Sort}==1 && {Years of Service}<=5.9) \r",
						"|| ({Elloree Corporate Title Sort}==2 && {Years of Service}<=6.2)\r",
						"|| ({Elloree Corporate Title Sort}==3 && {Years of Service}<=4.4)\r",
						"|| ({Elloree Corporate Title Sort}==4 && {Years of Service}<=3.7)\r",
						"|| ({Elloree Corporate Title Sort}==5 && {Years of Service}<=3.6),1,0)+\r",
						"iif({Speedbump 4 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 8 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 9 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 13 Flag}=='Y',1,0))>=3,'Y','N'),'N')) ~> SpecialCalcForFlightRisk",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Evergreen_2023')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "FilterEngagementSurveyeSat"
						},
						{
							"name": "CalceSatSurveyAvg"
						},
						{
							"name": "derivedSpeedBump8eSat"
						},
						{
							"name": "SelectSpeedbump8"
						},
						{
							"name": "FilterEngagementSurveySafeBelongMatter"
						},
						{
							"name": "CalcBelongSurveyAvg"
						},
						{
							"name": "derivedSpeedBump9Belong"
						},
						{
							"name": "SelectSpeedbump9"
						},
						{
							"name": "FilterEngagementSurveyGrowth"
						},
						{
							"name": "CalcGrowthSurveyAvg"
						},
						{
							"name": "derivedSpeedBump10Growth"
						},
						{
							"name": "SelectSpeedbump10"
						},
						{
							"name": "FilterEngagementSurveyMgrFBkConvo"
						},
						{
							"name": "CalcMgrFBkConvoSurveyAvg"
						},
						{
							"name": "derivedSpeedBump11MgrFBkConvo"
						},
						{
							"name": "SelectSpeedbump11"
						},
						{
							"name": "FilterEngagementSurveyPotential"
						},
						{
							"name": "derivedSpeedBump12Potential"
						},
						{
							"name": "SelectSpeedbump12"
						},
						{
							"name": "joinSurveySpeedbump8"
						},
						{
							"name": "joinSpeedbump9"
						},
						{
							"name": "joinSpeedbump10"
						},
						{
							"name": "joinSpeedbump11"
						},
						{
							"name": "CleanupJoinFields"
						},
						{
							"name": "FilterEngagementSurveyGoals"
						},
						{
							"name": "SelectSurveyGoals"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSurveyValues"
						},
						{
							"name": "CalcSpeedbump14New"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> OtherCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
						"          {Emp Curr Elloree Perf Rating} = CurrElloreePerfRating,",
						"          {Emp P1 Elloree Perf Rating} = P1ElloreePerfRating,",
						"          {Emp P2 Elloree Perf Rating} = P2ElloreePerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"CleanupJoinFields derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',iif({Years of Service}>=5,iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Employee Satisfaction',",
						"          {Speedbump 8 Desc} = 'Employees with an average score below 82.5 when asked about satisfaction with working at the company',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif(not(isNull(eSatSpeedbump8)),eSatSpeedbump8,'N'),'N'),",
						"          {Speedbump 9 Name} = 'Employee Belonging',",
						"          {Speedbump 9 Desc} = 'Employees with an average score below 84.5 when asked about being themselves and belomging at the company',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(not(isNull(BelongSpeedbump9)),BelongSpeedbump9,'N'),'N'),",
						"          {Speedbump 10 Name} = 'Skills Development',",
						"          {Speedbump 10 Desc} = 'Employees with an average score below 82 when asked about opportunities to learn and develop their skillset at the company',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(not(isNull(DevelopmentSpeedbump10)),DevelopmentSpeedbump10,'N'),'N'),",
						"          {Speedbump 11 Name} = 'Manager Effectiveness',",
						"          {Speedbump 11 Desc} = 'Employees with an avg. score below 85 when asked about their Manager prioritizing their well being, providing feedback and having quarterly conversations.',",
						"          {Speedbump 11 Flag} = iif($SB11_Placeholder=='Y',iif(not(isNull(MgrFBkConvoSpeedbump11)),MgrFBkConvoSpeedbump11,'N'),'N'),",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Left Behind',",
						"          {Speedbump 13 Desc} = 'Employees rated as Meets or lower that were top performers in prior 2 years.',",
						"          {Speedbump 13 Flag} = iif($SB13_Placeholder=='Y',\r",
						"iif({Emp Curr Elloree Perf Rating}=='Meets' || {Emp Curr Elloree Perf Rating}=='Does Not Meet',\r",
						"iif({Emp P1 Elloree Perf Rating}=='Exceeds' || {Emp P1 Elloree Perf Rating}=='Outstanding', \r",
						"iif({Emp P2 Elloree Perf Rating}=='Exceeds' ||{Emp P2 Elloree Perf Rating}=='Outstanding',\r",
						"iif(TalentIdentifier1=='Accomplished' ||TalentIdentifier1=='Exceeded', \r",
						"iif(TalentIdentifier2=='Almost Always' ||TalentIdentifier2=='Often','Y','N'),'N'),'N'),'N'),'N'),'N'),",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedbump14New select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"OtherCore filter(EventType=='Engagement Survey - eSat') ~> FilterEngagementSurveyeSat",
						"FilterEngagementSurveyeSat aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveryValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalceSatSurveyAvg",
						"CalceSatSurveyAvg derive(eSatSpeedbump8 = iif(SurveryAvg<82.5, 'Y','N')) ~> derivedSpeedBump8eSat",
						"derivedSpeedBump8eSat select(mapColumn(",
						"          WorkerId,",
						"          eSatSpeedbump8",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump8",
						"OtherCore filter(EventType=='Engagement Survey - Belong') ~> FilterEngagementSurveySafeBelongMatter",
						"FilterEngagementSurveySafeBelongMatter aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcBelongSurveyAvg",
						"CalcBelongSurveyAvg derive(BelongSpeedbump9 = iif(SurveryAvg<84.5, 'Y','N')) ~> derivedSpeedBump9Belong",
						"derivedSpeedBump9Belong select(mapColumn(",
						"          WorkerId,",
						"          BelongSpeedbump9",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump9",
						"OtherCore filter(EventType=='Engagement Survey - Skills_Development') ~> FilterEngagementSurveyGrowth",
						"FilterEngagementSurveyGrowth aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcGrowthSurveyAvg",
						"CalcGrowthSurveyAvg derive(GrowthSpeedbump10 = iif(SurveryAvg<82, 'Y','N')) ~> derivedSpeedBump10Growth",
						"derivedSpeedBump10Growth select(mapColumn(",
						"          WorkerId,",
						"          GrowthSpeedbump10",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump10",
						"OtherCore filter(EventType=='Engagement Survey - Well_Being_Mgr' || EventType=='Engagement Survey - Feedback' || EventType=='Engagement Survey - Quarter_Convo') ~> FilterEngagementSurveyMgrFBkConvo",
						"FilterEngagementSurveyMgrFBkConvo aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcMgrFBkConvoSurveyAvg",
						"CalcMgrFBkConvoSurveyAvg derive(MgrFBkConvoSpeedbump11 = iif(SurveryAvg<85, 'Y','N')) ~> derivedSpeedBump11MgrFBkConvo",
						"derivedSpeedBump11MgrFBkConvo select(mapColumn(",
						"          WorkerId,",
						"          MgrFBkConvoSpeedbump11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump11",
						"OtherCore filter(EventType=='Potential') ~> FilterEngagementSurveyPotential",
						"FilterEngagementSurveyPotential derive(PotentialSpeedbump12 = iif(OtherCharVal11=='At Potential / Well Placed', 'Y','N')) ~> derivedSpeedBump12Potential",
						"derivedSpeedBump12Potential select(mapColumn(",
						"          WorkerId,",
						"          PotentialSpeedbump12,",
						"          {Potential Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump12",
						"Join3YrWorkerMgrCount, SelectSpeedbump8 join({Worker ID} == WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveySpeedbump8",
						"joinSurveySpeedbump8, SelectSpeedbump9 join({Worker ID} == SelectSpeedbump9@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump9",
						"joinSpeedbump9, SelectSpeedbump10 join({Worker ID} == SelectSpeedbump10@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump10",
						"joinSpeedbump10, SelectSpeedbump11 join({Worker ID} == SelectSpeedbump11@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump11",
						"joinSpeedbump11 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          ManagerInd,",
						"          {Core Event Id},",
						"          {Core Event Date},",
						"          EventQuarter,",
						"          {Event Year},",
						"          {Years of Service},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID},",
						"          CoreLastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo},",
						"          {P1 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5,",
						"          {Mgr Worker ID},",
						"          {Mgr Years of Service},",
						"          {Mgr Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag},",
						"          WorkerIdForMgrCount,",
						"          ManagerCount,",
						"          eSatSpeedbump8,",
						"          BelongSpeedbump9,",
						"          DevelopmentSpeedbump10 = GrowthSpeedbump10,",
						"          MgrFBkConvoSpeedbump11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinFields",
						"OtherCore filter(EventType=='Engagement Survey - Goal_Clarity_Ind') ~> FilterEngagementSurveyGoals",
						"FilterEngagementSurveyGoals select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Goals Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyGoals",
						"OtherCore filter(EventType=='Engagement Survey - Values') ~> filter1",
						"filter1 select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Values Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyValues",
						"CalcSpeedBumps derive({Speedbump 14 Name} = 'Flight Risk',",
						"          {Speedbump 14 Desc} = 'Flight Risk based on Level, Tenure, Promo, Emp. Satisfaction and Belonging.',",
						"          {Speedbump 14 Flag} = iif($SB14_Placeholder=='Y',iif((iif(({Elloree Corporate Title Sort}==1 && {Years of Service}>=12 && {Years of Service}<=14) \r",
						"|| ({Elloree Corporate Title Sort}==2 && {Years of Service}>=7.25 && {Years of Service}<=9.25)\r",
						"|| ({Elloree Corporate Title Sort}==3 && {Years of Service}>=3.75 && {Years of Service}<=5.75)\r",
						"|| ({Elloree Corporate Title Sort}==4 && {Years of Service}>=3.75 && {Years of Service}<=5.75)\r",
						"|| ({Elloree Corporate Title Sort}==5 && {Years of Service}>=2.25 && {Years of Service}<=4.25),1,0)+\r",
						"iif({Speedbump 4 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 8 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 9 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 5 Flag}=='Y',1,0))>=3,'Y','N'),'N')) ~> CalcSpeedbump14New",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Ficus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "FlightRiskSpeedbump8"
						},
						{
							"name": "FilterEngagementType"
						},
						{
							"name": "SelectWorkerEngagementType"
						},
						{
							"name": "JoinWorkerMgrEngagementData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreTbl",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"JoinWorkerMgrEngagementData derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A' && {Mgr Years of Service}>=3,'Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 3 or more roles',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Manager Engagement',",
						"          {Speedbump 9 Desc} = 'Engagement Index with a score of less than 74',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(Engagement<74,'Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=3,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"FlightRiskSpeedbump8 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
						"     && EventYear == {Talent EventYear},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"CalcSpeedBumps derive({Speedbump 8 Name} = 'Flight Risk',",
						"          {Speedbump 14 Desc} = 'Flight Risk based on Level, Tenure, Promo, Mgr. Change, Applied 5 and Silver Medalist.',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif((iif(({Elloree Corporate Title Sort}==1 && {Years of Service}>=22 && {Years of Service}<=24)\r",
						"|| ({Elloree Corporate Title Sort}==2 && {Years of Service}>=11.3 && {Years of Service}<=13.3)\r",
						"|| ({Elloree Corporate Title Sort}==3 && {Years of Service}>=4.7 && {Years of Service}<=6.7)\r",
						"|| ({Elloree Corporate Title Sort}==4 && {Years of Service}>=4.4 && {Years of Service}<=6.4),1,0)+\r",
						"iif({Speedbump 9 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 4 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 7 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 6 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 5 Flag}=='Y',1,0))>=3,'Y','N'),'N')) ~> FlightRiskSpeedbump8",
						"OtherCoreTbl filter(EventType==\"Engagement Index\") ~> FilterEngagementType",
						"FilterEngagementType select(mapColumn(",
						"          WorkerId,",
						"          Engagement = OtherNumVal1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerEngagementType",
						"Join3YrWorkerMgrCount, SelectWorkerEngagementType join({Worker ID} == WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWorkerMgrEngagementData",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Nutmeg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 2 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=2,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
						"     && EventYear == {Talent EventYear},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Baseline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif({Applicant Five or More}=='Y','Y','N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif({Silver Medalist Ind}=='Y','Y','N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif(ManagerCount>=3,'Y','N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"AllCore, Select3PYear join(EventYear == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "SetNullTalentTagAsNA"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = CoreHCT@WorkerId,",
						"          ManagerInd,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = CoreHCT@EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          CorpTitle,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SetNullTalentTagAsNA select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr CorpTitle} = CorpTitle,",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(CoreHCT@WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(CoreHCT@WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(CoreHCT@WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title Sort}==1,'N',iif(toInteger({Mgr CorpTitle})<=toInteger(CorpTitle),'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A',iif({Mgr Years of Service}>=3,'Y','N'),'N')),'N/A'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N/A'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=2,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif({P3 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-3,'N','Y'))))))),'N'),'N/A'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N/A'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N/A'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N/A'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N/A'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N/A'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N/A'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(CoreHCT@WorkerId == {Applicant ID Calculated}",
						"     && CoreHCT@EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(CoreHCT@WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && CoreHCT@EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag},",
						"          {Mgr Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(CoreHCT@WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select3PYear join(EventYear >= Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"Talent select(mapColumn(",
						"          WorkerId,",
						"          EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(CoreHCT@WorkerId == SelectTalentColumns@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"SelectCoreForMgrPopulation derive({Curr Talent Tag} = iif(isNull({Curr Talent Tag}),'N/A',{Curr Talent Tag})) ~> SetNullTalentTagAsNA",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Talent_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "RemoveNullWorkerIDRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"RemoveNullWorkerIDRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'PER',",
						"          {Performance Rating} = iif(isNull({Performance Rating}), 'N/A',{Performance Rating})) ~> AddParameters",
						"AddParameters aggregate(groupBy({Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)},",
						"          {Client ID}),",
						"     {Client Engagement Date} = max({Client Engagement Date})) ~> RemoveDuplicates",
						"RemoveDuplicates filter(not(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
						"SelectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TalentFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_YearRefTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputYearRefTable"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"Core aggregate(groupBy({Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year} = max({Event Year})) ~> aggregate1",
						"aggregate1 derive(CurrEventYear = toShort({Event Year}),",
						"          P1EventYear = toShort({Event Year} - 1),",
						"          P2EventYear = toShort({Event Year} - 2),",
						"          P3EventYear = toShort({Event Year} - 3),",
						"          P4EventYear = toShort({Event Year} - 4),",
						"          P5EventYear = toShort({Event Year} - 5),",
						"          {Client Engagement Date} = toDate({Client Engagement Date},'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          CurrEventYear,",
						"          P1EventYear,",
						"          P2EventYear,",
						"          P3EventYear,",
						"          P4EventYear,",
						"          P5EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(!(isNull({Client ID}))) ~> RemoveNullRows",
						"RemoveNullRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['YearRefTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputYearRefTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HierarchyCheck')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData1",
							"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData2",
							"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputOrphanHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OuputOrphanAndCurrHrchyCounts"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputWorkerHierarchyDetail"
						}
					],
					"transformations": [
						{
							"name": "MaxEventDt"
						},
						{
							"name": "CurrentHCTEvent",
							"description": "Join on max HCT event date in order to pull only the Current headcount records"
						},
						{
							"name": "UniqueHierarchyRecords",
							"description": "Select unique hierarchy for current headcount records."
						},
						{
							"name": "SelectUniqueHierarchyCurrHCT",
							"description": "Select key and hierarchy fields."
						},
						{
							"name": "UniqueHierarchyAllEvents"
						},
						{
							"name": "SelectUniqueHierarchyFields"
						},
						{
							"name": "SelectCoreWithNoCurrentHierarchy"
						},
						{
							"name": "PullRecordsWithOrphans",
							"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
						},
						{
							"name": "UniqueWorkerWithOrphanHrchy",
							"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
						},
						{
							"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
						},
						{
							"name": "PullCurrentHierarchyIfExists",
							"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
						},
						{
							"name": "SelectWorkerIDandHierarcy",
							"description": "Select worker ID and hierarchy fields"
						},
						{
							"name": "CreateWorkerCountsbyHierarchy",
							"description": "Create counts for unique orphan and current hierarchy records"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HCTFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as string,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer,",
						"          RowCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData1",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData2",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'MM/dd/yyyy',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"HCTFilter aggregate(groupBy(EventUnique = Event),",
						"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
						"select1, MaxEventDt join({Event Date} == MaxEventDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrentHCTEvent",
						"derivedColumn3 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
						"UniqueHierarchyRecords select(mapColumn(",
						"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
						"          {Business Group Level 1 HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
						"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
						"UniqueHierarchyAllEvents select(mapColumn(",
						"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
						"          {Business Group Level 1 ALL} = {Business Group Level 1},",
						"          {Business Group Level 2 ALL} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
						"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
						"     negate:true,",
						"     broadcast: 'both')~> SelectCoreWithNoCurrentHierarchy",
						"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullRecordsWithOrphans",
						"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
						"          {Business Group Level 1 Unique} = {Business Group Level 1},",
						"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
						"UniqueWorkerWithOrphanHrchy select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Unique}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
						"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
						"PullCurrentHierarchyIfExists select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
						"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
						"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
						"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
						"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
						"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
						"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
						"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
						"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn2",
						"HCTFilter select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CurrentHCTEvent derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
						"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
						"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
						"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
						"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "AllApplicantData"
						},
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplFlowMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantDatabaseRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingApplFlowMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepApplFlowMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotApplFlowAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnApplFlow"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectExistingApplFlowMapping"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "SelectDBApplicantData"
						},
						{
							"name": "union1"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "CollapsePossibleDuplicates"
						},
						{
							"name": "selectApplDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllApplicantData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ApplFlowMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantDatabaseRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Applicant ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotApplFlowAndEventTime",
						"derivedColumn2 sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotApplFlowAndEventTime sort(asc({Client Applicant Final Disposition}, true),",
						"     asc({Client Applicant Step Before Final Disposition}, true),",
						"     asc({Client Applicant Rejected Reason}, true)) ~> SortOnApplFlow",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingApplFlowMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Applicant Rejected Reason} == {Unique ClientApplRejectedReason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Applicant Final Disposition} = {Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason} = {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Applicant Final Disposition} = {Unique ElloreeApplFinalDisp},",
						"          {Suggested Elloree Applicant Category} = {Unique ElloreeApplCategory},",
						"          {Suggested Elloree Submitted to Manager Fl} = {Unique ElloreeSubmittedtoMgrFl},",
						"          {Applicant ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectExistingApplFlowMapping join({Client Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Client Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Client Applicant Rejected Reason} == {Unique ClientApplRejectedReason}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Applicant Final Disposition} = iif(isNull({Suggested Source}),{Unique ClientApplFinalDisp},{Suggested Elloree Applicant Final Disposition}),",
						"          {Suggested Elloree Applicant Category} = iif(isNull({Suggested Source}),{Unique ElloreeApplCategory},{Suggested Elloree Applicant Category}),",
						"          {Suggested Elloree Submitted to Mgr Fl} = iif(isNull({Suggested Source}),{Unique ElloreeSubmittedtoMgrFl},{Suggested Elloree Submitted to Mgr Fl})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl} = {Suggested Elloree Submitted to Manager Fl},",
						"          {Applicant ID},",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectApplDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Applicant ID} = ApplicantId,",
						"          {Applicant Final Disposition} = ApplFinalDisp,",
						"          {Applicant Step Before Final Disposition} = ApplStepBeforeFinalDisp,",
						"          {Applicant Rejected Reason} = ApplRejectedReason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDBApplicantData",
						"select4, SelectDBApplicantData union(byName: true)~> union1",
						"AllApplicantData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"CollapsePossibleDuplicates derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Applicant Final Disposition} = '',",
						"          {Elloree Applicant Category} = '',",
						"          {Elloree Submitted to Mgr Fl} = '') ~> derivedColumn2",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Step Before Final Disposition}),",
						"     TotApplCount = count({Applicant ID})) ~> CollapsePossibleDuplicates",
						"ApplicantDatabaseRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ApplicantId,",
						"          ApplType,",
						"          ApplFinalDisp,",
						"          ApplStepBeforeFinalDisp,",
						"          ApplRejectedReason),",
						"     TotRecCount = count(ApplicantId)) ~> selectApplDBRecsInit",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Count Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Count Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason},",
						"          {Count Unique ElloreeApplFinalDisp} = {Unique ElloreeApplFinalDisp},",
						"          {Count Unique ElloreeApplCategory} = {Unique ElloreeApplCategory},",
						"          {Count Unique ElloreeSubmittedtoMgrFl} = {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientApplFinalDisp} == {Count Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Count Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Count Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Count Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Count Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Count Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Agg Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Agg Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason}),",
						"     {Agg Unique ElloreeApplFinalDisp} = first({Unique ElloreeApplFinalDisp}),",
						"          {Agg Unique ElloreeApplCategory} = first({Unique ElloreeApplCategory}),",
						"          {Agg Unique ElloreeSubmittedtoMgrFl} = first({Unique ElloreeSubmittedtoMgrFl})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientApplFinalDisp} == {Agg Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Agg Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Agg Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Agg Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Agg Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Agg Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ApplFlowMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ApplFlowMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingApplFlowMapping",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepApplFlowMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "HierarchyMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingHierarchyMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepHierarchyMapping"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort4"
						},
						{
							"name": "sort5"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "SelectFinal1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectReqRecords"
						},
						{
							"name": "SelectCoreRecords"
						},
						{
							"name": "union1"
						},
						{
							"name": "SetEvent"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "CollapsePossibleDuplicateRows"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HierarchyMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn2 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"CollapsePossibleDuplicateRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Business Group Level 1} = '',",
						"          {Elloree Business Group Level 2} = '',",
						"          {Elloree Business Group Level 3} = '',",
						"          {Elloree Business Group Level 4} = '',",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(asc({Event and Year}, true)) ~> sort4",
						"pivot1 sort(asc({Client Business Group Level 1}, true),",
						"     asc({Client Business Group Level 2}, true),",
						"     asc({Client Business Group Level 3}, true),",
						"     asc({Client Business Group Level 4}, true)) ~> sort5",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"sort4, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Business Group Level 1} = {Business Group Level 1},",
						"          {Client Business Group Level 2} = {Business Group Level 2},",
						"          {Client Business Group Level 3} = {Business Group Level 3},",
						"          {Client Business Group Level 4} = {Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Business Group Level 1} = {Unique ElloreeBusGrpLvl1},",
						"          {Suggested Elloree Business Group Level 2} = {Unique ElloreeBusGrpLvl2},",
						"          {Suggested Elloree Business Group Level 3} = {Unique ElloreeBusGrpLvl3},",
						"          {Suggested Elloree Business Group Level 4} = {Unique ElloreeBusGrpLvl4},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Client Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Client Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Client Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"join2 select(mapColumn(",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal1",
						"SelectFinal1 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Business Group Level 1} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl1},{Suggested Elloree Business Group Level 1}),",
						"          {Suggested Elloree Business Group Level 2} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl2},{Suggested Elloree Business Group Level 2}),",
						"          {Suggested Elloree Business Group Level 3} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl3},{Suggested Elloree Business Group Level 3}),",
						"          {Suggested Elloree Business Group Level 4} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl4},{Suggested Elloree Business Group Level 4})) ~> derivedColumn2",
						"SetEvent select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Requisition ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqRecords",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
						"SelectCoreRecords, SelectReqRecords, selectReqDBRecs, selectCoreDBRecs union(byName: true)~> union1",
						"Requisitions derive(Event = 'Requisition') ~> SetEvent",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}),",
						"     TotalRecCount = count({Record Id})) ~> CollapsePossibleDuplicateRows",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl4),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Count Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Count Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Count Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4},",
						"          {Count Unique ElloreeBusGrpLvl1} = {Unique ElloreeBusGrpLvl1},",
						"          {Count Unique ElloreeBusGrpLvl2} = {Unique ElloreeBusGrpLvl2},",
						"          {Count Unique ElloreeBusGrpLvl3} = {Unique ElloreeBusGrpLvl3},",
						"          {Count Unique ElloreeBusGrpLvl4} = {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientBusGrpLvl1} == {Count Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Count Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Count Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Count Unique ClientBusGrpLvl4}",
						"     && {Unique ElloreeBusGrpLvl1} == {Count Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Count Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Count Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Count Unique ElloreeBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Agg Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Agg Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Agg Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4}),",
						"     {Agg Unique ElloreeBusGrpLvl1} = first({Unique ElloreeBusGrpLvl1}),",
						"          {Agg Unique ElloreeBusGrpLvl2} = first({Unique ElloreeBusGrpLvl2}),",
						"          {Agg Unique ElloreeBusGrpLvl3} = first({Unique ElloreeBusGrpLvl3}),",
						"          {Agg Unique ElloreeBusGrpLvl4} = first({Unique ElloreeBusGrpLvl4})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeBusGrpLvl1} == {Agg Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Agg Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Agg Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Agg Unique ElloreeBusGrpLvl4}",
						"     && {Unique ClientBusGrpLvl1} == {Agg Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Agg Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Agg Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Agg Unique ClientBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4,",
						"          ClientEngagementDt),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"HierarchyMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"HierarchyMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingHierarchyMapping",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepHierarchyMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_BusHierarchy_NEW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "SelectCoreRecords"
						},
						{
							"name": "filterBaseYear"
						},
						{
							"name": "filterBaseYearPlus1"
						},
						{
							"name": "filterBaseYearPlus2"
						},
						{
							"name": "filterBaseYearPlus3"
						},
						{
							"name": "selectB3Hierarchy"
						},
						{
							"name": "selectB2Hierarchy"
						},
						{
							"name": "selectB1Hierarchy"
						},
						{
							"name": "selectB0Hierarchy"
						},
						{
							"name": "filterAllHCT"
						},
						{
							"name": "UniqueWorkerIds"
						},
						{
							"name": "selectWorkerIds"
						},
						{
							"name": "joinEachHCTYearB0"
						},
						{
							"name": "joinEachHCTYearB1"
						},
						{
							"name": "joinEachHCTYearB2"
						},
						{
							"name": "joinEachHCTYearB3"
						},
						{
							"name": "derivedHierarchyChg"
						},
						{
							"name": "derivedTransfer"
						},
						{
							"name": "derivedHierarchyCodeChg"
						},
						{
							"name": "selectHierarchyFlagOutput"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "join1"
						},
						{
							"name": "Yr0SetMappingLogic"
						},
						{
							"name": "Yr0SuggestedMapping"
						},
						{
							"name": "Yr0PullOnlyMapped"
						},
						{
							"name": "join2"
						},
						{
							"name": "Yr1SetMappingLogic"
						},
						{
							"name": "Yr1PullOnlyMapped"
						},
						{
							"name": "Yr1SuggestedMapping"
						},
						{
							"name": "selectYr1Mapping"
						},
						{
							"name": "selectYr0Mapping"
						},
						{
							"name": "union1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join3"
						},
						{
							"name": "Yr2SetMappingLogic"
						},
						{
							"name": "Yr2PullOnlyMapped"
						},
						{
							"name": "Yr2SuggestedMapping"
						},
						{
							"name": "selectYr2Mapping"
						},
						{
							"name": "Yr3SuggestedMapping"
						},
						{
							"name": "selectYr3Mapping"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HierarchyKeyCount"
						},
						{
							"name": "SumWithoutYear"
						},
						{
							"name": "selectMappingWithDupCount"
						},
						{
							"name": "derivedCreateKeyForDupCheck"
						},
						{
							"name": "derivedCreateKeyForDupCheck1"
						},
						{
							"name": "joinDuplicateCountInfo"
						},
						{
							"name": "derivedSetMappingLevels"
						},
						{
							"name": "derivedSetHierarchyLvlScope"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedSetNullHierarchyToNA"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "select1"
						},
						{
							"name": "PY3Hierarchy"
						},
						{
							"name": "PY2Hierarchy"
						},
						{
							"name": "PY1Hierarchy"
						},
						{
							"name": "CYHierarchy"
						},
						{
							"name": "CYHierarchyCode"
						},
						{
							"name": "RemoveCYNA"
						},
						{
							"name": "CYHierSelect"
						},
						{
							"name": "PY1HierarchyCode"
						},
						{
							"name": "PY1HierSelect"
						},
						{
							"name": "PY2HierarchyCode"
						},
						{
							"name": "PY2HierSelect"
						},
						{
							"name": "PY3HierarchyCode"
						},
						{
							"name": "PY3HierSelect"
						},
						{
							"name": "Py1inCY"
						},
						{
							"name": "Py2inCY"
						},
						{
							"name": "Py3inCY"
						},
						{
							"name": "Py3inPY2"
						},
						{
							"name": "Py2inPY1"
						},
						{
							"name": "SetPY2Flags"
						},
						{
							"name": "SetPY3Flags"
						},
						{
							"name": "SetPY1Flags"
						},
						{
							"name": "SelectPY1HierarchyFlags"
						},
						{
							"name": "JoinPY1HierarchyInfo"
						},
						{
							"name": "AssignHierarchyCodes"
						},
						{
							"name": "JoinPY2HierarchyInfo"
						},
						{
							"name": "SelectPY2HierarchyFlags"
						},
						{
							"name": "SelectPY3HierarchyFlags"
						},
						{
							"name": "JoinPY3HierarchyInfo"
						},
						{
							"name": "SelectAllHierarchyColumnsCleanup"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "JoinCYHierarchyInfo"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectFinalWorkerHistoryCompare"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "CYtoPY1"
						},
						{
							"name": "filterCYtoPY1Groups"
						},
						{
							"name": "SetFlagForMappingCYtoPY1"
						},
						{
							"name": "PY1toPY2"
						},
						{
							"name": "filterPY1toPY2Groups"
						},
						{
							"name": "SetFlagForMappingPY1toPY2"
						},
						{
							"name": "PY2toPY3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "SetFlagForMappingPY2toPY3"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string (\"4\"),",
						"     Flow_Client_Dt as string (\"4\"),",
						"     Levels_Count as string (\"4\")",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"derivedSetHierarchyLvlScope select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
						"SelectCoreRecords filter({Event Year}==2021) ~> filterBaseYear",
						"SelectCoreRecords filter({Event Year}==2022) ~> filterBaseYearPlus1",
						"SelectCoreRecords filter({Event Year}==2023) ~> filterBaseYearPlus2",
						"SelectCoreRecords filter({Event Year}==2024) ~> filterBaseYearPlus3",
						"filterBaseYearPlus3 select(mapColumn(",
						"          {Yr 3 - Worker Id} = {Record Id},",
						"          {Yr 3 - Event Year} = {Event Year},",
						"          {Yr 3 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 3 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 3 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 3 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 3 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB3Hierarchy",
						"filterBaseYearPlus2 select(mapColumn(",
						"          {Yr 2 - Worker Id} = {Record Id},",
						"          {Yr 2 - Event Year} = {Event Year},",
						"          {Yr 2 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 2 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 2 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 2 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 2 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB2Hierarchy",
						"filterBaseYearPlus1 select(mapColumn(",
						"          {Yr 1 - Worker Id} = {Record Id},",
						"          {Yr 1 - Event Year} = {Event Year},",
						"          {Yr 1 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 1 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 1 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 1 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 1 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB1Hierarchy",
						"filterBaseYear select(mapColumn(",
						"          {Yr 0 - Worker Id} = {Record Id},",
						"          {Yr 0 - Event Year} = {Event Year},",
						"          {Yr 0 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 0 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 0 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 0 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 0 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB0Hierarchy",
						"SelectCoreRecords filter(1==1) ~> filterAllHCT",
						"filterAllHCT aggregate(groupBy({Worker Id} = {Record Id}),",
						"     {Record Count} = count({Record Id})) ~> UniqueWorkerIds",
						"UniqueWorkerIds select(mapColumn(",
						"          {Worker Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWorkerIds",
						"selectWorkerIds, selectB0Hierarchy join({Worker Id} == {Yr 0 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB0",
						"joinEachHCTYearB0, selectB1Hierarchy join({Worker Id} == {Yr 1 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB1",
						"joinEachHCTYearB1, selectB2Hierarchy join({Worker Id} == {Yr 2 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB2",
						"joinEachHCTYearB2, selectB3Hierarchy join({Worker Id} == {Yr 3 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB3",
						"derivedSetMappingLevels derive({Yr 0 - Hierarchy Code} = concat(concat(concat({Yr 0 - Business Group Level 1}, {Yr 0 - Business Group Level 2}),{Yr 0 - Business Group Level 3}),{Yr 0 - Business Group Level 4}),",
						"          {Yr 1 - Hierarchy Code} = concat(concat(concat({Yr 1 - Business Group Level 1}, {Yr 1 - Business Group Level 2}),{Yr 1 - Business Group Level 3}),{Yr 1 - Business Group Level 4}),",
						"          {Yr 2 - Hierarchy Code} = concat(concat(concat({Yr 1 - Business Group Level 1}, {Yr 2 - Business Group Level 2}),{Yr 2 - Business Group Level 3}),{Yr 2 - Business Group Level 4}),",
						"          {Yr 3 - Hierarchy Code} = concat(concat(concat({Yr 3 - Business Group Level 1}, {Yr 3 - Business Group Level 2}),{Yr 3 - Business Group Level 3}),{Yr 3 - Business Group Level 4}),",
						"          {Yr 0 to Yr 1 Lvl 1 Change} = iif({Yr 0 - Business Group Level 1}=={Yr 1 - Business Group Level 1},'N','Y'),",
						"          {Yr 0 to Yr 1 Lvl 2 Change} = iif({Yr 0 - Business Group Level 2}=={Yr 1 - Business Group Level 2},'N','Y'),",
						"          {Yr 0 to Yr 1 Lvl 3 Change} = iif({Yr 0 - Business Group Level 3}=={Yr 1 - Business Group Level 3},'N','Y'),",
						"          {Yr 0 to Yr 1 Lvl 4 Change} = iif({Yr 0 - Business Group Level 4}=={Yr 1 - Business Group Level 4},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 1 Change} = iif({Yr 1 - Business Group Level 1}=={Yr 1 - Business Group Level 1},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 2 Change} = iif({Yr 1 - Business Group Level 2}=={Yr 2 - Business Group Level 2},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 3 Change} = iif({Yr 1 - Business Group Level 3}=={Yr 2 - Business Group Level 3},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 4 Change} = iif({Yr 1 - Business Group Level 4}=={Yr 2 - Business Group Level 4},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 1 Change} = iif({Yr 1 - Business Group Level 1}=={Yr 3 - Business Group Level 1},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 2 Change} = iif({Yr 2 - Business Group Level 2}=={Yr 3 - Business Group Level 2},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 3 Change} = iif({Yr 2 - Business Group Level 3}=={Yr 3 - Business Group Level 3},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 4 Change} = iif({Yr 2 - Business Group Level 4}=={Yr 3 - Business Group Level 4},'N','Y'),",
						"          {Yr 0 to Yr 1 Job Change} = iif({Yr 0 - Job Title}=={Yr 1 - Job Title},'N','Y'),",
						"          {Yr 1 to Yr 2 Job Change} = iif({Yr 1 - Job Title}=={Yr 2 - Job Title},'N','Y'),",
						"          {Yr 2 to Yr 3 Job Change} = iif({Yr 2 - Job Title}=={Yr 3 - Job Title},'N','Y')) ~> derivedHierarchyChg",
						"derivedHierarchyCodeChg derive({Yr 0 to Yr 1 Transfer Possibility} = iif({Yr 0 to Yr 1 Hierarchy Code Change}=='Y',iif({Yr 0 to Yr 1 Job Change}=='Y','Y','N'),'N'),",
						"          {Yr 1 to Yr 2 Transfer Possibility} = iif({Yr 1 to Yr 2 Hierarchy Code Change}=='Y',iif({Yr 1 to Yr 2 Job Change}=='Y','Y','N'),'N'),",
						"          {Yr 2 to Yr 3 Transfer Possibility} = iif({Yr 2 to Yr 3 Hierarchy Code Change}=='Y',iif({Yr 2 to Yr 3 Job Change}=='Y','Y','N'),'N')) ~> derivedTransfer",
						"derivedHierarchyChg derive({Yr 0 to Yr 1 Hierarchy Code Change} = iif({Yr 0 - Hierarchy Code}=={Yr 1 - Hierarchy Code},'N','Y'),",
						"          {Yr 1 to Yr 2 Hierarchy Code Change} = iif({Yr 1 - Hierarchy Code}=={Yr 2 - Hierarchy Code},'N','Y'),",
						"          {Yr 2 to Yr 3 Hierarchy Code Change} = iif({Yr 2 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'N','Y')) ~> derivedHierarchyCodeChg",
						"derivedColumn2 select(mapColumn(",
						"          {Worker Id},",
						"          {Yr 0 - Event Year},",
						"          {Yr 0 - Business Group Level 1},",
						"          {Yr 0 - Business Group Level 2},",
						"          {Yr 0 - Business Group Level 3},",
						"          {Yr 0 - Business Group Level 4},",
						"          {Yr 0 - Job Title},",
						"          {Yr 1 - Event Year},",
						"          {Yr 1 - Business Group Level 1},",
						"          {Yr 1 - Business Group Level 2},",
						"          {Yr 1 - Business Group Level 3},",
						"          {Yr 1 - Business Group Level 4},",
						"          {Yr 1 - Job Title},",
						"          {Yr 2 - Event Year},",
						"          {Yr 2 - Business Group Level 1},",
						"          {Yr 2 - Business Group Level 2},",
						"          {Yr 2 - Business Group Level 3},",
						"          {Yr 2 - Business Group Level 4},",
						"          {Yr 2 - Job Title},",
						"          {Yr 3 - Event Year},",
						"          {Yr 3 - Business Group Level 1},",
						"          {Yr 3 - Business Group Level 2},",
						"          {Yr 3 - Business Group Level 3},",
						"          {Yr 3 - Business Group Level 4},",
						"          {Yr 3 - Job Title},",
						"          {Yr 0 - Hierarchy Code},",
						"          {Yr 1 - Hierarchy Code},",
						"          {Yr 2 - Hierarchy Code},",
						"          {Yr 3 - Hierarchy Code},",
						"          {Yr 0 to Yr 1 Lvl 1 Change},",
						"          {Yr 0 to Yr 1 Lvl 2 Change},",
						"          {Yr 0 to Yr 1 Lvl 3 Change},",
						"          {Yr 0 to Yr 1 Lvl 4 Change},",
						"          {Yr 1 to Yr 2 Lvl 1 Change},",
						"          {Yr 1 to Yr 2 Lvl 2 Change},",
						"          {Yr 1 to Yr 2 Lvl 3 Change},",
						"          {Yr 1 to Yr 2 Lvl 4 Change},",
						"          {Yr 2 to Yr 3 Lvl 1 Change},",
						"          {Yr 2 to Yr 3 Lvl 2 Change},",
						"          {Yr 2 to Yr 3 Lvl 3 Change},",
						"          {Yr 2 to Yr 3 Lvl 4 Change},",
						"          {Yr 0 to Yr 1 Job Change},",
						"          {Yr 1 to Yr 2 Job Change},",
						"          {Yr 2 to Yr 3 Job Change},",
						"          {Yr 0 to Yr 1 Hierarchy Code Change},",
						"          {Yr 1 to Yr 2 Hierarchy Code Change},",
						"          {Yr 2 to Yr 3 Hierarchy Code Change},",
						"          {Yr 0 to Yr 1 Transfer Possibility},",
						"          {Yr 1 to Yr 2 Transfer Possibility},",
						"          {Yr 2 to Yr 3 Transfer Possibility},",
						"          {Yr 0 Matches Yr 1},",
						"          {Yr 0 Matches Yr 2},",
						"          {Yr 0 Matches Yr 3},",
						"          {Yr 1 Matches Yr 2},",
						"          {Yr 1 Matches Yr 3},",
						"          {Yr 2 Matches Yr 3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHierarchyFlagOutput",
						"derivedTransfer derive({Yr 0 Matches Yr 1} = iif({Yr 0 - Hierarchy Code}=={Yr 1 - Hierarchy Code},'Y','N'),",
						"          {Yr 0 Matches Yr 2} = iif({Yr 0 - Hierarchy Code}=={Yr 2 - Hierarchy Code},'Y','N'),",
						"          {Yr 0 Matches Yr 3} = iif({Yr 0 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'Y','N'),",
						"          {Yr 1 Matches Yr 2} = iif({Yr 1 - Hierarchy Code}=={Yr 2 - Hierarchy Code},'Y','N'),",
						"          {Yr 1 Matches Yr 3} = iif({Yr 1 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'Y','N'),",
						"          {Yr 2 Matches Yr 3} = iif({Yr 2 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'Y','N')) ~> derivedColumn2",
						"filterBaseYear, selectHierarchyFlagOutput join({Record Id} == {Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive({Mapped Hierarchy Lvl 1} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},\r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},\r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},\r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 2} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 3} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 4} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4},'NO MAPPING' ))))) ~> Yr0SetMappingLogic",
						"Yr0PullOnlyMapped aggregate(groupBy({Yr 0 - Business Group Level 1},",
						"          {Yr 0 - Business Group Level 2},",
						"          {Yr 0 - Business Group Level 3},",
						"          {Yr 0 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year}),",
						"     {Record Count} = count({Record Id})) ~> Yr0SuggestedMapping",
						"Yr0SetMappingLogic filter(1==1) ~> Yr0PullOnlyMapped",
						"filterBaseYearPlus1, selectHierarchyFlagOutput join({Record Id} == {Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 derive({Mapped Hierarchy Lvl 1} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 2} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 3} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 4} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4},'NO MAPPING' ))))) ~> Yr1SetMappingLogic",
						"Yr1SetMappingLogic filter(1==1) ~> Yr1PullOnlyMapped",
						"Yr1PullOnlyMapped aggregate(groupBy({Yr 1 - Business Group Level 1},",
						"          {Yr 1 - Business Group Level 2},",
						"          {Yr 1 - Business Group Level 3},",
						"          {Yr 1 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year}),",
						"     {Record Count} = count({Record Id})) ~> Yr1SuggestedMapping",
						"Yr1SuggestedMapping select(mapColumn(",
						"          {Business Group Level 1} = {Yr 1 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 1 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 1 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 1 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr1Mapping",
						"Yr0SuggestedMapping select(mapColumn(",
						"          {Business Group Level 1} = {Yr 0 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 0 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 0 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 0 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr0Mapping",
						"selectYr0Mapping, selectYr1Mapping, selectYr2Mapping, selectYr3Mapping union(byName: true)~> union1",
						"union1 aggregate(groupBy({Event Year},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4}),",
						"     {Record Count} = sum({Record Count})) ~> aggregate1",
						"filterBaseYearPlus2, selectHierarchyFlagOutput join({Record Id} == {Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 derive({Mapped Hierarchy Lvl 1} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1},'NO MAPPING' )),",
						"          {Mapped Hierarchy Lvl 2} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2},'NO MAPPING' )),",
						"          {Mapped Hierarchy Lvl 3} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3},'NO MAPPING' )),",
						"          {Mapped Hierarchy Lvl 4} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4},'NO MAPPING' ))) ~> Yr2SetMappingLogic",
						"Yr2SetMappingLogic filter(1==1) ~> Yr2PullOnlyMapped",
						"Yr2PullOnlyMapped aggregate(groupBy({Yr 2 - Business Group Level 1},",
						"          {Yr 2 - Business Group Level 2},",
						"          {Yr 2 - Business Group Level 3},",
						"          {Yr 2 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year}),",
						"     {Record Count} = count({Record Id})) ~> Yr2SuggestedMapping",
						"Yr2SuggestedMapping select(mapColumn(",
						"          {Business Group Level 1} = {Yr 2 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 2 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 2 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 2 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Record Count},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr2Mapping",
						"selectB3Hierarchy aggregate(groupBy({Yr 3 - Business Group Level 1},",
						"          {Yr 3 - Business Group Level 2},",
						"          {Yr 3 - Business Group Level 3},",
						"          {Yr 3 - Business Group Level 4},",
						"          {Yr 3 - Event Year}),",
						"     {Record Count} = count({Yr 3 - Worker Id})) ~> Yr3SuggestedMapping",
						"derivedColumn3 select(mapColumn(",
						"          {Business Group Level 1} = {Yr 3 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 3 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 3 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 3 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year} = {Yr 3 - Event Year},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr3Mapping",
						"Yr3SuggestedMapping derive({Mapped Hierarchy Lvl 1} = {Yr 3 - Business Group Level 1},",
						"          {Mapped Hierarchy Lvl 2} = {Yr 3 - Business Group Level 2},",
						"          {Mapped Hierarchy Lvl 3} = {Yr 3 - Business Group Level 3},",
						"          {Mapped Hierarchy Lvl 4} = {Yr 3 - Business Group Level 4}) ~> derivedColumn3",
						"derivedCreateKeyForDupCheck aggregate(groupBy({Hierarchy Key}),",
						"     {Dup Key Count} = count({Hierarchy Key})) ~> HierarchyKeyCount",
						"aggregate1 aggregate(groupBy({Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4}),",
						"     {Record Count} = sum({Record Count})) ~> SumWithoutYear",
						"joinDuplicateCountInfo select(mapColumn(",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Total Record Count} = {Record Count},",
						"          {Duplicate Hierarchy Count} = {Dup Key Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMappingWithDupCount",
						"aggregate1 derive({Hierarchy Key} = concat(concat(concat({Business Group Level 1},{Business Group Level 2}),{Business Group Level 3}),{Business Group Level 4})) ~> derivedCreateKeyForDupCheck",
						"SumWithoutYear derive({Hierarchy Key} = concat(concat(concat({Business Group Level 1},{Business Group Level 2}),{Business Group Level 3}),{Business Group Level 4})) ~> derivedCreateKeyForDupCheck1",
						"derivedCreateKeyForDupCheck1, HierarchyKeyCount join(derivedCreateKeyForDupCheck1@{Hierarchy Key} == HierarchyKeyCount@{Hierarchy Key},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDuplicateCountInfo",
						"derivedSetNullHierarchyToNA derive({Yr 0 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 0 - Business Group Level 2},'N/A'),",
						"          {Yr 0 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 0 - Business Group Level 3},'N/A'),",
						"          {Yr 0 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 0 - Business Group Level 4},'N/A'),",
						"          {Yr 1 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 1 - Business Group Level 2},'N/A'),",
						"          {Yr 1 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 1 - Business Group Level 3},'N/A'),",
						"          {Yr 1 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 1 - Business Group Level 4},'N/A'),",
						"          {Yr 2 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 2 - Business Group Level 2},'N/A'),",
						"          {Yr 2 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 2 - Business Group Level 3},'N/A'),",
						"          {Yr 2 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 2 - Business Group Level 4},'N/A'),",
						"          {Yr 3 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 3 - Business Group Level 2},'N/A'),",
						"          {Yr 3 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 3 - Business Group Level 3},'N/A'),",
						"          {Yr 3 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 3 - Business Group Level 4},'N/A')) ~> derivedSetMappingLevels",
						"filter1 derive({Business Group Level 2} = iif($Levels_Count=='2'|| $Levels_Count=='3' || $Levels_Count=='4',{Business Group Level 2},'N/A'),",
						"          {Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Business Group Level 3},'N/A'),",
						"          {Business Group Level 4} = iif($Levels_Count=='4',{Business Group Level 4},'N/A')) ~> derivedSetHierarchyLvlScope",
						"AllCoreData filter(1==1) ~> filter1",
						"joinEachHCTYearB3 derive({Yr 0 - Business Group Level 1} = iif(isNull({Yr 0 - Business Group Level 1}),'N/A',{Yr 0 - Business Group Level 1}),",
						"          {Yr 0 - Business Group Level 2} = iif(isNull({Yr 0 - Business Group Level 2}),'N/A',{Yr 0 - Business Group Level 2}),",
						"          {Yr 0 - Business Group Level 3} = iif(isNull({Yr 0 - Business Group Level 3}),'N/A',{Yr 0 - Business Group Level 3}),",
						"          {Yr 0 - Business Group Level 4} = iif(isNull({Yr 0 - Business Group Level 4}),'N/A',{Yr 0 - Business Group Level 4}),",
						"          {Yr 1 - Business Group Level 1} = iif(isNull({Yr 1 - Business Group Level 1}),'N/A',{Yr 1 - Business Group Level 1}),",
						"          {Yr 1 - Business Group Level 2} = iif(isNull({Yr 1 - Business Group Level 2}),'N/A',{Yr 1 - Business Group Level 2}),",
						"          {Yr 1- Business Group Level 3} = iif(isNull({Yr 1 - Business Group Level 3}),'N/A',{Yr 1 - Business Group Level 3}),",
						"          {Yr 1 - Business Group Level 4} = iif(isNull({Yr 1 - Business Group Level 4}),'N/A',{Yr 1 - Business Group Level 4}),",
						"          {Yr 2 - Business Group Level 1} = iif(isNull({Yr 2 - Business Group Level 1}),'N/A',{Yr 2 - Business Group Level 1}),",
						"          {Yr 2 - Business Group Level 2} = iif(isNull({Yr 2 - Business Group Level 2}),'N/A',{Yr 2 - Business Group Level 2}),",
						"          {Yr 2 - Business Group Level 3} = iif(isNull({Yr 2 - Business Group Level 3}),'N/A',{Yr 2 - Business Group Level 3}),",
						"          {Yr 2 - Business Group Level 4} = iif(isNull({Yr 2 - Business Group Level 4}),'N/A',{Yr 2 - Business Group Level 4}),",
						"          {Yr 3 - Business Group Level 1} = iif(isNull({Yr 3 - Business Group Level 1}),'N/A',{Yr 3 - Business Group Level 1}),",
						"          {Yr 3 - Business Group Level 2} = iif(isNull({Yr 3 - Business Group Level 2}),'N/A',{Yr 3 - Business Group Level 2}),",
						"          {Yr 3 - Business Group Level 3} = iif(isNull({Yr 3 - Business Group Level 3}),'N/A',{Yr 3 - Business Group Level 3}),",
						"          {Yr 3 - Business Group Level 4} = iif(isNull({Yr 3 - Business Group Level 4}),'N/A',{Yr 3 - Business Group Level 4}),",
						"          {Yr 0 - Job Title} = iif(isNull({Yr 0 - Job Title}),'N/A',{Yr 0 - Job Title}),",
						"          {Yr 1 - Job Title} = iif(isNull({Yr 1 - Job Title}),'N/A',{Yr 1 - Job Title}),",
						"          {Yr 2 - Job Title} = iif(isNull({Yr 2 - Job Title}),'N/A',{Yr 2 - Job Title}),",
						"          {Yr 3 - Job Title} = iif(isNull({Yr 3 - Job Title}),'N/A',{Yr 3 - Job Title})) ~> derivedSetNullHierarchyToNA",
						"joinEachHCTYearB3 aggregate(groupBy({CY - Business Group Level 1} = {Yr 3 - Business Group Level 1},",
						"          {CY - Business Group Level 2} = {Yr 3 - Business Group Level 2},",
						"          {CY - Business Group Level 3} = {Yr 3 - Business Group Level 3},",
						"          {CY - Business Group Level 4} = {Yr 3 - Business Group Level 4},",
						"          {PY1 - Business Group Level 1} = {Yr 2 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2} = {Yr 2 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3} = {Yr 2 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4} = {Yr 2 - Business Group Level 4},",
						"          {PY2 - Business Group Level 1} = {Yr 1 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2} = {Yr 1 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3} = {Yr 1 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4} = {Yr 1 - Business Group Level 4},",
						"          {PY3 - Business Group Level 1} = {Yr 0 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2} = {Yr 0 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3} = {Yr 0 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4} = {Yr 0 - Business Group Level 4}),",
						"     WorkerCount = count({Worker Id})) ~> aggregate2",
						"selectHierarchyFlagOutput select(mapColumn(",
						"          {Worker Id},",
						"          {CY - Event Year} = {Yr 3 - Event Year},",
						"          {CY - Business Group Level 1} = {Yr 3 - Business Group Level 1},",
						"          {CY - Business Group Level 2} = {Yr 3 - Business Group Level 2},",
						"          {CY - Business Group Level 3} = {Yr 3 - Business Group Level 3},",
						"          {CY - Business Group Level 4} = {Yr 3 - Business Group Level 4},",
						"          {CY - Job Title} = {Yr 3 - Job Title},",
						"          {PY1 to CY Job Change} = {Yr 2 to Yr 3 Job Change},",
						"          {PY1 to CY Hierarchy Code Change} = {Yr 2 to Yr 3 Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility} = {Yr 2 to Yr 3 Transfer Possibility},",
						"          {PY1 - Event Year} = {Yr 2 - Event Year},",
						"          {PY1 - Business Group Level 1} = {Yr 2 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2} = {Yr 2 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3} = {Yr 2 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4} = {Yr 2 - Business Group Level 4},",
						"          {PY1 - Job Title} = {Yr 2 - Job Title},",
						"          {PY2 to PY1 Job Change} = {Yr 1 to Yr 2 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change} = {Yr 1 to Yr 2 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility} = {Yr 1 to Yr 2 Transfer Possibility},",
						"          {PY2 - Event Year} = {Yr 1 - Event Year},",
						"          {PY2 - Business Group Level 1} = {Yr 1 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2} = {Yr 1 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3} = {Yr 1 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4} = {Yr 1 - Business Group Level 4},",
						"          {PY2 - Job Title} = {Yr 1 - Job Title},",
						"          {PY3 to PY2 Job Change} = {Yr 0 to Yr 1 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change} = {Yr 0 to Yr 1 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility} = {Yr 0 to Yr 1 Transfer Possibility},",
						"          {PY3 - Event Year} = {Yr 0 - Event Year},",
						"          {PY3 - Business Group Level 1} = {Yr 0 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2} = {Yr 0 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3} = {Yr 0 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4} = {Yr 0 - Business Group Level 4},",
						"          {PY3 - Job Title} = {Yr 0 - Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy({PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> PY3Hierarchy",
						"select1 aggregate(groupBy({PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> PY2Hierarchy",
						"select1 aggregate(groupBy({PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> PY1Hierarchy",
						"select1 aggregate(groupBy({CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> CYHierarchy",
						"CYHierarchy derive(CYHierarchyCode = concat(concat(concat({CY - Business Group Level 1},{CY - Business Group Level 2}),{CY - Business Group Level 3}),{CY - Business Group Level 4})) ~> CYHierarchyCode",
						"CYHierarchyCode filter({CY - Business Group Level 1}!=\"N/A\") ~> RemoveCYNA",
						"RemoveCYNA select(mapColumn(",
						"          CYHierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CYHierSelect",
						"PY1Hierarchy derive(PY1HierarchyCode = concat(concat(concat({PY1 - Business Group Level 1},{PY1 - Business Group Level 2}),{PY1 - Business Group Level 3}),{PY1 - Business Group Level 4})) ~> PY1HierarchyCode",
						"PY1HierarchyCode select(mapColumn(",
						"          PY1HierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PY1HierSelect",
						"PY2Hierarchy derive(PY2HierarchyCode = concat(concat(concat({PY2 - Business Group Level 1},{PY2 - Business Group Level 2}),{PY2 - Business Group Level 3}),{PY2 - Business Group Level 4})) ~> PY2HierarchyCode",
						"PY2HierarchyCode select(mapColumn(",
						"          PY2HierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PY2HierSelect",
						"PY3Hierarchy derive(PY2HierarchyCode = concat(concat(concat({PY3 - Business Group Level 1},{PY3 - Business Group Level 2}),{PY3 - Business Group Level 3}),{PY3 - Business Group Level 4})) ~> PY3HierarchyCode",
						"PY3HierarchyCode select(mapColumn(",
						"          PY3HierarchyCode = PY2HierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PY3HierSelect",
						"PY1HierSelect, CYHierSelect lookup(PY1HierarchyCode == CYHierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py1inCY",
						"PY2HierSelect, CYHierSelect lookup(PY2HierarchyCode == CYHierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py2inCY",
						"PY3HierSelect, CYHierSelect lookup(PY3HierarchyCode == CYHierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py3inCY",
						"Py3inCY, PY2HierSelect lookup(PY3HierarchyCode == PY2HierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py3inPY2",
						"Py2inCY, PY1HierSelect lookup(PY2HierarchyCode == PY1HierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py2inPY1",
						"Py2inPY1 derive(PY2InCYHierarachy = iif(not(isNull(CYHierarchyCode)), 'Y','N'),",
						"          PY2InPY1Hierarachy = iif(not(isNull(PY1HierarchyCode)), 'Y','N')) ~> SetPY2Flags",
						"Py3inPY2 derive(PY3InCYHierarachy = iif(not(isNull(CYHierarchyCode)), 'Y','N'),",
						"          PY3InPY2Hierarachy = iif(not(isNull(PY2HierarchyCode)), 'Y','N')) ~> SetPY3Flags",
						"Py1inCY derive(PY1InCYHierarachy = iif(not(isNull(CYHierarchyCode)), 'Y','N')) ~> SetPY1Flags",
						"SetPY1Flags select(mapColumn(",
						"          {PY1 Hierarchy Code} = PY1HierarchyCode,",
						"          {PY1 In CY Hierarachy} = PY1InCYHierarachy,",
						"          {PY1 Worker Count} = PY1HierSelect@{Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPY1HierarchyFlags",
						"AssignHierarchyCodes, SelectPY1HierarchyFlags join(PY1HierarchyCode == {PY1 Hierarchy Code},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPY1HierarchyInfo",
						"select1 derive(CYHierarchyCode = concat(concat(concat({CY - Business Group Level 1},{CY - Business Group Level 2}),{CY - Business Group Level 3}),{CY - Business Group Level 4}),",
						"          PY1HierarchyCode = concat(concat(concat({PY1 - Business Group Level 1},{PY1 - Business Group Level 2}),{PY1 - Business Group Level 3}),{PY1 - Business Group Level 4}),",
						"          PY2HierarchyCode = concat(concat(concat({PY2 - Business Group Level 1},{PY2 - Business Group Level 2}),{PY2 - Business Group Level 3}),{PY2 - Business Group Level 4}),",
						"          PY3HierarchyCode = concat(concat(concat({PY3 - Business Group Level 1},{PY3 - Business Group Level 2}),{PY3 - Business Group Level 3}),{PY3 - Business Group Level 4})) ~> AssignHierarchyCodes",
						"JoinPY1HierarchyInfo, SelectPY2HierarchyFlags join(PY2HierarchyCode == {PY2 Hierarchy Code},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPY2HierarchyInfo",
						"SetPY2Flags select(mapColumn(",
						"          {PY2 Hierarchy Code} = PY2HierarchyCode,",
						"          {PY2 In CY Hierarachy} = PY2InCYHierarachy,",
						"          {PY2 In PY1 Hierarachy} = PY2InPY1Hierarachy,",
						"          {Worker Count} = PY2HierSelect@{Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPY2HierarchyFlags",
						"SetPY3Flags select(mapColumn(",
						"          {PY3 Hierarchy Code} = PY3HierarchyCode,",
						"          {Worker Count} = PY3HierSelect@{Worker Count},",
						"          {PY3 In CY Hierarachy} = PY3InCYHierarachy,",
						"          {PY3 In PY2 Hierarachy} = PY3InPY2Hierarachy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPY3HierarchyFlags",
						"JoinPY2HierarchyInfo, SelectPY3HierarchyFlags join(PY3HierarchyCode == {PY3 Hierarchy Code},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPY3HierarchyInfo",
						"JoinCYHierarchyInfo select(mapColumn(",
						"          {Worker Id},",
						"          {CY - Event Year},",
						"          {CY - Hierarchy Code} = AssignHierarchyCodes@CYHierarchyCode,",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy} = CYHierSelect@{Worker Count},",
						"          {CY - Job Title},",
						"          {PY1 to CY Job Change},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code} = PY1HierarchyCode,",
						"          {PY1 - In CY Hierarachy} = {PY1 In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy} = {PY1 Worker Count},",
						"          {PY1 - Job Title},",
						"          {PY2 to PY1 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code} = PY2HierarchyCode,",
						"          {PY2 - In CY Hierarachy} = {PY2 In CY Hierarachy},",
						"          {PY2 - In PY1 Hierarachy} = {PY2 In PY1 Hierarachy},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Workers In Hierarchy} = SelectPY2HierarchyFlags@{Worker Count},",
						"          {PY2 - Job Title},",
						"          {PY3 to PY2 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code} = PY3HierarchyCode,",
						"          {PY3 - In CY Hierarachy} = {PY3 In CY Hierarachy},",
						"          {PY3 - In PY2 Hierarachy} = {PY3 In PY2 Hierarachy},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4},",
						"          {PY3 - Workers In Hierarchy} = SelectPY3HierarchyFlags@{Worker Count},",
						"          {PY3 - Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllHierarchyColumnsCleanup",
						"SelectAllHierarchyColumnsCleanup aggregate(groupBy({Worker Id},",
						"          {CY - Event Year},",
						"          {CY - Hierarchy Code},",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy},",
						"          {CY - Job Title},",
						"          {PY1 to CY Job Change},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy},",
						"          {PY1 - Job Title},",
						"          {PY2 to PY1 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - In CY Hierarachy},",
						"          {PY2 - In PY1 Hierarachy},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Workers In Hierarchy},",
						"          {PY2 - Job Title},",
						"          {PY3 to PY2 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code},",
						"          {PY3 - In CY Hierarachy},",
						"          {PY3 - In PY2 Hierarachy},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4},",
						"          {PY3 - Workers In Hierarchy},",
						"          {PY3 - Job Title}),",
						"     {Record Count} = count({Worker Id})) ~> aggregate3",
						"JoinPY3HierarchyInfo, CYHierSelect join(AssignHierarchyCodes@CYHierarchyCode == CYHierSelect@CYHierarchyCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCYHierarchyInfo",
						"aggregate3 derive({CY - Percentage of PY1 Employees} = (divide({CY - Workers In Hierarchy},{PY1 - Workers In Hierarchy}))*100,",
						"          {PY1 - Percentage of PY2 Employees} = (divide({PY1 - Workers In Hierarchy},{PY2 - Workers In Hierarchy}))*100,",
						"          {PY2 - Percentage of PY3 Employees} = (divide({PY2 - Workers In Hierarchy},{PY3 - Workers In Hierarchy}))*100) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          {Worker Id},",
						"          {CY - Event Year},",
						"          {CY - Hierarchy Code},",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy},",
						"          {CY - Percentage of PY1 Employees},",
						"          {CY - Job Title},",
						"          {PY1 to CY Job Change},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy},",
						"          {PY1 - Percentage of PY2 Employees},",
						"          {PY1 - Job Title},",
						"          {PY2 to PY1 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - In CY Hierarachy},",
						"          {PY2 - In PY1 Hierarachy},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Workers In Hierarchy},",
						"          {PY2 - Percentage of PY3 Employees},",
						"          {PY2 - Job Title},",
						"          {PY3 to PY2 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code},",
						"          {PY3 - In CY Hierarachy},",
						"          {PY3 - In PY2 Hierarachy},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4},",
						"          {PY3 - Workers In Hierarchy},",
						"          {PY3 - Job Title},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalWorkerHistoryCompare",
						"SelectFinalWorkerHistoryCompare derive({CY - Percentage of PY1 Employees} = round({CY - Percentage of PY1 Employees}),",
						"          {PY1 - Percentage of PY2 Employees} = round({PY1 - Percentage of PY2 Employees}),",
						"          {PY2 - Percentage of PY3 Employees} = round({PY2 - Percentage of PY3 Employees})) ~> derivedColumn6",
						"derivedColumn6 aggregate(groupBy({CY - Event Year},",
						"          {CY - Hierarchy Code},",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy},",
						"          {CY - Percentage of PY1 Employees},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4}),",
						"     {Record Count} = count({Worker Id})) ~> CYtoPY1",
						"CYtoPY1 filter({PY1 - In CY Hierarachy}==\"N\" && {PY1 - Business Group Level 1}!=\"N/A\") ~> filterCYtoPY1Groups",
						"filterCYtoPY1Groups derive({Map PY1 to CY} = iif({CY - Percentage of PY1 Employees}>=60,'Y','N')) ~> SetFlagForMappingCYtoPY1",
						"derivedColumn6 aggregate(groupBy({PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy},",
						"          {PY1 - Percentage of PY2 Employees},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 - In PY1 Hierarachy},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4}),",
						"     {Record Count} = count({Worker Id})) ~> PY1toPY2",
						"PY1toPY2 filter({PY2 - In PY1 Hierarachy}==\"N\" && {PY2 - Business Group Level 1}!=\"N/A\") ~> filterPY1toPY2Groups",
						"filterPY1toPY2Groups derive({Map PY2 to PY1} = iif({PY1 - Percentage of PY2 Employees}>=60,'Y','N')) ~> SetFlagForMappingPY1toPY2",
						"derivedColumn6 aggregate(groupBy({PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Percentage of PY3 Employees},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 - In PY2 Hierarachy},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4}),",
						"     {Record Count} = count({Worker Id})) ~> PY2toPY3",
						"PY2toPY3 filter({PY3 - In PY2 Hierarachy}==\"N\" && {PY3 - Business Group Level 1}!=\"N/A\") ~> filter2",
						"filter2 derive({Map PY3 to PY2} = iif({PY2 - Percentage of PY3 Employees}>=60,'Y','N')) ~> SetFlagForMappingPY2toPY3",
						"selectMappingWithDupCount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['Business Mapping Suggestions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"selectHierarchyFlagOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['Business Mapping Suggestions Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['FullHierarchyList.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"derivedColumn6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['WorkerHierarchyDetailbyYr.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink4"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMappingTableClient"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputMappingToPrepFldr"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputMappingToWorkingFldr"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotCorpTitleEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnCorpTitle"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectExistingCorpTitleMapping"
						},
						{
							"name": "JoinCurrCorpTitle"
						},
						{
							"name": "select5"
						},
						{
							"name": "join5"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select6"
						},
						{
							"name": "JoinPrevCorpTitle"
						},
						{
							"name": "select7"
						},
						{
							"name": "join6"
						},
						{
							"name": "select8"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "PullCorpTitleValuesNotInCurrTitleField"
						},
						{
							"name": "UnionCurrAndPrevCorpTitleRows"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectCorpTitleColumns"
						},
						{
							"name": "select10"
						},
						{
							"name": "AddReqDerivedForUnion"
						},
						{
							"name": "JoinCoreAndReqRecords"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "AddReqDBDerivedForUnion"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CorpTitleMappingTableClient",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn4 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotCorpTitleEventTime",
						"derivedColumn5 sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotCorpTitleEventTime sort(asc({Client Corporate Title}, true)) ~> SortOnCorpTitle",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientCorpTitle} = ClientCorpTitle,",
						"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId,",
						"          ClientEngagementDt),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle} = {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorporateTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorporateTitle} = {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorporateTitleSort} = {Unique ElloreeCorpTitleSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingCorpTitleMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Corporate Title} == {Unique ClientCorpTitle},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrCorpTitle",
						"JoinCurrCorpTitle select(mapColumn(",
						"          {Client Corporate Title} = {Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Client Elloree Corporate Title} = {Unique ClientElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title} = {Unique ElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title Sort} = {Unique ElloreeCorpTitleSortId},",
						"          {Worker ID} = RecordID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join5",
						"select6 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
						"          {Corporate Title (Current or Previous)} = 'Curr Title') ~> derivedColumn2",
						"join5 select(mapColumn(",
						"          {Client Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle},",
						"          {Unique ClientElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitleSort}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Previous Corporate Title} == {Unique ClientCorpTitle},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPrevCorpTitle",
						"JoinPrevCorpTitle select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title} = {Previous Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
						"          {Suggested ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId},",
						"          {Suggested ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Worker ID} = RecordID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join6",
						"join6 select(mapColumn(",
						"          {Client Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title} = {Suggested ClientElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title} = {Suggested ElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title Sort} = {Suggested ElloreeCorpTitleSortId},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle},",
						"          {Unique ClientElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitleSort}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"select8 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
						"          {Corporate Title (Current or Previous)} = 'Prev Title') ~> derivedColumn3",
						"select11, derivedColumn2 exists(select11@{Client Corporate Title} == select6@{Client Corporate Title},",
						"     negate:true,",
						"     broadcast: 'both')~> PullCorpTitleValuesNotInCurrTitleField",
						"derivedColumn2, PullCorpTitleValuesNotInCurrTitleField union(byName: true)~> UnionCurrAndPrevCorpTitleRows",
						"UnionCurrAndPrevCorpTitleRows derive({Event and Year} = concat({Event and Year},concat(' ',{Corporate Title (Current or Previous)}))) ~> derivedColumn4",
						"Requisitions select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Corporate Title},",
						"          {Event Year},",
						"          Event,",
						"          RecordID = {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleColumns",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          RecordID = {Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"SelectCorpTitleColumns derive({Previous Corporate Title} = 'N/A') ~> AddReqDerivedForUnion",
						"select10, AddReqDerivedForUnion, AddReqDBDerivedForUnion, selectCoreDBRecs union(byName: true)~> JoinCoreAndReqRecords",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          RecordID = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Corporate Title} = CorpTitle,",
						"          {Previous Corporate Title} = PrevCorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          RecordID = ReqId,",
						"          {Corporate Title} = CorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"JoinCoreAndReqRecords aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          RecordID),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Corporate Title} = '',",
						"          {Elloree Corporate Title Sort} = '',",
						"          {Client Elloree Corporate Title} = '') ~> derivedColumn5",
						"selectReqDBRecs derive({Previous Corporate Title} = 'N/A') ~> AddReqDBDerivedForUnion",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          CorpTitle),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          CorpTitle,",
						"          PrevCorpTitle),",
						"     TotWorkers = count(WorkerId)) ~> aggregate2",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientCorpTitle} = {Unique ClientCorpTitle},",
						"          {Count Unique ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Count Unique ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
						"          {Count Unique ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientCorpTitle} == {Count Unique ClientCorpTitle}",
						"     && {Unique ClientElloreeCorpTitle} == {Count Unique ClientElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitle} == {Count Unique ElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitleSortId} == {Count Unique ElloreeCorpTitleSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          ClientEngagementDt,",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}),",
						"     ClientIDCount = max(ClientIDCount),",
						"          ClientEngagementDt = max(ClientEngagementDt)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientCorpTitle} = {Unique ClientCorpTitle}),",
						"     {Agg Unique ClientElloreeCorpTitle} = first({Unique ClientElloreeCorpTitle}),",
						"          {Agg Unique ElloreeCorpTitle} = first({Unique ElloreeCorpTitle}),",
						"          {Agg Unique ElloreeCorpTitleSortId} = first({Unique ElloreeCorpTitleSortId})) ~> aggregate3",
						"SelectMappingWithMostClients, aggregate3 join({Unique ClientCorpTitle} == {Agg Unique ClientCorpTitle}",
						"     && {Unique ClientElloreeCorpTitle} == {Agg Unique ClientElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitle} == {Agg Unique ElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitleSortId} == {Agg Unique ElloreeCorpTitleSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"CorpTitleMappingTableClient filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"CorpTitleMappingTableClient filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientCorpTitle} = ClientCorpTitle,",
						"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId,",
						"          ClientEngagementDt),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"derivedColumn3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Worker ID},",
						"          {Corporate Title (Current or Previous)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_corp_title_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMappingToPrepFldr",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['corp_title_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMappingToWorkingFldr"
					]
				}
			},
			"dependsOn": []
		}
	]
}