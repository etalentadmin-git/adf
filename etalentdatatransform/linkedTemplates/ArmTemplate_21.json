{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Test_Black')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Test",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'All',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, women',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, men',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherFact_Evergreen')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Adhoc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreForSupplement"
						},
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutPutFactTable"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "FilterSurveyValuesCulture"
						},
						{
							"name": "SelectValuesCulture1P"
						},
						{
							"name": "FilterSurveyGoals"
						},
						{
							"name": "SelectGoalsCurr"
						},
						{
							"name": "FilterValues"
						},
						{
							"name": "SelectValuesCurr"
						},
						{
							"name": "HCTCurrent"
						},
						{
							"name": "HCT1P"
						},
						{
							"name": "HCT2P"
						},
						{
							"name": "WorkerID1P"
						},
						{
							"name": "WorkerID2P"
						},
						{
							"name": "HCTin1P"
						},
						{
							"name": "HCTin2P"
						},
						{
							"name": "JoinElloreeRace"
						},
						{
							"name": "JoinElloreeGender"
						},
						{
							"name": "SelectAllCore"
						},
						{
							"name": "HCTCurrMgr"
						},
						{
							"name": "HCT1PMgr"
						},
						{
							"name": "HCT2PMgr"
						},
						{
							"name": "unionAllWorkerMgr"
						},
						{
							"name": "GroupWorkerMgrCombo"
						},
						{
							"name": "SeleceWorkerMgrCombo"
						},
						{
							"name": "WorkerMgrCount"
						},
						{
							"name": "JoinMgrCount"
						},
						{
							"name": "SelectHCTCleanup"
						},
						{
							"name": "filter2"
						},
						{
							"name": "SelectGoalsImpactReach1P"
						},
						{
							"name": "filter3"
						},
						{
							"name": "SelectGoalsSeizeOpp1P"
						},
						{
							"name": "JoinGoalValCurr"
						},
						{
							"name": "JoinGoalImpactSeize1P"
						},
						{
							"name": "FilterSurveyGoalsSeize1P"
						},
						{
							"name": "FilterSurveyGoalsSeize2P"
						},
						{
							"name": "SelectGoalsSeizeOpp2P"
						},
						{
							"name": "FilterSurveyGoalsImpactReach1P"
						},
						{
							"name": "FilterSurveyGoalsSeize2PVal"
						},
						{
							"name": "SelectGoalsImpactReach2P"
						},
						{
							"name": "FilterSurveyGoalsCurr"
						},
						{
							"name": "FilterSurveyValuesCurr"
						},
						{
							"name": "JoinTalentTag"
						},
						{
							"name": "FilterSurveyValuesCulture1P"
						},
						{
							"name": "FilterSurveyValuesCulture2P"
						},
						{
							"name": "SelectValuesCulture2P"
						},
						{
							"name": "FilterValuesWorksCollab"
						},
						{
							"name": "FilterValuesWorksCollab1PYear"
						},
						{
							"name": "SelectValuesWorksCollab1PYear"
						},
						{
							"name": "FilterValuesWorksCollab2PYear"
						},
						{
							"name": "SelectValuesWorksCollab2PYear"
						},
						{
							"name": "FilterPotential"
						},
						{
							"name": "FilterPotentialCurr"
						},
						{
							"name": "SelectPotentialCurr"
						},
						{
							"name": "FilterPotentialBroaderResp"
						},
						{
							"name": "FilterPotentialBroadResp1P"
						},
						{
							"name": "SelectPotentialBroadResp1P"
						},
						{
							"name": "FilterPotentialBroadResp2P"
						},
						{
							"name": "SelectPotentialBroadResp2P"
						},
						{
							"name": "FilterPotentialLearningInnov"
						},
						{
							"name": "FilterPotentialLearnInnov2P"
						},
						{
							"name": "SelectPotentialLearnInnov2P"
						},
						{
							"name": "FilterPotentialLearnInnov1P"
						},
						{
							"name": "SelectPotentialLearnInnov1P"
						},
						{
							"name": "JoinGoalImpactSeize2P"
						},
						{
							"name": "JoinGoalImpactReach1P"
						},
						{
							"name": "JoinGoalImpactReach2P"
						},
						{
							"name": "JoinValuesCurr"
						},
						{
							"name": "JoinValuesCulture1P"
						},
						{
							"name": "JoinValuesCulture2P"
						},
						{
							"name": "JoinValuesWorksCollab1PYear"
						},
						{
							"name": "JoinValuesWorksCollab2PYear"
						},
						{
							"name": "JoinPotentialCurr"
						},
						{
							"name": "JoinPotentialBroadResp1P"
						},
						{
							"name": "JoinPotentialBroadResp2P"
						},
						{
							"name": "JoinPotentialLearnInnov1P"
						},
						{
							"name": "JoinPotentialLearnInnov2P"
						},
						{
							"name": "SelectFinalOutput"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> OtherCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT'\"),",
						"     format: 'query') ~> CoreForSupplement",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EthnicityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EthnicityMap",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[GenderMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> GenderMap",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
						"          {Emp Curr Elloree Perf Rating} = CurrElloreePerfRating,",
						"          {Emp P1 Elloree Perf Rating} = P1ElloreePerfRating,",
						"          {Emp P2 Elloree Perf Rating} = P2ElloreePerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"OtherCore filter(EventType=='Values - Culture and Values') ~> FilterSurveyValuesCulture",
						"FilterSurveyValuesCulture1P select(mapColumn(",
						"          WorkerId,",
						"          {Values 1P (Culture and Values)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesCulture1P",
						"OtherCore filter(EventType=='Goals') ~> FilterSurveyGoals",
						"FilterSurveyGoalsCurr select(mapColumn(",
						"          WorkerId,",
						"          {Goals Curr} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsCurr",
						"OtherCore filter(EventType=='Values') ~> FilterValues",
						"FilterSurveyValuesCurr select(mapColumn(",
						"          WorkerId,",
						"          {Values Curr} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesCurr",
						"SelectAllCore, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCTCurrent",
						"SelectAllCore, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCT1P",
						"SelectAllCore, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCT2P",
						"HCT1P select(mapColumn(",
						"          {WorkerId 1P} = WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WorkerID1P",
						"HCT2P select(mapColumn(",
						"          {WorkerId 2P} = WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WorkerID2P",
						"HCTCurrent, WorkerID1P join(WorkerId == {WorkerId 1P},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCTin1P",
						"HCTin1P, WorkerID2P join(WorkerId == {WorkerId 2P},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCTin2P",
						"CoreForSupplement, EthnicityMap join(Race == ClientRace",
						"     && HispanicLatinoOrigin == ClientHispanicLatinoOrigin,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinElloreeRace",
						"JoinElloreeRace, GenderMap join(Gender == ClientGender,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinElloreeGender",
						"JoinTalentTag select(mapColumn(",
						"          ClientId = CoreForSupplement@ClientId,",
						"          ClientEngagementDt = CoreForSupplement@ClientEngagementDt,",
						"          WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventType,",
						"          EventReason,",
						"          WorkerStatus,",
						"          WorkerType,",
						"          JobTitle,",
						"          JobFunction,",
						"          YearsinJob,",
						"          PrevJobTitle,",
						"          PrevJobFunction,",
						"          LastPromoDt,",
						"          OrigHireDt,",
						"          CurrHireDt,",
						"          RehireInd,",
						"          YearsofSrvc,",
						"          YearsofSrvcBand,",
						"          YearsofSrvcBandSortId,",
						"          CorpTitle,",
						"          PrevCorpTitle,",
						"          ManagerInd,",
						"          DirectMgrWorkerId,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          LegacyOrg,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          Race,",
						"          HispanicLatinoOrigin,",
						"          Gender,",
						"          Veteran,",
						"          LGBTQ,",
						"          DisabilityInd,",
						"          BirthYear,",
						"          Generation,",
						"          GenerationSortId,",
						"          EmpCount,",
						"          ElloreeRace,",
						"          ElloreeHispanicLatinoOrigin,",
						"          ElloreeGender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllCore",
						"HCTCurrent select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HCTCurrMgr",
						"HCT1P select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HCT1PMgr",
						"HCT2P select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HCT2PMgr",
						"HCTCurrMgr, HCT1PMgr, HCT2PMgr union(byName: true)~> unionAllWorkerMgr",
						"unionAllWorkerMgr aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(DirectMgrWorkerId)) ~> GroupWorkerMgrCombo",
						"GroupWorkerMgrCombo select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SeleceWorkerMgrCombo",
						"SeleceWorkerMgrCombo aggregate(groupBy(WorkerId),",
						"     MgrCount = count(DirectMgrWorkerId)) ~> WorkerMgrCount",
						"HCTin2P, WorkerMgrCount join(SelectAllCore@WorkerId == WorkerMgrCount@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMgrCount",
						"JoinMgrCount select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId = SelectAllCore@WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventType,",
						"          EventReason,",
						"          WorkerStatus,",
						"          WorkerType,",
						"          JobTitle,",
						"          JobFunction,",
						"          YearsinJob,",
						"          PrevJobTitle,",
						"          PrevJobFunction,",
						"          LastPromoDt,",
						"          OrigHireDt,",
						"          CurrHireDt,",
						"          RehireInd,",
						"          YearsofSrvc,",
						"          YearsofSrvcBand,",
						"          YearsofSrvcBandSortId,",
						"          CorpTitle,",
						"          PrevCorpTitle,",
						"          ManagerInd,",
						"          DirectMgrWorkerId,",
						"          MgrCount,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          LegacyOrg,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          Race,",
						"          ElloreeRace,",
						"          HispanicLatinoOrigin,",
						"          Gender,",
						"          ElloreeGender,",
						"          Veteran,",
						"          LGBTQ,",
						"          DisabilityInd,",
						"          BirthYear,",
						"          Generation,",
						"          GenerationSortId,",
						"          EmpCount,",
						"          ElloreeHispanicLatinoOrigin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHCTCleanup",
						"OtherCore filter(EventType=='Impact - Reach Qtrly Goals') ~> filter2",
						"FilterSurveyGoalsImpactReach1P select(mapColumn(",
						"          WorkerId,",
						"          {Goals 1P (Impact Reach) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsImpactReach1P",
						"OtherCore filter(EventType=='Impact - Seize Opportunities') ~> filter3",
						"FilterSurveyGoalsSeize1P select(mapColumn(",
						"          WorkerId,",
						"          {Goals 1P (Seize Opp) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsSeizeOpp1P",
						"SelectHCTCleanup, SelectGoalsCurr join(SelectHCTCleanup@WorkerId == SelectGoalsCurr@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalValCurr",
						"JoinGoalValCurr, SelectGoalsSeizeOpp1P join(SelectHCTCleanup@WorkerId == SelectGoalsSeizeOpp1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactSeize1P",
						"filter3, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsSeize1P",
						"filter3, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsSeize2P",
						"FilterSurveyGoalsSeize2P select(mapColumn(",
						"          WorkerId,",
						"          {Goals 2P (Seize Opp) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsSeizeOpp2P",
						"filter2, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsImpactReach1P",
						"filter2, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsSeize2PVal",
						"FilterSurveyGoalsSeize2PVal select(mapColumn(",
						"          WorkerId,",
						"          {Goals 2P (Impact Reach) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsImpactReach2P",
						"FilterSurveyGoals, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsCurr",
						"FilterValues, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyValuesCurr",
						"JoinElloreeGender, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentTag",
						"FilterSurveyValuesCulture, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyValuesCulture1P",
						"FilterSurveyValuesCulture, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyValuesCulture2P",
						"FilterSurveyValuesCulture2P select(mapColumn(",
						"          WorkerId,",
						"          {Values 2P (Culture and Values)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesCulture2P",
						"OtherCore filter(EventType=='Values - Works collaboratively') ~> FilterValuesWorksCollab",
						"FilterValuesWorksCollab, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterValuesWorksCollab1PYear",
						"FilterValuesWorksCollab1PYear select(mapColumn(",
						"          WorkerId,",
						"          {Values 1P (Works Collaboratively)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesWorksCollab1PYear",
						"FilterValuesWorksCollab, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterValuesWorksCollab2PYear",
						"FilterValuesWorksCollab2PYear select(mapColumn(",
						"          WorkerId,",
						"          {Values 2P (Works Collaboratively)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesWorksCollab2PYear",
						"OtherCore filter(EventType=='Potential') ~> FilterPotential",
						"FilterPotential, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialCurr",
						"FilterPotentialCurr select(mapColumn(",
						"          WorkerId,",
						"          {Potential Curr} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialCurr",
						"OtherCore filter(EventType=='G&P - Broader Responsibilities') ~> FilterPotentialBroaderResp",
						"FilterPotentialBroaderResp, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialBroadResp1P",
						"FilterPotentialBroadResp1P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 1P (G&P - Broader Responsibilities)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialBroadResp1P",
						"FilterPotentialBroaderResp, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialBroadResp2P",
						"FilterPotentialBroadResp2P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 2P (G&P - Broader Responsibilities)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialBroadResp2P",
						"OtherCore filter(EventType=='G&P - Learning and Innovation') ~> FilterPotentialLearningInnov",
						"FilterPotentialLearningInnov, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialLearnInnov2P",
						"FilterPotentialLearnInnov2P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 2P (G&P - Learning and Innovation)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialLearnInnov2P",
						"FilterPotentialLearningInnov, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialLearnInnov1P",
						"FilterPotentialLearnInnov1P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 1P (G&P - Learning and Innovation)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialLearnInnov1P",
						"JoinGoalImpactSeize1P, SelectGoalsSeizeOpp2P join(SelectHCTCleanup@WorkerId == SelectGoalsSeizeOpp2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactSeize2P",
						"JoinGoalImpactSeize2P, SelectGoalsImpactReach1P join(SelectHCTCleanup@WorkerId == SelectGoalsImpactReach1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactReach1P",
						"JoinGoalImpactReach1P, SelectGoalsImpactReach2P join(SelectHCTCleanup@WorkerId == SelectGoalsImpactReach2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactReach2P",
						"JoinGoalImpactReach2P, SelectValuesCurr join(SelectHCTCleanup@WorkerId == SelectValuesCurr@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesCurr",
						"JoinValuesCurr, SelectValuesCulture1P join(SelectHCTCleanup@WorkerId == SelectValuesCulture1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesCulture1P",
						"JoinValuesCulture1P, SelectValuesCulture2P join(SelectHCTCleanup@WorkerId == SelectValuesCulture2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesCulture2P",
						"JoinValuesCulture2P, SelectValuesWorksCollab1PYear join(SelectHCTCleanup@WorkerId == SelectValuesWorksCollab1PYear@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesWorksCollab1PYear",
						"JoinValuesWorksCollab1PYear, SelectValuesWorksCollab2PYear join(SelectHCTCleanup@WorkerId == SelectValuesWorksCollab2PYear@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesWorksCollab2PYear",
						"JoinValuesWorksCollab2PYear, SelectPotentialCurr join(SelectHCTCleanup@WorkerId == SelectPotentialCurr@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialCurr",
						"JoinPotentialCurr, SelectPotentialBroadResp1P join(SelectHCTCleanup@WorkerId == SelectPotentialBroadResp1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialBroadResp1P",
						"JoinPotentialBroadResp1P, SelectPotentialBroadResp2P join(SelectHCTCleanup@WorkerId == SelectPotentialBroadResp2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialBroadResp2P",
						"JoinPotentialBroadResp2P, SelectPotentialLearnInnov1P join(SelectHCTCleanup@WorkerId == SelectPotentialLearnInnov1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialLearnInnov1P",
						"JoinPotentialLearnInnov1P, SelectPotentialLearnInnov2P join(SelectHCTCleanup@WorkerId == SelectPotentialLearnInnov2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialLearnInnov2P",
						"join1 select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId = SelectHCTCleanup@WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventType,",
						"          EventReason,",
						"          WorkerStatus,",
						"          WorkerType,",
						"          JobTitle,",
						"          JobFunction,",
						"          YearsinJob,",
						"          PrevJobTitle,",
						"          PrevJobFunction,",
						"          LastPromoDt,",
						"          OrigHireDt,",
						"          CurrHireDt,",
						"          RehireInd,",
						"          YearsofSrvc,",
						"          YearsofSrvcBand,",
						"          YearsofSrvcBandSortId,",
						"          CorpTitle,",
						"          PrevCorpTitle,",
						"          ManagerInd,",
						"          DirectMgrWorkerId,",
						"          MgrCount,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          LegacyOrg,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          Race,",
						"          ElloreeRace,",
						"          HispanicLatinoOrigin,",
						"          Gender,",
						"          ElloreeGender,",
						"          Veteran,",
						"          LGBTQ,",
						"          DisabilityInd,",
						"          BirthYear,",
						"          Generation,",
						"          GenerationSortId,",
						"          ElloreeHispanicLatinoOrigin,",
						"          {Goals Curr},",
						"          {Goals 1P (Seize Opp) },",
						"          {Goals 2P (Seize Opp) },",
						"          {Goals 1P (Impact Reach) },",
						"          {Goals 2P (Impact Reach) },",
						"          {Values Curr},",
						"          {Values 1P (Culture and Values)},",
						"          {Values 2P (Culture and Values)},",
						"          {Values 1P (Works Collaboratively)},",
						"          {Values 2P (Works Collaboratively)},",
						"          {Potential Curr},",
						"          {Potential 1P (G&P - Broader Responsibilities)},",
						"          {Potential 2P (G&P - Broader Responsibilities)},",
						"          {Potential 1P (G&P - Learning and Innovation)},",
						"          {Potential 2P (G&P - Learning and Innovation)},",
						"          {Emp Perf Rating Curr Talent Tag},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"JoinPotentialLearnInnov2P, SelectEmpTalentTag join(SelectHCTCleanup@WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectFinalOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['Evergreen_Adhoc1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutPutFactTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_ApplStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "JoinEthMap"
						},
						{
							"name": "JoinGenderMap"
						},
						{
							"name": "SelectEthnicity"
						},
						{
							"name": "SelectGender"
						},
						{
							"name": "JoinApplicantMap"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectToRemoveJoinFields"
						},
						{
							"name": "CalcApplicantStatus"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State} as string,",
						"          {Applicant Country} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"Applicant select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Requisition ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant Type},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectEthnicity join({Client ID} == {Ethnicity Client ID}",
						"     && {Client Engagement Date} == {Ethnicity Client Engagement Date}",
						"     && Race == {Ethnicity Client Race}",
						"     && {Hispanic or Latino Origin} == {Ethnicity Client Hispanic or Latino Origin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEthMap",
						"JoinEthMap, SelectGender join({Client ID} == {Gender Client ID}",
						"     && {Client Engagement Date} == {Gender Client Engagement Date}",
						"     && Gender == {Gender Client Gender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGenderMap",
						"EthnicityMap select(mapColumn(",
						"          {Ethnicity Client ID} = {Client ID},",
						"          {Ethnicity Client Engagement Date} = {Client Engagement Date},",
						"          {Ethnicity Client Race} = {Client Race},",
						"          {Ethnicity Client Hispanic or Latino Origin} = {Client Hispanic or Latino Origin},",
						"          {Ethnicity Elloree Race} = {Elloree Race},",
						"          {Ethnicity Elloree Hispanic or Latino Origin} = {Elloree Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEthnicity",
						"GenderMap select(mapColumn(",
						"          {Gender Client ID} = {Client ID},",
						"          {Gender Client Engagement Date} = {Client Engagement Date},",
						"          {Gender Client Gender} = {Client Gender},",
						"          {Gender Elloree Gender} = {Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGender",
						"JoinGenderMap, SelectApplicant join({Client ID} == {Applicant Client ID}",
						"     && {Client Engagement Date} == {Applicant Client Engagement Date}",
						"     && {Applicant Final Disposition} == {Applicant Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Applicant Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Applicant Client Applicant Rejected Reason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinApplicantMap",
						"ApplicantMap select(mapColumn(",
						"          {Applicant Client ID} = {Client ID},",
						"          {Applicant Client Engagement Date} = {Client Engagement Date},",
						"          {Applicant Client Applicant Final Disposition} = {Client Applicant Final Disposition},",
						"          {Applicant Client Applicant Step Before Final Disposition} = {Client Applicant Step Before Final Disposition},",
						"          {Applicant Client Applicant Rejected Reason} = {Client Applicant Rejected Reason},",
						"          {Applicant Elloree Applicant Final Disposition} = {Elloree Applicant Final Disposition},",
						"          {Applicant Elloree Applicant Category} = {Elloree Applicant Category},",
						"          {Applicant Elloree Submitted to Mgr Fl} = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"JoinApplicantMap select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Requisition ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Applicant Type},",
						"          {Elloree Applicant Final Disposition} = {Applicant Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category} = {Applicant Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl} = {Applicant Elloree Submitted to Mgr Fl},",
						"          {Elloree Race} = {Ethnicity Elloree Race},",
						"          {Elloree Hispanic or Latino Origin} = {Ethnicity Elloree Hispanic or Latino Origin},",
						"          {Elloree Gender} = {Gender Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectToRemoveJoinFields",
						"SelectToRemoveJoinFields derive(Applicant = 1,",
						"          {White Appl} = iif({Elloree Race}=='White',1,0),",
						"          {Black Appl} = iif({Elloree Race}=='Black',1,0),",
						"          {Latinx Appl} = iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),",
						"          {Asian Appl} = iif({Elloree Race}=='Asian',1,0),",
						"          {Two or More Appl} = iif({Elloree Race}=='2+ Races',1,0),",
						"          {Other Appl} = iif({Elloree Race}=='Other',1,0),",
						"          {DNSID Appl} = iif(and({Elloree Race}=='Did Not Self Identify',or({Elloree Hispanic or Latino Origin}=='Did Not Self Identify',{Elloree Hispanic or Latino Origin}=='N')),1,0),",
						"          {Female Appl} = iif({Elloree Gender}=='Female',1,0),",
						"          {PoC Appl} = iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),",
						"          {Male Appl} = iif({Elloree Gender}=='Male',1,0),",
						"          {Other Gender Appl} = iif({Elloree Gender}=='Other',1,0),",
						"          {DNSID Gender Appl} = iif({Elloree Gender}=='Did Not Self Identify',1,0),",
						"          {Diverse Applicant} = iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Elloree Gender}==\"Female\"),1,0),",
						"          {Applicant Rejected by HR} = iif(and({Elloree Applicant Category}=='Applicant',{Elloree Applicant Final Disposition}=='Not Selected - HR'),1,0),",
						"          {Applicant Withdrew} = iif(and({Elloree Applicant Category}=='Applicant',{Elloree Applicant Final Disposition}=='Withdrew'),1,0),",
						"          Candidate = iif({Elloree Applicant Category}=='Candidate',1,0),",
						"          {Candidate Rejected by HR} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Applicant Final Disposition}=='Not Selected - HR'),1,0),",
						"          {Candidate StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),1,0),",
						"          {Candidate Rejected by HM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Applicant Final Disposition}=='Not Selected - HM'),1,0),",
						"          {Candidate Interviewed} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or({Elloree Applicant Final Disposition}=='Interviewed',{Elloree Applicant Final Disposition}=='Hired'),1,0),0),",
						"          {Candidate Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",1,0),0),",
						"          {Candidate Withdrew} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Withdrew\",1,0),0)) ~> CalcApplicantStatus",
						"CalcApplicantStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TAApplStatusFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Applicant_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Req",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "RemoveNullRecords"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId"
						},
						{
							"name": "select1"
						},
						{
							"name": "selectReqDateInfo"
						},
						{
							"name": "FilterOutClientReqHeaderRowAndColumn"
						},
						{
							"name": "RemoveNullReqRecords"
						},
						{
							"name": "joinReqDateInfo"
						},
						{
							"name": "SetEventMonth"
						},
						{
							"name": "SetEventQuarter"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Qtr1_Start as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as date,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State } as string,",
						"          {Applicant Country} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Applicants filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State} = {Applicant State },",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRecords derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Job Applicant') ~> AddDerived",
						"AddDerived derive(Event = iif(isNull(Event),'Job Applicant',Event),",
						"          Source = iif(isNull(Source),'N/A',Source),",
						"          {Applicant Type} = iif(isNull({Applicant Type}),'N/A',{Applicant Type}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGBTQ = iif(isNull(LGBTQ),'N/A',LGBTQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Applicant Step Before Final Disposition} = iif(isNull({Applicant Step Before Final Disposition}),'N/A',{Applicant Step Before Final Disposition}),",
						"          {Applicant Rejected Reason} = iif(isNull({Applicant Rejected Reason}),'N/A',{Applicant Rejected Reason})) ~> ConvertNullsForKeyFields",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Applicant ID}))) ~> RemoveNullRecords",
						"SetEventQuarter aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          {Event Month},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     RowCount = count({Applicant ID})) ~> aggregate1",
						"aggregate1 aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RowCount = count({Requisition ID})) ~> aggregate2",
						"aggregate2 derive(WorkerIDValue = iif(length(trim({Internal Worker ID}))>0, 'Y','N')) ~> derivedColumn2",
						"derivedColumn2 filter(WorkerIDValue=='Y') ~> filter1",
						"filter1 select(mapColumn(",
						"          {Applicant ID},",
						"          {Internal Worker ID for Match} = {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth = {Event Month},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)},",
						"          RowCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"RemoveNullReqRecords select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDateInfo",
						"Requisitions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientReqHeaderRowAndColumn",
						"FilterOutClientReqHeaderRowAndColumn filter(!(isNull({Requisition ID}))) ~> RemoveNullReqRecords",
						"SelectFinal, selectReqDateInfo join(SelectFinal@{Requisition ID} == selectReqDateInfo@{Requisition ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinReqDateInfo",
						"select2 derive({Event Month} = month({Event Date})) ~> SetEventMonth",
						"SetEventMonth derive({Event Quarter} = iif(\r",
						"    (\r",
						"        (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"    ) < 3, \r",
						"    1,\r",
						"    iif(\r",
						"        (\r",
						"            (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"        ) >= 3 && (\r",
						"            (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"        ) < 6, \r",
						"        2,\r",
						"        iif(\r",
						"            (\r",
						"                (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"            ) >= 6 && (\r",
						"                (toInteger({Event Month}) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"            ) < 9, \r",
						"            3,\r",
						"            4\r",
						"        )\r",
						"    )\r",
						")) ~> SetEventQuarter",
						"joinReqDateInfo select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Event,",
						"          {Event Year},",
						"          {Event Date},",
						"          {Requisition ID} = SelectFinal@{Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ApplicantTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Applicant_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Applicant_Append",
								"type": "DatasetReference"
							},
							"name": "ApplicantAppendFile"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Req",
								"type": "DatasetReference"
							},
							"name": "Reqisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "unionApplicantDBData"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId"
						},
						{
							"name": "select1"
						},
						{
							"name": "FilterOutClientReqHeaderRowAndColumn"
						},
						{
							"name": "RemoveNullReqRecords"
						},
						{
							"name": "selectReqDateInfo"
						},
						{
							"name": "joinReqDateInfo"
						},
						{
							"name": "RemoveJoinReqID"
						},
						{
							"name": "SetEventMonth"
						},
						{
							"name": "SetEventQuarter"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "ConvertNullsForKeyFields"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Qtr1_Start as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State} as string,",
						"          {Applicant Country} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          {Applicant City} as string,",
						"          {Applicant State } as string,",
						"          {Applicant Country} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantAppendFile",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reqisitions",
						"ApplicantAppendFile filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"AddDerived select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State} = {Applicant State },",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Job Applicant') ~> AddDerived",
						"derivedColumn2, Applicants union(byName: true)~> unionApplicantDBData",
						"ConvertNullsForKeyFields aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          EventMonth,",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          EventMonth,",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOutput",
						"SelectOutput aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          EventMonth,",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     RowCount = count({Applicant ID})) ~> aggregate1",
						"aggregate1 aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RowCount = count({Requisition ID})) ~> aggregate2",
						"aggregate2 derive(WorkerIDValue = iif(length(trim({Internal Worker ID}))>0, 'Y','N')) ~> derivedColumn1",
						"derivedColumn1 filter(WorkerIDValue=='Y') ~> filter1",
						"filter1 select(mapColumn(",
						"          {Applicant ID},",
						"          {Internal Worker ID for Match} = {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          EventMonth,",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)},",
						"          RowCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Reqisitions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientReqHeaderRowAndColumn",
						"FilterOutClientReqHeaderRowAndColumn filter(!(isNull({Requisition ID}))) ~> RemoveNullReqRecords",
						"RemoveNullReqRecords select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDateInfo",
						"SelectFinal, selectReqDateInfo join(SelectFinal@{Requisition ID} == selectReqDateInfo@{Requisition ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinReqDateInfo",
						"joinReqDateInfo select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          Event,",
						"          {Event Year},",
						"          {Event Date},",
						"          {Requisition ID} = SelectFinal@{Requisition ID},",
						"          {Application Date},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          {Applicant City},",
						"          {Applicant State},",
						"          {Applicant Country},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition Date},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveJoinReqID",
						"RemoveJoinReqID derive(EventMonth = month({Event Date})) ~> SetEventMonth",
						"SetEventMonth derive({Event Quarter} = iif(\r",
						"    (\r",
						"        (toInteger(EventMonth) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"    ) < 3, \r",
						"    1,\r",
						"    iif(\r",
						"        (\r",
						"            (toInteger(EventMonth) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"        ) >= 3 && (\r",
						"            (toInteger(EventMonth) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"        ) < 6, \r",
						"        2,\r",
						"        iif(\r",
						"            (\r",
						"                (toInteger(EventMonth) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"            ) >= 6 && (\r",
						"                (toInteger(EventMonth) - toInteger($Flow_Qtr1_Start) + 12) % 12\r",
						"            ) < 9, \r",
						"            3,\r",
						"            4\r",
						"        )\r",
						"    )\r",
						")) ~> SetEventQuarter",
						"SetEventQuarter derive({Event Date} = toString({Event Date}),",
						"          {Event Quarter} = toString({Event Quarter}),",
						"          EventMonth = toString(EventMonth)) ~> derivedColumn2",
						"unionApplicantDBData derive(Event = iif(isNull(Event),'Job Applicant',Event),",
						"          Source = iif(isNull(Source),'N/A',Source),",
						"          {Applicant Type} = iif(isNull({Applicant Type}),'N/A',{Applicant Type}),",
						"          {Applicant City} = iif(isNull({Applicant City}),'N/A',{Applicant City}),",
						"          {Applicant State} = iif(isNull({Applicant State}),'N/A',{Applicant State}),",
						"          {Applicant Country} = iif(isNull({Applicant Country}),'N/A',{Applicant Country}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGBTQ = iif(isNull(LGBTQ),'N/A',LGBTQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Applicant Step Before Final Disposition} = iif(isNull({Applicant Step Before Final Disposition}),'N/A',{Applicant Step Before Final Disposition}),",
						"          {Applicant Rejected Reason} = iif(isNull({Applicant Rejected Reason}),'N/A',{Applicant Rejected Reason})) ~> ConvertNullsForKeyFields",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ApplicantTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Core_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MergeEvents"
						},
						{
							"name": "AddDerived",
							"description": "Add employee count column for aggregations."
						},
						{
							"name": "select1"
						},
						{
							"name": "TagHeadcountEvent"
						},
						{
							"name": "TagTerminationEvent"
						},
						{
							"name": "TagHireEvent"
						},
						{
							"name": "TagPromotionEvent"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "filter4"
						},
						{
							"name": "select5"
						},
						{
							"name": "CalcNullDates"
						},
						{
							"name": "CalcServiceforNulls"
						},
						{
							"name": "RemoveNullWorkerIdRowsHCT"
						},
						{
							"name": "RemoveNullWorkerIdRowsTER"
						},
						{
							"name": "RemoveNullWorkerIdRowsHIR"
						},
						{
							"name": "RemoveNullWorkerIdRowsPRO"
						},
						{
							"name": "derivedEventMonthQtr"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "ReplaceSpecCharHyphen"
						},
						{
							"name": "ReplaceSpecialCharApostrophe"
						},
						{
							"name": "ReplaceSpecialCharacterAccent"
						},
						{
							"name": "ReplaceCharacterUnknown"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years in Job} as double,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"TagHeadcountEvent, TagHireEvent, TagTerminationEvent, TagPromotionEvent union(byName: true)~> MergeEvents",
						"ReplaceCharacterUnknown derive(EmpCount = 1,",
						"          {Generation Desc} = iif(not(isNull({Birth Year})), iif({Birth Year}<1946,'Pre-Boomer (<1946)', iif(between({Birth Year},1946,1964),'Boomer (1946-1964)', \r",
						"iif(between({Birth Year}, 1965, 1978),'Gen X (1965-1978)', \r",
						"iif(between({Birth Year},1979,1996),'Gen Y (1979-1996)', \r",
						"iif({Birth Year}>=1997,'Gen Z (>=1997)','Unknown'))))),{Generation Desc}),",
						"          {Generation Sort ID} = iif({Birth Year}<1946,1,  iif(between({Birth Year},1946,1964),2,  iif(between({Birth Year}, 1965, 1978),3,  iif(between({Birth Year},1979,1996),4,  iif({Birth Year}>=1997,5,6))))),",
						"          {Years of Service Band} = iif(between({Years of Service},0,0.25),'0-3 Months', \r",
						"iif(between({Years of Service},0.26,0.5),'4-6 Months', \r",
						"iif(between({Years of Service},0.51,0.99),'7-11 Months', \r",
						"iif(between({Years of Service},1,1.99),'1-2 Years', \r",
						"iif(between({Years of Service},2,4.99),'2-5 Years', \r",
						"iif(between({Years of Service},5,9.99),'5-10 Years', \r",
						"iif(between({Years of Service},10,14.99),'10-15 Years', \r",
						"iif(between({Years of Service},15,24.99),'15-25 Years', \r",
						"iif({Years of Service}>=25,'25+ Years', 'Unknown'))))))))),",
						"          {Years of Service Sort ID} = iif(between({Years of Service},0,0.25),9, \r",
						"iif(between({Years of Service},0.26,0.5),8, \r",
						"iif(between({Years of Service},0.51,0.99),7, \r",
						"iif(between({Years of Service},1,1.99),6, \r",
						"iif(between({Years of Service},2,4.99),5, \r",
						"iif(between({Years of Service},5,9.99),4, \r",
						"iif(between({Years of Service},10,14.99),3, \r",
						"iif(between({Years of Service},15,24.99),2, \r",
						"iif({Years of Service}>=25,1, 10))))))))),",
						"          {Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddDerived",
						"derivedEventMonthQtr select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select2 derive(Event = 'Headcount',",
						"          {Event Code} = 'HCT') ~> TagHeadcountEvent",
						"select3 derive(Event = 'Termination',",
						"          {Event Code} = 'TER') ~> TagTerminationEvent",
						"select4 derive(Event = 'Hire',",
						"          {Event Code} = 'HIR') ~> TagHireEvent",
						"select5 derive(Event = 'Promotion',",
						"          {Event Code} = 'PRO') ~> TagPromotionEvent",
						"AddDerived derive({Event Type} = iif(isNull({Event Type}),'N/A',{Event Type}),",
						"          {Event Reason} = iif(isNull({Event Reason}),'N/A',{Event Reason}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Previous Corporate Title} = iif(isNull({Previous Corporate Title}),'N/A',{Previous Corporate Title}),",
						"          {Job Title} = iif(isNull({Job Title}),'N/A',{Job Title}),",
						"          {Job Family/Function} = iif(isNull({Job Family/Function}),'N/A',{Job Family/Function}),",
						"          {Previous Job Title} = iif(isNull({Previous Job Title}),'N/A',{Previous Job Title}),",
						"          {Previous Job Family/Function} = iif(isNull({Previous Job Family/Function}),'N/A',{Previous Job Family/Function}),",
						"          {Rehire Indicator} = iif(isNull({Rehire Indicator}),'N/A',{Rehire Indicator}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work City} = iif(isNull({Work City}),'N/A',{Work City}),",
						"          {Work State} = iif(isNull({Work State}),'N/A',{Work State}),",
						"          {Work Country} = iif(isNull({Work Country}),'N/A',{Work Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Direct Manager Worker ID} = iif(isNull({Direct Manager Worker ID}),'N/A',{Direct Manager Worker ID}),",
						"          {Legacy Organization} = iif(isNull({Legacy Organization}),'N/A',{Legacy Organization}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGBTQ = iif(isNull(LGBTQ),'N/A',LGBTQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Generation Desc} = iif(isNull({Generation Desc}),'N/A',{Generation Desc}),",
						"          {Manager Indicator} = iif(isNull({Manager Indicator}),'N/A',{Manager Indicator})) ~> ConvertNullsForKeyFields",
						"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
						"RemoveNullWorkerIdRowsHCT select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
						"RemoveNullWorkerIdRowsTER select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
						"RemoveNullWorkerIdRowsHIR select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
						"RemoveNullWorkerIdRowsPRO select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"MergeEvents derive({Current Hire Date} = iif(isNull({Current Hire Date}),{Original Hire Date},{Current Hire Date})) ~> CalcNullDates",
						"CalcNullDates derive({Years of Service} = round({Years of Service},1),",
						"          {Years in Job} = round({Years in Job},1)) ~> CalcServiceforNulls",
						"filter1 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHCT",
						"filter2 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsTER",
						"filter3 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHIR",
						"filter4 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsPRO",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date}),",
						"          {Event Quarter} = iif(isNull({Event Quarter}),\r",
						"iif(between(month({Event Date}),1,3),1,\r",
						"iif(between(month({Event Date}),4,6),2,\r",
						"iif(between(month({Event Date}),7,9),3,\r",
						"iif(between(month({Event Date}),10,12),4,0)))),\r",
						"{Event Quarter})) ~> derivedEventMonthQtr",
						"select1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Event Date},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGBTQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount),",
						"     RowCount = count({Worker ID})) ~> RemoveDuplicates",
						"CalcServiceforNulls derive({Job Title} = replace({Job Title},\"–\",\"-\")) ~> ReplaceSpecCharHyphen",
						"ReplaceSpecCharHyphen derive({Job Title} = replace({Job Title},\"’\",\"'\")) ~> ReplaceSpecialCharApostrophe",
						"ReplaceSpecialCharApostrophe derive({Job Title} = replace({Job Title},\"ó\",\"o\")) ~> ReplaceSpecialCharacterAccent",
						"ReplaceSpecialCharacterAccent derive({Job Title} = replace({Job Title},\"�\",\"-\")) ~> ReplaceCharacterUnknown",
						"RemoveDuplicates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['CoreFctTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_DivSlate_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "JoinEthMap"
						},
						{
							"name": "JoinGenderMap"
						},
						{
							"name": "SelectEthnicity"
						},
						{
							"name": "SelectGender"
						},
						{
							"name": "JoinApplicantMap"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectToRemoveJoinFields"
						},
						{
							"name": "CalcDivApplicantCount"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date 'MM/dd/yyyy',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Application Date} as date,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition Date} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"Applicant select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectEthnicity join({Client ID} == {Ethnicity Client ID}",
						"     && {Client Engagement Date} == {Ethnicity Client Engagement Date}",
						"     && Race == {Ethnicity Client Race}",
						"     && {Hispanic or Latino Origin} == {Ethnicity Client Hispanic or Latino Origin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEthMap",
						"JoinEthMap, SelectGender join({Client ID} == {Gender Client ID}",
						"     && {Client Engagement Date} == {Gender Client Engagement Date}",
						"     && Gender == {Gender Client Gender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGenderMap",
						"EthnicityMap select(mapColumn(",
						"          {Ethnicity Client ID} = {Client ID},",
						"          {Ethnicity Client Engagement Date} = {Client Engagement Date},",
						"          {Ethnicity Client Race} = {Client Race},",
						"          {Ethnicity Client Hispanic or Latino Origin} = {Client Hispanic or Latino Origin},",
						"          {Ethnicity Elloree Race} = {Elloree Race},",
						"          {Ethnicity Elloree Hispanic or Latino Origin} = {Elloree Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEthnicity",
						"GenderMap select(mapColumn(",
						"          {Gender Client ID} = {Client ID},",
						"          {Gender Client Engagement Date} = {Client Engagement Date},",
						"          {Gender Client Gender} = {Client Gender},",
						"          {Gender Elloree Gender} = {Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGender",
						"JoinGenderMap, SelectApplicant join({Client ID} == {Applicant Client ID}",
						"     && {Client Engagement Date} == {Applicant Client Engagement Date}",
						"     && {Applicant Final Disposition} == {Applicant Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Applicant Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Applicant Client Applicant Rejected Reason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinApplicantMap",
						"ApplicantMap select(mapColumn(",
						"          {Applicant Client ID} = {Client ID},",
						"          {Applicant Client Engagement Date} = {Client Engagement Date},",
						"          {Applicant Client Applicant Final Disposition} = {Client Applicant Final Disposition},",
						"          {Applicant Client Applicant Step Before Final Disposition} = {Client Applicant Step Before Final Disposition},",
						"          {Applicant Client Applicant Rejected Reason} = {Client Applicant Rejected Reason},",
						"          {Applicant Elloree Applicant Final Disposition} = {Elloree Applicant Final Disposition},",
						"          {Applicant Elloree Applicant Category} = {Elloree Applicant Category},",
						"          {Applicant Elloree Submitted to Mgr Fl} = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"JoinApplicantMap select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Elloree Race} = {Ethnicity Elloree Race},",
						"          {Hispanic or Latino Origin},",
						"          {Elloree Hispanic or Latino Origin} = {Ethnicity Elloree Hispanic or Latino Origin},",
						"          Gender,",
						"          {Gender Elloree Gender},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition} = {Applicant Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category} = {Applicant Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl} = {Applicant Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectToRemoveJoinFields",
						"SelectToRemoveJoinFields derive({Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),1,0),",
						"          {Internal Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {External Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",1,0),0),",
						"          {Internal Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {External Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='White',1,0),0),",
						"          {Internal White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),",
						"          {External White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),",
						"          {White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='White',1,0),0),0),",
						"          {Internal White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),0),",
						"          {External White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),0),",
						"          {Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Black',1,0),0),",
						"          {Internal Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),",
						"          {External Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),",
						"          {Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Black',1,0),0),0),",
						"          {Internal Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),0),",
						"          {External Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),0),",
						"          {Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Asian',1,0),0),",
						"          {Internal Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),",
						"          {External Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),",
						"          {Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Asian',1,0),0),0),",
						"          {Internal Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {External Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {Latinx Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Internal Latinx Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {External Latinx Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {Internal Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {External Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),",
						"          {Internal 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {External 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Internal 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {External 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Other',1,0),0),",
						"          {Internal Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Other'),1,0),0),",
						"          {External Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Other'),1,0),0),",
						"          {Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {Internal Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {External Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {Internal PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {External PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),",
						"          {Internal Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {External Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Internal Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {External Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),",
						"          {Internal Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {External Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Internal Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {External Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),",
						"          {Internal Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {External Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Internal Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {External Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Diverse Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Internal Diverse Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {External Diverse Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Diverse Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Internal Diverse Candidates Hired} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {External Diverse Candidates Hired} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0)) ~> CalcDivApplicantCount",
						"CalcDivApplicantCount aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Requisition ID},",
						"          {Event Year}),",
						"     {Candidates StM} = sum({Candidates StM}),",
						"          {Internal Candidates StM} = sum({Internal Candidates StM}),",
						"          {External Candidates StM} = sum({External Candidates StM}),",
						"          {Candidates Hired} = sum({Candidates Hired}),",
						"          {Internal Candidates Hired} = sum({Internal Candidates Hired}),",
						"          {External Candidates Hired} = sum({External Candidates Hired}),",
						"          {White Candidates StM} = sum({White Candidates StM}),",
						"          {Internal White Candidates StM} = sum({Internal White Candidates StM}),",
						"          {External White Candidates StM} = sum({External White Candidates StM}),",
						"          {White Candidates Hired} = sum({White Candidates Hired}),",
						"          {Internal White Candidates Hired} = sum({Internal White Candidates Hired}),",
						"          {External White Candidates Hired} = sum({External White Candidates Hired}),",
						"          {Black Candidates StM} = sum({Black Candidates StM}),",
						"          {Internal Black Candidates StM} = sum({Internal Black Candidates StM}),",
						"          {External Black Candidates StM} = sum({External Black Candidates StM}),",
						"          {Black Candidates Hired} = sum({Black Candidates Hired}),",
						"          {Internal Black Candidates Hired} = sum({Internal Black Candidates Hired}),",
						"          {External Black Candidates Hired} = sum({External Black Candidates Hired}),",
						"          {Latinx Candidates StM} = sum({Latinx Candidates StM}),",
						"          {Internal Latinx Candidates StM} = sum({Internal Latinx Candidates StM}),",
						"          {External Latinx Candidates StM} = sum({External Latinx Candidates StM}),",
						"          {Latinx Candidates Hired} = sum({Latinx Candidates Hired}),",
						"          {Internal Latinx Candidates Hired} = sum({Internal Latinx Candidates Hired}),",
						"          {External Latinx Candidates Hired} = sum({External Latinx Candidates Hired}),",
						"          {Asian Candidates StM} = sum({Asian Candidates StM}),",
						"          {Internal Asian Candidates StM} = sum({Internal Asian Candidates StM}),",
						"          {External Asian Candidates StM} = sum({External Asian Candidates StM}),",
						"          {Asian Candidates Hired} = sum({Asian Candidates Hired}),",
						"          {Internal Asian Candidates Hired} = sum({Internal Asian Candidates Hired}),",
						"          {External Asian Candidates Hired} = sum({External Asian Candidates Hired}),",
						"          {2+ Races Candidates StM} = sum({2+ Races Candidates StM}),",
						"          {Internal 2+ Races Candidates StM} = sum({Internal 2+ Races Candidates StM}),",
						"          {External 2+ Races Candidates StM} = sum({External 2+ Races Candidates StM}),",
						"          {2+ Races Candidates Hired} = sum({2+ Races Candidates Hired}),",
						"          {Internal 2+ Races Candidates Hired} = sum({Internal 2+ Races Candidates Hired}),",
						"          {External 2+ Races Candidates Hired} = sum({External 2+ Races Candidates Hired}),",
						"          {Other Candidates StM} = sum({Other Candidates StM}),",
						"          {Internal Other Candidates StM} = sum({Internal Other Candidates StM}),",
						"          {External Other Candidates StM} = sum({External Other Candidates StM}),",
						"          {Other Candidates Hired} = sum({Other Candidates Hired}),",
						"          {Internal Other Candidates Hired} = sum({Internal Other Candidates Hired}),",
						"          {External Other Candidates Hired} = sum({External Other Candidates Hired}),",
						"          {Male Candidates StM} = sum({Male Candidates StM}),",
						"          {Internal Male Candidates StM} = sum({Internal Male Candidates StM}),",
						"          {External Male Candidates StM} = sum({External Male Candidates StM}),",
						"          {Male Candidates Hired} = sum({Male Candidates Hired}),",
						"          {Internal Male Candidates Hired} = sum({Internal Male Candidates Hired}),",
						"          {External Male Candidates Hired} = sum({External Male Candidates Hired}),",
						"          {Female Candidates StM} = sum({Female Candidates StM}),",
						"          {Internal Female Candidates StM} = sum({Internal Female Candidates StM}),",
						"          {External Female Candidates StM} = sum({External Female Candidates StM}),",
						"          {Female Candidates Hired} = sum({Female Candidates Hired}),",
						"          {Internal Female Candidates Hired} = sum({Internal Female Candidates Hired}),",
						"          {External Female Candidates Hired} = sum({External Female Candidates Hired}),",
						"          {Other Gender Candidates StM} = sum({Other Gender Candidates StM}),",
						"          {Internal Other Gender Candidates StM} = sum({Internal Other Gender Candidates StM}),",
						"          {External Other Gender Candidates StM} = sum({External Other Gender Candidates StM}),",
						"          {Other Gender Candidates Hired} = sum({Other Gender Candidates Hired}),",
						"          {Internal Other Gender Candidates Hired} = sum({Internal Other Gender Candidates Hired}),",
						"          {External Other Gender Candidates Hired} = sum({External Other Gender Candidates Hired}),",
						"          {PoC Candidates StM} = sum({PoC Candidates StM}),",
						"          {Internal PoC Candidates StM} = sum({Internal PoC Candidates StM}),",
						"          {External PoC Candidates StM} = sum({External PoC Candidates StM}),",
						"          {PoC  Candidates Hired} = sum({PoC Candidates Hired}),",
						"          {Internal PoC  Candidates Hired} = sum({Internal PoC Candidates Hired}),",
						"          {External PoC  Candidates Hired} = sum({External PoC Candidates Hired}),",
						"          {Diverse Candidates StM} = sum({Diverse Candidates StM}),",
						"          {Internal Diverse Candidates StM} = sum({Internal Diverse Candidates StM}),",
						"          {External Diverse Candidates StM} = sum({External Diverse Candidates StM}),",
						"          {Diverse Candidates Hired} = sum({Diverse Candidates Hired}),",
						"          {Internal Diverse Candidates Hired} = sum({Internal Diverse Candidates Hired}),",
						"          {External Diverse Candidates Hired} = sum({External Diverse Candidates Hired}),",
						"          {Female Not PoC Candidates StM} = sum({Female Not PoC Candidates StM}),",
						"          {Internal Female Not PoC Candidates StM} = sum({Internal Female Not PoC Candidates StM}),",
						"          {External Female Not PoC Candidates StM} = sum({External Female Not PoC Candidates StM}),",
						"          {Female Not PoC Candidates Hired} = sum({Female Not PoC Candidates Hired}),",
						"          {Internal Female Not PoC Candidates Hired} = sum({Internal Female Not PoC Candidates Hired}),",
						"          {External Female Not PoC Candidates Hired} = sum({External Female Not PoC Candidates Hired}),",
						"          {Female PoC Candidates StM} = sum({Female PoC Candidates StM}),",
						"          {Internal Female PoC Candidates StM} = sum({Internal Female PoC Candidates StM}),",
						"          {External Female PoC Candidates StM} = sum({External Female PoC Candidates StM}),",
						"          {Female PoC Candidates Hired} = sum({Female PoC Candidates Hired}),",
						"          {Internal Female PoC Candidates Hired} = sum({Internal Female PoC Candidates Hired}),",
						"          {External Female PoC Candidates Hired} = sum({External Female PoC Candidates Hired}),",
						"          {Not Female PoC Candidates StM} = sum({Not Female PoC Candidates StM}),",
						"          {Internal Not Female PoC Candidates StM} = sum({Internal Not Female PoC Candidates StM}),",
						"          {External Not Female PoC Candidates StM} = sum({External Not Female PoC Candidates StM}),",
						"          {Not Female PoC Candidates Hired} = sum({Not Female PoC Candidates Hired}),",
						"          {Internal Not Female PoC Candidates Hired} = sum({Internal Not Female PoC Candidates Hired}),",
						"          {External Not Female PoC Candidates Hired} = sum({External Not Female PoC Candidates Hired}),",
						"          {Not Female Not PoC Candidates StM} = sum({Not Female Not PoC Candidates StM}),",
						"          {Internal Not Female Not PoC Candidates StM} = sum({Internal Not Female Not PoC Candidates StM}),",
						"          {External Not Female Not PoC Candidates StM} = sum({External Not Female Not PoC Candidates StM}),",
						"          {Not Female Not PoC Candidates Hired} = sum({Not Female Not PoC Candidates Hired}),",
						"          {Internal Not Female Not PoC Candidates Hired} = sum({Internal Not Female Not PoC Candidates Hired}),",
						"          {External Not Female Not PoC Candidates Hired} = sum({External Not Female Not PoC Candidates Hired})) ~> aggregate1",
						"aggregate1 derive({Diverse Slate} = iif({Female PoC Candidates StM}>1,'Y',\r",
						"iif((iif({Female PoC Candidates StM}==1,1,0)+\r",
						"iif({Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N')),",
						"          {Internal Diverse Slate} = iif({Internal Female PoC Candidates StM}>1,'Y',\r",
						"iif((iif({Internal Female PoC Candidates StM}==1,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N')),",
						"          {External Diverse Slate} = iif({External Female PoC Candidates StM}>1,'Y',\r",
						"iif((iif({External Female PoC Candidates StM}==1,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N')),",
						"          {No Diverse Slate} = iif({Diverse Candidates StM}==0,'Y','N'),",
						"          {Internal No Diverse Slate} = iif({Internal Diverse Candidates StM}==0,'Y','N'),",
						"          {External No Diverse Slate} = iif({External Diverse Candidates StM}==0,'Y','N'),",
						"          {Diverse Hired Slate} = iif({Diverse Candidates Hired}>0,'Y','N'),",
						"          {Internal Diverse Hired Slate} = iif({Internal Diverse Candidates Hired}>0,'Y','N'),",
						"          {External Diverse Hired Slate} = iif({External Diverse Candidates Hired}>0,'Y','N'),",
						"          {PoC Slate} = iif({PoC Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal PoC Slate} = iif({Internal PoC Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External PoC Slate} = iif({External PoC Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No PoC Slate} = iif({PoC Candidates StM}==0,'Y','N'),",
						"          {Internal No PoC Slate} = iif({Internal PoC Candidates StM}==0,'Y','N'),",
						"          {External No PoC Slate} = iif({External PoC Candidates StM}==0,'Y','N'),",
						"          {PoC Hired Slate} = iif({PoC  Candidates Hired}>0,'Y','N'),",
						"          {Internal PoC Hired Slate} = iif({Internal PoC  Candidates Hired}>0,'Y','N'),",
						"          {External PoC Hired Slate} = iif({External PoC  Candidates Hired}>0,'Y','N'),",
						"          {White Slate} = iif({White Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal White Slate} = iif({Internal White Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External White Slate} = iif({External White Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No White Slate} = iif({White Candidates StM}==0,'Y','N'),",
						"          {Internal No White Slate} = iif({Internal White Candidates StM}==0,'Y','N'),",
						"          {External No White Slate} = iif({External White Candidates StM}==0,'Y','N'),",
						"          {White Hired Slate} = iif({White Candidates Hired}>0,'Y','N'),",
						"          {Internal White Hired Slate} = iif({Internal White Candidates Hired}>0,'Y','N'),",
						"          {External White Hired Slate} = iif({External White Candidates Hired}>0,'Y','N'),",
						"          {Black Slate} = iif({Black Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Black Slate} = iif({Internal Black Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Black Slate} = iif({External Black Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Black Slate} = iif({Black Candidates StM}==0,'Y','N'),",
						"          {Internal No Black Slate} = iif({Internal Black Candidates StM}==0,'Y','N'),",
						"          {External No Black Slate} = iif({External Black Candidates StM}==0,'Y','N'),",
						"          {Black Hired Slate} = iif({Black Candidates Hired}>0,'Y','N'),",
						"          {Internal Black Hired Slate} = iif({Internal Black Candidates Hired}>0,'Y','N'),",
						"          {External Black Hired Slate} = iif({External Black Candidates Hired}>0,'Y','N'),",
						"          {Latinx Slate} = iif({Latinx Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Latinx Slate} = iif({Internal Latinx Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Latinx Slate} = iif({External Latinx Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Latinx Slate} = iif({Latinx Candidates StM}==0,'Y','N'),",
						"          {Internal No Latinx Slate} = iif({Internal Latinx Candidates StM}==0,'Y','N'),",
						"          {External No Latinx Slate} = iif({External Latinx Candidates StM}==0,'Y','N'),",
						"          {Latinx Hired Slate} = iif({Latinx Candidates Hired}>0,'Y','N'),",
						"          {Internal Latinx Hired Slate} = iif({Internal Latinx Candidates Hired}>0,'Y','N'),",
						"          {External Latinx Hired Slate} = iif({External Latinx Candidates Hired}>0,'Y','N'),",
						"          {Asian Slate} = iif({Asian Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Asian Slate} = iif({Internal Asian Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Asian Slate} = iif({External Asian Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Asian Slate} = iif({Asian Candidates StM}==0,'Y','N'),",
						"          {Internal No Asian Slate} = iif({Internal Asian Candidates StM}==0,'Y','N'),",
						"          {External No Asian Slate} = iif({External Asian Candidates StM}==0,'Y','N'),",
						"          {Asian Hired Slate} = iif({Asian Candidates Hired}>0,'Y','N'),",
						"          {Internal Asian Hired Slate} = iif({Internal Asian Candidates Hired}>0,'Y','N'),",
						"          {External Asian Hired Slate} = iif({External Asian Candidates Hired}>0,'Y','N'),",
						"          {2+ Races Slate} = iif({2+ Races Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External 2+ Races Slate} = iif({External 2+ Races Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No 2+ Races Slate} = iif({2+ Races Candidates StM}==0,'Y','N'),",
						"          {Internal No 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}==0,'Y','N'),",
						"          {External No 2+ Races Slate} = iif({External 2+ Races Candidates StM}==0,'Y','N'),",
						"          {2+ Races Hired Slate} = iif({2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Internal 2+ Races Hired Slate} = iif({Internal 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {External 2+ Races Hired Slate} = iif({External 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Other Race Slate} = iif({Other Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Other Race Slate} = iif({Internal Other Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Other Race Slate} = iif({External Other Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Other Race Slate} = iif({Other Candidates StM}==0,'Y','N'),",
						"          {Internal No Other Race Slate} = iif({Internal Other Candidates StM}==0,'Y','N'),",
						"          {External No Other Race Slate} = iif({External Other Candidates StM}==0,'Y','N'),",
						"          {Other Race Hired Slate} = iif({Other Candidates Hired}>0,'Y','N'),",
						"          {Internal Other Race Hired Slate} = iif({Internal Other Candidates Hired}>0,'Y','N'),",
						"          {External Other Race Hired Slate} = iif({External Other Candidates Hired}>0,'Y','N'),",
						"          {Female Slate} = iif({Female Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Female Slate} = iif({Internal Female Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Female Slate} = iif({External Female Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Female Slate} = iif({Female Candidates StM}==0,'Y','N'),",
						"          {Internal No Female Slate} = iif({Internal Female Candidates StM}==0,'Y','N'),",
						"          {External No Female Slate} = iif({External Female Candidates StM}==0,'Y','N'),",
						"          {Female Hired Slate} = iif({Female Candidates Hired}>0,'Y','N'),",
						"          {Internal Female Hired Slate} = iif({Internal Female Candidates Hired}>0,'Y','N'),",
						"          {External Female Hired Slate} = iif({External Female Candidates Hired}>0,'Y','N'),",
						"          {Male Slate} = iif({Male Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Male Slate} = iif({Internal Male Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Male Slate} = iif({External Male Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Male Slate} = iif({Male Candidates StM}==0,'Y','N'),",
						"          {Internal No Male Slate} = iif({Internal Male Candidates StM}==0,'Y','N'),",
						"          {External No Male Slate} = iif({External Male Candidates StM}==0,'Y','N'),",
						"          {Male Hired Slate} = iif({Male Candidates Hired}>0,'Y','N'),",
						"          {Internal Male Hired Slate} = iif({Internal Male Candidates Hired}>0,'Y','N'),",
						"          {External Male Hired Slate} = iif({External Male Candidates Hired}>0,'Y','N')) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TASlateFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		}
	]
}