{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_NatHawPacIsl_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Native Hawaiian or Other Pacific Islander',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Native Hawaiian or Other Pacific Islander',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_NatHawPacIsl_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "PullOnlyQuarterData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino, women',",
						"          Quarter = iif(period=='M03',1,iif(period=='M06',2,iif(period=='M09',3,iif(period=='M12',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"PullOnlyQuarterData select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 filter(Quarter==1 || Quarter==2 || Quarter==3 || Quarter==4) ~> PullOnlyQuarterData",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "PullOnlyQuarterData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino, men',",
						"          Quarter = iif(period=='M03',1,iif(period=='M06',2,iif(period=='M09',3,iif(period=='M12',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"PullOnlyQuarterData select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 filter(Quarter==1 || Quarter==2 || Quarter==3 || Quarter==4) ~> PullOnlyQuarterData",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "PullOnlyQuarterData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino',",
						"          Quarter = iif(period=='M03',1,iif(period=='M06',2,iif(period=='M09',3,iif(period=='M12',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"PullOnlyQuarterData select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 filter(Quarter==1 || Quarter==2 || Quarter==3 || Quarter==4) ~> PullOnlyQuarterData",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Test_Black')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Test",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'All',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, women',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, men',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DECOM_DF_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "HierarchyMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingHierarchyMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepHierarchyMapping"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort4"
						},
						{
							"name": "sort5"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "SelectFinal1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectReqRecords"
						},
						{
							"name": "SelectCoreRecords"
						},
						{
							"name": "union1"
						},
						{
							"name": "SetEvent"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "CollapsePossibleDuplicateRows"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HierarchyMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGBTQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn2 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"CollapsePossibleDuplicateRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Business Group Level 1} = '',",
						"          {Elloree Business Group Level 2} = '',",
						"          {Elloree Business Group Level 3} = '',",
						"          {Elloree Business Group Level 4} = '',",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(asc({Event and Year}, true)) ~> sort4",
						"pivot1 sort(asc({Client Business Group Level 1}, true),",
						"     asc({Client Business Group Level 2}, true),",
						"     asc({Client Business Group Level 3}, true),",
						"     asc({Client Business Group Level 4}, true)) ~> sort5",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"sort4, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Business Group Level 1} = {Business Group Level 1},",
						"          {Client Business Group Level 2} = {Business Group Level 2},",
						"          {Client Business Group Level 3} = {Business Group Level 3},",
						"          {Client Business Group Level 4} = {Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Business Group Level 1} = {Unique ElloreeBusGrpLvl1},",
						"          {Suggested Elloree Business Group Level 2} = {Unique ElloreeBusGrpLvl2},",
						"          {Suggested Elloree Business Group Level 3} = {Unique ElloreeBusGrpLvl3},",
						"          {Suggested Elloree Business Group Level 4} = {Unique ElloreeBusGrpLvl4},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Client Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Client Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Client Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"join2 select(mapColumn(",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal1",
						"SelectFinal1 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Business Group Level 1} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl1},{Suggested Elloree Business Group Level 1}),",
						"          {Suggested Elloree Business Group Level 2} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl2},{Suggested Elloree Business Group Level 2}),",
						"          {Suggested Elloree Business Group Level 3} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl3},{Suggested Elloree Business Group Level 3}),",
						"          {Suggested Elloree Business Group Level 4} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl4},{Suggested Elloree Business Group Level 4})) ~> derivedColumn2",
						"SetEvent select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Requisition ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqRecords",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
						"SelectCoreRecords, SelectReqRecords, selectReqDBRecs, selectCoreDBRecs union(byName: true)~> union1",
						"Requisitions derive(Event = 'Requisition') ~> SetEvent",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}),",
						"     TotalRecCount = count({Record Id})) ~> CollapsePossibleDuplicateRows",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl4),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Count Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Count Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Count Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4},",
						"          {Count Unique ElloreeBusGrpLvl1} = {Unique ElloreeBusGrpLvl1},",
						"          {Count Unique ElloreeBusGrpLvl2} = {Unique ElloreeBusGrpLvl2},",
						"          {Count Unique ElloreeBusGrpLvl3} = {Unique ElloreeBusGrpLvl3},",
						"          {Count Unique ElloreeBusGrpLvl4} = {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientBusGrpLvl1} == {Count Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Count Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Count Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Count Unique ClientBusGrpLvl4}",
						"     && {Unique ElloreeBusGrpLvl1} == {Count Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Count Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Count Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Count Unique ElloreeBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Agg Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Agg Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Agg Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4}),",
						"     {Agg Unique ElloreeBusGrpLvl1} = first({Unique ElloreeBusGrpLvl1}),",
						"          {Agg Unique ElloreeBusGrpLvl2} = first({Unique ElloreeBusGrpLvl2}),",
						"          {Agg Unique ElloreeBusGrpLvl3} = first({Unique ElloreeBusGrpLvl3}),",
						"          {Agg Unique ElloreeBusGrpLvl4} = first({Unique ElloreeBusGrpLvl4})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeBusGrpLvl1} == {Agg Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Agg Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Agg Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Agg Unique ElloreeBusGrpLvl4}",
						"     && {Unique ClientBusGrpLvl1} == {Agg Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Agg Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Agg Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Agg Unique ClientBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4,",
						"          ClientEngagementDt),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"HierarchyMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"HierarchyMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingHierarchyMapping",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepHierarchyMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DECOM_DF_Mapping_BusHierarchy_NEW')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "SelectCoreRecords"
						},
						{
							"name": "filterBaseYear"
						},
						{
							"name": "filterBaseYearPlus1"
						},
						{
							"name": "filterBaseYearPlus2"
						},
						{
							"name": "filterBaseYearPlus3"
						},
						{
							"name": "selectB3Hierarchy"
						},
						{
							"name": "selectB2Hierarchy"
						},
						{
							"name": "selectB1Hierarchy"
						},
						{
							"name": "selectB0Hierarchy"
						},
						{
							"name": "filterAllHCT"
						},
						{
							"name": "UniqueWorkerIds"
						},
						{
							"name": "selectWorkerIds"
						},
						{
							"name": "joinEachHCTYearB0"
						},
						{
							"name": "joinEachHCTYearB1"
						},
						{
							"name": "joinEachHCTYearB2"
						},
						{
							"name": "joinEachHCTYearB3"
						},
						{
							"name": "derivedHierarchyChg"
						},
						{
							"name": "derivedTransfer"
						},
						{
							"name": "derivedHierarchyCodeChg"
						},
						{
							"name": "selectHierarchyFlagOutput"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "join1"
						},
						{
							"name": "Yr0SetMappingLogic"
						},
						{
							"name": "Yr0SuggestedMapping"
						},
						{
							"name": "Yr0PullOnlyMapped"
						},
						{
							"name": "join2"
						},
						{
							"name": "Yr1SetMappingLogic"
						},
						{
							"name": "Yr1PullOnlyMapped"
						},
						{
							"name": "Yr1SuggestedMapping"
						},
						{
							"name": "selectYr1Mapping"
						},
						{
							"name": "selectYr0Mapping"
						},
						{
							"name": "union1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join3"
						},
						{
							"name": "Yr2SetMappingLogic"
						},
						{
							"name": "Yr2PullOnlyMapped"
						},
						{
							"name": "Yr2SuggestedMapping"
						},
						{
							"name": "selectYr2Mapping"
						},
						{
							"name": "Yr3SuggestedMapping"
						},
						{
							"name": "selectYr3Mapping"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HierarchyKeyCount"
						},
						{
							"name": "SumWithoutYear"
						},
						{
							"name": "selectMappingWithDupCount"
						},
						{
							"name": "derivedCreateKeyForDupCheck"
						},
						{
							"name": "derivedCreateKeyForDupCheck1"
						},
						{
							"name": "joinDuplicateCountInfo"
						},
						{
							"name": "derivedSetMappingLevels"
						},
						{
							"name": "derivedSetHierarchyLvlScope"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedSetNullHierarchyToNA"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "select1"
						},
						{
							"name": "PY3Hierarchy"
						},
						{
							"name": "PY2Hierarchy"
						},
						{
							"name": "PY1Hierarchy"
						},
						{
							"name": "CYHierarchy"
						},
						{
							"name": "CYHierarchyCode"
						},
						{
							"name": "RemoveCYNA"
						},
						{
							"name": "CYHierSelect"
						},
						{
							"name": "PY1HierarchyCode"
						},
						{
							"name": "PY1HierSelect"
						},
						{
							"name": "PY2HierarchyCode"
						},
						{
							"name": "PY2HierSelect"
						},
						{
							"name": "PY3HierarchyCode"
						},
						{
							"name": "PY3HierSelect"
						},
						{
							"name": "Py1inCY"
						},
						{
							"name": "Py2inCY"
						},
						{
							"name": "Py3inCY"
						},
						{
							"name": "Py3inPY2"
						},
						{
							"name": "Py2inPY1"
						},
						{
							"name": "SetPY2Flags"
						},
						{
							"name": "SetPY3Flags"
						},
						{
							"name": "SetPY1Flags"
						},
						{
							"name": "SelectPY1HierarchyFlags"
						},
						{
							"name": "JoinPY1HierarchyInfo"
						},
						{
							"name": "AssignHierarchyCodes"
						},
						{
							"name": "JoinPY2HierarchyInfo"
						},
						{
							"name": "SelectPY2HierarchyFlags"
						},
						{
							"name": "SelectPY3HierarchyFlags"
						},
						{
							"name": "JoinPY3HierarchyInfo"
						},
						{
							"name": "SelectAllHierarchyColumnsCleanup"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "JoinCYHierarchyInfo"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectFinalWorkerHistoryCompare"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "CYtoPY1"
						},
						{
							"name": "filterCYtoPY1Groups"
						},
						{
							"name": "SetFlagForMappingCYtoPY1"
						},
						{
							"name": "PY1toPY2"
						},
						{
							"name": "filterPY1toPY2Groups"
						},
						{
							"name": "SetFlagForMappingPY1toPY2"
						},
						{
							"name": "PY2toPY3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "SetFlagForMappingPY2toPY3"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string (\"4\"),",
						"     Flow_Client_Dt as string (\"4\"),",
						"     Levels_Count as string (\"4\")",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGBTQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string,",
						"          RowCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"derivedSetHierarchyLvlScope select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
						"SelectCoreRecords filter({Event Year}==2021) ~> filterBaseYear",
						"SelectCoreRecords filter({Event Year}==2022) ~> filterBaseYearPlus1",
						"SelectCoreRecords filter({Event Year}==2023) ~> filterBaseYearPlus2",
						"SelectCoreRecords filter({Event Year}==2024) ~> filterBaseYearPlus3",
						"filterBaseYearPlus3 select(mapColumn(",
						"          {Yr 3 - Worker Id} = {Record Id},",
						"          {Yr 3 - Event Year} = {Event Year},",
						"          {Yr 3 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 3 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 3 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 3 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 3 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB3Hierarchy",
						"filterBaseYearPlus2 select(mapColumn(",
						"          {Yr 2 - Worker Id} = {Record Id},",
						"          {Yr 2 - Event Year} = {Event Year},",
						"          {Yr 2 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 2 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 2 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 2 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 2 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB2Hierarchy",
						"filterBaseYearPlus1 select(mapColumn(",
						"          {Yr 1 - Worker Id} = {Record Id},",
						"          {Yr 1 - Event Year} = {Event Year},",
						"          {Yr 1 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 1 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 1 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 1 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 1 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB1Hierarchy",
						"filterBaseYear select(mapColumn(",
						"          {Yr 0 - Worker Id} = {Record Id},",
						"          {Yr 0 - Event Year} = {Event Year},",
						"          {Yr 0 - Business Group Level 1} = {Business Group Level 1},",
						"          {Yr 0 - Business Group Level 2} = {Business Group Level 2},",
						"          {Yr 0 - Business Group Level 3} = {Business Group Level 3},",
						"          {Yr 0 - Business Group Level 4} = {Business Group Level 4},",
						"          {Yr 0 - Job Title} = {Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectB0Hierarchy",
						"SelectCoreRecords filter(1==1) ~> filterAllHCT",
						"filterAllHCT aggregate(groupBy({Worker Id} = {Record Id}),",
						"     {Record Count} = count({Record Id})) ~> UniqueWorkerIds",
						"UniqueWorkerIds select(mapColumn(",
						"          {Worker Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWorkerIds",
						"selectWorkerIds, selectB0Hierarchy join({Worker Id} == {Yr 0 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB0",
						"joinEachHCTYearB0, selectB1Hierarchy join({Worker Id} == {Yr 1 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB1",
						"joinEachHCTYearB1, selectB2Hierarchy join({Worker Id} == {Yr 2 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB2",
						"joinEachHCTYearB2, selectB3Hierarchy join({Worker Id} == {Yr 3 - Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEachHCTYearB3",
						"derivedSetMappingLevels derive({Yr 0 - Hierarchy Code} = concat(concat(concat({Yr 0 - Business Group Level 1}, {Yr 0 - Business Group Level 2}),{Yr 0 - Business Group Level 3}),{Yr 0 - Business Group Level 4}),",
						"          {Yr 1 - Hierarchy Code} = concat(concat(concat({Yr 1 - Business Group Level 1}, {Yr 1 - Business Group Level 2}),{Yr 1 - Business Group Level 3}),{Yr 1 - Business Group Level 4}),",
						"          {Yr 2 - Hierarchy Code} = concat(concat(concat({Yr 1 - Business Group Level 1}, {Yr 2 - Business Group Level 2}),{Yr 2 - Business Group Level 3}),{Yr 2 - Business Group Level 4}),",
						"          {Yr 3 - Hierarchy Code} = concat(concat(concat({Yr 3 - Business Group Level 1}, {Yr 3 - Business Group Level 2}),{Yr 3 - Business Group Level 3}),{Yr 3 - Business Group Level 4}),",
						"          {Yr 0 to Yr 1 Lvl 1 Change} = iif({Yr 0 - Business Group Level 1}=={Yr 1 - Business Group Level 1},'N','Y'),",
						"          {Yr 0 to Yr 1 Lvl 2 Change} = iif({Yr 0 - Business Group Level 2}=={Yr 1 - Business Group Level 2},'N','Y'),",
						"          {Yr 0 to Yr 1 Lvl 3 Change} = iif({Yr 0 - Business Group Level 3}=={Yr 1 - Business Group Level 3},'N','Y'),",
						"          {Yr 0 to Yr 1 Lvl 4 Change} = iif({Yr 0 - Business Group Level 4}=={Yr 1 - Business Group Level 4},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 1 Change} = iif({Yr 1 - Business Group Level 1}=={Yr 1 - Business Group Level 1},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 2 Change} = iif({Yr 1 - Business Group Level 2}=={Yr 2 - Business Group Level 2},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 3 Change} = iif({Yr 1 - Business Group Level 3}=={Yr 2 - Business Group Level 3},'N','Y'),",
						"          {Yr 1 to Yr 2 Lvl 4 Change} = iif({Yr 1 - Business Group Level 4}=={Yr 2 - Business Group Level 4},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 1 Change} = iif({Yr 1 - Business Group Level 1}=={Yr 3 - Business Group Level 1},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 2 Change} = iif({Yr 2 - Business Group Level 2}=={Yr 3 - Business Group Level 2},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 3 Change} = iif({Yr 2 - Business Group Level 3}=={Yr 3 - Business Group Level 3},'N','Y'),",
						"          {Yr 2 to Yr 3 Lvl 4 Change} = iif({Yr 2 - Business Group Level 4}=={Yr 3 - Business Group Level 4},'N','Y'),",
						"          {Yr 0 to Yr 1 Job Change} = iif({Yr 0 - Job Title}=={Yr 1 - Job Title},'N','Y'),",
						"          {Yr 1 to Yr 2 Job Change} = iif({Yr 1 - Job Title}=={Yr 2 - Job Title},'N','Y'),",
						"          {Yr 2 to Yr 3 Job Change} = iif({Yr 2 - Job Title}=={Yr 3 - Job Title},'N','Y')) ~> derivedHierarchyChg",
						"derivedHierarchyCodeChg derive({Yr 0 to Yr 1 Transfer Possibility} = iif({Yr 0 to Yr 1 Hierarchy Code Change}=='Y',iif({Yr 0 to Yr 1 Job Change}=='Y','Y','N'),'N'),",
						"          {Yr 1 to Yr 2 Transfer Possibility} = iif({Yr 1 to Yr 2 Hierarchy Code Change}=='Y',iif({Yr 1 to Yr 2 Job Change}=='Y','Y','N'),'N'),",
						"          {Yr 2 to Yr 3 Transfer Possibility} = iif({Yr 2 to Yr 3 Hierarchy Code Change}=='Y',iif({Yr 2 to Yr 3 Job Change}=='Y','Y','N'),'N')) ~> derivedTransfer",
						"derivedHierarchyChg derive({Yr 0 to Yr 1 Hierarchy Code Change} = iif({Yr 0 - Hierarchy Code}=={Yr 1 - Hierarchy Code},'N','Y'),",
						"          {Yr 1 to Yr 2 Hierarchy Code Change} = iif({Yr 1 - Hierarchy Code}=={Yr 2 - Hierarchy Code},'N','Y'),",
						"          {Yr 2 to Yr 3 Hierarchy Code Change} = iif({Yr 2 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'N','Y')) ~> derivedHierarchyCodeChg",
						"derivedColumn2 select(mapColumn(",
						"          {Worker Id},",
						"          {Yr 0 - Event Year},",
						"          {Yr 0 - Business Group Level 1},",
						"          {Yr 0 - Business Group Level 2},",
						"          {Yr 0 - Business Group Level 3},",
						"          {Yr 0 - Business Group Level 4},",
						"          {Yr 0 - Job Title},",
						"          {Yr 1 - Event Year},",
						"          {Yr 1 - Business Group Level 1},",
						"          {Yr 1 - Business Group Level 2},",
						"          {Yr 1 - Business Group Level 3},",
						"          {Yr 1 - Business Group Level 4},",
						"          {Yr 1 - Job Title},",
						"          {Yr 2 - Event Year},",
						"          {Yr 2 - Business Group Level 1},",
						"          {Yr 2 - Business Group Level 2},",
						"          {Yr 2 - Business Group Level 3},",
						"          {Yr 2 - Business Group Level 4},",
						"          {Yr 2 - Job Title},",
						"          {Yr 3 - Event Year},",
						"          {Yr 3 - Business Group Level 1},",
						"          {Yr 3 - Business Group Level 2},",
						"          {Yr 3 - Business Group Level 3},",
						"          {Yr 3 - Business Group Level 4},",
						"          {Yr 3 - Job Title},",
						"          {Yr 0 - Hierarchy Code},",
						"          {Yr 1 - Hierarchy Code},",
						"          {Yr 2 - Hierarchy Code},",
						"          {Yr 3 - Hierarchy Code},",
						"          {Yr 0 to Yr 1 Lvl 1 Change},",
						"          {Yr 0 to Yr 1 Lvl 2 Change},",
						"          {Yr 0 to Yr 1 Lvl 3 Change},",
						"          {Yr 0 to Yr 1 Lvl 4 Change},",
						"          {Yr 1 to Yr 2 Lvl 1 Change},",
						"          {Yr 1 to Yr 2 Lvl 2 Change},",
						"          {Yr 1 to Yr 2 Lvl 3 Change},",
						"          {Yr 1 to Yr 2 Lvl 4 Change},",
						"          {Yr 2 to Yr 3 Lvl 1 Change},",
						"          {Yr 2 to Yr 3 Lvl 2 Change},",
						"          {Yr 2 to Yr 3 Lvl 3 Change},",
						"          {Yr 2 to Yr 3 Lvl 4 Change},",
						"          {Yr 0 to Yr 1 Job Change},",
						"          {Yr 1 to Yr 2 Job Change},",
						"          {Yr 2 to Yr 3 Job Change},",
						"          {Yr 0 to Yr 1 Hierarchy Code Change},",
						"          {Yr 1 to Yr 2 Hierarchy Code Change},",
						"          {Yr 2 to Yr 3 Hierarchy Code Change},",
						"          {Yr 0 to Yr 1 Transfer Possibility},",
						"          {Yr 1 to Yr 2 Transfer Possibility},",
						"          {Yr 2 to Yr 3 Transfer Possibility},",
						"          {Yr 0 Matches Yr 1},",
						"          {Yr 0 Matches Yr 2},",
						"          {Yr 0 Matches Yr 3},",
						"          {Yr 1 Matches Yr 2},",
						"          {Yr 1 Matches Yr 3},",
						"          {Yr 2 Matches Yr 3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHierarchyFlagOutput",
						"derivedTransfer derive({Yr 0 Matches Yr 1} = iif({Yr 0 - Hierarchy Code}=={Yr 1 - Hierarchy Code},'Y','N'),",
						"          {Yr 0 Matches Yr 2} = iif({Yr 0 - Hierarchy Code}=={Yr 2 - Hierarchy Code},'Y','N'),",
						"          {Yr 0 Matches Yr 3} = iif({Yr 0 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'Y','N'),",
						"          {Yr 1 Matches Yr 2} = iif({Yr 1 - Hierarchy Code}=={Yr 2 - Hierarchy Code},'Y','N'),",
						"          {Yr 1 Matches Yr 3} = iif({Yr 1 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'Y','N'),",
						"          {Yr 2 Matches Yr 3} = iif({Yr 2 - Hierarchy Code}=={Yr 3 - Hierarchy Code},'Y','N')) ~> derivedColumn2",
						"filterBaseYear, selectHierarchyFlagOutput join({Record Id} == {Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive({Mapped Hierarchy Lvl 1} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},\r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},\r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},\r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 2} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 3} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 4} = iif({Yr 0 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 0 Matches Yr 1}=='N' && {Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 0 Matches Yr 1}=='Y' && {Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 0 to Yr 1 Transfer Possibility}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4},'NO MAPPING' ))))) ~> Yr0SetMappingLogic",
						"Yr0PullOnlyMapped aggregate(groupBy({Yr 0 - Business Group Level 1},",
						"          {Yr 0 - Business Group Level 2},",
						"          {Yr 0 - Business Group Level 3},",
						"          {Yr 0 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year}),",
						"     {Record Count} = count({Record Id})) ~> Yr0SuggestedMapping",
						"Yr0SetMappingLogic filter(1==1) ~> Yr0PullOnlyMapped",
						"filterBaseYearPlus1, selectHierarchyFlagOutput join({Record Id} == {Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 derive({Mapped Hierarchy Lvl 1} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 2} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 3} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3},'NO MAPPING' )))),",
						"          {Mapped Hierarchy Lvl 4} = iif({Yr 1 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 1 Matches Yr 2}=='N' && {Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4},  \r",
						"iif({Yr 1 Matches Yr 2}=='Y' && {Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4}, \r",
						"iif({Yr 1 to Yr 2 Transfer Possibility}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4},'NO MAPPING' ))))) ~> Yr1SetMappingLogic",
						"Yr1SetMappingLogic filter(1==1) ~> Yr1PullOnlyMapped",
						"Yr1PullOnlyMapped aggregate(groupBy({Yr 1 - Business Group Level 1},",
						"          {Yr 1 - Business Group Level 2},",
						"          {Yr 1 - Business Group Level 3},",
						"          {Yr 1 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year}),",
						"     {Record Count} = count({Record Id})) ~> Yr1SuggestedMapping",
						"Yr1SuggestedMapping select(mapColumn(",
						"          {Business Group Level 1} = {Yr 1 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 1 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 1 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 1 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr1Mapping",
						"Yr0SuggestedMapping select(mapColumn(",
						"          {Business Group Level 1} = {Yr 0 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 0 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 0 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 0 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr0Mapping",
						"selectYr0Mapping, selectYr1Mapping, selectYr2Mapping, selectYr3Mapping union(byName: true)~> union1",
						"union1 aggregate(groupBy({Event Year},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4}),",
						"     {Record Count} = sum({Record Count})) ~> aggregate1",
						"filterBaseYearPlus2, selectHierarchyFlagOutput join({Record Id} == {Worker Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 derive({Mapped Hierarchy Lvl 1} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 1},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 1},'NO MAPPING' )),",
						"          {Mapped Hierarchy Lvl 2} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 2},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 2},'NO MAPPING' )),",
						"          {Mapped Hierarchy Lvl 3} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 3},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 3},'NO MAPPING' )),",
						"          {Mapped Hierarchy Lvl 4} = iif({Yr 2 Matches Yr 3}=='Y',{Yr 3 - Business Group Level 4},  iif({Yr 2 Matches Yr 3}=='N' && {Yr 2 to Yr 3 Transfer Possibility}=='N',{Yr 3 - Business Group Level 4},'NO MAPPING' ))) ~> Yr2SetMappingLogic",
						"Yr2SetMappingLogic filter(1==1) ~> Yr2PullOnlyMapped",
						"Yr2PullOnlyMapped aggregate(groupBy({Yr 2 - Business Group Level 1},",
						"          {Yr 2 - Business Group Level 2},",
						"          {Yr 2 - Business Group Level 3},",
						"          {Yr 2 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year}),",
						"     {Record Count} = count({Record Id})) ~> Yr2SuggestedMapping",
						"Yr2SuggestedMapping select(mapColumn(",
						"          {Business Group Level 1} = {Yr 2 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 2 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 2 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 2 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Record Count},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr2Mapping",
						"selectB3Hierarchy aggregate(groupBy({Yr 3 - Business Group Level 1},",
						"          {Yr 3 - Business Group Level 2},",
						"          {Yr 3 - Business Group Level 3},",
						"          {Yr 3 - Business Group Level 4},",
						"          {Yr 3 - Event Year}),",
						"     {Record Count} = count({Yr 3 - Worker Id})) ~> Yr3SuggestedMapping",
						"derivedColumn3 select(mapColumn(",
						"          {Business Group Level 1} = {Yr 3 - Business Group Level 1},",
						"          {Business Group Level 2} = {Yr 3 - Business Group Level 2},",
						"          {Business Group Level 3} = {Yr 3 - Business Group Level 3},",
						"          {Business Group Level 4} = {Yr 3 - Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Event Year} = {Yr 3 - Event Year},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectYr3Mapping",
						"Yr3SuggestedMapping derive({Mapped Hierarchy Lvl 1} = {Yr 3 - Business Group Level 1},",
						"          {Mapped Hierarchy Lvl 2} = {Yr 3 - Business Group Level 2},",
						"          {Mapped Hierarchy Lvl 3} = {Yr 3 - Business Group Level 3},",
						"          {Mapped Hierarchy Lvl 4} = {Yr 3 - Business Group Level 4}) ~> derivedColumn3",
						"derivedCreateKeyForDupCheck aggregate(groupBy({Hierarchy Key}),",
						"     {Dup Key Count} = count({Hierarchy Key})) ~> HierarchyKeyCount",
						"aggregate1 aggregate(groupBy({Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4}),",
						"     {Record Count} = sum({Record Count})) ~> SumWithoutYear",
						"joinDuplicateCountInfo select(mapColumn(",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Mapped Hierarchy Lvl 1},",
						"          {Mapped Hierarchy Lvl 2},",
						"          {Mapped Hierarchy Lvl 3},",
						"          {Mapped Hierarchy Lvl 4},",
						"          {Total Record Count} = {Record Count},",
						"          {Duplicate Hierarchy Count} = {Dup Key Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMappingWithDupCount",
						"aggregate1 derive({Hierarchy Key} = concat(concat(concat({Business Group Level 1},{Business Group Level 2}),{Business Group Level 3}),{Business Group Level 4})) ~> derivedCreateKeyForDupCheck",
						"SumWithoutYear derive({Hierarchy Key} = concat(concat(concat({Business Group Level 1},{Business Group Level 2}),{Business Group Level 3}),{Business Group Level 4})) ~> derivedCreateKeyForDupCheck1",
						"derivedCreateKeyForDupCheck1, HierarchyKeyCount join(derivedCreateKeyForDupCheck1@{Hierarchy Key} == HierarchyKeyCount@{Hierarchy Key},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDuplicateCountInfo",
						"derivedSetNullHierarchyToNA derive({Yr 0 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 0 - Business Group Level 2},'N/A'),",
						"          {Yr 0 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 0 - Business Group Level 3},'N/A'),",
						"          {Yr 0 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 0 - Business Group Level 4},'N/A'),",
						"          {Yr 1 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 1 - Business Group Level 2},'N/A'),",
						"          {Yr 1 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 1 - Business Group Level 3},'N/A'),",
						"          {Yr 1 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 1 - Business Group Level 4},'N/A'),",
						"          {Yr 2 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 2 - Business Group Level 2},'N/A'),",
						"          {Yr 2 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 2 - Business Group Level 3},'N/A'),",
						"          {Yr 2 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 2 - Business Group Level 4},'N/A'),",
						"          {Yr 3 - Business Group Level 2} = iif($Levels_Count=='2' || $Levels_Count=='3' || $Levels_Count=='4',{Yr 3 - Business Group Level 2},'N/A'),",
						"          {Yr 3 - Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Yr 3 - Business Group Level 3},'N/A'),",
						"          {Yr 3 - Business Group Level 4} = iif($Levels_Count=='4',{Yr 3 - Business Group Level 4},'N/A')) ~> derivedSetMappingLevels",
						"filter1 derive({Business Group Level 2} = iif($Levels_Count=='2'|| $Levels_Count=='3' || $Levels_Count=='4',{Business Group Level 2},'N/A'),",
						"          {Business Group Level 3} = iif($Levels_Count=='3' || $Levels_Count=='4',{Business Group Level 3},'N/A'),",
						"          {Business Group Level 4} = iif($Levels_Count=='4',{Business Group Level 4},'N/A')) ~> derivedSetHierarchyLvlScope",
						"AllCoreData filter(1==1) ~> filter1",
						"joinEachHCTYearB3 derive({Yr 0 - Business Group Level 1} = iif(isNull({Yr 0 - Business Group Level 1}),'N/A',{Yr 0 - Business Group Level 1}),",
						"          {Yr 0 - Business Group Level 2} = iif(isNull({Yr 0 - Business Group Level 2}),'N/A',{Yr 0 - Business Group Level 2}),",
						"          {Yr 0 - Business Group Level 3} = iif(isNull({Yr 0 - Business Group Level 3}),'N/A',{Yr 0 - Business Group Level 3}),",
						"          {Yr 0 - Business Group Level 4} = iif(isNull({Yr 0 - Business Group Level 4}),'N/A',{Yr 0 - Business Group Level 4}),",
						"          {Yr 1 - Business Group Level 1} = iif(isNull({Yr 1 - Business Group Level 1}),'N/A',{Yr 1 - Business Group Level 1}),",
						"          {Yr 1 - Business Group Level 2} = iif(isNull({Yr 1 - Business Group Level 2}),'N/A',{Yr 1 - Business Group Level 2}),",
						"          {Yr 1- Business Group Level 3} = iif(isNull({Yr 1 - Business Group Level 3}),'N/A',{Yr 1 - Business Group Level 3}),",
						"          {Yr 1 - Business Group Level 4} = iif(isNull({Yr 1 - Business Group Level 4}),'N/A',{Yr 1 - Business Group Level 4}),",
						"          {Yr 2 - Business Group Level 1} = iif(isNull({Yr 2 - Business Group Level 1}),'N/A',{Yr 2 - Business Group Level 1}),",
						"          {Yr 2 - Business Group Level 2} = iif(isNull({Yr 2 - Business Group Level 2}),'N/A',{Yr 2 - Business Group Level 2}),",
						"          {Yr 2 - Business Group Level 3} = iif(isNull({Yr 2 - Business Group Level 3}),'N/A',{Yr 2 - Business Group Level 3}),",
						"          {Yr 2 - Business Group Level 4} = iif(isNull({Yr 2 - Business Group Level 4}),'N/A',{Yr 2 - Business Group Level 4}),",
						"          {Yr 3 - Business Group Level 1} = iif(isNull({Yr 3 - Business Group Level 1}),'N/A',{Yr 3 - Business Group Level 1}),",
						"          {Yr 3 - Business Group Level 2} = iif(isNull({Yr 3 - Business Group Level 2}),'N/A',{Yr 3 - Business Group Level 2}),",
						"          {Yr 3 - Business Group Level 3} = iif(isNull({Yr 3 - Business Group Level 3}),'N/A',{Yr 3 - Business Group Level 3}),",
						"          {Yr 3 - Business Group Level 4} = iif(isNull({Yr 3 - Business Group Level 4}),'N/A',{Yr 3 - Business Group Level 4}),",
						"          {Yr 0 - Job Title} = iif(isNull({Yr 0 - Job Title}),'N/A',{Yr 0 - Job Title}),",
						"          {Yr 1 - Job Title} = iif(isNull({Yr 1 - Job Title}),'N/A',{Yr 1 - Job Title}),",
						"          {Yr 2 - Job Title} = iif(isNull({Yr 2 - Job Title}),'N/A',{Yr 2 - Job Title}),",
						"          {Yr 3 - Job Title} = iif(isNull({Yr 3 - Job Title}),'N/A',{Yr 3 - Job Title})) ~> derivedSetNullHierarchyToNA",
						"joinEachHCTYearB3 aggregate(groupBy({CY - Business Group Level 1} = {Yr 3 - Business Group Level 1},",
						"          {CY - Business Group Level 2} = {Yr 3 - Business Group Level 2},",
						"          {CY - Business Group Level 3} = {Yr 3 - Business Group Level 3},",
						"          {CY - Business Group Level 4} = {Yr 3 - Business Group Level 4},",
						"          {PY1 - Business Group Level 1} = {Yr 2 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2} = {Yr 2 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3} = {Yr 2 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4} = {Yr 2 - Business Group Level 4},",
						"          {PY2 - Business Group Level 1} = {Yr 1 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2} = {Yr 1 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3} = {Yr 1 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4} = {Yr 1 - Business Group Level 4},",
						"          {PY3 - Business Group Level 1} = {Yr 0 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2} = {Yr 0 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3} = {Yr 0 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4} = {Yr 0 - Business Group Level 4}),",
						"     WorkerCount = count({Worker Id})) ~> aggregate2",
						"selectHierarchyFlagOutput select(mapColumn(",
						"          {Worker Id},",
						"          {CY - Event Year} = {Yr 3 - Event Year},",
						"          {CY - Business Group Level 1} = {Yr 3 - Business Group Level 1},",
						"          {CY - Business Group Level 2} = {Yr 3 - Business Group Level 2},",
						"          {CY - Business Group Level 3} = {Yr 3 - Business Group Level 3},",
						"          {CY - Business Group Level 4} = {Yr 3 - Business Group Level 4},",
						"          {CY - Job Title} = {Yr 3 - Job Title},",
						"          {PY1 to CY Job Change} = {Yr 2 to Yr 3 Job Change},",
						"          {PY1 to CY Hierarchy Code Change} = {Yr 2 to Yr 3 Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility} = {Yr 2 to Yr 3 Transfer Possibility},",
						"          {PY1 - Event Year} = {Yr 2 - Event Year},",
						"          {PY1 - Business Group Level 1} = {Yr 2 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2} = {Yr 2 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3} = {Yr 2 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4} = {Yr 2 - Business Group Level 4},",
						"          {PY1 - Job Title} = {Yr 2 - Job Title},",
						"          {PY2 to PY1 Job Change} = {Yr 1 to Yr 2 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change} = {Yr 1 to Yr 2 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility} = {Yr 1 to Yr 2 Transfer Possibility},",
						"          {PY2 - Event Year} = {Yr 1 - Event Year},",
						"          {PY2 - Business Group Level 1} = {Yr 1 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2} = {Yr 1 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3} = {Yr 1 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4} = {Yr 1 - Business Group Level 4},",
						"          {PY2 - Job Title} = {Yr 1 - Job Title},",
						"          {PY3 to PY2 Job Change} = {Yr 0 to Yr 1 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change} = {Yr 0 to Yr 1 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility} = {Yr 0 to Yr 1 Transfer Possibility},",
						"          {PY3 - Event Year} = {Yr 0 - Event Year},",
						"          {PY3 - Business Group Level 1} = {Yr 0 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2} = {Yr 0 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3} = {Yr 0 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4} = {Yr 0 - Business Group Level 4},",
						"          {PY3 - Job Title} = {Yr 0 - Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy({PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> PY3Hierarchy",
						"select1 aggregate(groupBy({PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> PY2Hierarchy",
						"select1 aggregate(groupBy({PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> PY1Hierarchy",
						"select1 aggregate(groupBy({CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4}),",
						"     {Worker Count} = count({Worker Id})) ~> CYHierarchy",
						"CYHierarchy derive(CYHierarchyCode = concat(concat(concat({CY - Business Group Level 1},{CY - Business Group Level 2}),{CY - Business Group Level 3}),{CY - Business Group Level 4})) ~> CYHierarchyCode",
						"CYHierarchyCode filter({CY - Business Group Level 1}!=\"N/A\") ~> RemoveCYNA",
						"RemoveCYNA select(mapColumn(",
						"          CYHierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CYHierSelect",
						"PY1Hierarchy derive(PY1HierarchyCode = concat(concat(concat({PY1 - Business Group Level 1},{PY1 - Business Group Level 2}),{PY1 - Business Group Level 3}),{PY1 - Business Group Level 4})) ~> PY1HierarchyCode",
						"PY1HierarchyCode select(mapColumn(",
						"          PY1HierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PY1HierSelect",
						"PY2Hierarchy derive(PY2HierarchyCode = concat(concat(concat({PY2 - Business Group Level 1},{PY2 - Business Group Level 2}),{PY2 - Business Group Level 3}),{PY2 - Business Group Level 4})) ~> PY2HierarchyCode",
						"PY2HierarchyCode select(mapColumn(",
						"          PY2HierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PY2HierSelect",
						"PY3Hierarchy derive(PY2HierarchyCode = concat(concat(concat({PY3 - Business Group Level 1},{PY3 - Business Group Level 2}),{PY3 - Business Group Level 3}),{PY3 - Business Group Level 4})) ~> PY3HierarchyCode",
						"PY3HierarchyCode select(mapColumn(",
						"          PY3HierarchyCode = PY2HierarchyCode,",
						"          {Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PY3HierSelect",
						"PY1HierSelect, CYHierSelect lookup(PY1HierarchyCode == CYHierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py1inCY",
						"PY2HierSelect, CYHierSelect lookup(PY2HierarchyCode == CYHierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py2inCY",
						"PY3HierSelect, CYHierSelect lookup(PY3HierarchyCode == CYHierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py3inCY",
						"Py3inCY, PY2HierSelect lookup(PY3HierarchyCode == PY2HierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py3inPY2",
						"Py2inCY, PY1HierSelect lookup(PY2HierarchyCode == PY1HierarchyCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> Py2inPY1",
						"Py2inPY1 derive(PY2InCYHierarachy = iif(not(isNull(CYHierarchyCode)), 'Y','N'),",
						"          PY2InPY1Hierarachy = iif(not(isNull(PY1HierarchyCode)), 'Y','N')) ~> SetPY2Flags",
						"Py3inPY2 derive(PY3InCYHierarachy = iif(not(isNull(CYHierarchyCode)), 'Y','N'),",
						"          PY3InPY2Hierarachy = iif(not(isNull(PY2HierarchyCode)), 'Y','N')) ~> SetPY3Flags",
						"Py1inCY derive(PY1InCYHierarachy = iif(not(isNull(CYHierarchyCode)), 'Y','N')) ~> SetPY1Flags",
						"SetPY1Flags select(mapColumn(",
						"          {PY1 Hierarchy Code} = PY1HierarchyCode,",
						"          {PY1 In CY Hierarachy} = PY1InCYHierarachy,",
						"          {PY1 Worker Count} = PY1HierSelect@{Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPY1HierarchyFlags",
						"AssignHierarchyCodes, SelectPY1HierarchyFlags join(PY1HierarchyCode == {PY1 Hierarchy Code},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPY1HierarchyInfo",
						"select1 derive(CYHierarchyCode = concat(concat(concat({CY - Business Group Level 1},{CY - Business Group Level 2}),{CY - Business Group Level 3}),{CY - Business Group Level 4}),",
						"          PY1HierarchyCode = concat(concat(concat({PY1 - Business Group Level 1},{PY1 - Business Group Level 2}),{PY1 - Business Group Level 3}),{PY1 - Business Group Level 4}),",
						"          PY2HierarchyCode = concat(concat(concat({PY2 - Business Group Level 1},{PY2 - Business Group Level 2}),{PY2 - Business Group Level 3}),{PY2 - Business Group Level 4}),",
						"          PY3HierarchyCode = concat(concat(concat({PY3 - Business Group Level 1},{PY3 - Business Group Level 2}),{PY3 - Business Group Level 3}),{PY3 - Business Group Level 4})) ~> AssignHierarchyCodes",
						"JoinPY1HierarchyInfo, SelectPY2HierarchyFlags join(PY2HierarchyCode == {PY2 Hierarchy Code},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPY2HierarchyInfo",
						"SetPY2Flags select(mapColumn(",
						"          {PY2 Hierarchy Code} = PY2HierarchyCode,",
						"          {PY2 In CY Hierarachy} = PY2InCYHierarachy,",
						"          {PY2 In PY1 Hierarachy} = PY2InPY1Hierarachy,",
						"          {Worker Count} = PY2HierSelect@{Worker Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPY2HierarchyFlags",
						"SetPY3Flags select(mapColumn(",
						"          {PY3 Hierarchy Code} = PY3HierarchyCode,",
						"          {Worker Count} = PY3HierSelect@{Worker Count},",
						"          {PY3 In CY Hierarachy} = PY3InCYHierarachy,",
						"          {PY3 In PY2 Hierarachy} = PY3InPY2Hierarachy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPY3HierarchyFlags",
						"JoinPY2HierarchyInfo, SelectPY3HierarchyFlags join(PY3HierarchyCode == {PY3 Hierarchy Code},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPY3HierarchyInfo",
						"JoinCYHierarchyInfo select(mapColumn(",
						"          {Worker Id},",
						"          {CY - Event Year},",
						"          {CY - Hierarchy Code} = AssignHierarchyCodes@CYHierarchyCode,",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy} = CYHierSelect@{Worker Count},",
						"          {CY - Job Title},",
						"          {PY1 to CY Job Change},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code} = PY1HierarchyCode,",
						"          {PY1 - In CY Hierarachy} = {PY1 In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy} = {PY1 Worker Count},",
						"          {PY1 - Job Title},",
						"          {PY2 to PY1 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code} = PY2HierarchyCode,",
						"          {PY2 - In CY Hierarachy} = {PY2 In CY Hierarachy},",
						"          {PY2 - In PY1 Hierarachy} = {PY2 In PY1 Hierarachy},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Workers In Hierarchy} = SelectPY2HierarchyFlags@{Worker Count},",
						"          {PY2 - Job Title},",
						"          {PY3 to PY2 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code} = PY3HierarchyCode,",
						"          {PY3 - In CY Hierarachy} = {PY3 In CY Hierarachy},",
						"          {PY3 - In PY2 Hierarachy} = {PY3 In PY2 Hierarachy},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4},",
						"          {PY3 - Workers In Hierarchy} = SelectPY3HierarchyFlags@{Worker Count},",
						"          {PY3 - Job Title}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllHierarchyColumnsCleanup",
						"SelectAllHierarchyColumnsCleanup aggregate(groupBy({Worker Id},",
						"          {CY - Event Year},",
						"          {CY - Hierarchy Code},",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy},",
						"          {CY - Job Title},",
						"          {PY1 to CY Job Change},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy},",
						"          {PY1 - Job Title},",
						"          {PY2 to PY1 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - In CY Hierarachy},",
						"          {PY2 - In PY1 Hierarachy},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Workers In Hierarchy},",
						"          {PY2 - Job Title},",
						"          {PY3 to PY2 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code},",
						"          {PY3 - In CY Hierarachy},",
						"          {PY3 - In PY2 Hierarachy},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4},",
						"          {PY3 - Workers In Hierarchy},",
						"          {PY3 - Job Title}),",
						"     {Record Count} = count({Worker Id})) ~> aggregate3",
						"JoinPY3HierarchyInfo, CYHierSelect join(AssignHierarchyCodes@CYHierarchyCode == CYHierSelect@CYHierarchyCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCYHierarchyInfo",
						"aggregate3 derive({CY - Percentage of PY1 Employees} = (divide({CY - Workers In Hierarchy},{PY1 - Workers In Hierarchy}))*100,",
						"          {PY1 - Percentage of PY2 Employees} = (divide({PY1 - Workers In Hierarchy},{PY2 - Workers In Hierarchy}))*100,",
						"          {PY2 - Percentage of PY3 Employees} = (divide({PY2 - Workers In Hierarchy},{PY3 - Workers In Hierarchy}))*100) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          {Worker Id},",
						"          {CY - Event Year},",
						"          {CY - Hierarchy Code},",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy},",
						"          {CY - Percentage of PY1 Employees},",
						"          {CY - Job Title},",
						"          {PY1 to CY Job Change},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 to CY Transfer Possibility},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy},",
						"          {PY1 - Percentage of PY2 Employees},",
						"          {PY1 - Job Title},",
						"          {PY2 to PY1 Job Change},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 to PY1 Transfer Possibility},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - In CY Hierarachy},",
						"          {PY2 - In PY1 Hierarachy},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Workers In Hierarchy},",
						"          {PY2 - Percentage of PY3 Employees},",
						"          {PY2 - Job Title},",
						"          {PY3 to PY2 Job Change},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 to PY2 Transfer Possibility},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code},",
						"          {PY3 - In CY Hierarachy},",
						"          {PY3 - In PY2 Hierarachy},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4},",
						"          {PY3 - Workers In Hierarchy},",
						"          {PY3 - Job Title},",
						"          {Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalWorkerHistoryCompare",
						"SelectFinalWorkerHistoryCompare derive({CY - Percentage of PY1 Employees} = round({CY - Percentage of PY1 Employees}),",
						"          {PY1 - Percentage of PY2 Employees} = round({PY1 - Percentage of PY2 Employees}),",
						"          {PY2 - Percentage of PY3 Employees} = round({PY2 - Percentage of PY3 Employees})) ~> derivedColumn6",
						"derivedColumn6 aggregate(groupBy({CY - Event Year},",
						"          {CY - Hierarchy Code},",
						"          {CY - Business Group Level 1},",
						"          {CY - Business Group Level 2},",
						"          {CY - Business Group Level 3},",
						"          {CY - Business Group Level 4},",
						"          {CY - Workers In Hierarchy},",
						"          {CY - Percentage of PY1 Employees},",
						"          {PY1 to CY Hierarchy Code Change},",
						"          {PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - In CY Hierarachy},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4}),",
						"     {Record Count} = count({Worker Id})) ~> CYtoPY1",
						"CYtoPY1 filter({PY1 - In CY Hierarachy}==\"N\" && {PY1 - Business Group Level 1}!=\"N/A\") ~> filterCYtoPY1Groups",
						"filterCYtoPY1Groups derive({Map PY1 to CY} = iif({CY - Percentage of PY1 Employees}>=60,'Y','N')) ~> SetFlagForMappingCYtoPY1",
						"derivedColumn6 aggregate(groupBy({PY1 - Event Year},",
						"          {PY1 - Hierarchy Code},",
						"          {PY1 - Business Group Level 1},",
						"          {PY1 - Business Group Level 2},",
						"          {PY1 - Business Group Level 3},",
						"          {PY1 - Business Group Level 4},",
						"          {PY1 - Workers In Hierarchy},",
						"          {PY1 - Percentage of PY2 Employees},",
						"          {PY2 to PY1 Hierarchy Code Change},",
						"          {PY2 - In PY1 Hierarachy},",
						"          {PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4}),",
						"     {Record Count} = count({Worker Id})) ~> PY1toPY2",
						"PY1toPY2 filter({PY2 - In PY1 Hierarachy}==\"N\" && {PY2 - Business Group Level 1}!=\"N/A\") ~> filterPY1toPY2Groups",
						"filterPY1toPY2Groups derive({Map PY2 to PY1} = iif({PY1 - Percentage of PY2 Employees}>=60,'Y','N')) ~> SetFlagForMappingPY1toPY2",
						"derivedColumn6 aggregate(groupBy({PY2 - Event Year},",
						"          {PY2 - Hierarchy Code},",
						"          {PY2 - Business Group Level 1},",
						"          {PY2 - Business Group Level 2},",
						"          {PY2 - Business Group Level 3},",
						"          {PY2 - Business Group Level 4},",
						"          {PY2 - Percentage of PY3 Employees},",
						"          {PY3 to PY2 Hierarchy Code Change},",
						"          {PY3 - In PY2 Hierarachy},",
						"          {PY3 - Event Year},",
						"          {PY3 - Hierarchy Code},",
						"          {PY3 - Business Group Level 1},",
						"          {PY3 - Business Group Level 2},",
						"          {PY3 - Business Group Level 3},",
						"          {PY3 - Business Group Level 4}),",
						"     {Record Count} = count({Worker Id})) ~> PY2toPY3",
						"PY2toPY3 filter({PY3 - In PY2 Hierarachy}==\"N\" && {PY3 - Business Group Level 1}!=\"N/A\") ~> filter2",
						"filter2 derive({Map PY3 to PY2} = iif({PY2 - Percentage of PY3 Employees}>=60,'Y','N')) ~> SetFlagForMappingPY2toPY3",
						"selectMappingWithDupCount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['Business Mapping Suggestions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"selectHierarchyFlagOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['Business Mapping Suggestions Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['FullHierarchyList.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"derivedColumn6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     partitionFileNames:['WorkerHierarchyDetailbyYr.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink4"
					]
				}
			},
			"dependsOn": []
		}
	]
}