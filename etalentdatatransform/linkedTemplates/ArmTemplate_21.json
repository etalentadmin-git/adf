{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad_BLSTbl')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "Female"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "Male"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "Total"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotalNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotalNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotalNonHisp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBLSTbl",
								"type": "DatasetReference"
							},
							"name": "FullLoadBLSTable"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "OtherTotalHispFinal"
						},
						{
							"name": "GetMaxID"
						},
						{
							"name": "JoinInMaxTimeID"
						},
						{
							"name": "CalculateLatestTimeValue"
						},
						{
							"name": "GetMaxIDMaleHisp"
						},
						{
							"name": "JoinInMaxTimeIDMaleHisp"
						},
						{
							"name": "CalculateLatestTimeValueOtherMaleHisp"
						},
						{
							"name": "OtherMaleHispFinal"
						},
						{
							"name": "GetMaxIDFemaleHisp"
						},
						{
							"name": "JoinInMaxTimeIDFemaleHisp"
						},
						{
							"name": "CalculateLatestTimeValueOtherFemaleHisp"
						},
						{
							"name": "OtherFemaleHispFinal"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Female",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Male",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Total",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotalNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotalNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotalNonHisp",
						"union1 derive(LastRefreshDt = currentTimestamp()) ~> derivedColumn1",
						"RemoveNullRows select(mapColumn(",
						"          LastRefreshDt,",
						"          Source,",
						"          SourceId,",
						"          SourceDesc = Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"AmerIndAlaskNatFemale, AmerIndAlaskNatMale, AmerIndAlaskNatTotal, AsianFemale, AsianMale, AsianTotal, BlackFemale, BlackMale, BlackTotal, Female, LatinxFemale, LatinxMale, LatinxTotal, Male, NatHawPacIslFemale, NatHawPacIslMale, NatHawPacIslTotal, Total, TwoOrMoreFemale, TwoOrMoreMale, TwoOrMoreTotal, WhiteFemale, WhiteMale, WhiteTotal, AsianFemaleHisp, AsianFemaleNonHisp, AsianMaleHisp, AsianMaleNonHisp, AsianTotalHisp, AsianTotalNonHisp, BlackFemaleHisp, BlackFemaleNonHisp, BlackMaleHisp, BlackMaleNonHisp, BlackTotalHisp, BlackTotalNonHisp, OtherFemaleHispFinal, OtherMaleHispFinal, OtherTotalHispFinal, WhiteFemaleHisp, WhiteFemaleNonHisp, WhiteMaleHisp, WhiteMaleNonHisp, WhiteTotalHisp, WhiteTotalNonHisp union(byName: true)~> union1",
						"derivedColumn1 aggregate(groupBy(Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount,",
						"          LastRefreshDt),",
						"     RowCount = count(SourceId)) ~> RemoveDuplicates",
						"CalculateLatestTimeValue select(mapColumn(",
						"          Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OtherTotalHispFinal",
						"OtherTotalHisp aggregate(groupBy(MAXSourceId = SourceId),",
						"     MaxTimePeriod = max(Year+Quarter)) ~> GetMaxID",
						"OtherTotalHisp, GetMaxID join(SourceId == MAXSourceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInMaxTimeID",
						"JoinInMaxTimeID derive(Latest = iif(MaxTimePeriod==(Year+Quarter),'TRUE','')) ~> CalculateLatestTimeValue",
						"OtherMaleHisp aggregate(groupBy(MAXSourceId = SourceId),",
						"     MaxTimePeriod = max(Year+Quarter)) ~> GetMaxIDMaleHisp",
						"OtherMaleHisp, GetMaxIDMaleHisp join(SourceId == MAXSourceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInMaxTimeIDMaleHisp",
						"JoinInMaxTimeIDMaleHisp derive(Latest = iif(MaxTimePeriod==(Year+Quarter),'TRUE','')) ~> CalculateLatestTimeValueOtherMaleHisp",
						"CalculateLatestTimeValueOtherMaleHisp select(mapColumn(",
						"          Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OtherMaleHispFinal",
						"OtherFemaleHisp aggregate(groupBy(MAXSourceId = SourceId),",
						"     MaxTimePeriod = max(Year+Quarter)) ~> GetMaxIDFemaleHisp",
						"OtherFemaleHisp, GetMaxIDFemaleHisp join(SourceId == MAXSourceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInMaxTimeIDFemaleHisp",
						"JoinInMaxTimeIDFemaleHisp derive(Latest = iif(MaxTimePeriod==(Year+Quarter),'TRUE','')) ~> CalculateLatestTimeValueOtherFemaleHisp",
						"CalculateLatestTimeValueOtherFemaleHisp select(mapColumn(",
						"          Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OtherFemaleHispFinal",
						"RemoveDuplicates filter(!isNull(SourceId)) ~> RemoveNullRows",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LastRefreshDt as date,",
						"          Source as string,",
						"          SourceId as string,",
						"          SourceDesc as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FullLoadBLSTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_ApplStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_ApplStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ApplStatus": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendApplStatusFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_ApplicantStatus",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_ApplicantStatus",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ApplicantStatus": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:14:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_ApplStatus_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_ApplStatus_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ApplStatus": {},
									"AppendApplStatusFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Applicant",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Applicant",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_Applicant",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Applicant",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ApplicantFact": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T19:52:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Applicant_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Applicant_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicant": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ClientInfo_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Tbl_Client_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Tbl_Client_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceCore": {},
									"LoadClientInfo": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Core",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteQtrHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Core",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Core": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendCoreFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_Core",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Core",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Core": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "DeleteQtrHistory",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'QTR')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_Qtr_Rec_FactTbl_Core",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_Qtr_Rec_FactTbl_Core",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												},
												"Flow_Year": {
													"value": "'@{pipeline().parameters.P_Folder_Year}'",
													"type": "Expression"
												},
												"Flow_Quarter": {
													"value": "'@{pipeline().parameters.P_Folder_Quarter}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Core": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All_Qtr": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T19:52:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Core_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Core_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Core": {},
									"AppendCoreFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_DivSlate",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_DivSlate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DivSlate": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendDivSlateFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_DivSlate",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_DivSlate",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DivSlateFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:19:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_DivSlate_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_DivSlate_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DivSlate": {},
									"AppendDivSlateFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Other",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteQtrHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_OtherCore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendOtherFactTbl": {},
									"OtherNullRecordOutput": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_OtherCore",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_OtherCore",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"OtherCoreFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "DeleteQtrHistory",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'Qtr')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_Qtr_Rec_FactTbl_OtherCore",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_Qtr_Rec_FactTbl_OtherCore",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												},
												"Flow_Year": {
													"value": "'@{pipeline().parameters.P_Folder_Year}'",
													"type": "Expression"
												},
												"Flow_Quarter": {
													"value": "'@{pipeline().parameters.P_Folder_Quarter}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"OtherCoreFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All_Qtr": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T17:55:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_OtherCore_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_OtherCore_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Other": {},
									"AppendOtherFactTbl": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_PerfRatingHist",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_PerfRatingHist",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PerRatingHistory": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendTalentMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_PerfRatingHist",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_PerfRatingHist",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"PerfRatingHistFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:23:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRating_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_PerfRatingHist_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_PerfRatingHist_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PerRatingHistory": {},
									"AppendTalentMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Req",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Req",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendReqFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_Req",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Req",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Requisition": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:26:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Req_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Req_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Requisitions": {},
									"AppendReqFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_SilverMedalist",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_SilverMedalist",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SilverMedalist": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendSilverMedalistFAct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_SilverMedalist",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_SilverMedalist",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SilverMedalistFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T17:55:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_SilverMedalist_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_SilverMedalist_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_SilverMedalist_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SilverMedalist": {},
									"AppendSilverMedalistFAct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Speedbumps",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Speedbumps",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Speedbumps": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:44:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Speedbumps_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Speedbumps_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Speedbumps_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Speedbumps": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": []
		}
	]
}