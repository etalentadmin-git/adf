{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"OtherCoreFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Speedbmps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "Speedbumps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> Speedbumps",
						"Speedbumps alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt','EventQuarter','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_SB_Year as string,",
						"     Flow_SB_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> SpeedbumpsFactTbl",
						"SpeedbumpsFactTbl alterRow(deleteIf(EventQuarter==toInteger($Flow_SB_Quarter)),",
						"     deleteIf(EventYear==toInteger($Flow_SB_Year))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt','EventQuarter','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantFlowMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantFlowMap",
						"ApplicantFlowMap alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "BusinessHIerarchy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecordsFromCandidateStatus"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[BusinessMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> BusinessHIerarchy",
						"BusinessHIerarchy alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecordsFromCandidateStatus"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CorpTitleMap",
						"CorpTitleMap alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DisabilityMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[DisabilityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DisabilityMap",
						"DisabilityMap alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "EthnicityMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EthnicityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EthnicityMapTbl",
						"EthnicityMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "EventMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EventMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EventMapTbl",
						"EventMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "GenderMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[GenderMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> GenderMapTbl",
						"GenderMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Job')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentJobMapReviewTbl",
								"type": "DatasetReference"
							},
							"name": "JobMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentJobMapReviewTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientCorpTitle as string,",
						"          ClientJobTitle as string,",
						"          ClientJobFunction as string,",
						"          ElloreeJobFunction as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[JobMapReviewTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> JobMapTbl",
						"JobMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientCorpTitle as string,",
						"          ClientJobTitle as string,",
						"          ClientJobFunction as string,",
						"          ElloreeJobFunction as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "LGBTQMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LGTBQMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LGBTQMapTbl",
						"LGBTQMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "LocationMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LocationMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LocationMapTbl",
						"LocationMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LocationIdentifier1 as string,",
						"          LocationIdentifier2 as string,",
						"          LocationIdentifier3 as string,",
						"          LocationIdentifier4 as string,",
						"          LocationIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_PerfRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingMapTbl",
						"PerfRatingMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ReqStatusMap')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqStatusMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqStatusMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ReqStatusMapTbl",
						"ReqStatusMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqTypeMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTypeMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ReqTypeMapTbl",
						"ReqTypeMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "VeteranMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[VeteranMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> VeteranMapTbl",
						"VeteranMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Tmp_OtherCoreAnalysis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Temp Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          Type as string,",
						"          DataCollectionYear as integer,",
						"          DataCollectionQuarter as integer,",
						"          Notes as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['Id','Type','Year','Quarter'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad_BLSTbl')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "Female"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "Male"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "Total"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotalNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotalNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotalNonHisp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBLSTbl",
								"type": "DatasetReference"
							},
							"name": "FullLoadBLSTable"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "OtherTotalHispFinal"
						},
						{
							"name": "GetMaxID"
						},
						{
							"name": "JoinInMaxTimeID"
						},
						{
							"name": "CalculateLatestTimeValue"
						},
						{
							"name": "GetMaxIDMaleHisp"
						},
						{
							"name": "JoinInMaxTimeIDMaleHisp"
						},
						{
							"name": "CalculateLatestTimeValueOtherMaleHisp"
						},
						{
							"name": "OtherMaleHispFinal"
						},
						{
							"name": "GetMaxIDFemaleHisp"
						},
						{
							"name": "JoinInMaxTimeIDFemaleHisp"
						},
						{
							"name": "CalculateLatestTimeValueOtherFemaleHisp"
						},
						{
							"name": "OtherFemaleHispFinal"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Female",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Male",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Total",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotalNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotalNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotalNonHisp",
						"union1 derive(LastRefreshDt = currentTimestamp()) ~> derivedColumn1",
						"RemoveDuplicates select(mapColumn(",
						"          LastRefreshDt,",
						"          Source,",
						"          SourceId,",
						"          SourceDesc = Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"AmerIndAlaskNatFemale, AmerIndAlaskNatMale, AmerIndAlaskNatTotal, AsianFemale, AsianMale, AsianTotal, BlackFemale, BlackMale, BlackTotal, Female, LatinxFemale, LatinxMale, LatinxTotal, Male, NatHawPacIslFemale, NatHawPacIslMale, NatHawPacIslTotal, Total, TwoOrMoreFemale, TwoOrMoreMale, TwoOrMoreTotal, WhiteFemale, WhiteMale, WhiteTotal, AsianFemaleHisp, AsianFemaleNonHisp, AsianMaleHisp, AsianMaleNonHisp, AsianTotalHisp, AsianTotalNonHisp, BlackFemaleHisp, BlackFemaleNonHisp, BlackMaleHisp, BlackMaleNonHisp, BlackTotalHisp, BlackTotalNonHisp, OtherFemaleHispFinal, OtherMaleHispFinal, OtherTotalHispFinal, WhiteFemaleHisp, WhiteFemaleNonHisp, WhiteMaleHisp, WhiteMaleNonHisp, WhiteTotalHisp, WhiteTotalNonHisp union(byName: true)~> union1",
						"derivedColumn1 aggregate(groupBy(Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount,",
						"          LastRefreshDt),",
						"     RowCount = count(SourceId)) ~> RemoveDuplicates",
						"CalculateLatestTimeValue select(mapColumn(",
						"          Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OtherTotalHispFinal",
						"OtherTotalHisp aggregate(groupBy(MAXSourceId = SourceId),",
						"     MaxTimePeriod = max(Year+Quarter)) ~> GetMaxID",
						"OtherTotalHisp, GetMaxID join(SourceId == MAXSourceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInMaxTimeID",
						"JoinInMaxTimeID derive(Latest = iif(MaxTimePeriod==(Year+Quarter),'TRUE','')) ~> CalculateLatestTimeValue",
						"OtherMaleHisp aggregate(groupBy(MAXSourceId = SourceId),",
						"     MaxTimePeriod = max(Year+Quarter)) ~> GetMaxIDMaleHisp",
						"OtherMaleHisp, GetMaxIDMaleHisp join(SourceId == MAXSourceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInMaxTimeIDMaleHisp",
						"JoinInMaxTimeIDMaleHisp derive(Latest = iif(MaxTimePeriod==(Year+Quarter),'TRUE','')) ~> CalculateLatestTimeValueOtherMaleHisp",
						"CalculateLatestTimeValueOtherMaleHisp select(mapColumn(",
						"          Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OtherMaleHispFinal",
						"OtherFemaleHisp aggregate(groupBy(MAXSourceId = SourceId),",
						"     MaxTimePeriod = max(Year+Quarter)) ~> GetMaxIDFemaleHisp",
						"OtherFemaleHisp, GetMaxIDFemaleHisp join(SourceId == MAXSourceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInMaxTimeIDFemaleHisp",
						"JoinInMaxTimeIDFemaleHisp derive(Latest = iif(MaxTimePeriod==(Year+Quarter),'TRUE','')) ~> CalculateLatestTimeValueOtherFemaleHisp",
						"CalculateLatestTimeValueOtherFemaleHisp select(mapColumn(",
						"          Source,",
						"          SourceId,",
						"          Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OtherFemaleHispFinal",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LastRefreshDt as date,",
						"          Source as string,",
						"          SourceId as string,",
						"          SourceDesc as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FullLoadBLSTable"
					]
				}
			},
			"dependsOn": []
		}
	]
}