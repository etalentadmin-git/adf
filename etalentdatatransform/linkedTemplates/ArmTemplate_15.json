{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Applicant_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Applicant_Append",
								"type": "DatasetReference"
							},
							"name": "ApplicantAppendFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantAppendFile",
						"ApplicantAppendFile filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Job Applicant') ~> AddDerived",
						"AddDerived derive(Event = iif(isNull(Event),'Job Applicant',Event),",
						"          Source = iif(isNull(Source),'N/A',Source),",
						"          {Applicant Type} = iif(isNull({Applicant Type}),'N/A',{Applicant Type}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGTBQ = iif(isNull(LGTBQ),'N/A',LGTBQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Applicant Step Before Final Disposition} = iif(isNull({Applicant Step Before Final Disposition}),'N/A',{Applicant Step Before Final Disposition}),",
						"          {Applicant Rejected Reason} = iif(isNull({Applicant Rejected Reason}),'N/A',{Applicant Rejected Reason})) ~> ConvertNullsForKeyFields",
						"SelectFinal, Applicants union(byName: true)~> union1",
						"union1 aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOutput",
						"SelectOutput aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     RowCount = count({Applicant ID})) ~> aggregate1",
						"aggregate1 aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RowCount = count({Requisition ID})) ~> aggregate2",
						"aggregate2 derive(WorkerIDValue = iif(length(trim({Internal Worker ID}))>0, 'Y','N')) ~> derivedColumn1",
						"derivedColumn1 filter(WorkerIDValue=='Y') ~> filter1",
						"filter1 select(mapColumn(",
						"          {Applicant ID},",
						"          {Internal Worker ID for Match} = {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)},",
						"          RowCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ApplicantTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Core_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MergeEvents"
						},
						{
							"name": "AddDerived",
							"description": "Add employee count column for aggregations."
						},
						{
							"name": "select1"
						},
						{
							"name": "TagHeadcountEvent"
						},
						{
							"name": "TagTerminationEvent"
						},
						{
							"name": "TagHireEvent"
						},
						{
							"name": "TagPromotionEvent"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "filter4"
						},
						{
							"name": "select5"
						},
						{
							"name": "CalcNullDates"
						},
						{
							"name": "CalcServiceforNulls"
						},
						{
							"name": "RemoveNullWorkerIdRowsHCT"
						},
						{
							"name": "RemoveNullWorkerIdRowsTER"
						},
						{
							"name": "RemoveNullWorkerIdRowsHIR"
						},
						{
							"name": "RemoveNullWorkerIdRowsPRO"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveDuplicates"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years in Job} as double,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"TagHeadcountEvent, TagHireEvent, TagTerminationEvent, TagPromotionEvent union(byName: true)~> MergeEvents",
						"CalcServiceforNulls derive(EmpCount = 1,",
						"          {Generation Desc} = iif(not(isNull({Birth Year})), iif({Birth Year}<1946,'Pre-Boomer (<1946)', iif(between({Birth Year},1946,1964),'Boomer (1946-1964)', \r",
						"iif(between({Birth Year}, 1965, 1978),'Gen X (1965-1978)', \r",
						"iif(between({Birth Year},1979,1996),'Gen Y (1979-1996)', \r",
						"iif({Birth Year}>=1997,'Gen Z (>=1997)','Unknown'))))),{Generation Desc}),",
						"          {Generation Sort ID} = iif({Birth Year}<1946,1,  iif(between({Birth Year},1946,1964),2,  iif(between({Birth Year}, 1965, 1978),3,  iif(between({Birth Year},1979,1996),4,  iif({Birth Year}>=1997,5,6))))),",
						"          {Years of Service Band} = iif(between({Years of Service},0,0.25),'0-3 Months', \r",
						"iif(between({Years of Service},0.26,0.5),'4-6 Months', \r",
						"iif(between({Years of Service},0.51,0.99),'7-11 Months', \r",
						"iif(between({Years of Service},1,1.99),'1-2 Years', \r",
						"iif(between({Years of Service},2,4.99),'2-5 Years', \r",
						"iif(between({Years of Service},5,9.99),'5-10 Years', \r",
						"iif(between({Years of Service},10,14.99),'10-15 Years', \r",
						"iif(between({Years of Service},15,24.99),'15-25 Years', \r",
						"iif({Years of Service}>=25,'25+ Years', 'Unknown'))))))))),",
						"          {Years of Service Sort ID} = iif(between({Years of Service},0,0.25),9, \r",
						"iif(between({Years of Service},0.26,0.5),8, \r",
						"iif(between({Years of Service},0.51,0.99),7, \r",
						"iif(between({Years of Service},1,1.99),6, \r",
						"iif(between({Years of Service},2,4.99),5, \r",
						"iif(between({Years of Service},5,9.99),4, \r",
						"iif(between({Years of Service},10,14.99),3, \r",
						"iif(between({Years of Service},15,24.99),2, \r",
						"iif({Years of Service}>=25,1, 10))))))))),",
						"          {Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddDerived",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select2 derive(Event = 'Headcount',",
						"          {Event Code} = 'HCT') ~> TagHeadcountEvent",
						"select3 derive(Event = 'Termination',",
						"          {Event Code} = 'TER') ~> TagTerminationEvent",
						"select4 derive(Event = 'Hire',",
						"          {Event Code} = 'HIR') ~> TagHireEvent",
						"select5 derive(Event = 'Promotion',",
						"          {Event Code} = 'PRO') ~> TagPromotionEvent",
						"AddDerived derive({Event Type} = iif(isNull({Event Type}),'N/A',{Event Type}),",
						"          {Event Reason} = iif(isNull({Event Reason}),'N/A',{Event Reason}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Previous Corporate Title} = iif(isNull({Previous Corporate Title}),'N/A',{Previous Corporate Title}),",
						"          {Job Title} = iif(isNull({Job Title}),'N/A',{Job Title}),",
						"          {Job Family/Function} = iif(isNull({Job Family/Function}),'N/A',{Job Family/Function}),",
						"          {Previous Job Title} = iif(isNull({Previous Job Title}),'N/A',{Previous Job Family/Function}),",
						"          {Previous Job Family/Function} = iif(isNull({Previous Job Family/Function}),'N/A',{Previous Job Family/Function}),",
						"          {Rehire Indicator} = iif(isNull({Rehire Indicator}),'N/A',{Rehire Indicator}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work City} = iif(isNull({Work City}),'N/A',{Work City}),",
						"          {Work State} = iif(isNull({Work State}),'N/A',{Work State}),",
						"          {Work Country} = iif(isNull({Work Country}),'N/A',{Work Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Direct Manager Worker ID} = iif(isNull({Direct Manager Worker ID}),'N/A',{Direct Manager Worker ID}),",
						"          {Legacy Organization} = iif(isNull({Legacy Organization}),'N/A',{Legacy Organization}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGTBQ = iif(isNull(LGTBQ),'N/A',LGTBQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Generation Desc} = iif(isNull({Generation Desc}),'N/A',{Generation Desc}),",
						"          {Manager Indicator} = iif(isNull({Manager Indicator}),'N/A',{Manager Indicator})) ~> ConvertNullsForKeyFields",
						"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
						"RemoveNullWorkerIdRowsHCT select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
						"RemoveNullWorkerIdRowsTER select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
						"RemoveNullWorkerIdRowsHIR select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
						"RemoveNullWorkerIdRowsPRO select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"MergeEvents derive({Current Hire Date} = iif(isNull({Current Hire Date}),{Original Hire Date},{Current Hire Date})) ~> CalcNullDates",
						"CalcNullDates derive({Years of Service} = round({Years of Service},1),",
						"          {Years in Job} = round({Years in Job},1)) ~> CalcServiceforNulls",
						"filter1 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHCT",
						"filter2 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsTER",
						"filter3 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHIR",
						"filter4 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsPRO",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date})) ~> derivedColumn1",
						"select1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Event Date},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount),",
						"     RowCount = count({Worker ID})) ~> RemoveDuplicates",
						"RemoveDuplicates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['CoreFctTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_DivSlate_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "JoinEthMap"
						},
						{
							"name": "JoinGenderMap"
						},
						{
							"name": "SelectEthnicity"
						},
						{
							"name": "SelectGender"
						},
						{
							"name": "JoinApplicantMap"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectToRemoveJoinFields"
						},
						{
							"name": "CalcDivApplicantCount"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"Applicant select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectEthnicity join({Client ID} == {Ethnicity Client ID}",
						"     && {Client Engagement Date} == {Ethnicity Client Engagement Date}",
						"     && Race == {Ethnicity Client Race}",
						"     && {Hispanic or Latino Origin} == {Ethnicity Client Hispanic or Latino Origin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEthMap",
						"JoinEthMap, SelectGender join({Client ID} == {Gender Client ID}",
						"     && {Client Engagement Date} == {Gender Client Engagement Date}",
						"     && Gender == {Gender Client Gender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGenderMap",
						"EthnicityMap select(mapColumn(",
						"          {Ethnicity Client ID} = {Client ID},",
						"          {Ethnicity Client Engagement Date} = {Client Engagement Date},",
						"          {Ethnicity Client Race} = {Client Race},",
						"          {Ethnicity Client Hispanic or Latino Origin} = {Client Hispanic or Latino Origin},",
						"          {Ethnicity Elloree Race} = {Elloree Race},",
						"          {Ethnicity Elloree Hispanic or Latino Origin} = {Elloree Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEthnicity",
						"GenderMap select(mapColumn(",
						"          {Gender Client ID} = {Client ID},",
						"          {Gender Client Engagement Date} = {Client Engagement Date},",
						"          {Gender Client Gender} = {Client Gender},",
						"          {Gender Elloree Gender} = {Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGender",
						"JoinGenderMap, SelectApplicant join({Client ID} == {Applicant Client ID}",
						"     && {Client Engagement Date} == {Applicant Client Engagement Date}",
						"     && {Applicant Final Disposition} == {Applicant Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Applicant Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Applicant Client Applicant Rejected Reason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinApplicantMap",
						"ApplicantMap select(mapColumn(",
						"          {Applicant Client ID} = {Client ID},",
						"          {Applicant Client Engagement Date} = {Client Engagement Date},",
						"          {Applicant Client Applicant Final Disposition} = {Client Applicant Final Disposition},",
						"          {Applicant Client Applicant Step Before Final Disposition} = {Client Applicant Step Before Final Disposition},",
						"          {Applicant Client Applicant Rejected Reason} = {Client Applicant Rejected Reason},",
						"          {Applicant Elloree Applicant Final Disposition} = {Elloree Applicant Final Disposition},",
						"          {Applicant Elloree Applicant Category} = {Elloree Applicant Category},",
						"          {Applicant Elloree Submitted to Mgr Fl} = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"JoinApplicantMap select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Elloree Race} = {Ethnicity Elloree Race},",
						"          {Hispanic or Latino Origin},",
						"          {Elloree Hispanic or Latino Origin} = {Ethnicity Elloree Hispanic or Latino Origin},",
						"          Gender,",
						"          {Gender Elloree Gender},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition} = {Applicant Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category} = {Applicant Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl} = {Applicant Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectToRemoveJoinFields",
						"SelectToRemoveJoinFields derive({Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),1,0),",
						"          {Internal Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {External Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",1,0),0),",
						"          {Internal Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {External Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='White',1,0),0),",
						"          {Internal White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),",
						"          {External White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),",
						"          {White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='White',1,0),0),0),",
						"          {Internal White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),0),",
						"          {External White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),0),",
						"          {Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Black',1,0),0),",
						"          {Internal Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),",
						"          {External Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),",
						"          {Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Black',1,0),0),0),",
						"          {Internal Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),0),",
						"          {External Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),0),",
						"          {Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Asian',1,0),0),",
						"          {Internal Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),",
						"          {External Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),",
						"          {Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Asian',1,0),0),0),",
						"          {Internal Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {External Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {Latinx Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Internal Latinx Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {External Latinx Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {Internal Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {External Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),",
						"          {Internal 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {External 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Internal 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {External 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Other',1,0),0),",
						"          {Internal Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Other'),1,0),0),",
						"          {External Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Other'),1,0),0),",
						"          {Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {Internal Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {External Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {Internal PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {External PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),",
						"          {Internal Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {External Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Internal Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {External Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),",
						"          {Internal Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {External Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Internal Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {External Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),",
						"          {Internal Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {External Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Internal Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {External Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Diverse Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Internal Diverse Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {External Diverse Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Diverse Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Internal Diverse Candidates Hired} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {External Diverse Candidates Hired} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0)) ~> CalcDivApplicantCount",
						"CalcDivApplicantCount aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Requisition ID},",
						"          {Event Year}),",
						"     {Candidates StM} = sum({Candidates StM}),",
						"          {Internal Candidates StM} = sum({Internal Candidates StM}),",
						"          {External Candidates StM} = sum({External Candidates StM}),",
						"          {Candidates Hired} = sum({Candidates Hired}),",
						"          {Internal Candidates Hired} = sum({Internal Candidates Hired}),",
						"          {External Candidates Hired} = sum({External Candidates Hired}),",
						"          {White Candidates StM} = sum({White Candidates StM}),",
						"          {Internal White Candidates StM} = sum({Internal White Candidates StM}),",
						"          {External White Candidates StM} = sum({External White Candidates StM}),",
						"          {White Candidates Hired} = sum({White Candidates Hired}),",
						"          {Internal White Candidates Hired} = sum({Internal White Candidates Hired}),",
						"          {External White Candidates Hired} = sum({External White Candidates Hired}),",
						"          {Black Candidates StM} = sum({Black Candidates StM}),",
						"          {Internal Black Candidates StM} = sum({Internal Black Candidates StM}),",
						"          {External Black Candidates StM} = sum({External Black Candidates StM}),",
						"          {Black Candidates Hired} = sum({Black Candidates Hired}),",
						"          {Internal Black Candidates Hired} = sum({Internal Black Candidates Hired}),",
						"          {External Black Candidates Hired} = sum({External Black Candidates Hired}),",
						"          {Latinx Candidates StM} = sum({Latinx Candidates StM}),",
						"          {Internal Latinx Candidates StM} = sum({Internal Latinx Candidates StM}),",
						"          {External Latinx Candidates StM} = sum({External Latinx Candidates StM}),",
						"          {Latinx Candidates Hired} = sum({Latinx Candidates Hired}),",
						"          {Internal Latinx Candidates Hired} = sum({Internal Latinx Candidates Hired}),",
						"          {External Latinx Candidates Hired} = sum({External Latinx Candidates Hired}),",
						"          {Asian Candidates StM} = sum({Asian Candidates StM}),",
						"          {Internal Asian Candidates StM} = sum({Internal Asian Candidates StM}),",
						"          {External Asian Candidates StM} = sum({External Asian Candidates StM}),",
						"          {Asian Candidates Hired} = sum({Asian Candidates Hired}),",
						"          {Internal Asian Candidates Hired} = sum({Internal Asian Candidates Hired}),",
						"          {External Asian Candidates Hired} = sum({External Asian Candidates Hired}),",
						"          {2+ Races Candidates StM} = sum({2+ Races Candidates StM}),",
						"          {Internal 2+ Races Candidates StM} = sum({Internal 2+ Races Candidates StM}),",
						"          {External 2+ Races Candidates StM} = sum({External 2+ Races Candidates StM}),",
						"          {2+ Races Candidates Hired} = sum({2+ Races Candidates Hired}),",
						"          {Internal 2+ Races Candidates Hired} = sum({Internal 2+ Races Candidates Hired}),",
						"          {External 2+ Races Candidates Hired} = sum({External 2+ Races Candidates Hired}),",
						"          {Other Candidates StM} = sum({Other Candidates StM}),",
						"          {Internal Other Candidates StM} = sum({Internal Other Candidates StM}),",
						"          {External Other Candidates StM} = sum({External Other Candidates StM}),",
						"          {Other Candidates Hired} = sum({Other Candidates Hired}),",
						"          {Internal Other Candidates Hired} = sum({Internal Other Candidates Hired}),",
						"          {External Other Candidates Hired} = sum({External Other Candidates Hired}),",
						"          {Male Candidates StM} = sum({Male Candidates StM}),",
						"          {Internal Male Candidates StM} = sum({Internal Male Candidates StM}),",
						"          {External Male Candidates StM} = sum({External Male Candidates StM}),",
						"          {Male Candidates Hired} = sum({Male Candidates Hired}),",
						"          {Internal Male Candidates Hired} = sum({Internal Male Candidates Hired}),",
						"          {External Male Candidates Hired} = sum({External Male Candidates Hired}),",
						"          {Female Candidates StM} = sum({Female Candidates StM}),",
						"          {Internal Female Candidates StM} = sum({Internal Female Candidates StM}),",
						"          {External Female Candidates StM} = sum({External Female Candidates StM}),",
						"          {Female Candidates Hired} = sum({Female Candidates Hired}),",
						"          {Internal Female Candidates Hired} = sum({Internal Female Candidates Hired}),",
						"          {External Female Candidates Hired} = sum({External Female Candidates Hired}),",
						"          {Other Gender Candidates StM} = sum({Other Gender Candidates StM}),",
						"          {Internal Other Gender Candidates StM} = sum({Internal Other Gender Candidates StM}),",
						"          {External Other Gender Candidates StM} = sum({External Other Gender Candidates StM}),",
						"          {Other Gender Candidates Hired} = sum({Other Gender Candidates Hired}),",
						"          {Internal Other Gender Candidates Hired} = sum({Internal Other Gender Candidates Hired}),",
						"          {External Other Gender Candidates Hired} = sum({External Other Gender Candidates Hired}),",
						"          {PoC Candidates StM} = sum({PoC Candidates StM}),",
						"          {Internal PoC Candidates StM} = sum({Internal PoC Candidates StM}),",
						"          {External PoC Candidates StM} = sum({External PoC Candidates StM}),",
						"          {PoC  Candidates Hired} = sum({PoC Candidates Hired}),",
						"          {Internal PoC  Candidates Hired} = sum({Internal PoC Candidates Hired}),",
						"          {External PoC  Candidates Hired} = sum({External PoC Candidates Hired}),",
						"          {Diverse Candidates StM} = sum({Diverse Candidates StM}),",
						"          {Internal Diverse Candidates StM} = sum({Internal Diverse Candidates StM}),",
						"          {External Diverse Candidates StM} = sum({External Diverse Candidates StM}),",
						"          {Diverse Candidates Hired} = sum({Diverse Candidates Hired}),",
						"          {Internal Diverse Candidates Hired} = sum({Internal Diverse Candidates Hired}),",
						"          {External Diverse Candidates Hired} = sum({External Diverse Candidates Hired}),",
						"          {Female Not PoC Candidates StM} = sum({Female Not PoC Candidates StM}),",
						"          {Internal Female Not PoC Candidates StM} = sum({Internal Female Not PoC Candidates StM}),",
						"          {External Female Not PoC Candidates StM} = sum({External Female Not PoC Candidates StM}),",
						"          {Female Not PoC Candidates Hired} = sum({Female Not PoC Candidates Hired}),",
						"          {Internal Female Not PoC Candidates Hired} = sum({Internal Female Not PoC Candidates Hired}),",
						"          {External Female Not PoC Candidates Hired} = sum({External Female Not PoC Candidates Hired}),",
						"          {Female PoC Candidates StM} = sum({Female PoC Candidates StM}),",
						"          {Internal Female PoC Candidates StM} = sum({Internal Female PoC Candidates StM}),",
						"          {External Female PoC Candidates StM} = sum({External Female PoC Candidates StM}),",
						"          {Female PoC Candidates Hired} = sum({Female PoC Candidates Hired}),",
						"          {Internal Female PoC Candidates Hired} = sum({Internal Female PoC Candidates Hired}),",
						"          {External Female PoC Candidates Hired} = sum({External Female PoC Candidates Hired}),",
						"          {Not Female PoC Candidates StM} = sum({Not Female PoC Candidates StM}),",
						"          {Internal Not Female PoC Candidates StM} = sum({Internal Not Female PoC Candidates StM}),",
						"          {External Not Female PoC Candidates StM} = sum({External Not Female PoC Candidates StM}),",
						"          {Not Female PoC Candidates Hired} = sum({Not Female PoC Candidates Hired}),",
						"          {Internal Not Female PoC Candidates Hired} = sum({Internal Not Female PoC Candidates Hired}),",
						"          {External Not Female PoC Candidates Hired} = sum({External Not Female PoC Candidates Hired}),",
						"          {Not Female Not PoC Candidates StM} = sum({Not Female Not PoC Candidates StM}),",
						"          {Internal Not Female Not PoC Candidates StM} = sum({Internal Not Female Not PoC Candidates StM}),",
						"          {External Not Female Not PoC Candidates StM} = sum({External Not Female Not PoC Candidates StM}),",
						"          {Not Female Not PoC Candidates Hired} = sum({Not Female Not PoC Candidates Hired}),",
						"          {Internal Not Female Not PoC Candidates Hired} = sum({Internal Not Female Not PoC Candidates Hired}),",
						"          {External Not Female Not PoC Candidates Hired} = sum({External Not Female Not PoC Candidates Hired})) ~> aggregate1",
						"aggregate1 derive({Diverse Slate} = iif((iif({Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {Internal Diverse Slate} = iif((iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {External Diverse Slate} = iif((iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {No Diverse Slate} = iif({Diverse Candidates StM}==0,'Y','N'),",
						"          {Internal No Diverse Slate} = iif({Internal Diverse Candidates StM}==0,'Y','N'),",
						"          {External No Diverse Slate} = iif({External Diverse Candidates StM}==0,'Y','N'),",
						"          {Diverse Hired Slate} = iif({Diverse Candidates Hired}>0,'Y','N'),",
						"          {Internal Diverse Hired Slate} = iif({Internal Diverse Candidates Hired}>0,'Y','N'),",
						"          {External Diverse Hired Slate} = iif({External Diverse Candidates Hired}>0,'Y','N'),",
						"          {PoC Slate} = iif({PoC Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal PoC Slate} = iif({Internal PoC Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External PoC Slate} = iif({External PoC Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No PoC Slate} = iif({PoC Candidates StM}==0,'Y','N'),",
						"          {Internal No PoC Slate} = iif({Internal PoC Candidates StM}==0,'Y','N'),",
						"          {External No PoC Slate} = iif({External PoC Candidates StM}==0,'Y','N'),",
						"          {PoC Hired Slate} = iif({PoC  Candidates Hired}>0,'Y','N'),",
						"          {Internal PoC Hired Slate} = iif({Internal PoC  Candidates Hired}>0,'Y','N'),",
						"          {External PoC Hired Slate} = iif({External PoC  Candidates Hired}>0,'Y','N'),",
						"          {White Slate} = iif({White Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal White Slate} = iif({Internal White Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External White Slate} = iif({External White Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No White Slate} = iif({White Candidates StM}==0,'Y','N'),",
						"          {Internal No White Slate} = iif({Internal White Candidates StM}==0,'Y','N'),",
						"          {External No White Slate} = iif({External White Candidates StM}==0,'Y','N'),",
						"          {White Hired Slate} = iif({White Candidates Hired}>0,'Y','N'),",
						"          {Internal White Hired Slate} = iif({Internal White Candidates Hired}>0,'Y','N'),",
						"          {External White Hired Slate} = iif({External White Candidates Hired}>0,'Y','N'),",
						"          {Black Slate} = iif({Black Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Black Slate} = iif({Internal Black Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Black Slate} = iif({External Black Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Black Slate} = iif({Black Candidates StM}==0,'Y','N'),",
						"          {Internal No Black Slate} = iif({Internal Black Candidates StM}==0,'Y','N'),",
						"          {External No Black Slate} = iif({External Black Candidates StM}==0,'Y','N'),",
						"          {Black Hired Slate} = iif({Black Candidates Hired}>0,'Y','N'),",
						"          {Internal Black Hired Slate} = iif({Internal Black Candidates Hired}>0,'Y','N'),",
						"          {External Black Hired Slate} = iif({External Black Candidates Hired}>0,'Y','N'),",
						"          {Latinx Slate} = iif({Latinx Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Latinx Slate} = iif({Internal Latinx Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Latinx Slate} = iif({External Latinx Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Latinx Slate} = iif({Latinx Candidates StM}==0,'Y','N'),",
						"          {Internal No Latinx Slate} = iif({Internal Latinx Candidates StM}==0,'Y','N'),",
						"          {External No Latinx Slate} = iif({External Latinx Candidates StM}==0,'Y','N'),",
						"          {Latinx Hired Slate} = iif({Latinx Candidates Hired}>0,'Y','N'),",
						"          {Internal Latinx Hired Slate} = iif({Internal Latinx Candidates Hired}>0,'Y','N'),",
						"          {External Latinx Hired Slate} = iif({External Latinx Candidates Hired}>0,'Y','N'),",
						"          {Asian Slate} = iif({Asian Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Asian Slate} = iif({Internal Asian Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Asian Slate} = iif({External Asian Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Asian Slate} = iif({Asian Candidates StM}==0,'Y','N'),",
						"          {Internal No Asian Slate} = iif({Internal Asian Candidates StM}==0,'Y','N'),",
						"          {External No Asian Slate} = iif({External Asian Candidates StM}==0,'Y','N'),",
						"          {Asian Hired Slate} = iif({Asian Candidates Hired}>0,'Y','N'),",
						"          {Internal Asian Hired Slate} = iif({Internal Asian Candidates Hired}>0,'Y','N'),",
						"          {External Asian Hired Slate} = iif({External Asian Candidates Hired}>0,'Y','N'),",
						"          {2+ Races Slate} = iif({2+ Races Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External 2+ Races Slate} = iif({External 2+ Races Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No 2+ Races Slate} = iif({2+ Races Candidates StM}==0,'Y','N'),",
						"          {Internal No 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}==0,'Y','N'),",
						"          {External No 2+ Races Slate} = iif({External 2+ Races Candidates StM}==0,'Y','N'),",
						"          {2+ Races Hired Slate} = iif({2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Internal 2+ Races Hired Slate} = iif({Internal 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {External 2+ Races Hired Slate} = iif({External 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Other Race Slate} = iif({Other Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Other Race Slate} = iif({Internal Other Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Other Race Slate} = iif({External Other Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Other Race Slate} = iif({Other Candidates StM}==0,'Y','N'),",
						"          {Internal No Other Race Slate} = iif({Internal Other Candidates StM}==0,'Y','N'),",
						"          {External No Other Race Slate} = iif({External Other Candidates StM}==0,'Y','N'),",
						"          {Other Race Hired Slate} = iif({Other Candidates Hired}>0,'Y','N'),",
						"          {Internal Other Race Hired Slate} = iif({Internal Other Candidates Hired}>0,'Y','N'),",
						"          {External Other Race Hired Slate} = iif({External Other Candidates Hired}>0,'Y','N'),",
						"          {Female Slate} = iif({Female Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Female Slate} = iif({Internal Female Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Female Slate} = iif({External Female Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Female Slate} = iif({Female Candidates StM}==0,'Y','N'),",
						"          {Internal No Female Slate} = iif({Internal Female Candidates StM}==0,'Y','N'),",
						"          {External No Female Slate} = iif({External Female Candidates StM}==0,'Y','N'),",
						"          {Female Hired Slate} = iif({Female Candidates Hired}>0,'Y','N'),",
						"          {Internal Female Hired Slate} = iif({Internal Female Candidates Hired}>0,'Y','N'),",
						"          {External Female Hired Slate} = iif({External Female Candidates Hired}>0,'Y','N'),",
						"          {Male Slate} = iif({Male Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Male Slate} = iif({Internal Male Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Male Slate} = iif({External Male Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Male Slate} = iif({Male Candidates StM}==0,'Y','N'),",
						"          {Internal No Male Slate} = iif({Internal Male Candidates StM}==0,'Y','N'),",
						"          {External No Male Slate} = iif({External Male Candidates StM}==0,'Y','N'),",
						"          {Male Hired Slate} = iif({Male Candidates Hired}>0,'Y','N'),",
						"          {Internal Male Hired Slate} = iif({Internal Male Candidates Hired}>0,'Y','N'),",
						"          {External Male Hired Slate} = iif({External Male Candidates Hired}>0,'Y','N')) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TASlateFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_JobReq_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Req_Test",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "RemoveNullReqIDRows"
						},
						{
							"name": "tagEvent"
						},
						{
							"name": "AddEventMonth"
						},
						{
							"name": "RemoveDupRowsandAddRowCount"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"tagEvent derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddParameters",
						"AddEventMonth derive(Event = iif(isNull(Event),'N/A',Event),",
						"          {Requisition Type} = iif(isNull({Requisition Type}),'N/A',{Requisition Type}),",
						"          {Requisition Status} = iif(isNull({Requisition Status}),'N/A',{Requisition Status}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work Office City} = iif(isNull({Work Office City}),'N/A',{Work Office City}),",
						"          {Work Office State} = iif(isNull({Work Office State}),'N/A',{Work Office State}),",
						"          {Work Office Country} = iif(isNull({Work Office Country}),'N/A',{Work Office Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4})) ~> ConvertNullsForKeyFields",
						"FilterOutClientHeaderRowAndColumn filter(not(isNull({Event Date})) && not(isNull({Requisition ID}))) ~> RemoveNullReqIDRows",
						"RemoveNullReqIDRows derive(Event = 'Requisition',",
						"          EventId = 'REQ') ~> tagEvent",
						"AddParameters derive(EventMonth = month({Event Date})) ~> AddEventMonth",
						"SelectFinal aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}),",
						"     RowCount = count({Requisition ID})) ~> RemoveDupRowsandAddRowCount",
						"RemoveDupRowsandAddRowCount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ReqTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_JobReq_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "JobRegFactTableFile"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_JobReq_Append",
								"type": "DatasetReference"
							},
							"name": "JobReqAppendFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "AddEventMonth"
						},
						{
							"name": "RemoveNullReqID"
						},
						{
							"name": "tagEvent"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobRegFactTableFile",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobReqAppendFile",
						"JobReqAppendFile filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"AddEventMonth select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"tagEvent derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddParameters",
						"AddParameters derive(Event = iif(isNull(Event),'N/A',Event),",
						"          {Requisition Type} = iif(isNull({Requisition Type}),'N/A',{Requisition Type}),",
						"          {Requisition Status} = iif(isNull({Requisition Status}),'N/A',{Requisition Status}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work Office City} = iif(isNull({Work Office City}),'N/A',{Work Office City}),",
						"          {Work Office Country} = iif(isNull({Work Office Country}),'N/A',{Work Office Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4})) ~> ConvertNullsForKeyFields",
						"SelectFinal, JobRegFactTableFile union(byName: true)~> union1",
						"RemoveDuplicates aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}),",
						"     RowCount = count({Requisition ID})) ~> SelectOutput",
						"union1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicates",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date})) ~> AddEventMonth",
						"FilterOutClientHeaderRowAndColumn filter(not(isNull({Event Date})) && not(isNull({Requisition ID}))) ~> RemoveNullReqID",
						"RemoveNullReqID derive(Event = 'Requisition',",
						"          EventId = 'REQ') ~> tagEvent",
						"SelectOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ReqTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherAnaylysis_Curr_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_Curr",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as short,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By WorkerId,ClientId,ClientEngagementDt\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          ClientId as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select ClientId, MAX(CAST(LEFT(TYPE, 4) as INT)) as Year from [dbo].[OtherCoreAnalysisRefTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By ClientId\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          ClientId = OtherCoreWorkers@ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          Curr_DataCollectionYear = {Data Collection Year},",
						"          Curr_DataCollectionQuarter = {Data Collection Quarter},",
						"          Curr_EventYear = Year,",
						"          Curr_T1Type = {T1 Type},",
						"          Curr_T1OtherCharVal1 = {T1 OtherCharVal1},",
						"          Curr_T1OtherCharVal2 = {T1 OtherCharVal2},",
						"          Curr_T1OtherNumVal1 = {T1 OtherNumVal1},",
						"          Curr_T1OtherNumVal2 = {T1 OtherNumVal2},",
						"          Curr_T1OtherDtVal1 = {T1 OtherDtVal1},",
						"          Curr_T1OtherDtVal2 = {T1 OtherDtVal2},",
						"          Curr_T2Type = {T2 Type},",
						"          Curr_T2OtherCharVal1 = {T2 OtherCharVal1},",
						"          Curr_T2OtherCharVal2 = {T2 OtherCharVal2},",
						"          Curr_T2OtherNumVal1 = {T2 OtherNumVal1},",
						"          Curr_T2OtherNumVal2 = {T2 OtherNumVal2},",
						"          Curr_T2OtherDtVal1 = {T2 OtherDtVal1},",
						"          Curr_T2OtherDtVal2 = {T2 OtherDtVal2},",
						"          Curr_T3Type = {T3 Type},",
						"          Curr_T3OtherCharVal1 = {T3 OtherCharVal1},",
						"          Curr_T3OtherCharVal2 = {T3 OtherCharVal2},",
						"          Curr_T3OtherNumVal1 = {T3 OtherNumVal1},",
						"          Curr_T3OtherNumVal2 = {T3 OtherNumVal2},",
						"          Curr_T3OtherDtVal1 = {T3 OtherDtVal1},",
						"          Curr_T3OtherDtVal2 = {T3 OtherDtVal2},",
						"          Curr_T4Type = {T4 Type},",
						"          Curr_T4OtherCharVal1 = {T4 OtherCharVal1},",
						"          Curr_T4OtherCharVal2 = {T4 OtherCharVal2},",
						"          Curr_T4OtherNumVal1 = {T4 OtherNumVal1},",
						"          Curr_T4OtherNumVal2 = {T4 OtherNumVal2},",
						"          Curr_T4OtherDtVal1 = {T4 OtherDtVal1},",
						"          Curr_T4OtherDtVal2 = {T4 OtherDtVal2},",
						"          Curr_T5Type = {T5 Type},",
						"          Curr_T5OtherCharVal1 = {T5 OtherCharVal1},",
						"          Curr_T5OtherCharVal2 = {T5 OtherCharVal2},",
						"          Curr_T5OtherNumVal1 = {T5 OtherNumVal1},",
						"          Curr_T5OtherNumVal2 = {T5 OtherNumVal2},",
						"          Curr_T5OtherDtVal1 = {T5 OtherDtVal1},",
						"          Curr_T5OtherDtVal2 = {T5 OtherDtVal2},",
						"          Curr_T6Type = {T6 Type},",
						"          Curr_T6OtherCharVal1 = {T6 OtherCharVal1},",
						"          Curr_T6OtherCharVal2 = {T6 OtherCharVal2},",
						"          Curr_T6OtherNumVal1 = {T6 OtherNumVal1},",
						"          Curr_T6OtherNumVal2 = {T6 OtherNumVal2},",
						"          Curr_T6OtherDtVal1 = {T6 OtherDtVal1},",
						"          Curr_T6OtherDtVal2 = {T6 OtherDtVal2},",
						"          Curr_T7Type = {T7 Type},",
						"          Curr_T7OtherCharVal1 = {T7 OtherCharVal1},",
						"          Curr_T7OtherCharVal2 = {T7 OtherCharVal2},",
						"          Curr_T7OtherNumVal1 = {T7 OtherNumVal1},",
						"          Curr_T7OtherNumVal2 = {T7 OtherNumVal2},",
						"          Curr_T7OtherDtVal1 = {T7 OtherDtVal1},",
						"          Curr_T7OtherDtVal2 = {T7 OtherDtVal2},",
						"          Curr_T8Type = {T8 Type},",
						"          Curr_T8OtherCharVal1 = {T8 OtherCharVal1},",
						"          Curr_T8OtherCharVal2 = {T8 OtherCharVal2},",
						"          Curr_T8OtherNumVal1 = {T8 OtherNumVal1},",
						"          Curr_T8OtherNumVal2 = {T8 OtherNumVal2},",
						"          Curr_T8OtherDtVal1 = {T8 OtherDtVal1},",
						"          Curr_T8OtherDtVal2 = {T8 OtherDtVal2},",
						"          Curr_T9Type = {T9 Type},",
						"          Curr_T9OtherCharVal1 = {T9 OtherCharVal1},",
						"          Curr_T9OtherCharVal2 = {T9 OtherCharVal2},",
						"          Curr_T9OtherNumVal1 = {T9 OtherNumVal1},",
						"          Curr_T9OtherNumVal2 = {T9 OtherNumVal2},",
						"          Curr_T9OtherDtVal1 = {T9 OtherDtVal1},",
						"          Curr_T9OtherDtVal2 = {T9 OtherDtVal2},",
						"          Curr_T10Type = {T10 Type},",
						"          Curr_T10OtherCharVal1 = {T10 OtherCharVal1},",
						"          Curr_T10OtherCharVal2 = {T10 OtherCharVal2},",
						"          Curr_T10OtherNumVal1 = {T10 OtherNumVal1},",
						"          Curr_T10OtherNumVal2 = {T10 OtherNumVal2},",
						"          Curr_T10OtherDtVal1 = {T10 OtherDtVal1},",
						"          Curr_T10OtherDtVal2 = {T10 OtherDtVal2},",
						"          Curr_T11Type = {T11 Type},",
						"          Curr_T11OtherCharVal1 = {T11 OtherCharVal1},",
						"          Curr_T11OtherCharVal2 = {T11 OtherCharVal2},",
						"          Curr_T11OtherNumVal1 = {T11 OtherNumVal1},",
						"          Curr_T11OtherNumVal2 = {T11 OtherNumVal2},",
						"          Curr_T11OtherDtVal1 = {T11 OtherDtVal1},",
						"          Curr_T11OtherDtVal2 = {T11 OtherDtVal2},",
						"          Curr_T12Type = {T12 Type},",
						"          Curr_T12OtherCharVal1 = {T12 OtherCharVal1},",
						"          Curr_T12OtherCharVal2 = {T12 OtherCharVal2},",
						"          Curr_T12OtherNumVal1 = {T12 OtherNumVal1},",
						"          Curr_T12OtherNumVal2 = {T12 OtherNumVal2},",
						"          Curr_T12OtherDtVal1 = {T12 OtherDtVal1},",
						"          Curr_T12OtherDtVal2 = {T12 OtherDtVal2},",
						"          Curr_T13Type = {T13 Type},",
						"          Curr_T13OtherCharVal1 = {T13 OtherCharVal1},",
						"          Curr_T13OtherCharVal2 = {T13 OtherCharVal2},",
						"          Curr_T13OtherNumVal1 = {T13 OtherNumVal1},",
						"          Curr_T13OtherNumVal2 = {T13 OtherNumVal2},",
						"          Curr_T13OtherDtVal1 = {T13 OtherDtVal1},",
						"          Curr_T13OtherDtVal2 = {T13 OtherDtVal2},",
						"          Curr_T14Type = {T14 Type},",
						"          Curr_T14OtherCharVal1 = {T14 OtherCharVal1},",
						"          Curr_T14OtherCharVal2 = {T14 OtherCharVal2},",
						"          Curr_T14OtherNumVal1 = {T14 OtherNumVal1},",
						"          Curr_T14OtherNumVal2 = {T14 OtherNumVal2},",
						"          Curr_T14OtherDtVal1 = {T14 OtherDtVal1},",
						"          Curr_T14OtherDtVal2 = {T14 OtherDtVal2},",
						"          Curr_T15Type = {T15 Type},",
						"          Curr_T15OtherCharVal1 = {T15 OtherCharVal1},",
						"          Curr_T15OtherCharVal2 = {T15 OtherCharVal2},",
						"          Curr_T15OtherNumVal1 = {T15 OtherNumVal1},",
						"          Curr_T15OtherNumVal2 = {T15 OtherNumVal2},",
						"          Curr_T15OtherDtVal1 = {T15 OtherDtVal1},",
						"          Curr_T15OtherDtVal2 = {T15 OtherDtVal2},",
						"          Curr_T16Type = {T16 Type},",
						"          Curr_T16OtherCharVal1 = {T16 OtherCharVal1},",
						"          Curr_T16OtherCharVal2 = {T16 OtherCharVal2},",
						"          Curr_T16OtherNumVal1 = {T16 OtherNumVal1},",
						"          Curr_T16OtherNumVal2 = {T16 OtherNumVal2},",
						"          Curr_T16OtherDtVal1 = {T16 OtherDtVal1},",
						"          Curr_T16OtherDtVal2 = {T16 OtherDtVal2},",
						"          Curr_T17Type = {T17 Type},",
						"          Curr_T17OtherCharVal1 = {T17 OtherCharVal1},",
						"          Curr_T17OtherCharVal2 = {T17 OtherCharVal2},",
						"          Curr_T17OtherNumVal1 = {T17 OtherNumVal1},",
						"          Curr_T17OtherNumVal2 = {T17 OtherNumVal2},",
						"          Curr_T17OtherDtVal1 = {T17 OtherDtVal1},",
						"          Curr_T17OtherDtVal2 = {T17 OtherDtVal2},",
						"          Curr_T18Type = {T18 Type},",
						"          Curr_T18OtherCharVal1 = {T18 OtherCharVal1},",
						"          Curr_T18OtherCharVal2 = {T18 OtherCharVal2},",
						"          Curr_T18OtherNumVal1 = {T18 OtherNumVal1},",
						"          Curr_T18OtherNumVal2 = {T18 OtherNumVal2},",
						"          Curr_T18OtherDtVal1 = {T18 OtherDtVal1},",
						"          Curr_T18OtherDtVal2 = {T18 OtherDtVal2},",
						"          Curr_T19Type = {T19 Type},",
						"          Curr_T19OtherCharVal1 = {T19 OtherCharVal1},",
						"          Curr_T19OtherCharVal2 = {T19 OtherCharVal2},",
						"          Curr_T19OtherNumVal1 = {T19 OtherNumVal1},",
						"          Curr_T19OtherNumVal2 = {T19 OtherNumVal2},",
						"          Curr_T19OtherDtVal1 = {T19 OtherDtVal1},",
						"          Curr_T19OtherDtVal2 = {T19 OtherDtVal2},",
						"          Curr_T20Type = {T20 Type},",
						"          Curr_T20OtherCharVal1 = {T20 OtherCharVal1},",
						"          Curr_T20OtherCharVal2 = {T20 OtherCharVal2},",
						"          Curr_T20OtherNumVal1 = {T20 OtherNumVal1},",
						"          Curr_T20OtherNumVal2 = {T20 OtherNumVal2},",
						"          Curr_T20OtherDtVal1 = {T20 OtherDtVal1},",
						"          Curr_T20OtherDtVal2 = {T20 OtherDtVal2},",
						"          Curr_T21Type = {T21 Type},",
						"          Curr_T21OtherCharVal1 = {T21 OtherCharVal1},",
						"          Curr_T21OtherCharVal2 = {T21 OtherCharVal2},",
						"          Curr_T21OtherNumVal1 = {T21 OtherNumVal1},",
						"          Curr_T21OtherNumVal2 = {T21 OtherNumVal2},",
						"          Curr_T21OtherDtVal1 = {T21 OtherDtVal1},",
						"          Curr_T21OtherDtVal2 = {T21 OtherDtVal2},",
						"          Curr_T22Type = {T22 Type},",
						"          Curr_T22OtherCharVal1 = {T22 OtherCharVal1},",
						"          Curr_T22OtherCharVal2 = {T22 OtherCharVal2},",
						"          Curr_T22OtherNumVal1 = {T22 OtherNumVal1},",
						"          Curr_T22OtherNumVal2 = {T22 OtherNumVal2},",
						"          Curr_T22OtherDtVal1 = {T22 OtherDtVal1},",
						"          Curr_T22OtherDtVal2 = {T22 OtherDtVal2},",
						"          Curr_T23Type = {T23 Type},",
						"          Curr_T23OtherCharVal1 = {T23 OtherCharVal1},",
						"          Curr_T23OtherCharVal2 = {T23 OtherCharVal2},",
						"          Curr_T23OtherNumVal1 = {T23 OtherNumVal1},",
						"          Curr_T23OtherNumVal2 = {T23 OtherNumVal2},",
						"          Curr_T23OtherDtVal1 = {T23 OtherDtVal1},",
						"          Curr_T23OtherDtVal2 = {T23 OtherDtVal2},",
						"          Curr_T24Type = {T24 Type},",
						"          Curr_T24OtherCharVal1 = {T24 OtherCharVal1},",
						"          Curr_T24OtherCharVal2 = {T24 OtherCharVal2},",
						"          Curr_T24OtherNumVal1 = {T24 OtherNumVal1},",
						"          Curr_T24OtherNumVal2 = {T24 OtherNumVal2},",
						"          Curr_T24OtherDtVal1 = {T24 OtherDtVal1},",
						"          Curr_T24OtherDtVal2 = {T24 OtherDtVal2},",
						"          Curr_T25Type = {T25 Type},",
						"          Curr_T25OtherCharVal1 = {T25 OtherCharVal1},",
						"          Curr_T25OtherCharVal2 = {T25 OtherCharVal2},",
						"          Curr_T25OtherNumVal1 = {T25 OtherNumVal1},",
						"          Curr_T25OtherNumVal2 = {T25 OtherNumVal2},",
						"          Curr_T25OtherDtVal1 = {T25 OtherDtVal1},",
						"          Curr_T25OtherDtVal2 = {T25 OtherDtVal2},",
						"          Curr_T26Type = {T26 Type},",
						"          Curr_T26OtherCharVal1 = {T26 OtherCharVal1},",
						"          Curr_T26OtherCharVal2 = {T26 OtherCharVal2},",
						"          Curr_T26OtherNumVal1 = {T26 OtherNumVal1},",
						"          Curr_T26OtherNumVal2 = {T26 OtherNumVal2},",
						"          Curr_T26OtherDtVal1 = {T26 OtherDtVal1},",
						"          Curr_T26OtherDtVal2 = {T26 OtherDtVal2},",
						"          Curr_T27Type = {T27 Type},",
						"          Curr_T27OtherCharVal1 = {T27 OtherCharVal1},",
						"          Curr_T27OtherCharVal2 = {T27 OtherCharVal2},",
						"          Curr_T27OtherNumVal1 = {T27 OtherNumVal1},",
						"          Curr_T27OtherNumVal2 = {T27 OtherNumVal2},",
						"          Curr_T27OtherDtVal1 = {T27 OtherDtVal1},",
						"          Curr_T27OtherDtVal2 = {T27 OtherDtVal2},",
						"          Curr_T28Type = {T28 Type},",
						"          Curr_T28OtherCharVal1 = {T28 OtherCharVal1},",
						"          Curr_T28OtherCharVal2 = {T28 OtherCharVal2},",
						"          Curr_T28OtherNumVal1 = {T28 OtherNumVal1},",
						"          Curr_T28OtherNumVal2 = {T28 OtherNumVal2},",
						"          Curr_T28OtherDtVal1 = {T28 OtherDtVal1},",
						"          Curr_T28OtherDtVal2 = {T28 OtherDtVal2},",
						"          Curr_T29Type = {T29 Type},",
						"          Curr_T29OtherCharVal1 = {T29 OtherCharVal1},",
						"          Curr_T29OtherCharVal2 = {T29 OtherCharVal2},",
						"          Curr_T29OtherNumVal1 = {T29 OtherNumVal1},",
						"          Curr_T29OtherNumVal2 = {T29 OtherNumVal2},",
						"          Curr_T29OtherDtVal1 = {T29 OtherDtVal1},",
						"          Curr_T29OtherDtVal2 = {T29 OtherDtVal2},",
						"          Curr_T30Type = {T30 Type},",
						"          Curr_T30OtherCharVal1 = {T30 OtherCharVal1},",
						"          Curr_T30OtherCharVal2 = {T30 OtherCharVal2},",
						"          Curr_T30OtherNumVal1 = {T30 OtherNumVal1},",
						"          Curr_T30OtherNumVal2 = {T30 OtherNumVal2},",
						"          Curr_T30OtherDtVal1 = {T30 OtherDtVal1},",
						"          Curr_T30OtherDtVal2 = {T30 OtherDtVal2},",
						"          Curr_T31Type = {T31 Type},",
						"          Curr_T31OtherCharVal1 = {T31 OtherCharVal1},",
						"          Curr_T31OtherCharVal2 = {T31 OtherCharVal2},",
						"          Curr_T31OtherNumVal1 = {T31 OtherNumVal1},",
						"          Curr_T31OtherNumVal2 = {T31 OtherNumVal2},",
						"          Curr_T31OtherDtVal1 = {T31 OtherDtVal1},",
						"          Curr_T31OtherDtVal2 = {T31 OtherDtVal2},",
						"          Curr_T32Type = {T32 Type},",
						"          Curr_T32OtherCharVal1 = {T32 OtherCharVal1},",
						"          Curr_T32OtherCharVal2 = {T32 OtherCharVal2},",
						"          Curr_T32OtherNumVal1 = {T32 OtherNumVal1},",
						"          Curr_T32OtherNumVal2 = {T32 OtherNumVal2},",
						"          Curr_T32OtherDtVal1 = {T32 OtherDtVal1},",
						"          Curr_T32OtherDtVal2 = {T32 OtherDtVal2},",
						"          Curr_T33Type = {T33 Type},",
						"          Curr_T33OtherCharVal1 = {T33 OtherCharVal1},",
						"          Curr_T33OtherCharVal2 = {T33 OtherCharVal2},",
						"          Curr_T33OtherNumVal1 = {T33 OtherNumVal1},",
						"          Curr_T33OtherNumVal2 = {T33 OtherNumVal2},",
						"          Curr_T33OtherDtVal1 = {T33 OtherDtVal1},",
						"          Curr_T33OtherDtVal2 = {T33 OtherDtVal2},",
						"          Curr_T34Type = {T34 Type},",
						"          Curr_T34OtherCharVal1 = {T34 OtherCharVal1},",
						"          Curr_T34OtherCharVal2 = {T34 OtherCharVal2},",
						"          Curr_T34OtherNumVal1 = {T34 OtherNumVal1},",
						"          Curr_T34OtherNumVal2 = {T34 OtherNumVal2},",
						"          Curr_T34OtherDtVal1 = {T34 OtherDtVal1},",
						"          Curr_T34OtherDtVal2 = {T34 OtherDtVal2},",
						"          Curr_T35Type = {T35 Type},",
						"          Curr_T35OtherCharVal1 = {T35 OtherCharVal1},",
						"          Curr_T35OtherCharVal2 = {T35 OtherCharVal2},",
						"          Curr_T35OtherNumVal1 = {T35 OtherNumVal1},",
						"          Curr_T35OtherNumVal2 = {T35 OtherNumVal2},",
						"          Curr_T35OtherDtVal1 = {T35 OtherDtVal1},",
						"          Curr_T35OtherDtVal2 = {T35 OtherDtVal2},",
						"          Curr_T36Type = {T36 Type},",
						"          Curr_T36OtherCharVal1 = {T36 OtherCharVal1},",
						"          Curr_T36OtherCharVal2 = {T36 OtherCharVal2},",
						"          Curr_T36OtherNumVal1 = {T36 OtherNumVal1},",
						"          Curr_T36OtherNumVal2 = {T36 OtherNumVal2},",
						"          Curr_T36OtherDtVal1 = {T36 OtherDtVal1},",
						"          Curr_T36OtherDtVal2 = {T36 OtherDtVal2},",
						"          Curr_T37Type = {T37 Type},",
						"          Curr_T37OtherCharVal1 = {T37 OtherCharVal1},",
						"          Curr_T37OtherCharVal2 = {T37 OtherCharVal2},",
						"          Curr_T37OtherNumVal1 = {T37 OtherNumVal1},",
						"          Curr_T37OtherNumVal2 = {T37 OtherNumVal2},",
						"          Curr_T37OtherDtVal1 = {T37 OtherDtVal1},",
						"          Curr_T37OtherDtVal2 = {T37 OtherDtVal2},",
						"          Curr_T38Type = {T38 Type},",
						"          Curr_T38OtherCharVal1 = {T38 OtherCharVal1},",
						"          Curr_T38OtherCharVal2 = {T38 OtherCharVal2},",
						"          Curr_T38OtherNumVal1 = {T38 OtherNumVal1},",
						"          Curr_T38OtherNumVal2 = {T38 OtherNumVal2},",
						"          Curr_T38OtherDtVal1 = {T38 OtherDtVal1},",
						"          Curr_T38OtherDtVal2 = {T38 OtherDtVal2},",
						"          Curr_T39Type = {T39 Type},",
						"          Curr_T39OtherCharVal1 = {T39 OtherCharVal1},",
						"          Curr_T39OtherCharVal2 = {T39 OtherCharVal2},",
						"          Curr_T39OtherNumVal1 = {T39 OtherNumVal1},",
						"          Curr_T39OtherNumVal2 = {T39 OtherNumVal2},",
						"          Curr_T39OtherDtVal1 = {T39 OtherDtVal1},",
						"          Curr_T39OtherDtVal2 = {T39 OtherDtVal2},",
						"          Curr_T40Type = {T40 Type},",
						"          Curr_T40OtherCharVal1 = {T40 OtherCharVal1},",
						"          Curr_T40OtherCharVal2 = {T40 OtherCharVal2},",
						"          Curr_T40OtherNumVal1 = {T40 OtherNumVal1},",
						"          Curr_T40OtherNumVal2 = {T40 OtherNumVal2},",
						"          Curr_T40OtherDtVal1 = {T40 OtherDtVal1},",
						"          Curr_T40OtherDtVal2 = {T40 OtherDtVal2},",
						"          Curr_T41Type = {T41 Type},",
						"          Curr_T41OtherCharVal1 = {T41 OtherCharVal1},",
						"          Curr_T41OtherCharVal2 = {T41 OtherCharVal2},",
						"          Curr_T41OtherNumVal1 = {T41 OtherNumVal1},",
						"          Curr_T41OtherNumVal2 = {T41 OtherNumVal2},",
						"          Curr_T41OtherDtVal1 = {T41 OtherDtVal1},",
						"          Curr_T41OtherDtVal2 = {T41 OtherDtVal2},",
						"          Curr_T42Type = {T42 Type},",
						"          Curr_T42OtherCharVal1 = {T42 OtherCharVal1},",
						"          Curr_T42OtherCharVal2 = {T42 OtherCharVal2},",
						"          Curr_T42OtherNumVal1 = {T42 OtherNumVal1},",
						"          Curr_T42OtherNumVal2 = {T42 OtherNumVal2},",
						"          Curr_T42OtherDtVal1 = {T42 OtherDtVal1},",
						"          Curr_T42OtherDtVal2 = {T42 OtherDtVal2},",
						"          Curr_T43Type = {T43 Type},",
						"          Curr_T43OtherCharVal1 = {T43 OtherCharVal1},",
						"          Curr_T43OtherCharVal2 = {T43 OtherCharVal2},",
						"          Curr_T43OtherNumVal1 = {T43 OtherNumVal1},",
						"          Curr_T43OtherNumVal2 = {T43 OtherNumVal2},",
						"          Curr_T43OtherDtVal1 = {T43 OtherDtVal1},",
						"          Curr_T43OtherDtVal2 = {T43 OtherDtVal2},",
						"          Curr_T44Type = {T44 Type},",
						"          Curr_T44OtherCharVal1 = {T44 OtherCharVal1},",
						"          Curr_T44OtherCharVal2 = {T44 OtherCharVal2},",
						"          Curr_T44OtherNumVal1 = {T44 OtherNumVal1},",
						"          Curr_T44OtherNumVal2 = {T44 OtherNumVal2},",
						"          Curr_T44OtherDtVal1 = {T44 OtherDtVal1},",
						"          Curr_T44OtherDtVal2 = {T44 OtherDtVal2},",
						"          Curr_T45Type = {T45 Type},",
						"          Curr_T45OtherCharVal1 = {T45 OtherCharVal1},",
						"          Curr_T45OtherCharVal2 = {T45 OtherCharVal2},",
						"          Curr_T45OtherNumVal1 = {T45 OtherNumVal1},",
						"          Curr_T45OtherNumVal2 = {T45 OtherNumVal2},",
						"          Curr_T45OtherDtVal1 = {T45 OtherDtVal1},",
						"          Curr_T45OtherDtVal2 = {T45 OtherDtVal2},",
						"          Curr_T46Type = {T46 Type},",
						"          Curr_T46OtherCharVal1 = {T46 OtherCharVal1},",
						"          Curr_T46OtherCharVal2 = {T46 OtherCharVal2},",
						"          Curr_T46OtherNumVal1 = {T46 OtherNumVal1},",
						"          Curr_T46OtherNumVal2 = {T46 OtherNumVal2},",
						"          Curr_T46OtherDtVal1 = {T46 OtherDtVal1},",
						"          Curr_T46OtherDtVal2 = {T46 OtherDtVal2},",
						"          Curr_T47Type = {T47 Type},",
						"          Curr_T47OtherCharVal1 = {T47 OtherCharVal1},",
						"          Curr_T47OtherCharVal2 = {T47 OtherCharVal2},",
						"          Curr_T47OtherNumVal1 = {T47 OtherNumVal1},",
						"          Curr_T47OtherNumVal2 = {T47 OtherNumVal2},",
						"          Curr_T47OtherDtVal1 = {T47 OtherDtVal1},",
						"          Curr_T47OtherDtVal2 = {T47 OtherDtVal2},",
						"          Curr_T48Type = {T48 Type},",
						"          Curr_T48OtherCharVal1 = {T48 OtherCharVal1},",
						"          Curr_T48OtherCharVal2 = {T48 OtherCharVal2},",
						"          Curr_T48OtherNumVal1 = {T48 OtherNumVal1},",
						"          Curr_T48OtherNumVal2 = {T48 OtherNumVal2},",
						"          Curr_T48OtherDtVal1 = {T48 OtherDtVal1},",
						"          Curr_T48OtherDtVal2 = {T48 OtherDtVal2},",
						"          Curr_T49Type = {T49 Type},",
						"          Curr_T49OtherCharVal1 = {T49 OtherCharVal1},",
						"          Curr_T49OtherCharVal2 = {T49 OtherCharVal2},",
						"          Curr_T49OtherNumVal1 = {T49 OtherNumVal1},",
						"          Curr_T49OtherNumVal2 = {T49 OtherNumVal2},",
						"          Curr_T49OtherDtVal1 = {T49 OtherDtVal1},",
						"          Curr_T49OtherDtVal2 = {T49 OtherDtVal2},",
						"          Curr_T50Type = {T50 Type},",
						"          Curr_T50OtherCharVal1 = {T50 OtherCharVal1},",
						"          Curr_T50OtherCharVal2 = {T50 OtherCharVal2},",
						"          Curr_T50OtherNumVal1 = {T50 OtherNumVal1},",
						"          Curr_T50OtherNumVal2 = {T50 OtherNumVal2},",
						"          Curr_T50OtherDtVal1 = {T50 OtherDtVal1},",
						"          Curr_T50OtherDtVal2 = {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreYear join(OtherCoreWorkers@ClientId == OtherCoreYear@ClientId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreAnalysisTbl_Curr.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherAnaylysis_P1_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_1P",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By WorkerId,ClientId,ClientEngagementDt\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          ClientId as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select ClientId, MAX(CAST(LEFT(TYPE, 4) as INT))-1 as Year from [dbo].[OtherCoreAnalysisRefTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By ClientId\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          ClientId = OtherCoreWorkers@ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          P1_DataCollectionYear = {Data Collection Year},",
						"          P1_DataCollectionQuarter = {Data Collection Quarter},",
						"          P1_EventYear = Year,",
						"          P1_T1Type = {T1 Type},",
						"          P1_T1OtherCharVal1 = {T1 OtherCharVal1},",
						"          P1_T1OtherCharVal2 = {T1 OtherCharVal2},",
						"          P1_T1OtherNumVal1 = {T1 OtherNumVal1},",
						"          P1_T1OtherNumVal2 = {T1 OtherNumVal2},",
						"          P1_T1OtherDtVal1 = {T1 OtherDtVal1},",
						"          P1_T1OtherDtVal2 = {T1 OtherDtVal2},",
						"          P1_T2Type = {T2 Type},",
						"          P1_T2OtherCharVal1 = {T2 OtherCharVal1},",
						"          P1_T2OtherCharVal2 = {T2 OtherCharVal2},",
						"          P1_T2OtherNumVal1 = {T2 OtherNumVal1},",
						"          P1_T2OtherNumVal2 = {T2 OtherNumVal2},",
						"          P1_T2OtherDtVal1 = {T2 OtherDtVal1},",
						"          P1_T2OtherDtVal2 = {T2 OtherDtVal2},",
						"          P1_T3Type = {T3 Type},",
						"          P1_T3OtherCharVal1 = {T3 OtherCharVal1},",
						"          P1_T3OtherCharVal2 = {T3 OtherCharVal2},",
						"          P1_T3OtherNumVal1 = {T3 OtherNumVal1},",
						"          P1_T3OtherNumVal2 = {T3 OtherNumVal2},",
						"          P1_T3OtherDtVal1 = {T3 OtherDtVal1},",
						"          P1_T3OtherDtVal2 = {T3 OtherDtVal2},",
						"          P1_T4Type = {T4 Type},",
						"          P1_T4OtherCharVal1 = {T4 OtherCharVal1},",
						"          P1_T4OtherCharVal2 = {T4 OtherCharVal2},",
						"          P1_T4OtherNumVal1 = {T4 OtherNumVal1},",
						"          P1_T4OtherNumVal2 = {T4 OtherNumVal2},",
						"          P1_T4OtherDtVal1 = {T4 OtherDtVal1},",
						"          P1_T4OtherDtVal2 = {T4 OtherDtVal2},",
						"          {P1_T5 Type} = {T5 Type},",
						"          P1_T5OtherCharVal1 = {T5 OtherCharVal1},",
						"          P1_T5OtherCharVal2 = {T5 OtherCharVal2},",
						"          P1_T5OtherNumVal1 = {T5 OtherNumVal1},",
						"          P1_T5OtherNumVal2 = {T5 OtherNumVal2},",
						"          P1_T5OtherDtVal1 = {T5 OtherDtVal1},",
						"          P1_T5OtherDtVal2 = {T5 OtherDtVal2},",
						"          P1_T6Type = {T6 Type},",
						"          P1_T6OtherCharVal1 = {T6 OtherCharVal1},",
						"          P1_T6OtherCharVal2 = {T6 OtherCharVal2},",
						"          P1_T6OtherNumVal1 = {T6 OtherNumVal1},",
						"          P1_T6OtherNumVal2 = {T6 OtherNumVal2},",
						"          P1_T6OtherDtVal1 = {T6 OtherDtVal1},",
						"          P1_T6OtherDtVal2 = {T6 OtherDtVal2},",
						"          P1_T7Type = {T7 Type},",
						"          P1_T7OtherCharVal1 = {T7 OtherCharVal1},",
						"          P1_T7OtherCharVal2 = {T7 OtherCharVal2},",
						"          P1_T7OtherNumVal1 = {T7 OtherNumVal1},",
						"          P1_T7OtherNumVal2 = {T7 OtherNumVal2},",
						"          P1_T7OtherDtVal1 = {T7 OtherDtVal1},",
						"          P1_T7OtherDtVal2 = {T7 OtherDtVal2},",
						"          P1_T8Type = {T8 Type},",
						"          P1_T8OtherCharVal1 = {T8 OtherCharVal1},",
						"          P1_T8OtherCharVal2 = {T8 OtherCharVal2},",
						"          P1_T8OtherNumVal1 = {T8 OtherNumVal1},",
						"          P1_T8OtherNumVal2 = {T8 OtherNumVal2},",
						"          P1_T8OtherDtVal1 = {T8 OtherDtVal1},",
						"          P1_T8OtherDtVal2 = {T8 OtherDtVal2},",
						"          P1_T9Type = {T9 Type},",
						"          P1_T9OtherCharVal1 = {T9 OtherCharVal1},",
						"          P1_T9OtherCharVal2 = {T9 OtherCharVal2},",
						"          P1_T9OtherNumVal1 = {T9 OtherNumVal1},",
						"          P1_T9OtherNumVal2 = {T9 OtherNumVal2},",
						"          P1_T9OtherDtVal1 = {T9 OtherDtVal1},",
						"          P1_T9OtherDtVal2 = {T9 OtherDtVal2},",
						"          P1_T10Type = {T10 Type},",
						"          P1_T10OtherCharVal1 = {T10 OtherCharVal1},",
						"          P1_T10OtherCharVal2 = {T10 OtherCharVal2},",
						"          P1_T10OtherNumVal1 = {T10 OtherNumVal1},",
						"          P1_T10OtherNumVal2 = {T10 OtherNumVal2},",
						"          P1_T10OtherDtVal1 = {T10 OtherDtVal1},",
						"          P1_T10OtherDtVal2 = {T10 OtherDtVal2},",
						"          P1_T11Type = {T11 Type},",
						"          P1_T11OtherCharVal1 = {T11 OtherCharVal1},",
						"          P1_T11OtherCharVal2 = {T11 OtherCharVal2},",
						"          P1_T11OtherNumVal1 = {T11 OtherNumVal1},",
						"          P1_T11OtherNumVal2 = {T11 OtherNumVal2},",
						"          P1_T11OtherDtVal1 = {T11 OtherDtVal1},",
						"          P1_T11OtherDtVal2 = {T11 OtherDtVal2},",
						"          P1_T12Type = {T12 Type},",
						"          P1_T12OtherCharVal1 = {T12 OtherCharVal1},",
						"          P1_T12OtherCharVal2 = {T12 OtherCharVal2},",
						"          P1_T12OtherNumVal1 = {T12 OtherNumVal1},",
						"          P1_T12OtherNumVal2 = {T12 OtherNumVal2},",
						"          P1_T12OtherDtVal1 = {T12 OtherDtVal1},",
						"          P1_T12OtherDtVal2 = {T12 OtherDtVal2},",
						"          P1_T13Type = {T13 Type},",
						"          P1_T13OtherCharVal1 = {T13 OtherCharVal1},",
						"          P1_T13OtherCharVal2 = {T13 OtherCharVal2},",
						"          P1_T13OtherNumVal1 = {T13 OtherNumVal1},",
						"          P1_T13OtherNumVal2 = {T13 OtherNumVal2},",
						"          P1_T13OtherDtVal1 = {T13 OtherDtVal1},",
						"          P1_T13OtherDtVal2 = {T13 OtherDtVal2},",
						"          P1_T14Type = {T14 Type},",
						"          P1_T14OtherCharVal1 = {T14 OtherCharVal1},",
						"          P1_T14OtherCharVal2 = {T14 OtherCharVal2},",
						"          P1_T14OtherNumVal1 = {T14 OtherNumVal1},",
						"          P1_T14OtherNumVal2 = {T14 OtherNumVal2},",
						"          P1_T14OtherDtVal1 = {T14 OtherDtVal1},",
						"          P1_T14OtherDtVal2 = {T14 OtherDtVal2},",
						"          P1_T15Type = {T15 Type},",
						"          P1_T15OtherCharVal1 = {T15 OtherCharVal1},",
						"          P1_T15OtherCharVal2 = {T15 OtherCharVal2},",
						"          P1_T15OtherNumVal1 = {T15 OtherNumVal1},",
						"          P1_T15OtherNumVal2 = {T15 OtherNumVal2},",
						"          P1_T15OtherDtVal1 = {T15 OtherDtVal1},",
						"          P1_T15OtherDtVal2 = {T15 OtherDtVal2},",
						"          P1_T16Type = {T16 Type},",
						"          P1_T16OtherCharVal1 = {T16 OtherCharVal1},",
						"          P1_T16OtherCharVal2 = {T16 OtherCharVal2},",
						"          P1_T16OtherNumVal1 = {T16 OtherNumVal1},",
						"          P1_T16OtherNumVal2 = {T16 OtherNumVal2},",
						"          P1_T16OtherDtVal1 = {T16 OtherDtVal1},",
						"          P1_T16OtherDtVal2 = {T16 OtherDtVal2},",
						"          P1_T17Type = {T17 Type},",
						"          P1_T17OtherCharVal1 = {T17 OtherCharVal1},",
						"          P1_T17OtherCharVal2 = {T17 OtherCharVal2},",
						"          P1_T17OtherNumVal1 = {T17 OtherNumVal1},",
						"          P1_T17OtherNumVal2 = {T17 OtherNumVal2},",
						"          P1_T17OtherDtVal1 = {T17 OtherDtVal1},",
						"          P1_T17OtherDtVal2 = {T17 OtherDtVal2},",
						"          P1_T18Type = {T18 Type},",
						"          P1_T18OtherCharVal1 = {T18 OtherCharVal1},",
						"          P1_T18OtherCharVal2 = {T18 OtherCharVal2},",
						"          P1_T18OtherNumVal1 = {T18 OtherNumVal1},",
						"          P1_T18OtherNumVal2 = {T18 OtherNumVal2},",
						"          P1_T18OtherDtVal1 = {T18 OtherDtVal1},",
						"          P1_T18OtherDtVal2 = {T18 OtherDtVal2},",
						"          P1_T19Type = {T19 Type},",
						"          P1_T19OtherCharVal1 = {T19 OtherCharVal1},",
						"          P1_T19OtherCharVal2 = {T19 OtherCharVal2},",
						"          P1_T19OtherNumVal1 = {T19 OtherNumVal1},",
						"          P1_T19OtherNumVal2 = {T19 OtherNumVal2},",
						"          P1_T19OtherDtVal1 = {T19 OtherDtVal1},",
						"          P1_T19OtherDtVal2 = {T19 OtherDtVal2},",
						"          P1_T20Type = {T20 Type},",
						"          P1_T20OtherCharVal1 = {T20 OtherCharVal1},",
						"          P1_T20OtherCharVal2 = {T20 OtherCharVal2},",
						"          P1_T20OtherNumVal1 = {T20 OtherNumVal1},",
						"          P1_T20OtherNumVal2 = {T20 OtherNumVal2},",
						"          P1_T20OtherDtVal1 = {T20 OtherDtVal1},",
						"          P1_T20OtherDtVal2 = {T20 OtherDtVal2},",
						"          P1_T21Type = {T21 Type},",
						"          P1_T21OtherCharVal1 = {T21 OtherCharVal1},",
						"          P1_T21OtherCharVal2 = {T21 OtherCharVal2},",
						"          P1_T21OtherNumVal1 = {T21 OtherNumVal1},",
						"          P1_T21OtherNumVal2 = {T21 OtherNumVal2},",
						"          P1_T21OtherDtVal1 = {T21 OtherDtVal1},",
						"          P1_T21OtherDtVal2 = {T21 OtherDtVal2},",
						"          P1_T22Type = {T22 Type},",
						"          P1_T22OtherCharVal1 = {T22 OtherCharVal1},",
						"          P1_T22OtherCharVal2 = {T22 OtherCharVal2},",
						"          P1_T22OtherNumVal1 = {T22 OtherNumVal1},",
						"          P1_T22OtherNumVal2 = {T22 OtherNumVal2},",
						"          P1_T22OtherDtVal1 = {T22 OtherDtVal1},",
						"          P1_T22OtherDtVal2 = {T22 OtherDtVal2},",
						"          P1_T23Type = {T23 Type},",
						"          P1_T23OtherCharVal1 = {T23 OtherCharVal1},",
						"          P1_T23OtherCharVal2 = {T23 OtherCharVal2},",
						"          P1_T23OtherNumVal1 = {T23 OtherNumVal1},",
						"          P1_T23OtherNumVal2 = {T23 OtherNumVal2},",
						"          P1_T23OtherDtVal1 = {T23 OtherDtVal1},",
						"          P1_T23OtherDtVal2 = {T23 OtherDtVal2},",
						"          P1_T24Type = {T24 Type},",
						"          P1_T24OtherCharVal1 = {T24 OtherCharVal1},",
						"          P1_T24OtherCharVal2 = {T24 OtherCharVal2},",
						"          P1_T24OtherNumVal1 = {T24 OtherNumVal1},",
						"          P1_T24OtherNumVal2 = {T24 OtherNumVal2},",
						"          P1_T24OtherDtVal1 = {T24 OtherDtVal1},",
						"          P1_T24OtherDtVal2 = {T24 OtherDtVal2},",
						"          P1_T25Type = {T25 Type},",
						"          P1_T25OtherCharVal1 = {T25 OtherCharVal1},",
						"          P1_T25OtherCharVal2 = {T25 OtherCharVal2},",
						"          P1_T25OtherNumVal1 = {T25 OtherNumVal1},",
						"          P1_T25OtherNumVal2 = {T25 OtherNumVal2},",
						"          P1_T25OtherDtVal1 = {T25 OtherDtVal1},",
						"          P1_T25OtherDtVal2 = {T25 OtherDtVal2},",
						"          P1_T26Type = {T26 Type},",
						"          P1_T26OtherCharVal1 = {T26 OtherCharVal1},",
						"          P1_T26OtherCharVal2 = {T26 OtherCharVal2},",
						"          P1_T26OtherNumVal1 = {T26 OtherNumVal1},",
						"          P1_T26OtherNumVal2 = {T26 OtherNumVal2},",
						"          P1_T26OtherDtVal1 = {T26 OtherDtVal1},",
						"          P1_T26OtherDtVal2 = {T26 OtherDtVal2},",
						"          P1_T27Type = {T27 Type},",
						"          P1_T27OtherCharVal1 = {T27 OtherCharVal1},",
						"          P1_T27OtherCharVal2 = {T27 OtherCharVal2},",
						"          P1_T27OtherNumVal1 = {T27 OtherNumVal1},",
						"          P1_T27OtherNumVal2 = {T27 OtherNumVal2},",
						"          P1_T27OtherDtVal1 = {T27 OtherDtVal1},",
						"          P1_T27OtherDtVal2 = {T27 OtherDtVal2},",
						"          P1_T28Type = {T28 Type},",
						"          P1_T28OtherCharVal1 = {T28 OtherCharVal1},",
						"          P1_T28OtherCharVal2 = {T28 OtherCharVal2},",
						"          P1_T28OtherNumVal1 = {T28 OtherNumVal1},",
						"          P1_T28OtherNumVal2 = {T28 OtherNumVal2},",
						"          P1_T28OtherDtVal1 = {T28 OtherDtVal1},",
						"          P1_T28OtherDtVal2 = {T28 OtherDtVal2},",
						"          P1_T29Type = {T29 Type},",
						"          P1_T29OtherCharVal1 = {T29 OtherCharVal1},",
						"          P1_T29OtherCharVal2 = {T29 OtherCharVal2},",
						"          P1_T29OtherNumVal1 = {T29 OtherNumVal1},",
						"          P1_T29OtherNumVal2 = {T29 OtherNumVal2},",
						"          P1_T29OtherDtVal1 = {T29 OtherDtVal1},",
						"          P1_T29OtherDtVal2 = {T29 OtherDtVal2},",
						"          P1_T30Type = {T30 Type},",
						"          P1_T30OtherCharVal1 = {T30 OtherCharVal1},",
						"          P1_T30OtherCharVal2 = {T30 OtherCharVal2},",
						"          P1_T30OtherNumVal1 = {T30 OtherNumVal1},",
						"          P1_T30OtherNumVal2 = {T30 OtherNumVal2},",
						"          P1_T30OtherDtVal1 = {T30 OtherDtVal1},",
						"          P1_T30OtherDtVal2 = {T30 OtherDtVal2},",
						"          P1_T31Type = {T31 Type},",
						"          P1_T31OtherCharVal1 = {T31 OtherCharVal1},",
						"          P1_T31OtherCharVal2 = {T31 OtherCharVal2},",
						"          P1_T31OtherNumVal1 = {T31 OtherNumVal1},",
						"          P1_T31OtherNumVal2 = {T31 OtherNumVal2},",
						"          P1_T31OtherDtVal1 = {T31 OtherDtVal1},",
						"          P1_T31OtherDtVal2 = {T31 OtherDtVal2},",
						"          P1_T32Type = {T32 Type},",
						"          P1_T32OtherCharVal1 = {T32 OtherCharVal1},",
						"          P1_T32OtherCharVal2 = {T32 OtherCharVal2},",
						"          P1_T32OtherNumVal1 = {T32 OtherNumVal1},",
						"          P1_T32OtherNumVal2 = {T32 OtherNumVal2},",
						"          P1_T32OtherDtVal1 = {T32 OtherDtVal1},",
						"          P1_T32OtherDtVal2 = {T32 OtherDtVal2},",
						"          P1_T33Type = {T33 Type},",
						"          P1_T33OtherCharVal1 = {T33 OtherCharVal1},",
						"          P1_T33OtherCharVal2 = {T33 OtherCharVal2},",
						"          P1_T33OtherNumVal1 = {T33 OtherNumVal1},",
						"          P1_T33OtherNumVal2 = {T33 OtherNumVal2},",
						"          P1_T33OtherDtVal1 = {T33 OtherDtVal1},",
						"          P1_T33OtherDtVal2 = {T33 OtherDtVal2},",
						"          P1_T34Type = {T34 Type},",
						"          P1_T34OtherCharVal1 = {T34 OtherCharVal1},",
						"          P1_T34OtherCharVal2 = {T34 OtherCharVal2},",
						"          P1_T34OtherNumVal1 = {T34 OtherNumVal1},",
						"          P1_T34OtherNumVal2 = {T34 OtherNumVal2},",
						"          P1_T34OtherDtVal1 = {T34 OtherDtVal1},",
						"          P1_T34OtherDtVal2 = {T34 OtherDtVal2},",
						"          P1_T35Type = {T35 Type},",
						"          P1_T35OtherCharVal1 = {T35 OtherCharVal1},",
						"          P1_T35OtherCharVal2 = {T35 OtherCharVal2},",
						"          P1_T35OtherNumVal1 = {T35 OtherNumVal1},",
						"          P1_T35OtherNumVal2 = {T35 OtherNumVal2},",
						"          P1_T35OtherDtVal1 = {T35 OtherDtVal1},",
						"          P1_T35OtherDtVal2 = {T35 OtherDtVal2},",
						"          P1_T36Type = {T36 Type},",
						"          P1_T36OtherCharVal1 = {T36 OtherCharVal1},",
						"          P1_T36OtherCharVal2 = {T36 OtherCharVal2},",
						"          P1_T36OtherNumVal1 = {T36 OtherNumVal1},",
						"          P1_T36OtherNumVal2 = {T36 OtherNumVal2},",
						"          P1_T36OtherDtVal1 = {T36 OtherDtVal1},",
						"          P1_T36OtherDtVal2 = {T36 OtherDtVal2},",
						"          P1_T37Type = {T37 Type},",
						"          P1_T37OtherCharVal1 = {T37 OtherCharVal1},",
						"          P1_T37OtherCharVal2 = {T37 OtherCharVal2},",
						"          P1_T37OtherNumVal1 = {T37 OtherNumVal1},",
						"          P1_T37OtherNumVal2 = {T37 OtherNumVal2},",
						"          P1_T37OtherDtVal1 = {T37 OtherDtVal1},",
						"          P1_T37OtherDtVal2 = {T37 OtherDtVal2},",
						"          P1_T38Type = {T38 Type},",
						"          P1_T38OtherCharVal1 = {T38 OtherCharVal1},",
						"          P1_T38OtherCharVal2 = {T38 OtherCharVal2},",
						"          P1_T38OtherNumVal1 = {T38 OtherNumVal1},",
						"          P1_T38OtherNumVal2 = {T38 OtherNumVal2},",
						"          P1_T38OtherDtVal1 = {T38 OtherDtVal1},",
						"          P1_T38OtherDtVal2 = {T38 OtherDtVal2},",
						"          P1_T39Type = {T39 Type},",
						"          P1_T39OtherCharVal1 = {T39 OtherCharVal1},",
						"          P1_T39OtherCharVal2 = {T39 OtherCharVal2},",
						"          P1_T39OtherNumVal1 = {T39 OtherNumVal1},",
						"          P1_T39OtherNumVal2 = {T39 OtherNumVal2},",
						"          P1_T39OtherDtVal1 = {T39 OtherDtVal1},",
						"          P1_T39OtherDtVal2 = {T39 OtherDtVal2},",
						"          P1_T40Type = {T40 Type},",
						"          P1_T40OtherCharVal1 = {T40 OtherCharVal1},",
						"          P1_T40OtherCharVal2 = {T40 OtherCharVal2},",
						"          P1_T40OtherNumVal1 = {T40 OtherNumVal1},",
						"          P1_T40OtherNumVal2 = {T40 OtherNumVal2},",
						"          P1_T40OtherDtVal1 = {T40 OtherDtVal1},",
						"          P1_T40OtherDtVal2 = {T40 OtherDtVal2},",
						"          P1_T41Type = {T41 Type},",
						"          P1_T41OtherCharVal1 = {T41 OtherCharVal1},",
						"          P1_T41OtherCharVal2 = {T41 OtherCharVal2},",
						"          P1_T41OtherNumVal1 = {T41 OtherNumVal1},",
						"          P1_T41OtherNumVal2 = {T41 OtherNumVal2},",
						"          P1_T41OtherDtVal1 = {T41 OtherDtVal1},",
						"          P1_T41OtherDtVal2 = {T41 OtherDtVal2},",
						"          P1_T42Type = {T42 Type},",
						"          P1_T42OtherCharVal1 = {T42 OtherCharVal1},",
						"          P1_T42OtherCharVal2 = {T42 OtherCharVal2},",
						"          P1_T42OtherNumVal1 = {T42 OtherNumVal1},",
						"          P1_T42OtherNumVal2 = {T42 OtherNumVal2},",
						"          P1_T42OtherDtVal1 = {T42 OtherDtVal1},",
						"          P1_T42OtherDtVal2 = {T42 OtherDtVal2},",
						"          P1_T43Type = {T43 Type},",
						"          P1_T43OtherCharVal1 = {T43 OtherCharVal1},",
						"          P1_T43OtherCharVal2 = {T43 OtherCharVal2},",
						"          P1_T43OtherNumVal1 = {T43 OtherNumVal1},",
						"          P1_T43OtherNumVal2 = {T43 OtherNumVal2},",
						"          P1_T43OtherDtVal1 = {T43 OtherDtVal1},",
						"          P1_T43OtherDtVal2 = {T43 OtherDtVal2},",
						"          P1_T44Type = {T44 Type},",
						"          P1_T44OtherCharVal1 = {T44 OtherCharVal1},",
						"          P1_T44OtherCharVal2 = {T44 OtherCharVal2},",
						"          P1_T44OtherNumVal1 = {T44 OtherNumVal1},",
						"          P1_T44OtherNumVal2 = {T44 OtherNumVal2},",
						"          P1_T44OtherDtVal1 = {T44 OtherDtVal1},",
						"          P1_T44OtherDtVal2 = {T44 OtherDtVal2},",
						"          P1_T45Type = {T45 Type},",
						"          P1_T45OtherCharVal1 = {T45 OtherCharVal1},",
						"          P1_T45OtherCharVal2 = {T45 OtherCharVal2},",
						"          P1_T45OtherNumVal1 = {T45 OtherNumVal1},",
						"          P1_T45OtherNumVal2 = {T45 OtherNumVal2},",
						"          P1_T45OtherDtVal1 = {T45 OtherDtVal1},",
						"          P1_T45OtherDtVal2 = {T45 OtherDtVal2},",
						"          P1_T46Type = {T46 Type},",
						"          P1_T46OtherCharVal1 = {T46 OtherCharVal1},",
						"          P1_T46OtherCharVal2 = {T46 OtherCharVal2},",
						"          P1_T46OtherNumVal1 = {T46 OtherNumVal1},",
						"          P1_T46OtherNumVal2 = {T46 OtherNumVal2},",
						"          P1_T46OtherDtVal1 = {T46 OtherDtVal1},",
						"          P1_T46OtherDtVal2 = {T46 OtherDtVal2},",
						"          P1_T47Type = {T47 Type},",
						"          P1_T47OtherCharVal1 = {T47 OtherCharVal1},",
						"          P1_T47OtherCharVal2 = {T47 OtherCharVal2},",
						"          P1_T47OtherNumVal1 = {T47 OtherNumVal1},",
						"          P1_T47OtherNumVal2 = {T47 OtherNumVal2},",
						"          P1_T47OtherDtVal1 = {T47 OtherDtVal1},",
						"          P1_T47OtherDtVal2 = {T47 OtherDtVal2},",
						"          P1_T48Type = {T48 Type},",
						"          P1_T48OtherCharVal1 = {T48 OtherCharVal1},",
						"          P1_T48OtherCharVal2 = {T48 OtherCharVal2},",
						"          P1_T48OtherNumVal1 = {T48 OtherNumVal1},",
						"          P1_T48OtherNumVal2 = {T48 OtherNumVal2},",
						"          P1_T48OtherDtVal1 = {T48 OtherDtVal1},",
						"          P1_T48OtherDtVal2 = {T48 OtherDtVal2},",
						"          P1_T49Type = {T49 Type},",
						"          P1_T49OtherCharVal1 = {T49 OtherCharVal1},",
						"          P1_T49OtherCharVal2 = {T49 OtherCharVal2},",
						"          P1_T49OtherNumVal1 = {T49 OtherNumVal1},",
						"          P1_T49OtherNumVal2 = {T49 OtherNumVal2},",
						"          P1_T49OtherDtVal1 = {T49 OtherDtVal1},",
						"          P1_T49OtherDtVal2 = {T49 OtherDtVal2},",
						"          P1_T50Type = {T50 Type},",
						"          P1_T50OtherCharVal1 = {T50 OtherCharVal1},",
						"          P1_T50OtherCharVal2 = {T50 OtherCharVal2},",
						"          P1_T50OtherNumVal1 = {T50 OtherNumVal1},",
						"          P1_T50OtherNumVal2 = {T50 OtherNumVal2},",
						"          P1_T50OtherDtVal1 = {T50 OtherDtVal1},",
						"          P1_T50OtherDtVal2 = {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreYear join(OtherCoreWorkers@ClientId == OtherCoreYear@ClientId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreAnalysisTbl_P1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherAnaylysis_P2_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_2P",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "OtherCoreAnalysisMaxYearOutput"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By WorkerId,ClientId,ClientEngagementDt\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          ClientId as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select ClientId, MAX(CAST(LEFT(TYPE, 4) as INT))-2 as Year from [dbo].[OtherCoreAnalysisRefTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By ClientId\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          ClientId = OtherCoreWorkers@ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          P2_DataCollectionYear = {Data Collection Year},",
						"          P2_DataCollectionQuarter = {Data Collection Quarter},",
						"          P2_EventYear = Year,",
						"          P2_T1Type = {T1 Type},",
						"          P2_T1OtherCharVal1 = {T1 OtherCharVal1},",
						"          P2_T1OtherCharVal2 = {T1 OtherCharVal2},",
						"          P2_T1OtherNumVal1 = {T1 OtherNumVal1},",
						"          P2_T1OtherNumVal2 = {T1 OtherNumVal2},",
						"          P2_T1OtherDtVal1 = {T1 OtherDtVal1},",
						"          P2_T1OtherDtVal2 = {T1 OtherDtVal2},",
						"          P2_T2Type = {T2 Type},",
						"          P2_T2OtherCharVal1 = {T2 OtherCharVal1},",
						"          P2_T2OtherCharVal2 = {T2 OtherCharVal2},",
						"          P2_T2OtherNumVal1 = {T2 OtherNumVal1},",
						"          P2_T2OtherNumVal2 = {T2 OtherNumVal2},",
						"          P2_T2OtherDtVal1 = {T2 OtherDtVal1},",
						"          P2_T2OtherDtVal2 = {T2 OtherDtVal2},",
						"          P2_T3Type = {T3 Type},",
						"          P2_T3OtherCharVal1 = {T3 OtherCharVal1},",
						"          P2_T3OtherCharVal2 = {T3 OtherCharVal2},",
						"          P2_T3OtherNumVal1 = {T3 OtherNumVal1},",
						"          P2_T3OtherNumVal2 = {T3 OtherNumVal2},",
						"          P2_T3OtherDtVal1 = {T3 OtherDtVal1},",
						"          P2_T3OtherDtVal2 = {T3 OtherDtVal2},",
						"          P2_T4Type = {T4 Type},",
						"          P2_T4OtherCharVal1 = {T4 OtherCharVal1},",
						"          P2_T4OtherCharVal2 = {T4 OtherCharVal2},",
						"          P2_T4OtherNumVal1 = {T4 OtherNumVal1},",
						"          P2_T4OtherNumVal2 = {T4 OtherNumVal2},",
						"          P2_T4OtherDtVal1 = {T4 OtherDtVal1},",
						"          P2_T4OtherDtVal2 = {T4 OtherDtVal2},",
						"          P2_T5Type = {T5 Type},",
						"          P2_T5OtherCharVal1 = {T5 OtherCharVal1},",
						"          P2_T5OtherCharVal2 = {T5 OtherCharVal2},",
						"          P2_T5OtherNumVal1 = {T5 OtherNumVal1},",
						"          P2_T5OtherNumVal2 = {T5 OtherNumVal2},",
						"          P2_T5OtherDtVal1 = {T5 OtherDtVal1},",
						"          P2_T5OtherDtVal2 = {T5 OtherDtVal2},",
						"          P2_T6Type = {T6 Type},",
						"          P2_T6OtherCharVal1 = {T6 OtherCharVal1},",
						"          P2_T6OtherCharVal2 = {T6 OtherCharVal2},",
						"          P2_T6OtherNumVal1 = {T6 OtherNumVal1},",
						"          P2_T6OtherNumVal2 = {T6 OtherNumVal2},",
						"          P2_T6OtherDtVal1 = {T6 OtherDtVal1},",
						"          P2_T6OtherDtVal2 = {T6 OtherDtVal2},",
						"          P2_T7Type = {T7 Type},",
						"          P2_T7OtherCharVal1 = {T7 OtherCharVal1},",
						"          P2_T7OtherCharVal2 = {T7 OtherCharVal2},",
						"          P2_T7OtherNumVal1 = {T7 OtherNumVal1},",
						"          P2_T7OtherNumVal2 = {T7 OtherNumVal2},",
						"          P2_T7OtherDtVal1 = {T7 OtherDtVal1},",
						"          P2_T7OtherDtVal2 = {T7 OtherDtVal2},",
						"          P2_T8Type = {T8 Type},",
						"          P2_T8OtherCharVal1 = {T8 OtherCharVal1},",
						"          P2_T8OtherCharVal2 = {T8 OtherCharVal2},",
						"          P2_T8OtherNumVal1 = {T8 OtherNumVal1},",
						"          P2_T8OtherNumVal2 = {T8 OtherNumVal2},",
						"          P2_T8OtherDtVal1 = {T8 OtherDtVal1},",
						"          P2_T8OtherDtVal2 = {T8 OtherDtVal2},",
						"          P2_T9Type = {T9 Type},",
						"          P2_T9OtherCharVal1 = {T9 OtherCharVal1},",
						"          P2_T9OtherCharVal2 = {T9 OtherCharVal2},",
						"          P2_T9OtherNumVal1 = {T9 OtherNumVal1},",
						"          P2_T9OtherNumVal2 = {T9 OtherNumVal2},",
						"          P2_T9OtherDtVal1 = {T9 OtherDtVal1},",
						"          P2_T9OtherDtVal2 = {T9 OtherDtVal2},",
						"          P2_T10Type = {T10 Type},",
						"          P2_T10OtherCharVal1 = {T10 OtherCharVal1},",
						"          P2_T10OtherCharVal2 = {T10 OtherCharVal2},",
						"          P2_T10OtherNumVal1 = {T10 OtherNumVal1},",
						"          P2_T10OtherNumVal2 = {T10 OtherNumVal2},",
						"          P2_T10OtherDtVal1 = {T10 OtherDtVal1},",
						"          P2_T10OtherDtVal2 = {T10 OtherDtVal2},",
						"          P2_T11Type = {T11 Type},",
						"          P2_T11OtherCharVal1 = {T11 OtherCharVal1},",
						"          P2_T11OtherCharVal2 = {T11 OtherCharVal2},",
						"          P2_T11OtherNumVal1 = {T11 OtherNumVal1},",
						"          P2_T11OtherNumVal2 = {T11 OtherNumVal2},",
						"          P2_T11OtherDtVal1 = {T11 OtherDtVal1},",
						"          P2_T11OtherDtVal2 = {T11 OtherDtVal2},",
						"          P2_T12Type = {T12 Type},",
						"          P2_T12OtherCharVal1 = {T12 OtherCharVal1},",
						"          P2_T12OtherCharVal2 = {T12 OtherCharVal2},",
						"          P2_T12OtherNumVal1 = {T12 OtherNumVal1},",
						"          P2_T12OtherNumVal2 = {T12 OtherNumVal2},",
						"          P2_T12OtherDtVal1 = {T12 OtherDtVal1},",
						"          P2_T12OtherDtVal2 = {T12 OtherDtVal2},",
						"          P2_T13Type = {T13 Type},",
						"          P2_T13OtherCharVal1 = {T13 OtherCharVal1},",
						"          P2_T13OtherCharVal2 = {T13 OtherCharVal2},",
						"          P2_T13OtherNumVal1 = {T13 OtherNumVal1},",
						"          P2_T13OtherNumVal2 = {T13 OtherNumVal2},",
						"          P2_T13OtherDtVal1 = {T13 OtherDtVal1},",
						"          P2_T13OtherDtVal2 = {T13 OtherDtVal2},",
						"          P2_T14Type = {T14 Type},",
						"          P2_T14OtherCharVal1 = {T14 OtherCharVal1},",
						"          P2_T14OtherCharVal2 = {T14 OtherCharVal2},",
						"          P2_T14OtherNumVal1 = {T14 OtherNumVal1},",
						"          P2_T14OtherNumVal2 = {T14 OtherNumVal2},",
						"          P2_T14OtherDtVal1 = {T14 OtherDtVal1},",
						"          P2_T14OtherDtVal2 = {T14 OtherDtVal2},",
						"          P2_T15Type = {T15 Type},",
						"          P2_T15OtherCharVal1 = {T15 OtherCharVal1},",
						"          P2_T15OtherCharVal2 = {T15 OtherCharVal2},",
						"          P2_T15OtherNumVal1 = {T15 OtherNumVal1},",
						"          P2_T15OtherNumVal2 = {T15 OtherNumVal2},",
						"          P2_T15OtherDtVal1 = {T15 OtherDtVal1},",
						"          P2_T15OtherDtVal2 = {T15 OtherDtVal2},",
						"          P2_T16Type = {T16 Type},",
						"          P2_T16OtherCharVal1 = {T16 OtherCharVal1},",
						"          P2_T16OtherCharVal2 = {T16 OtherCharVal2},",
						"          P2_T16OtherNumVal1 = {T16 OtherNumVal1},",
						"          P2_T16OtherNumVal2 = {T16 OtherNumVal2},",
						"          P2_T16OtherDtVal1 = {T16 OtherDtVal1},",
						"          P2_T16OtherDtVal2 = {T16 OtherDtVal2},",
						"          P2_T17Type = {T17 Type},",
						"          P2_T17OtherCharVal1 = {T17 OtherCharVal1},",
						"          P2_T17OtherCharVal2 = {T17 OtherCharVal2},",
						"          P2_T17OtherNumVal1 = {T17 OtherNumVal1},",
						"          P2_T17OtherNumVal2 = {T17 OtherNumVal2},",
						"          P2_T17OtherDtVal1 = {T17 OtherDtVal1},",
						"          P2_T17OtherDtVal2 = {T17 OtherDtVal2},",
						"          P2_T18Type = {T18 Type},",
						"          P2_T18OtherCharVal1 = {T18 OtherCharVal1},",
						"          P2_T18OtherCharVal2 = {T18 OtherCharVal2},",
						"          P2_T18OtherNumVal1 = {T18 OtherNumVal1},",
						"          P2_T18OtherNumVal2 = {T18 OtherNumVal2},",
						"          P2_T18OtherDtVal1 = {T18 OtherDtVal1},",
						"          P2_T18OtherDtVal2 = {T18 OtherDtVal2},",
						"          P2_T19Type = {T19 Type},",
						"          P2_T19OtherCharVal1 = {T19 OtherCharVal1},",
						"          P2_T19OtherCharVal2 = {T19 OtherCharVal2},",
						"          P2_T19OtherNumVal1 = {T19 OtherNumVal1},",
						"          P2_T19OtherNumVal2 = {T19 OtherNumVal2},",
						"          P2_T19OtherDtVal1 = {T19 OtherDtVal1},",
						"          P2_T19OtherDtVal2 = {T19 OtherDtVal2},",
						"          P2_T20Type = {T20 Type},",
						"          P2_T20OtherCharVal1 = {T20 OtherCharVal1},",
						"          P2_T20OtherCharVal2 = {T20 OtherCharVal2},",
						"          P2_T20OtherNumVal1 = {T20 OtherNumVal1},",
						"          P2_T20OtherNumVal2 = {T20 OtherNumVal2},",
						"          P2_T20OtherDtVal1 = {T20 OtherDtVal1},",
						"          P2_T20OtherDtVal2 = {T20 OtherDtVal2},",
						"          P2_T21Type = {T21 Type},",
						"          P2_T21OtherCharVal1 = {T21 OtherCharVal1},",
						"          P2_T21OtherCharVal2 = {T21 OtherCharVal2},",
						"          P2_T21OtherNumVal1 = {T21 OtherNumVal1},",
						"          P2_T21OtherNumVal2 = {T21 OtherNumVal2},",
						"          P2_T21OtherDtVal1 = {T21 OtherDtVal1},",
						"          P2_T21OtherDtVal2 = {T21 OtherDtVal2},",
						"          P2_T22Type = {T22 Type},",
						"          P2_T22OtherCharVal1 = {T22 OtherCharVal1},",
						"          P2_T22OtherCharVal2 = {T22 OtherCharVal2},",
						"          P2_T22OtherNumVal1 = {T22 OtherNumVal1},",
						"          P2_T22OtherNumVal2 = {T22 OtherNumVal2},",
						"          P2_T22OtherDtVal1 = {T22 OtherDtVal1},",
						"          P2_T22OtherDtVal2 = {T22 OtherDtVal2},",
						"          P2_T23Type = {T23 Type},",
						"          P2_T23OtherCharVal1 = {T23 OtherCharVal1},",
						"          P2_T23OtherCharVal2 = {T23 OtherCharVal2},",
						"          P2_T23OtherNumVal1 = {T23 OtherNumVal1},",
						"          P2_T23OtherNumVal2 = {T23 OtherNumVal2},",
						"          P2_T23OtherDtVal1 = {T23 OtherDtVal1},",
						"          P2_T23OtherDtVal2 = {T23 OtherDtVal2},",
						"          P2_T24Type = {T24 Type},",
						"          P2_T24OtherCharVal1 = {T24 OtherCharVal1},",
						"          P2_T24OtherCharVal2 = {T24 OtherCharVal2},",
						"          P2_T24OtherNumVal1 = {T24 OtherNumVal1},",
						"          P2_T24OtherNumVal2 = {T24 OtherNumVal2},",
						"          P2_T24OtherDtVal1 = {T24 OtherDtVal1},",
						"          P2_T24OtherDtVal2 = {T24 OtherDtVal2},",
						"          P2_T25Type = {T25 Type},",
						"          P2_T25OtherCharVal1 = {T25 OtherCharVal1},",
						"          P2_T25OtherCharVal2 = {T25 OtherCharVal2},",
						"          P2_T25OtherNumVal1 = {T25 OtherNumVal1},",
						"          P2_T25OtherNumVal2 = {T25 OtherNumVal2},",
						"          P2_T25OtherDtVal1 = {T25 OtherDtVal1},",
						"          P2_T25OtherDtVal2 = {T25 OtherDtVal2},",
						"          P2_T26Type = {T26 Type},",
						"          P2_T26OtherCharVal1 = {T26 OtherCharVal1},",
						"          P2_T26OtherCharVal2 = {T26 OtherCharVal2},",
						"          P2_T26OtherNumVal1 = {T26 OtherNumVal1},",
						"          P2_T26OtherNumVal2 = {T26 OtherNumVal2},",
						"          P2_T26OtherDtVal1 = {T26 OtherDtVal1},",
						"          P2_T26OtherDtVal2 = {T26 OtherDtVal2},",
						"          P2_T27Type = {T27 Type},",
						"          P2_T27OtherCharVal1 = {T27 OtherCharVal1},",
						"          P2_T27OtherCharVal2 = {T27 OtherCharVal2},",
						"          P2_T27OtherNumVal1 = {T27 OtherNumVal1},",
						"          P2_T27OtherNumVal2 = {T27 OtherNumVal2},",
						"          P2_T27OtherDtVal1 = {T27 OtherDtVal1},",
						"          P2_T27OtherDtVal2 = {T27 OtherDtVal2},",
						"          P2_T28Type = {T28 Type},",
						"          P2_T28OtherCharVal1 = {T28 OtherCharVal1},",
						"          P2_T28OtherCharVal2 = {T28 OtherCharVal2},",
						"          P2_T28OtherNumVal1 = {T28 OtherNumVal1},",
						"          P2_T28OtherNumVal2 = {T28 OtherNumVal2},",
						"          P2_T28OtherDtVal1 = {T28 OtherDtVal1},",
						"          P2_T28OtherDtVal2 = {T28 OtherDtVal2},",
						"          P2_T29Type = {T29 Type},",
						"          P2_T29OtherCharVal1 = {T29 OtherCharVal1},",
						"          P2_T29OtherCharVal2 = {T29 OtherCharVal2},",
						"          P2_T29OtherNumVal1 = {T29 OtherNumVal1},",
						"          P2_T29OtherNumVal2 = {T29 OtherNumVal2},",
						"          P2_T29OtherDtVal1 = {T29 OtherDtVal1},",
						"          P2_T29OtherDtVal2 = {T29 OtherDtVal2},",
						"          P2_T30Type = {T30 Type},",
						"          P2_T30OtherCharVal1 = {T30 OtherCharVal1},",
						"          P2_T30OtherCharVal2 = {T30 OtherCharVal2},",
						"          P2_T30OtherNumVal1 = {T30 OtherNumVal1},",
						"          P2_T30OtherNumVal2 = {T30 OtherNumVal2},",
						"          P2_T30OtherDtVal1 = {T30 OtherDtVal1},",
						"          P2_T30OtherDtVal2 = {T30 OtherDtVal2},",
						"          P2_T31Type = {T31 Type},",
						"          P2_T31OtherCharVal1 = {T31 OtherCharVal1},",
						"          P2_T31OtherCharVal2 = {T31 OtherCharVal2},",
						"          P2_T31OtherNumVal1 = {T31 OtherNumVal1},",
						"          P2_T31OtherNumVal2 = {T31 OtherNumVal2},",
						"          P2_T31OtherDtVal1 = {T31 OtherDtVal1},",
						"          P2_T31OtherDtVal2 = {T31 OtherDtVal2},",
						"          P2_T32Type = {T32 Type},",
						"          P2_T32OtherCharVal1 = {T32 OtherCharVal1},",
						"          P2_T32OtherCharVal2 = {T32 OtherCharVal2},",
						"          P2_T32OtherNumVal1 = {T32 OtherNumVal1},",
						"          P2_T32OtherNumVal2 = {T32 OtherNumVal2},",
						"          P2_T32OtherDtVal1 = {T32 OtherDtVal1},",
						"          P2_T32OtherDtVal2 = {T32 OtherDtVal2},",
						"          P2_T33Type = {T33 Type},",
						"          P2_T33OtherCharVal1 = {T33 OtherCharVal1},",
						"          P2_T33OtherCharVal2 = {T33 OtherCharVal2},",
						"          P2_T33OtherNumVal1 = {T33 OtherNumVal1},",
						"          P2_T33OtherNumVal2 = {T33 OtherNumVal2},",
						"          P2_T33OtherDtVal1 = {T33 OtherDtVal1},",
						"          P2_T33OtherDtVal2 = {T33 OtherDtVal2},",
						"          P2_T34Type = {T34 Type},",
						"          P2_T34OtherCharVal1 = {T34 OtherCharVal1},",
						"          P2_T34OtherCharVal2 = {T34 OtherCharVal2},",
						"          P2_T34OtherNumVal1 = {T34 OtherNumVal1},",
						"          P2_T34OtherNumVal2 = {T34 OtherNumVal2},",
						"          P2_T34OtherDtVal1 = {T34 OtherDtVal1},",
						"          P2_T34OtherDtVal2 = {T34 OtherDtVal2},",
						"          P2_T35Type = {T35 Type},",
						"          P2_T35OtherCharVal1 = {T35 OtherCharVal1},",
						"          P2_T35OtherCharVal2 = {T35 OtherCharVal2},",
						"          P2_T35OtherNumVal1 = {T35 OtherNumVal1},",
						"          P2_T35OtherNumVal2 = {T35 OtherNumVal2},",
						"          P2_T35OtherDtVal1 = {T35 OtherDtVal1},",
						"          P2_T35OtherDtVal2 = {T35 OtherDtVal2},",
						"          P2_T36Type = {T36 Type},",
						"          P2_T36OtherCharVal1 = {T36 OtherCharVal1},",
						"          P2_T36OtherCharVal2 = {T36 OtherCharVal2},",
						"          P2_T36OtherNumVal1 = {T36 OtherNumVal1},",
						"          P2_T36OtherNumVal2 = {T36 OtherNumVal2},",
						"          P2_T36OtherDtVal1 = {T36 OtherDtVal1},",
						"          P2_T36OtherDtVal2 = {T36 OtherDtVal2},",
						"          P2_T37Type = {T37 Type},",
						"          P2_T37OtherCharVal1 = {T37 OtherCharVal1},",
						"          P2_T37OtherCharVal2 = {T37 OtherCharVal2},",
						"          P2_T37OtherNumVal1 = {T37 OtherNumVal1},",
						"          P2_T37OtherNumVal2 = {T37 OtherNumVal2},",
						"          P2_T37OtherDtVal1 = {T37 OtherDtVal1},",
						"          P2_T37OtherDtVal2 = {T37 OtherDtVal2},",
						"          P2_T38Type = {T38 Type},",
						"          P2_T38OtherCharVal1 = {T38 OtherCharVal1},",
						"          P2_T38OtherCharVal2 = {T38 OtherCharVal2},",
						"          P2_T38OtherNumVal1 = {T38 OtherNumVal1},",
						"          P2_T38OtherNumVal2 = {T38 OtherNumVal2},",
						"          P2_T38OtherDtVal1 = {T38 OtherDtVal1},",
						"          P2_T38OtherDtVal2 = {T38 OtherDtVal2},",
						"          P2_T39Type = {T39 Type},",
						"          P2_T39OtherCharVal1 = {T39 OtherCharVal1},",
						"          P2_T39OtherCharVal2 = {T39 OtherCharVal2},",
						"          P2_T39OtherNumVal1 = {T39 OtherNumVal1},",
						"          P2_T39OtherNumVal2 = {T39 OtherNumVal2},",
						"          P2_T39OtherDtVal1 = {T39 OtherDtVal1},",
						"          P2_T39OtherDtVal2 = {T39 OtherDtVal2},",
						"          P2_T40Type = {T40 Type},",
						"          P2_T40OtherCharVal1 = {T40 OtherCharVal1},",
						"          P2_T40OtherCharVal2 = {T40 OtherCharVal2},",
						"          P2_T40OtherNumVal1 = {T40 OtherNumVal1},",
						"          P2_T40OtherNumVal2 = {T40 OtherNumVal2},",
						"          P2_T40OtherDtVal1 = {T40 OtherDtVal1},",
						"          P2_T40OtherDtVal2 = {T40 OtherDtVal2},",
						"          P2_T41Type = {T41 Type},",
						"          P2_T41OtherCharVal1 = {T41 OtherCharVal1},",
						"          P2_T41OtherCharVal2 = {T41 OtherCharVal2},",
						"          P2_T41OtherNumVal1 = {T41 OtherNumVal1},",
						"          P2_T41OtherNumVal2 = {T41 OtherNumVal2},",
						"          P2_T41OtherDtVal1 = {T41 OtherDtVal1},",
						"          P2_T41OtherDtVal2 = {T41 OtherDtVal2},",
						"          P2_T42Type = {T42 Type},",
						"          P2_T42OtherCharVal1 = {T42 OtherCharVal1},",
						"          P2_T42OtherCharVal2 = {T42 OtherCharVal2},",
						"          P2_T42OtherNumVal1 = {T42 OtherNumVal1},",
						"          P2_T42OtherNumVal2 = {T42 OtherNumVal2},",
						"          P2_T42OtherDtVal1 = {T42 OtherDtVal1},",
						"          P2_T42OtherDtVal2 = {T42 OtherDtVal2},",
						"          P2_T43Type = {T43 Type},",
						"          P2_T43OtherCharVal1 = {T43 OtherCharVal1},",
						"          P2_T43OtherCharVal2 = {T43 OtherCharVal2},",
						"          P2_T43OtherNumVal1 = {T43 OtherNumVal1},",
						"          P2_T43OtherNumVal2 = {T43 OtherNumVal2},",
						"          P2_T43OtherDtVal1 = {T43 OtherDtVal1},",
						"          P2_T43OtherDtVal2 = {T43 OtherDtVal2},",
						"          P2_T44Type = {T44 Type},",
						"          P2_T44OtherCharVal1 = {T44 OtherCharVal1},",
						"          P2_T44OtherCharVal2 = {T44 OtherCharVal2},",
						"          P2_T44OtherNumVal1 = {T44 OtherNumVal1},",
						"          P2_T44OtherNumVal2 = {T44 OtherNumVal2},",
						"          P2_T44OtherDtVal1 = {T44 OtherDtVal1},",
						"          P2_T44OtherDtVal2 = {T44 OtherDtVal2},",
						"          P2_T45Type = {T45 Type},",
						"          P2_T45OtherCharVal1 = {T45 OtherCharVal1},",
						"          P2_T45OtherCharVal2 = {T45 OtherCharVal2},",
						"          P2_T45OtherNumVal1 = {T45 OtherNumVal1},",
						"          P2_T45OtherNumVal2 = {T45 OtherNumVal2},",
						"          P2_T45OtherDtVal1 = {T45 OtherDtVal1},",
						"          P2_T45OtherDtVal2 = {T45 OtherDtVal2},",
						"          P2_T46Type = {T46 Type},",
						"          P2_T46OtherCharVal1 = {T46 OtherCharVal1},",
						"          P2_T46OtherCharVal2 = {T46 OtherCharVal2},",
						"          P2_T46OtherNumVal1 = {T46 OtherNumVal1},",
						"          P2_T46OtherNumVal2 = {T46 OtherNumVal2},",
						"          P2_T46OtherDtVal1 = {T46 OtherDtVal1},",
						"          P2_T46OtherDtVal2 = {T46 OtherDtVal2},",
						"          P2_T47Type = {T47 Type},",
						"          P2_T47OtherCharVal1 = {T47 OtherCharVal1},",
						"          P2_T47OtherCharVal2 = {T47 OtherCharVal2},",
						"          P2_T47OtherNumVal1 = {T47 OtherNumVal1},",
						"          P2_T47OtherNumVal2 = {T47 OtherNumVal2},",
						"          P2_T47OtherDtVal1 = {T47 OtherDtVal1},",
						"          P2_T47OtherDtVal2 = {T47 OtherDtVal2},",
						"          P2_T48Type = {T48 Type},",
						"          P2_T48OtherCharVal1 = {T48 OtherCharVal1},",
						"          P2_T48OtherCharVal2 = {T48 OtherCharVal2},",
						"          P2_T48OtherNumVal1 = {T48 OtherNumVal1},",
						"          P2_T48OtherNumVal2 = {T48 OtherNumVal2},",
						"          P2_T48OtherDtVal1 = {T48 OtherDtVal1},",
						"          P2_T48OtherDtVal2 = {T48 OtherDtVal2},",
						"          P2_T49Type = {T49 Type},",
						"          P2_T49OtherCharVal1 = {T49 OtherCharVal1},",
						"          P2_T49OtherCharVal2 = {T49 OtherCharVal2},",
						"          P2_T49OtherNumVal1 = {T49 OtherNumVal1},",
						"          P2_T49OtherNumVal2 = {T49 OtherNumVal2},",
						"          P2_T49OtherDtVal1 = {T49 OtherDtVal1},",
						"          P2_T49OtherDtVal2 = {T49 OtherDtVal2},",
						"          P2_T50Type = {T50 Type},",
						"          P2_T50OtherCharVal1 = {T50 OtherCharVal1},",
						"          P2_T50OtherCharVal2 = {T50 OtherCharVal2},",
						"          P2_T50OtherNumVal1 = {T50 OtherNumVal1},",
						"          P2_T50OtherNumVal2 = {T50 OtherNumVal2},",
						"          P2_T50OtherDtVal1 = {T50 OtherDtVal1},",
						"          P2_T50OtherDtVal2 = {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreAnalysisMaxYearOutput join(OtherCoreWorkers@ClientId == {Client Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"OtherCoreYear derive({Client Id} = $Flow_Client_Id) ~> OtherCoreAnalysisMaxYearOutput",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreAnalysisTbl_P2.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherAnaylysis_P3_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_3P",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreAnalysisRefTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By WorkerId,ClientId,ClientEngagementDt\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          ClientId as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"Select ClientId, MAX(CAST(LEFT(TYPE, 4) as INT))-3 as Year from [dbo].[OtherCoreAnalysisRefTbl] Where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' Group By ClientId\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          ClientId = OtherCoreWorkers@ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          P3_DataCollectionYear = {Data Collection Year},",
						"          P3_DataCollectionQuarter = {Data Collection Quarter},",
						"          P3_EventYear = Year,",
						"          P3_T1Type = {T1 Type},",
						"          P3_T1OtherCharVal1 = {T1 OtherCharVal1},",
						"          P3_T1OtherCharVal2 = {T1 OtherCharVal2},",
						"          P3_T1OtherNumVal1 = {T1 OtherNumVal1},",
						"          P3_T1OtherNumVal2 = {T1 OtherNumVal2},",
						"          P3_T1OtherDtVal1 = {T1 OtherDtVal1},",
						"          P3_T1OtherDtVal2 = {T1 OtherDtVal2},",
						"          P3_T2Type = {T2 Type},",
						"          P3_T2OtherCharVal1 = {T2 OtherCharVal1},",
						"          P3_T2OtherCharVal2 = {T2 OtherCharVal2},",
						"          P3_T2OtherNumVal1 = {T2 OtherNumVal1},",
						"          P3_T2OtherNumVal2 = {T2 OtherNumVal2},",
						"          P3_T2OtherDtVal1 = {T2 OtherDtVal1},",
						"          P3_T2OtherDtVal2 = {T2 OtherDtVal2},",
						"          P3_T3Type = {T3 Type},",
						"          P3_T3OtherCharVal1 = {T3 OtherCharVal1},",
						"          P3_T3OtherCharVal2 = {T3 OtherCharVal2},",
						"          P3_T3OtherNumVal1 = {T3 OtherNumVal1},",
						"          P3_T3OtherNumVal2 = {T3 OtherNumVal2},",
						"          P3_T3OtherDtVal1 = {T3 OtherDtVal1},",
						"          P3_T3OtherDtVal2 = {T3 OtherDtVal2},",
						"          P3_T4Type = {T4 Type},",
						"          P3_T4OtherCharVal1 = {T4 OtherCharVal1},",
						"          P3_T4OtherCharVal2 = {T4 OtherCharVal2},",
						"          P3_T4OtherNumVal1 = {T4 OtherNumVal1},",
						"          P3_T4OtherNumVal2 = {T4 OtherNumVal2},",
						"          P3_T4OtherDtVal1 = {T4 OtherDtVal1},",
						"          P3_T4OtherDtVal2 = {T4 OtherDtVal2},",
						"          P3_T5Type = {T5 Type},",
						"          P3_T5OtherCharVal1 = {T5 OtherCharVal1},",
						"          P3_T5OtherCharVal2 = {T5 OtherCharVal2},",
						"          P3_T5OtherNumVal1 = {T5 OtherNumVal1},",
						"          P3_T5OtherNumVal2 = {T5 OtherNumVal2},",
						"          P3_T5OtherDtVal1 = {T5 OtherDtVal1},",
						"          P3_T5OtherDtVal2 = {T5 OtherDtVal2},",
						"          P3_T6Type = {T6 Type},",
						"          P3_T6OtherCharVal1 = {T6 OtherCharVal1},",
						"          P3_T6OtherCharVal2 = {T6 OtherCharVal2},",
						"          P3_T6OtherNumVal1 = {T6 OtherNumVal1},",
						"          P3_T6OtherNumVal2 = {T6 OtherNumVal2},",
						"          P3_T6OtherDtVal1 = {T6 OtherDtVal1},",
						"          P3_T6OtherDtVal2 = {T6 OtherDtVal2},",
						"          P3_T7Type = {T7 Type},",
						"          P3_T7OtherCharVal1 = {T7 OtherCharVal1},",
						"          P3_T7OtherCharVal2 = {T7 OtherCharVal2},",
						"          P3_T7OtherNumVal1 = {T7 OtherNumVal1},",
						"          P3_T7OtherNumVal2 = {T7 OtherNumVal2},",
						"          P3_T7OtherDtVal1 = {T7 OtherDtVal1},",
						"          P3_T7OtherDtVal2 = {T7 OtherDtVal2},",
						"          P3_T8Type = {T8 Type},",
						"          P3_T8OtherCharVal1 = {T8 OtherCharVal1},",
						"          P3_T8OtherCharVal2 = {T8 OtherCharVal2},",
						"          P3_T8OtherNumVal1 = {T8 OtherNumVal1},",
						"          P3_T8OtherNumVal2 = {T8 OtherNumVal2},",
						"          P3_T8OtherDtVal1 = {T8 OtherDtVal1},",
						"          P3_T8OtherDtVal2 = {T8 OtherDtVal2},",
						"          P3_T9Type = {T9 Type},",
						"          P3_T9OtherCharVal1 = {T9 OtherCharVal1},",
						"          P3_T9OtherCharVal2 = {T9 OtherCharVal2},",
						"          P3_T9OtherNumVal1 = {T9 OtherNumVal1},",
						"          P3_T9OtherNumVal2 = {T9 OtherNumVal2},",
						"          P3_T9OtherDtVal1 = {T9 OtherDtVal1},",
						"          P3_T9OtherDtVal2 = {T9 OtherDtVal2},",
						"          P3_T10Type = {T10 Type},",
						"          P3_T10OtherCharVal1 = {T10 OtherCharVal1},",
						"          P3_T10OtherCharVal2 = {T10 OtherCharVal2},",
						"          P3_T10OtherNumVal1 = {T10 OtherNumVal1},",
						"          P3_T10OtherNumVal2 = {T10 OtherNumVal2},",
						"          P3_T10OtherDtVal1 = {T10 OtherDtVal1},",
						"          P3_T10OtherDtVal2 = {T10 OtherDtVal2},",
						"          P3_T11Type = {T11 Type},",
						"          P3_T11OtherCharVal1 = {T11 OtherCharVal1},",
						"          P3_T11OtherCharVal2 = {T11 OtherCharVal2},",
						"          P3_T11OtherNumVal1 = {T11 OtherNumVal1},",
						"          P3_T11OtherNumVal2 = {T11 OtherNumVal2},",
						"          P3_T11OtherDtVal1 = {T11 OtherDtVal1},",
						"          P3_T11OtherDtVal2 = {T11 OtherDtVal2},",
						"          P3_T12Type = {T12 Type},",
						"          P3_T12OtherCharVal1 = {T12 OtherCharVal1},",
						"          P3_T12OtherCharVal2 = {T12 OtherCharVal2},",
						"          P3_T12OtherNumVal1 = {T12 OtherNumVal1},",
						"          P3_T12OtherNumVal2 = {T12 OtherNumVal2},",
						"          P3_T12OtherDtVal1 = {T12 OtherDtVal1},",
						"          P3_T12OtherDtVal2 = {T12 OtherDtVal2},",
						"          P3_T13Type = {T13 Type},",
						"          P3_T13OtherCharVal1 = {T13 OtherCharVal1},",
						"          P3_T13OtherCharVal2 = {T13 OtherCharVal2},",
						"          P3_T13OtherNumVal1 = {T13 OtherNumVal1},",
						"          P3_T13OtherNumVal2 = {T13 OtherNumVal2},",
						"          P3_T13OtherDtVal1 = {T13 OtherDtVal1},",
						"          P3_T13OtherDtVal2 = {T13 OtherDtVal2},",
						"          P3_T14Type = {T14 Type},",
						"          P3_T14OtherCharVal1 = {T14 OtherCharVal1},",
						"          P3_T14OtherCharVal2 = {T14 OtherCharVal2},",
						"          P3_T14OtherNumVal1 = {T14 OtherNumVal1},",
						"          P3_T14OtherNumVal2 = {T14 OtherNumVal2},",
						"          P3_T14OtherDtVal1 = {T14 OtherDtVal1},",
						"          P3_T14OtherDtVal2 = {T14 OtherDtVal2},",
						"          P3_T15Type = {T15 Type},",
						"          P3_T15OtherCharVal1 = {T15 OtherCharVal1},",
						"          P3_T15OtherCharVal2 = {T15 OtherCharVal2},",
						"          P3_T15OtherNumVal1 = {T15 OtherNumVal1},",
						"          P3_T15OtherNumVal2 = {T15 OtherNumVal2},",
						"          P3_T15OtherDtVal1 = {T15 OtherDtVal1},",
						"          P3_T15OtherDtVal2 = {T15 OtherDtVal2},",
						"          P3_T16Type = {T16 Type},",
						"          P3_T16OtherCharVal1 = {T16 OtherCharVal1},",
						"          P3_T16OtherCharVal2 = {T16 OtherCharVal2},",
						"          P3_T16OtherNumVal1 = {T16 OtherNumVal1},",
						"          P3_T16OtherNumVal2 = {T16 OtherNumVal2},",
						"          P3_T16OtherDtVal1 = {T16 OtherDtVal1},",
						"          P3_T16OtherDtVal2 = {T16 OtherDtVal2},",
						"          P3_T17Type = {T17 Type},",
						"          P3_T17OtherCharVal1 = {T17 OtherCharVal1},",
						"          P3_T17OtherCharVal2 = {T17 OtherCharVal2},",
						"          P3_T17OtherNumVal1 = {T17 OtherNumVal1},",
						"          P3_T17OtherNumVal2 = {T17 OtherNumVal2},",
						"          P3_T17OtherDtVal1 = {T17 OtherDtVal1},",
						"          P3_T17OtherDtVal2 = {T17 OtherDtVal2},",
						"          P3_T18Type = {T18 Type},",
						"          P3_T18OtherCharVal1 = {T18 OtherCharVal1},",
						"          P3_T18OtherCharVal2 = {T18 OtherCharVal2},",
						"          P3_T18OtherNumVal1 = {T18 OtherNumVal1},",
						"          P3_T18OtherNumVal2 = {T18 OtherNumVal2},",
						"          P3_T18OtherDtVal1 = {T18 OtherDtVal1},",
						"          P3_T18OtherDtVal2 = {T18 OtherDtVal2},",
						"          P3_T19Type = {T19 Type},",
						"          P3_T19OtherCharVal1 = {T19 OtherCharVal1},",
						"          P3_T19OtherCharVal2 = {T19 OtherCharVal2},",
						"          P3_T19OtherNumVal1 = {T19 OtherNumVal1},",
						"          P3_T19OtherNumVal2 = {T19 OtherNumVal2},",
						"          P3_T19OtherDtVal1 = {T19 OtherDtVal1},",
						"          P3_T19OtherDtVal2 = {T19 OtherDtVal2},",
						"          P3_T20Type = {T20 Type},",
						"          P3_T20OtherCharVal1 = {T20 OtherCharVal1},",
						"          P3_T20OtherCharVal2 = {T20 OtherCharVal2},",
						"          P3_T20OtherNumVal1 = {T20 OtherNumVal1},",
						"          P3_T20OtherNumVal2 = {T20 OtherNumVal2},",
						"          P3_T20OtherDtVal1 = {T20 OtherDtVal1},",
						"          P3_T20OtherDtVal2 = {T20 OtherDtVal2},",
						"          P3_T21Type = {T21 Type},",
						"          P3_T21OtherCharVal1 = {T21 OtherCharVal1},",
						"          P3_T21OtherCharVal2 = {T21 OtherCharVal2},",
						"          P3_T21OtherNumVal1 = {T21 OtherNumVal1},",
						"          P3_T21OtherNumVal2 = {T21 OtherNumVal2},",
						"          P3_T21OtherDtVal1 = {T21 OtherDtVal1},",
						"          P3_T21OtherDtVal2 = {T21 OtherDtVal2},",
						"          P3_T22Type = {T22 Type},",
						"          P3_T22OtherCharVal1 = {T22 OtherCharVal1},",
						"          P3_T22OtherCharVal2 = {T22 OtherCharVal2},",
						"          P3_T22OtherNumVal1 = {T22 OtherNumVal1},",
						"          P3_T22OtherNumVal2 = {T22 OtherNumVal2},",
						"          P3_T22OtherDtVal1 = {T22 OtherDtVal1},",
						"          P3_T22OtherDtVal2 = {T22 OtherDtVal2},",
						"          P3_T23Type = {T23 Type},",
						"          P3_T23OtherCharVal1 = {T23 OtherCharVal1},",
						"          P3_T23OtherCharVal2 = {T23 OtherCharVal2},",
						"          P3_T23OtherNumVal1 = {T23 OtherNumVal1},",
						"          P3_T23OtherNumVal2 = {T23 OtherNumVal2},",
						"          P3_T23OtherDtVal1 = {T23 OtherDtVal1},",
						"          P3_T23OtherDtVal2 = {T23 OtherDtVal2},",
						"          P3_T24Type = {T24 Type},",
						"          P3_T24OtherCharVal1 = {T24 OtherCharVal1},",
						"          P3_T24OtherCharVal2 = {T24 OtherCharVal2},",
						"          P3_T24OtherNumVal1 = {T24 OtherNumVal1},",
						"          P3_T24OtherNumVal2 = {T24 OtherNumVal2},",
						"          P3_T24OtherDtVal1 = {T24 OtherDtVal1},",
						"          P3_T24OtherDtVal2 = {T24 OtherDtVal2},",
						"          P3_T25Type = {T25 Type},",
						"          P3_T25OtherCharVal1 = {T25 OtherCharVal1},",
						"          P3_T25OtherCharVal2 = {T25 OtherCharVal2},",
						"          P3_T25OtherNumVal1 = {T25 OtherNumVal1},",
						"          P3_T25OtherNumVal2 = {T25 OtherNumVal2},",
						"          P3_T25OtherDtVal1 = {T25 OtherDtVal1},",
						"          P3_T25OtherDtVal2 = {T25 OtherDtVal2},",
						"          P3_T26Type = {T26 Type},",
						"          P3_T26OtherCharVal1 = {T26 OtherCharVal1},",
						"          P3_T26OtherCharVal2 = {T26 OtherCharVal2},",
						"          P3_T26OtherNumVal1 = {T26 OtherNumVal1},",
						"          P3_T26OtherNumVal2 = {T26 OtherNumVal2},",
						"          P3_T26OtherDtVal1 = {T26 OtherDtVal1},",
						"          P3_T26OtherDtVal2 = {T26 OtherDtVal2},",
						"          P3_T27Type = {T27 Type},",
						"          P3_T27OtherCharVal1 = {T27 OtherCharVal1},",
						"          P3_T27OtherCharVal2 = {T27 OtherCharVal2},",
						"          P3_T27OtherNumVal1 = {T27 OtherNumVal1},",
						"          P3_T27OtherNumVal2 = {T27 OtherNumVal2},",
						"          P3_T27OtherDtVal1 = {T27 OtherDtVal1},",
						"          P3_T27OtherDtVal2 = {T27 OtherDtVal2},",
						"          P3_T28Type = {T28 Type},",
						"          P3_T28OtherCharVal1 = {T28 OtherCharVal1},",
						"          P3_T28OtherCharVal2 = {T28 OtherCharVal2},",
						"          P3_T28OtherNumVal1 = {T28 OtherNumVal1},",
						"          P3_T28OtherNumVal2 = {T28 OtherNumVal2},",
						"          P3_T28OtherDtVal1 = {T28 OtherDtVal1},",
						"          P3_T28OtherDtVal2 = {T28 OtherDtVal2},",
						"          P3_T29Type = {T29 Type},",
						"          P3_T29OtherCharVal1 = {T29 OtherCharVal1},",
						"          P3_T29OtherCharVal2 = {T29 OtherCharVal2},",
						"          P3_T29OtherNumVal1 = {T29 OtherNumVal1},",
						"          P3_T29OtherNumVal2 = {T29 OtherNumVal2},",
						"          P3_T29OtherDtVal1 = {T29 OtherDtVal1},",
						"          P3_T29OtherDtVal2 = {T29 OtherDtVal2},",
						"          P3_T30Type = {T30 Type},",
						"          P3_T30OtherCharVal1 = {T30 OtherCharVal1},",
						"          P3_T30OtherCharVal2 = {T30 OtherCharVal2},",
						"          P3_T30OtherNumVal1 = {T30 OtherNumVal1},",
						"          P3_T30OtherNumVal2 = {T30 OtherNumVal2},",
						"          P3_T30OtherDtVal1 = {T30 OtherDtVal1},",
						"          P3_T30OtherDtVal2 = {T30 OtherDtVal2},",
						"          P3_T31Type = {T31 Type},",
						"          P3_T31OtherCharVal1 = {T31 OtherCharVal1},",
						"          P3_T31OtherCharVal2 = {T31 OtherCharVal2},",
						"          P3_T31OtherNumVal1 = {T31 OtherNumVal1},",
						"          P3_T31OtherNumVal2 = {T31 OtherNumVal2},",
						"          P3_T31OtherDtVal1 = {T31 OtherDtVal1},",
						"          P3_T31OtherDtVal2 = {T31 OtherDtVal2},",
						"          P3_T32Type = {T32 Type},",
						"          P3_T32OtherCharVal1 = {T32 OtherCharVal1},",
						"          P3_T32OtherCharVal2 = {T32 OtherCharVal2},",
						"          P3_T32OtherNumVal1 = {T32 OtherNumVal1},",
						"          P3_T32OtherNumVal2 = {T32 OtherNumVal2},",
						"          P3_T32OtherDtVal1 = {T32 OtherDtVal1},",
						"          P3_T32OtherDtVal2 = {T32 OtherDtVal2},",
						"          P3_T33Type = {T33 Type},",
						"          P3_T33OtherCharVal1 = {T33 OtherCharVal1},",
						"          P3_T33OtherCharVal2 = {T33 OtherCharVal2},",
						"          P3_T33OtherNumVal1 = {T33 OtherNumVal1},",
						"          P3_T33OtherNumVal2 = {T33 OtherNumVal2},",
						"          P3_T33OtherDtVal1 = {T33 OtherDtVal1},",
						"          P3_T33OtherDtVal2 = {T33 OtherDtVal2},",
						"          P3_T34Type = {T34 Type},",
						"          P3_T34OtherCharVal1 = {T34 OtherCharVal1},",
						"          P3_T34OtherCharVal2 = {T34 OtherCharVal2},",
						"          P3_T34OtherNumVal1 = {T34 OtherNumVal1},",
						"          P3_T34OtherNumVal2 = {T34 OtherNumVal2},",
						"          P3_T34OtherDtVal1 = {T34 OtherDtVal1},",
						"          P3_T34OtherDtVal2 = {T34 OtherDtVal2},",
						"          P3_T35Type = {T35 Type},",
						"          P3_T35OtherCharVal1 = {T35 OtherCharVal1},",
						"          P3_T35OtherCharVal2 = {T35 OtherCharVal2},",
						"          P3_T35OtherNumVal1 = {T35 OtherNumVal1},",
						"          P3_T35OtherNumVal2 = {T35 OtherNumVal2},",
						"          P3_T35OtherDtVal1 = {T35 OtherDtVal1},",
						"          P3_T35OtherDtVal2 = {T35 OtherDtVal2},",
						"          P3_T36Type = {T36 Type},",
						"          P3_T36OtherCharVal1 = {T36 OtherCharVal1},",
						"          P3_T36OtherCharVal2 = {T36 OtherCharVal2},",
						"          P3_T36OtherNumVal1 = {T36 OtherNumVal1},",
						"          P3_T36OtherNumVal2 = {T36 OtherNumVal2},",
						"          P3_T36OtherDtVal1 = {T36 OtherDtVal1},",
						"          P3_T36OtherDtVal2 = {T36 OtherDtVal2},",
						"          P3_T37Type = {T37 Type},",
						"          P3_T37OtherCharVal1 = {T37 OtherCharVal1},",
						"          P3_T37OtherCharVal2 = {T37 OtherCharVal2},",
						"          P3_T37OtherNumVal1 = {T37 OtherNumVal1},",
						"          P3_T37OtherNumVal2 = {T37 OtherNumVal2},",
						"          P3_T37OtherDtVal1 = {T37 OtherDtVal1},",
						"          P3_T37OtherDtVal2 = {T37 OtherDtVal2},",
						"          P3_T38Type = {T38 Type},",
						"          P3_T38OtherCharVal1 = {T38 OtherCharVal1},",
						"          P3_T38OtherCharVal2 = {T38 OtherCharVal2},",
						"          P3_T38OtherNumVal1 = {T38 OtherNumVal1},",
						"          P3_T38OtherNumVal2 = {T38 OtherNumVal2},",
						"          P3_T38OtherDtVal1 = {T38 OtherDtVal1},",
						"          P3_T38OtherDtVal2 = {T38 OtherDtVal2},",
						"          P3_T39Type = {T39 Type},",
						"          P3_T39OtherCharVal1 = {T39 OtherCharVal1},",
						"          P3_T39OtherCharVal2 = {T39 OtherCharVal2},",
						"          P3_T39OtherNumVal1 = {T39 OtherNumVal1},",
						"          P3_T39OtherNumVal2 = {T39 OtherNumVal2},",
						"          P3_T39OtherDtVal1 = {T39 OtherDtVal1},",
						"          P3_T39OtherDtVal2 = {T39 OtherDtVal2},",
						"          P3_T40Type = {T40 Type},",
						"          P3_T40OtherCharVal1 = {T40 OtherCharVal1},",
						"          P3_T40OtherCharVal2 = {T40 OtherCharVal2},",
						"          P3_T40OtherNumVal1 = {T40 OtherNumVal1},",
						"          P3_T40OtherNumVal2 = {T40 OtherNumVal2},",
						"          P3_T40OtherDtVal1 = {T40 OtherDtVal1},",
						"          P3_T40OtherDtVal2 = {T40 OtherDtVal2},",
						"          P3_T41Type = {T41 Type},",
						"          P3_T41OtherCharVal1 = {T41 OtherCharVal1},",
						"          P3_T41OtherCharVal2 = {T41 OtherCharVal2},",
						"          P3_T41OtherNumVal1 = {T41 OtherNumVal1},",
						"          P3_T41OtherNumVal2 = {T41 OtherNumVal2},",
						"          P3_T41OtherDtVal1 = {T41 OtherDtVal1},",
						"          P3_T41OtherDtVal2 = {T41 OtherDtVal2},",
						"          P3_T42Type = {T42 Type},",
						"          P3_T42OtherCharVal1 = {T42 OtherCharVal1},",
						"          P3_T42OtherCharVal2 = {T42 OtherCharVal2},",
						"          P3_T42OtherNumVal1 = {T42 OtherNumVal1},",
						"          P3_T42OtherNumVal2 = {T42 OtherNumVal2},",
						"          P3_T42OtherDtVal1 = {T42 OtherDtVal1},",
						"          P3_T42OtherDtVal2 = {T42 OtherDtVal2},",
						"          P3_T43Type = {T43 Type},",
						"          P3_T43OtherCharVal1 = {T43 OtherCharVal1},",
						"          P3_T43OtherCharVal2 = {T43 OtherCharVal2},",
						"          P3_T43OtherNumVal1 = {T43 OtherNumVal1},",
						"          P3_T43OtherNumVal2 = {T43 OtherNumVal2},",
						"          P3_T43OtherDtVal1 = {T43 OtherDtVal1},",
						"          P3_T43OtherDtVal2 = {T43 OtherDtVal2},",
						"          P3_T44Type = {T44 Type},",
						"          P3_T44OtherCharVal1 = {T44 OtherCharVal1},",
						"          P3_T44OtherCharVal2 = {T44 OtherCharVal2},",
						"          P3_T44OtherNumVal1 = {T44 OtherNumVal1},",
						"          P3_T44OtherNumVal2 = {T44 OtherNumVal2},",
						"          P3_T44OtherDtVal1 = {T44 OtherDtVal1},",
						"          P3_T44OtherDtVal2 = {T44 OtherDtVal2},",
						"          P3_T45Type = {T45 Type},",
						"          P3_T45OtherCharVal1 = {T45 OtherCharVal1},",
						"          P3_T45OtherCharVal2 = {T45 OtherCharVal2},",
						"          P3_T45OtherNumVal1 = {T45 OtherNumVal1},",
						"          P3_T45OtherNumVal2 = {T45 OtherNumVal2},",
						"          P3_T45OtherDtVal1 = {T45 OtherDtVal1},",
						"          P3_T45OtherDtVal2 = {T45 OtherDtVal2},",
						"          P3_T46Type = {T46 Type},",
						"          P3_T46OtherCharVal1 = {T46 OtherCharVal1},",
						"          P3_T46OtherCharVal2 = {T46 OtherCharVal2},",
						"          P3_T46OtherNumVal1 = {T46 OtherNumVal1},",
						"          P3_T46OtherNumVal2 = {T46 OtherNumVal2},",
						"          P3_T46OtherDtVal1 = {T46 OtherDtVal1},",
						"          P3_T46OtherDtVal2 = {T46 OtherDtVal2},",
						"          P3_T47Type = {T47 Type},",
						"          P3_T47OtherCharVal1 = {T47 OtherCharVal1},",
						"          P3_T47OtherCharVal2 = {T47 OtherCharVal2},",
						"          P3_T47OtherNumVal1 = {T47 OtherNumVal1},",
						"          P3_T47OtherNumVal2 = {T47 OtherNumVal2},",
						"          P3_T47OtherDtVal1 = {T47 OtherDtVal1},",
						"          P3_T47OtherDtVal2 = {T47 OtherDtVal2},",
						"          P3_T48Type = {T48 Type},",
						"          P3_T48OtherCharVal1 = {T48 OtherCharVal1},",
						"          P3_T48OtherCharVal2 = {T48 OtherCharVal2},",
						"          P3_T48OtherNumVal1 = {T48 OtherNumVal1},",
						"          P3_T48OtherNumVal2 = {T48 OtherNumVal2},",
						"          P3_T48OtherDtVal1 = {T48 OtherDtVal1},",
						"          P3_T48OtherDtVal2 = {T48 OtherDtVal2},",
						"          P3_T49Type = {T49 Type},",
						"          P3_T49OtherCharVal1 = {T49 OtherCharVal1},",
						"          P3_T49OtherCharVal2 = {T49 OtherCharVal2},",
						"          P3_T49OtherNumVal1 = {T49 OtherNumVal1},",
						"          P3_T49OtherNumVal2 = {T49 OtherNumVal2},",
						"          P3_T49OtherDtVal1 = {T49 OtherDtVal1},",
						"          P3_T49OtherDtVal2 = {T49 OtherDtVal2},",
						"          P3_T50Type = {T50 Type},",
						"          P3_T50OtherCharVal1 = {T50 OtherCharVal1},",
						"          P3_T50OtherCharVal2 = {T50 OtherCharVal2},",
						"          P3_T50OtherNumVal1 = {T50 OtherNumVal1},",
						"          P3_T50OtherNumVal2 = {T50 OtherNumVal2},",
						"          P3_T50OtherDtVal1 = {T50 OtherDtVal1},",
						"          P3_T50OtherDtVal2 = {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreYear join(OtherCoreWorkers@ClientId == OtherCoreYear@ClientId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherCoreAnalysisTbl_P3.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherCore_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_OtherCore",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerivedColumns"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"Other filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRows derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Other',",
						"          {Event ID} = 'OTH',",
						"          EventMonth = month({Event Date})) ~> AddDerivedColumns",
						"AddDerivedColumns derive({Event (Type)} = iif(isNull({Event (Type)}),'N/A',{Event (Type)}),",
						"          {Event (Desc)} = iif(isNull({Event (Desc)}),'N/A',{Event (Desc)}),",
						"          {Other (Char Value 1)} = iif(isNull({Other (Char Value 1)}),'N/A',{Other (Char Value 1)}),",
						"          {Other (Char Value 2)} = iif(isNull({Other (Char Value 2)}),'N/A',{Other (Char Value 2)}),",
						"          {Other (Num Value 1)} = iif(isNull({Other (Num Value 1)}),'N/A',{Other (Num Value 1)}),",
						"          {Other (Num Value 2)} = iif(isNull({Other (Num Value 2)}),'N/A',{Other (Num Value 2)}),",
						"          {Other (Date Value 1)} = iif(isNull({Other (Date Value 1)}),'N/A',{Other (Date Value 1)}),",
						"          {Other (Date Value 2)} = iif(isNull({Other (Date Value 2)}),'N/A',{Other (Date Value 2)})) ~> ConvertNullsForKeyFields",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"SelectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OthrCoreFlexTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherCore_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_OtherCore_Append",
								"type": "DatasetReference"
							},
							"name": "OtherAppend"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherAppend",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"OtherAppend filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRows derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Other',",
						"          {Event ID} = 'OTH',",
						"          EventMonth = month({Event Date})) ~> AddDerived",
						"AddDerived derive({Event (Type)} = iif(isNull({Event (Type)}),'N/A',{Event (Type)}),",
						"          {Event (Desc)} = iif(isNull({Event (Desc)}),'N/A',{Event (Desc)}),",
						"          {Other (Char Value 1)} = iif(isNull({Other (Char Value 1)}),'N/A',{Other (Char Value 1)}),",
						"          {Other (Char Value 2)} = iif(isNull({Other (Char Value 2)}),'N/A',{Other (Char Value 2)}),",
						"          {Other (Num Value 1)} = iif(isNull({Other (Num Value 1)}),'N/A',{Other (Num Value 1)}),",
						"          {Other (Num Value 2)} = iif(isNull({Other (Num Value 2)}),'N/A',{Other (Num Value 2)}),",
						"          {Other (Date Value 1)} = iif(isNull({Other (Date Value 1)}),'N/A',{Other (Date Value 1)}),",
						"          {Other (Date Value 2)} = iif(isNull({Other (Date Value 2)}),'N/A',{Other (Date Value 2)})) ~> ConvertNullsForKeyFields",
						"SelectFinal, Other union(byName: true)~> union1",
						"union1 aggregate(groupBy({Client Engagement Date},",
						"          {Event Quarter},",
						"          {Worker ID},",
						"          {Event Year},",
						"          EventMonth,",
						"          {Event Date},",
						"          Event,",
						"          {Event ID},",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOutput",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"SelectOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OthrCoreFlexTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Final_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "PerformanceHistory"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCTEventYears"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistFactTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDBHist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CreateTalentTagScore"
						},
						{
							"name": "CreateCurTalentTag"
						},
						{
							"name": "select1"
						},
						{
							"name": "SelectCoreValues"
						},
						{
							"name": "HCTFilter"
						},
						{
							"name": "MaxYearMinus2"
						},
						{
							"name": "JoinEventYrMinus2"
						},
						{
							"name": "SumEmpCountFor3Yr"
						},
						{
							"name": "join1"
						},
						{
							"name": "RemoveNullWorkerIDRows"
						},
						{
							"name": "SelectLastTalentTag"
						},
						{
							"name": "join2"
						},
						{
							"name": "union1"
						},
						{
							"name": "SelectHistoricalCoreDB"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "FilterHCTOnly"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as short,",
						"          {Curr Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as integer,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as short,",
						"          {P1 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as integer,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as short,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as integer,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as short,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as integer,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerformanceHistory",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as double,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCTEventYears",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingHistFactTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventID = 'HCT'\"),",
						"     format: 'query') ~> CoreDBHist",
						"join2 derive({Group 1-3 Scoring} = iif({Curr Elloree Performance Rating}=='Outstanding',1,0)\r",
						"+iif({P1 Elloree Performance Rating}=='Outstanding',1,0)\r",
						"+iif({P2 Elloree Performance Rating}=='Outstanding',1,0),",
						"          {Group 4-6 Scoring} = iif({Curr Elloree Performance Rating}=='Exceeds',1,0)\r",
						"+iif({P1 Elloree Performance Rating}=='Exceeds',1,0)\r",
						"+iif({P2 Elloree Performance Rating}=='Exceeds',1,0),",
						"          {Group 3 Flag} = iif({Curr Elloree Performance Rating}=='Outstanding', 'Y','N'),",
						"          {Group 6 Flag} = iif({Curr Elloree Performance Rating}=='Exceeds', 'Y','N')) ~> CreateTalentTagScore",
						"CreateTalentTagScore derive({Talent Tag} = iif({3 Yr TotalEmpCount}==3, iif({Group 1-3 Scoring}==3,'Group 1', \r",
						"iif({Group 1-3 Scoring}==2,'Group 2',\r",
						"iif({Group 3 Flag}=='Y','Group 3',\r",
						"iif({Group 4-6 Scoring}==3,'Group 4',\r",
						"iif({Group 4-6 Scoring}==2,'Group 5',\r",
						"iif({Group 6 Flag}=='Y','Group 6', 'N/A')))))),'N/A')) ~> CreateCurTalentTag",
						"CreateCurTalentTag select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Last Top Talent Ind},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Talent Tag} = {Talent Tag},",
						"          {Last Talent Tag},",
						"          {Last Talent Tag Year} = {Last Talent Tag PerfYear},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P1 Top Talent Ind},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P2 Top Talent Ind},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P3 Top Talent Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreValues",
						"CoreForHCTEventYears filter({Event Code}=='HCT') ~> HCTFilter",
						"HCTFilter aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
						"SelectCoreValues, MaxYearMinus2 join({Event Year} >= {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinEventYrMinus2",
						"JoinEventYrMinus2 aggregate(groupBy({Worker ID 3Yr Count} = {Worker ID}),",
						"     {3 Yr TotalEmpCount} = sum(EmpCount)) ~> SumEmpCountFor3Yr",
						"PerformanceHistory, SumEmpCountFor3Yr join({Worker ID} == {Worker ID 3Yr Count},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"select1 filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
						"PerfRatingHistFactTbl select(mapColumn(",
						"          {Last Talent Tag WorkerId} = WorkerId,",
						"          {Last Talent Tag PerfYear} = CurrPerfYear,",
						"          {Last Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLastTalentTag",
						"join1, SelectLastTalentTag join({Worker ID} == {Last Talent Tag WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectColumns, SelectHistoricalCoreDB union(byName: true)~> union1",
						"CoreDBHist select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHistoricalCoreDB",
						"FilterHCTOnly select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount),",
						"     RowCount = count({Worker ID})) ~> RemoveDups",
						"Core filter({Event Code}=='HCT') ~> FilterHCTOnly",
						"RemoveNullWorkerIDRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Init_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Performance"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerformanceMapping"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalCoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalTalentDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinToPerfMapping"
						},
						{
							"name": "PerformanceWithMapping"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "CurrJoin"
						},
						{
							"name": "CurrSelect"
						},
						{
							"name": "P1Join"
						},
						{
							"name": "P1Select"
						},
						{
							"name": "P2Join"
						},
						{
							"name": "P2Select"
						},
						{
							"name": "P3Join"
						},
						{
							"name": "P3Select"
						},
						{
							"name": "SelectPrep"
						},
						{
							"name": "TransformNulls"
						},
						{
							"name": "CalcLast"
						},
						{
							"name": "AddTopTalent"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "RemoveNullWorkerId"
						},
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "selectHistoricalCoreDB"
						},
						{
							"name": "select2"
						},
						{
							"name": "selectHistoricalTalentDB"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as date,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Performance",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerformanceMapping",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalCoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalTalentDB",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}),",
						"     EmpCount = count({Worker ID})) ~> aggregate1",
						"union2, PerformanceMapping join({Client ID} == ClientId",
						"     && {Client Engagement Date} == ClientEngagementDt",
						"     && {Performance Rating} == ClientPerfRating,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinToPerfMapping",
						"JoinToPerfMapping select(mapColumn(",
						"          {Perf Client ID} = {Client ID},",
						"          {Perf Client Engagement Date} = {Client Engagement Date},",
						"          {Perf Event Year} = {Event Year},",
						"          {Perf Worker ID} = {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          ElloreePerfRating,",
						"          ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PerformanceWithMapping",
						"select1 derive({Curr Performance Year} = toShort({Event Year}),",
						"          {P1 Performance Year} = toShort({Event Year} - 1),",
						"          {P2 Performance Year} = toShort({Event Year} - 2),",
						"          {P3 Performance Year} = toShort({Event Year} - 3)) ~> derivedColumn1",
						"derivedColumn1, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {Curr Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrJoin",
						"CurrJoin select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P1 Performance Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Client Performance Rating} = {Performance Rating},",
						"          {Curr Performance Rating Date} = {Performance Rating Date},",
						"          {Curr ElloreePerfRating} = ElloreePerfRating,",
						"          {Curr ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CurrSelect",
						"CurrSelect, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P1 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1Join",
						"P1Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date} = {Performance Rating Date},",
						"          {P1 Client Performance Rating} = {Performance Rating},",
						"          {P1 ElloreePerfRating} = ElloreePerfRating,",
						"          {P1 ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P1Select",
						"P1Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P2 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2Join",
						"P2Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 ElloreePerfRating},",
						"          {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating} = {Performance Rating},",
						"          {P2 Performance Rating Date} = {Performance Rating Date},",
						"          {P2 ElloreePerfRating} = ElloreePerfRating,",
						"          {P2 ElloreePerfRatingSortId} = ElloreePerfRatingSortId,",
						"          {P3 Performance Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P2Select",
						"P2Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P3 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P3Join",
						"P3Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating} = {Curr ElloreePerfRating},",
						"          {Curr Elloree Performance Rating Sort Id} = {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating} = {P1 ElloreePerfRating},",
						"          {P1 Elloree Performance Rating Sort Id} = {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating} = {P2 ElloreePerfRating},",
						"          {P2 Elloree Performance Rating Sort Id} = {P2 ElloreePerfRatingSortId},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating} = {Performance Rating},",
						"          {P3 Performance Rating Date} = {Performance Rating Date},",
						"          {P3 Elloree Performance Rating} = ElloreePerfRating,",
						"          {P3 Elloree Performance Rating Sort Id} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P3Select",
						"CalcLast select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPrep",
						"SelectPrep derive({Last Client Performance Rating} = iif(isNull({Last Client Performance Rating}),'N/A',{Last Client Performance Rating}),",
						"          {Last Elloree Performance Rating} = iif(isNull({Last Elloree Performance Rating}),'N/A',{Last Elloree Performance Rating}),",
						"          {Last Elloree Performance Rating Sort Id} = iif(isNull({Last Elloree Performance Rating Sort Id}),99,{Last Elloree Performance Rating Sort Id}),",
						"          {Last Performance Rating Date} = iif(isNull({Last Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Last Performance Rating Date})),",
						"          {Curr Client Performance Rating} = iif(isNull({Curr Client Performance Rating}),'N/A',{Curr Client Performance Rating}),",
						"          {Curr Elloree Performance Rating} = iif(isNull({Curr Elloree Performance Rating}),'N/A',{Curr Elloree Performance Rating}),",
						"          {Curr Elloree Performance Rating Sort Id} = iif(isNull({Curr Elloree Performance Rating Sort Id}),99,{Curr Elloree Performance Rating Sort Id}),",
						"          {Curr Performance Rating Date} = iif(isNull({Curr Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Curr Performance Rating Date})),",
						"          {P1 Performance Rating Date} = iif(isNull({P1 Performance Rating Date}),concat('12/31/',toString({P1 Performance Year})),toString({P1 Performance Rating Date})),",
						"          {P1 Client Performance Rating} = iif(isNull({P1 Client Performance Rating}),'N/A',{P1 Client Performance Rating}),",
						"          {P1 Elloree Performance Rating} = iif(isNull({P1 Elloree Performance Rating}),'N/A',{P1 Elloree Performance Rating}),",
						"          {P1 Elloree Performance Rating Sort Id} = iif(isNull({P1 Elloree Performance Rating Sort Id}),99,{P1 Elloree Performance Rating Sort Id}),",
						"          {P2 Client Performance Rating} = iif(isNull({P2 Client Performance Rating}),'N/A',{P2 Client Performance Rating}),",
						"          {P2 Elloree Performance Rating} = iif(isNull({P2 Elloree Performance Rating}),'N/A',{P2 Elloree Performance Rating}),",
						"          {P2 Elloree Performance Rating Sort Id} = iif(isNull({P2 Elloree Performance Rating Sort Id}),99,{P2 Elloree Performance Rating Sort Id}),",
						"          {P2 Performance Rating Date} = iif(isNull({P2 Performance Rating Date}),concat('12/31/',toString({P2 Performance Year})),toString({P2 Performance Rating Date})),",
						"          {P3 Client Performance Rating} = iif(isNull({P3 Client Performance Rating}),'N/A',{P3 Client Performance Rating}),",
						"          {P3 Elloree Performance Rating} = iif(isNull({P3 Elloree Performance Rating}),'N/A',{P3 Elloree Performance Rating}),",
						"          {P3 Elloree Performance Rating Sort Id} = iif(isNull({P3 Elloree Performance Rating Sort Id}),99,{P3 Elloree Performance Rating Sort Id}),",
						"          {P3 Performance Rating Date} = iif(isNull({P3 Performance Rating Date}),concat('12/31/',toString({P3 Performance Year})),toString({P3 Performance Rating Date}))) ~> TransformNulls",
						"P3Select derive({Last Performance Year} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Year},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Year},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Year},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Year},{Curr Performance Year})))),",
						"          {Last Performance Rating Date} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Rating Date},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Rating Date},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Rating Date},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Rating Date},{Curr Performance Rating Date})))),",
						"          {Last Client Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Client Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Client Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Client Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Client Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating Sort Id} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating Sort Id},99))))) ~> CalcLast",
						"TransformNulls derive({Last Top Talent Ind} = iif({Last Elloree Performance Rating}=='Outstanding','Y',iif({Last Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {Curr Top Talent Ind} = iif({Curr Elloree Performance Rating}=='Outstanding','Y',iif({Curr Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P1 Top Talent Ind} = iif({P1 Elloree Performance Rating}=='Outstanding','Y',iif({P1 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P2 Top Talent Ind} = iif({P2 Elloree Performance Rating}=='Outstanding','Y',iif({P2 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P3 Top Talent Ind} = iif({P3 Elloree Performance Rating}=='Outstanding','Y',iif({P3 Elloree Performance Rating}=='Exceeds','Y','N'))) ~> AddTopTalent",
						"aggregate2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Last Top Talent Ind},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P1 Top Talent Ind},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P2 Top Talent Ind},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P3 Top Talent Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"AddTopTalent aggregate(groupBy({Client ID},",
						"          {P2 Top Talent Ind},",
						"          {Last Elloree Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P3 Top Talent Ind},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Top Talent Ind},",
						"          {Last Top Talent Ind},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id}),",
						"     EmpCount = count({Worker ID})) ~> aggregate2",
						"FinalSelect filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerId",
						"select2, selectHistoricalCoreDB union(byName: true)~> union1",
						"select3, selectHistoricalTalentDB union(byName: true)~> union2",
						"HistoricalCoreDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalCoreDB",
						"Core select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"HistoricalTalentDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Performance Rating} = PerfRating,",
						"          {Performance Rating Date} = PerfRatingDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalTalentDB",
						"Performance select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"RemoveNullWorkerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_SilverMedalApplicant_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "HiredApplicants"
						},
						{
							"name": "JointoApplicantMap"
						},
						{
							"name": "GroupHiredApplicantsByYear"
						},
						{
							"name": "Interviewed"
						},
						{
							"name": "GroupInterviewedApplicantsandYear"
						},
						{
							"name": "selectApplicants"
						},
						{
							"name": "JoinHires"
						},
						{
							"name": "CalcSilverMedalist"
						},
						{
							"name": "selectColumnsForFactTbl"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"JointoApplicantMap filter({Elloree Applicant Final Disposition}=='Hired') ~> HiredApplicants",
						"Applicant, ApplicantMap join({Applicant Final Disposition} == {Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Client Applicant Rejected Reason}",
						"     && Applicant@{Client ID} == ApplicantMap@{Client ID}",
						"     && Applicant@{Client Engagement Date} == ApplicantMap@{Client Engagement Date},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JointoApplicantMap",
						"HiredApplicants aggregate(groupBy({Hired Client ID} = Applicant@{Client ID},",
						"          {Hired Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Hired  Applicant ID} = {Applicant ID},",
						"          {Hired  Event Year} = {Event Year}),",
						"     HiredReqCount = count({Requisition ID})) ~> GroupHiredApplicantsByYear",
						"selectApplicants filter({Elloree Applicant Final Disposition}=='Interviewed') ~> Interviewed",
						"Interviewed aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Event Year},",
						"          {Requisition ID}),",
						"     InterviewedReqCount = count({Requisition ID})) ~> GroupInterviewedApplicantsandYear",
						"JointoApplicantMap select(mapColumn(",
						"          {Client ID} = Applicant@{Client ID},",
						"          {Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicants",
						"GroupInterviewedApplicantsandYear, GroupHiredApplicantsByYear join({Client ID} == {Hired Client ID}",
						"     && {Client Engagement Date} == {Hired Client Engagement Date}",
						"     && {Applicant ID} == {Hired  Applicant ID}",
						"     && {Event Year} == {Hired  Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinHires",
						"JoinHires derive({Silver Medalist Ind} = iif((HiredReqCount)>=1,'N','Y')) ~> CalcSilverMedalist",
						"CalcSilverMedalist select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Requisition ID},",
						"          {Silver Medalist Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumnsForFactTbl",
						"selectColumnsForFactTbl sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SilverMedalistFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
						"     && EventYear == {Talent EventYear},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y',\r",
						"iif(TalentIdentifier1=='Group 1 (O-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 2 (O-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 3 (O-1)','Y',\r",
						"iif(TalentIdentifier1=='Group 4 (E-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 5 (E-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 6 (E-1)','Y','N'))))))),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Evergreen')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "FilterEngagementSurveyeSat"
						},
						{
							"name": "CalceSatSurveyAvg"
						},
						{
							"name": "derivedSpeedBump8eSat"
						},
						{
							"name": "SelectSpeedbump8"
						},
						{
							"name": "FilterEngagementSurveySafeBelongMatter"
						},
						{
							"name": "CalcBelongSurveyAvg"
						},
						{
							"name": "derivedSpeedBump9Belong"
						},
						{
							"name": "SelectSpeedbump9"
						},
						{
							"name": "FilterEngagementSurveyGrowth"
						},
						{
							"name": "CalcGrowthSurveyAvg"
						},
						{
							"name": "derivedSpeedBump10Growth"
						},
						{
							"name": "SelectSpeedbump10"
						},
						{
							"name": "FilterEngagementSurveyMgrFBkConvo"
						},
						{
							"name": "CalcMgrFBkConvoSurveyAvg"
						},
						{
							"name": "derivedSpeedBump11MgrFBkConvo"
						},
						{
							"name": "SelectSpeedbump11"
						},
						{
							"name": "FilterEngagementSurveyPotential"
						},
						{
							"name": "derivedSpeedBump12Potential"
						},
						{
							"name": "SelectSpeedbump12"
						},
						{
							"name": "joinSurveySpeedbump8"
						},
						{
							"name": "joinSpeedbump9"
						},
						{
							"name": "joinSpeedbump10"
						},
						{
							"name": "joinSpeedbump11"
						},
						{
							"name": "joinSpeedbump12"
						},
						{
							"name": "CleanupJoinFields"
						},
						{
							"name": "FilterEngagementSurveyGoals"
						},
						{
							"name": "SelectSurveyGoals"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSurveyValues"
						},
						{
							"name": "joinSurveyGoals"
						},
						{
							"name": "joinSurveyValues"
						},
						{
							"name": "SpecialCalcForFlightRisk"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> OtherCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
						"          {Emp Curr Elloree Perf Rating} = CurrElloreePerfRating,",
						"          {Emp P1 Elloree Perf Rating} = P1ElloreePerfRating,",
						"          {Emp P2 Elloree Perf Rating} = P2ElloreePerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"CleanupJoinFields derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',iif({Years of Service}>=5,iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Employee Satisfaction',",
						"          {Speedbump 8 Desc} = 'Employees with an average score below 82.8 when asked about satisfaction with working at the company',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif(not(isNull(eSatSpeedbump8)),eSatSpeedbump8,'N'),'N'),",
						"          {Speedbump 9 Name} = 'Employee Belonging',",
						"          {Speedbump 9 Desc} = 'Employees with an average score below 84.7 when asked about being themselves and belomging at the company',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(not(isNull(BelongSpeedbump9)),BelongSpeedbump9,'N'),'N'),",
						"          {Speedbump 10 Name} = 'Employee Growth',",
						"          {Speedbump 10 Desc} = 'Employees with an average score below 81.2 when asked about opportunities to learn and develop their skillset at the company',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(not(isNull(GrowthSpeedbump10)),GrowthSpeedbump10,'N'),'N'),",
						"          {Speedbump 11 Name} = 'Mgr Supp., Fdbck, Conv',",
						"          {Speedbump 11 Desc} = 'Employees with an avg. score below 82.5 when asked about their Manager prioritizing their wellbeing, providing feedback and having quarterly conversations.',",
						"          {Speedbump 11 Flag} = iif($SB11_Placeholder=='Y',iif(not(isNull(MgrFBkConvoSpeedbump11)),MgrFBkConvoSpeedbump11,'N'),'N'),",
						"          {Speedbump 12 Name} = 'Employee Potential',",
						"          {Speedbump 12 Desc} = 'Perf Review - Final Calibrated Potential Value',",
						"          {Speedbump 12 Flag} = iif($SB12_Placeholder=='Y',iif(not(isNull(PotentialSpeedbump12)),PotentialSpeedbump12,'N'),'N'),",
						"          {Speedbump 13 Name} = 'Left Behind',",
						"          {Speedbump 13 Desc} = 'Employees rated as Meets or lower that were top performers in prior 2 years.',",
						"          {Speedbump 13 Flag} = iif($SB13_Placeholder=='Y',\r",
						"iif({Emp Curr Elloree Perf Rating}=='Meets' || {Emp Curr Elloree Perf Rating}=='Does Not Meet',\r",
						"iif({Emp P1 Elloree Perf Rating}=='Exceeds' || {Emp P1 Elloree Perf Rating}=='Outstanding', \r",
						"iif({Emp P2 Elloree Perf Rating}=='Exceeds' ||{Emp P2 Elloree Perf Rating}=='Outstanding', \r",
						"iif({Potential Survey Val}=='High' || {Potential Survey Val}=='Medium',\r",
						"iif({Goals Survey Val}=='Accomplished' || {Goals Survey Val}=='Exceeded', \r",
						"iif({Values Survey Val}=='Always' ||{Values Survey Val}=='Often','Y','N'),'N'),'N'),'N'),'N'),'N'),'N'),",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"SpecialCalcForFlightRisk select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"OtherCore filter(EventType=='Engagement Survey - eSat') ~> FilterEngagementSurveyeSat",
						"FilterEngagementSurveyeSat aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveryValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalceSatSurveyAvg",
						"CalceSatSurveyAvg derive(eSatSpeedbump8 = iif(SurveryAvg<82.8, 'Y','N')) ~> derivedSpeedBump8eSat",
						"derivedSpeedBump8eSat select(mapColumn(",
						"          WorkerId,",
						"          eSatSpeedbump8",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump8",
						"OtherCore filter(EventType=='Engagement Survey - Safe_Belong_Matter' && EventDesc=='I can be myself and belong at Equinix.') ~> FilterEngagementSurveySafeBelongMatter",
						"FilterEngagementSurveySafeBelongMatter aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcBelongSurveyAvg",
						"CalcBelongSurveyAvg derive(BelongSpeedbump9 = iif(SurveryAvg<84.7, 'Y','N')) ~> derivedSpeedBump9Belong",
						"derivedSpeedBump9Belong select(mapColumn(",
						"          WorkerId,",
						"          BelongSpeedbump9",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump9",
						"OtherCore filter(EventType=='Engagement Survey - Growth_Devt') ~> FilterEngagementSurveyGrowth",
						"FilterEngagementSurveyGrowth aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcGrowthSurveyAvg",
						"CalcGrowthSurveyAvg derive(GrowthSpeedbump10 = iif(SurveryAvg<81.2, 'Y','N')) ~> derivedSpeedBump10Growth",
						"derivedSpeedBump10Growth select(mapColumn(",
						"          WorkerId,",
						"          GrowthSpeedbump10",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump10",
						"OtherCore filter(EventType=='Engagement Survey - Well_Being_Mgr' || EventType=='Engagement Survey - Feedback' || EventType=='Engagement Survey - Quarter_Convo') ~> FilterEngagementSurveyMgrFBkConvo",
						"FilterEngagementSurveyMgrFBkConvo aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcMgrFBkConvoSurveyAvg",
						"CalcMgrFBkConvoSurveyAvg derive(MgrFBkConvoSpeedbump11 = iif(SurveryAvg<82.5, 'Y','N')) ~> derivedSpeedBump11MgrFBkConvo",
						"derivedSpeedBump11MgrFBkConvo select(mapColumn(",
						"          WorkerId,",
						"          MgrFBkConvoSpeedbump11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump11",
						"OtherCore filter(EventType=='Potential') ~> FilterEngagementSurveyPotential",
						"FilterEngagementSurveyPotential derive(PotentialSpeedbump12 = iif(OtherCharVal11=='At Potential / Well Placed', 'Y','N')) ~> derivedSpeedBump12Potential",
						"derivedSpeedBump12Potential select(mapColumn(",
						"          WorkerId,",
						"          PotentialSpeedbump12,",
						"          {Potential Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump12",
						"joinSurveyValues, SelectSpeedbump8 join({Worker ID} == SelectSpeedbump8@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveySpeedbump8",
						"joinSurveySpeedbump8, SelectSpeedbump9 join({Worker ID} == SelectSpeedbump9@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump9",
						"joinSpeedbump9, SelectSpeedbump10 join({Worker ID} == SelectSpeedbump10@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump10",
						"joinSpeedbump10, SelectSpeedbump11 join({Worker ID} == SelectSpeedbump11@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump11",
						"joinSpeedbump11, SelectSpeedbump12 join({Worker ID} == SelectSpeedbump12@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump12",
						"joinSpeedbump12 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          ManagerInd,",
						"          {Core Event Id},",
						"          {Core Event Date},",
						"          EventQuarter,",
						"          {Event Year},",
						"          {Years of Service},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID},",
						"          CoreLastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo},",
						"          {P1 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5,",
						"          {Mgr Worker ID},",
						"          {Mgr Years of Service},",
						"          {Mgr Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag},",
						"          WorkerIdForMgrCount,",
						"          ManagerCount,",
						"          eSatSpeedbump8,",
						"          BelongSpeedbump9,",
						"          GrowthSpeedbump10,",
						"          MgrFBkConvoSpeedbump11,",
						"          PotentialSpeedbump12,",
						"          {Goals Survey Val},",
						"          {Potential Survey Val},",
						"          {Values Survey Val}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinFields",
						"OtherCore filter(EventType=='Goals') ~> FilterEngagementSurveyGoals",
						"FilterEngagementSurveyGoals select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Goals Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyGoals",
						"OtherCore filter(EventType=='Values') ~> filter1",
						"filter1 select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Values Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyValues",
						"Join3YrWorkerMgrCount, SelectSurveyGoals join({Worker ID} == WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveyGoals",
						"joinSurveyGoals, SelectSurveyValues join({Worker ID} == SelectSurveyValues@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveyValues",
						"CalcSpeedBumps derive({Speedbump 14 Name} = 'Flight Risk',",
						"          {Speedbump 14 Desc} = 'Flight Risk based on Level, Tenure, Promo, Emp. Satisfaction and Belonging.',",
						"          {Speedbump 14 Flag} = iif($SB14_Placeholder=='Y',iif((iif(({Elloree Corporate Title Sort}==1 && {Years of Service}<=5.9) \r",
						"|| ({Elloree Corporate Title Sort}==2 && {Years of Service}<=6.2)\r",
						"|| ({Elloree Corporate Title Sort}==3 && {Years of Service}<=4.4)\r",
						"|| ({Elloree Corporate Title Sort}==4 && {Years of Service}<=3.7)\r",
						"|| ({Elloree Corporate Title Sort}==5 && {Years of Service}<=3.6),1,0)+\r",
						"iif({Speedbump 4 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 8 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 9 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 13 Flag}=='Y',1,0))>=3,'Y','N'),'N')) ~> SpecialCalcForFlightRisk",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Baseline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif({Applicant Five or More}=='Y','Y','N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif({Silver Medalist Ind}=='Y','Y','N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif(ManagerCount>=3,'Y','N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"AllCore, Select3PYear join(EventYear == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = CoreHCT@WorkerId,",
						"          ManagerInd,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = CoreHCT@EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(CoreHCT@WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(CoreHCT@WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(CoreHCT@WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(CoreHCT@WorkerId == {Applicant ID Calculated}",
						"     && CoreHCT@EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(CoreHCT@WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && CoreHCT@EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(CoreHCT@WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"Talent select(mapColumn(",
						"          WorkerId,",
						"          EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(CoreHCT@WorkerId == SelectTalentColumns@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": []
		}
	]
}