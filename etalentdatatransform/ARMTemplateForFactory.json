{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "etalentdatatransform"
		},
		"RestService1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RestService1'"
		},
		"RestServiceUSCensusTest_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RestServiceUSCensusTest'"
		},
		"etalentdb_connection_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'etalentdb_connection'"
		},
		"AzureBlobStorage2_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://etalent1storage.blob.core.windows.net/"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().SeriesId}"
		},
		"RestService1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "scott.prince@elloreetalent.com"
		},
		"RestServiceUSCensusTest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.census.gov/data/2019/acs/acs1/subject?get=NAME,S0101_C01_001E"
		},
		"RestServiceUSCensusTest_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "scott.prince@elloreetalent.com"
		},
		"UpdatedCoreData_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/a8c75286-36f4-4235-9586-3729760f19d5/resourceGroups/etalent_bamboo/providers/Microsoft.Storage/storageAccounts/etalent1storage"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/1_Processing_Pre_Mapping_Existing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy templates from processing to designated year/qrt folders.  Run fact tables for Core, Talent, Req, OtherCore, Applicant and ",
				"activities": [
					{
						"name": "Move_Templates_Into_ClientFldr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_Templates_Into_ClientFldr",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Applicant",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_OtherCore",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Applicant",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Core",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Move_Templates_Into_ClientFldr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Core",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_OtherCore",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_YearRef",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_OtherCore",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Req",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Talent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Req",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Talent",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Core",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Talent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_All_Mapping_Files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Applicant",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_All_Mapping_Files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_YearRef",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Req",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_YearRef",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Move_Templates_Into_ClientFldr')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Applicant')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Core')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_OtherCore')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Req')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Talent')]",
				"[concat(variables('factoryId'), '/pipelines/Output_All_Mapping_Files')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_YearRef')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Processing_Pre_Mapping_New')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy templates from processing to designated year/qrt folders.  Run fact tables for Core, Talent, Req, OtherCore, Applicant and ",
				"activities": [
					{
						"name": "Move_Templates_Into_ClientFldr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move_Templates_Into_ClientFldr",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Applicant",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_OtherCore",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Applicant",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Core",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Move_Templates_Into_ClientFldr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Core",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_OtherCore",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_YearRef",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_OtherCore",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Req",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Talent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Req",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Talent",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Core",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Talent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_ClientInfo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Req",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_ClientInfo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Client_Engagement_Type": {
									"value": "@pipeline().parameters.P_Client_Engagement_Type",
									"type": "Expression"
								},
								"P_Client_Desc": {
									"value": "@pipeline().parameters.P_Client_Desc",
									"type": "Expression"
								},
								"P_Client_Sector": {
									"value": "@pipeline().parameters.P_Client_Sector",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_All_Mapping_Files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Applicant",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_All_Mapping_Files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_YearRef",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_ClientInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_YearRef",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Client_Engagement_Type": {
						"type": "string"
					},
					"P_Client_Desc": {
						"type": "string"
					},
					"P_Client_Sector": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Move_Templates_Into_ClientFldr')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Applicant')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Core')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_OtherCore')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Req')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Talent')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_ClientInfo')]",
				"[concat(variables('factoryId'), '/pipelines/Output_All_Mapping_Files')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_YearRef')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_Processing_Post_Mapping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Load Working Mapping Files to the database.  Output the Diverse Slate Fact tables, Perf Rating History Fact Table, Silver Medalist Fact Table and Speedbumps.   Output audit reports.",
				"activities": [
					{
						"name": "Append_Mapping_All",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_All",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_ApplStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_All",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_ApplStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_DivSlate",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_ApplStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_DivSlate",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_SilverMedalist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_PerfRatingHist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_SilverMedalist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_PerfRatingHist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_DivSlate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_PerfRatingHist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_All",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_SilverMedalist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_All",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_All')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_ApplStatus')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_DivSlate')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_SilverMedalist')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_PerfRatingHist')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_All')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_Processing_Post_Audit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Load all fact tables to the database once audit files have been reviewed and any remediation action taken.",
				"activities": [
					{
						"name": "Append_FactTbl_All",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_All",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_Hist_Core_No_All_Qtr": {
									"value": "@pipeline().parameters.P_Delete_Hist_Core_No_All_Qtr",
									"type": "Expression"
								},
								"P_Delete_Hist_OtherCore_No_All_Qtr": {
									"value": "@pipeline().parameters.P_Delete_Hist_OtherCore_No_All_Qtr",
									"type": "Expression"
								},
								"P_Delete_Hist_SilverMedal_No_All_Qtr": {
									"value": "@pipeline().parameters.P_Delete_Hist_SilverMedal_No_All_Qtr",
									"type": "Expression"
								},
								"P_Delete_Hist_Applicant_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_Applicant_No_All",
									"type": "Expression"
								},
								"P_Delete_Hist_ApplicantStatus_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_ApplicantStatus_No_All",
									"type": "Expression"
								},
								"P_Delete_Hist_DiverseSlate_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_DiverseSlate_No_All",
									"type": "Expression"
								},
								"P_Delete_Hist_PerfRatingHist_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_PerfRatingHist_No_All",
									"type": "Expression"
								},
								"P_Delete_Hist_Requisitions_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_Requisitions_No_All",
									"type": "Expression"
								},
								"P_Delete_Hist_Talent_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_Talent_No_All",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_Hist_Core_No_All_Qtr": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_OtherCore_No_All_Qtr": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_SilverMedal_No_All_Qtr": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_Applicant_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_ApplicantStatus_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_DiverseSlate_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_PerfRatingHist_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_Requisitions_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_Talent_No_All": {
						"type": "string",
						"defaultValue": "No"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:31:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_All')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_Processing_Speedbumps_Baseline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Load all fact tables to the database once audit files have been reviewed and any remediation action taken.",
				"activities": [
					{
						"name": "Output_FactTbl_File_Speedbumps_Baseline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Speedbumps_Baseline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_BL_SB_Year": {
									"value": "@pipeline().parameters.P_SB_Year",
									"type": "Expression"
								},
								"P_BL_SB_Quarter": {
									"value": "@pipeline().parameters.P_SB_Quarter",
									"type": "Expression"
								},
								"SB1_MgrLvl": {
									"value": "@pipeline().parameters.SB1_MgrLvl",
									"type": "Expression"
								},
								"SB2_MgrTalent": {
									"value": "@pipeline().parameters.SB2_MgrTalent",
									"type": "Expression"
								},
								"SB3_MgrExp": {
									"value": "@pipeline().parameters.SB3_MgrExp",
									"type": "Expression"
								},
								"SB4_Promotion": {
									"value": "@pipeline().parameters.SB4_Promotion",
									"type": "Expression"
								},
								"SB5_Applied5": {
									"value": "@pipeline().parameters.SB5_Applied5",
									"type": "Expression"
								},
								"SB6_SilvMedal": {
									"value": "@pipeline().parameters.SB6_SilvMedal",
									"type": "Expression"
								},
								"SB7_Mgr3Plus": {
									"value": "@pipeline().parameters.SB7_Mgr3Plus",
									"type": "Expression"
								},
								"SB8_Placeholder": {
									"value": "@pipeline().parameters.SB8_Placeholder",
									"type": "Expression"
								},
								"SB9_Placeholder": {
									"value": "@pipeline().parameters.SB9_Placeholder",
									"type": "Expression"
								},
								"SB10_Placeholder": {
									"value": "@pipeline().parameters.SB10_Placeholder",
									"type": "Expression"
								},
								"SB11_Placeholder": {
									"value": "@pipeline().parameters.SB11_Placeholder",
									"type": "Expression"
								},
								"SB12_Placeholder": {
									"value": "@pipeline().parameters.SB12_Placeholder",
									"type": "Expression"
								},
								"SB13_Placeholder": {
									"value": "@pipeline().parameters.SB13_Placeholder",
									"type": "Expression"
								},
								"SB14_Placeholder": {
									"value": "@pipeline().parameters.SB14_Placeholder",
									"type": "Expression"
								},
								"SB15_Placeholder": {
									"value": "@pipeline().parameters.SB15_Placeholder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Speedbumps",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Speedbumps",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Speedbumps_Baseline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_SB_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_SB_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_SB_Year": {
						"type": "string"
					},
					"P_SB_Quarter": {
						"type": "string"
					},
					"SB1_MgrLvl": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB2_MgrTalent": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB3_MgrExp": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB4_Promotion": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB5_Applied5": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB6_SilvMedal": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB7_Mgr3Plus": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB8_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB9_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB10_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB11_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB12_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB13_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB14_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB15_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Speedbumps_Baseline')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Speedbumps')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Qtr_Rec_FactTbl_Speedbumps_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_Processing_Speedbumps_Baseline_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Load all fact tables to the database once audit files have been reviewed and any remediation action taken.",
				"activities": [
					{
						"name": "Output_FactTbl_File_Speedbumps_Baseline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Speedbumps_BL_Bamboo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_BL_SB_Year": {
									"value": "@pipeline().parameters.P_SB_Year",
									"type": "Expression"
								},
								"P_BL_SB_Quarter": {
									"value": "@pipeline().parameters.P_SB_Quarter",
									"type": "Expression"
								},
								"P_SB1_MgrLvl": {
									"value": "@pipeline().parameters.SB1_MgrLvl",
									"type": "Expression"
								},
								"P_SB2_MgrTalent": {
									"value": "@pipeline().parameters.SB2_MgrTalent",
									"type": "Expression"
								},
								"P_SB3_MgrExp": {
									"value": "@pipeline().parameters.SB3_MgrExp",
									"type": "Expression"
								},
								"P_SB4_Promotion": {
									"value": "@pipeline().parameters.SB4_Promotion",
									"type": "Expression"
								},
								"P_SB5_Applied5": {
									"value": "@pipeline().parameters.SB5_Applied5",
									"type": "Expression"
								},
								"P_SB6_SilvMedal": {
									"value": "@pipeline().parameters.SB6_SilvMedal",
									"type": "Expression"
								},
								"P_SB7_Mgr3Plus": {
									"value": "@pipeline().parameters.SB7_Mgr3Plus",
									"type": "Expression"
								},
								"P_SB8_Placeholder": {
									"value": "@pipeline().parameters.SB8_Placeholder",
									"type": "Expression"
								},
								"P_SB9_Placeholder": {
									"value": "@pipeline().parameters.SB9_Placeholder",
									"type": "Expression"
								},
								"P_SB10_Placeholder": {
									"value": "@pipeline().parameters.SB10_Placeholder",
									"type": "Expression"
								},
								"P_SB11_Placeholder": {
									"value": "@pipeline().parameters.SB11_Placeholder",
									"type": "Expression"
								},
								"P_SB12_Placeholder": {
									"value": "@pipeline().parameters.SB12_Placeholder",
									"type": "Expression"
								},
								"P_SB13_Placeholder": {
									"value": "@pipeline().parameters.SB13_Placeholder",
									"type": "Expression"
								},
								"P_SB14_Placeholder": {
									"value": "@pipeline().parameters.SB14_Placeholder",
									"type": "Expression"
								},
								"P_SB15_Placeholder": {
									"value": "@pipeline().parameters.SB15_Placeholder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Speedbumps",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Speedbumps",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Speedbumps_Baseline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_SB_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_SB_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_SB_Year": {
						"type": "string"
					},
					"P_SB_Quarter": {
						"type": "string"
					},
					"SB1_MgrLvl": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB2_MgrTalent": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB3_MgrExp": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB4_Promotion": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB5_Applied5": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB6_SilvMedal": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB7_Mgr3Plus": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB8_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB9_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB10_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB11_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB12_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB13_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB14_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB15_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines/Custom Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Speedbumps_BL_Bamboo')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Speedbumps')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Qtr_Rec_FactTbl_Speedbumps_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_Processing_Speedbumps_Baseline_Evergreen')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Load all fact tables to the database once audit files have been reviewed and any remediation action taken.",
				"activities": [
					{
						"name": "Output_FactTbl_File_Speedbumps_Baseline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Speedbumps_BL_Evergreen",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_BL_SB_Year": {
									"value": "@pipeline().parameters.P_SB_Year",
									"type": "Expression"
								},
								"P_BL_SB_Quarter": {
									"value": "@pipeline().parameters.P_SB_Quarter",
									"type": "Expression"
								},
								"P_SB1_MgrLvl": {
									"value": "@pipeline().parameters.SB1_MgrLvl",
									"type": "Expression"
								},
								"P_SB2_MgrTalent": {
									"value": "@pipeline().parameters.SB2_MgrTalent",
									"type": "Expression"
								},
								"P_SB3_MgrExp": {
									"value": "@pipeline().parameters.SB3_MgrExp",
									"type": "Expression"
								},
								"P_SB4_Promotion": {
									"value": "@pipeline().parameters.SB4_Promotion",
									"type": "Expression"
								},
								"P_SB5_Applied5": {
									"value": "@pipeline().parameters.SB5_Applied5",
									"type": "Expression"
								},
								"P_SB6_SilvMedal": {
									"value": "@pipeline().parameters.SB6_SilvMedal",
									"type": "Expression"
								},
								"P_SB7_Mgr3Plus": {
									"value": "@pipeline().parameters.SB7_Mgr3Plus",
									"type": "Expression"
								},
								"P_SB8_Placeholder": {
									"value": "@pipeline().parameters.SB8_Placeholder",
									"type": "Expression"
								},
								"P_SB9_Placeholder": {
									"value": "@pipeline().parameters.SB9_Placeholder",
									"type": "Expression"
								},
								"P_SB10_Placeholder": {
									"value": "@pipeline().parameters.SB10_Placeholder",
									"type": "Expression"
								},
								"P_SB11_Placeholder": {
									"value": "@pipeline().parameters.SB11_Placeholder",
									"type": "Expression"
								},
								"P_SB12_Placeholder": {
									"value": "@pipeline().parameters.SB12_Placeholder",
									"type": "Expression"
								},
								"P_SB13_Placeholder": {
									"value": "@pipeline().parameters.SB13_Placeholder",
									"type": "Expression"
								},
								"P_SB14_Placeholder": {
									"value": "@pipeline().parameters.SB14_Placeholder",
									"type": "Expression"
								},
								"P_SB15_Placeholder": {
									"value": "@pipeline().parameters.SB15_Placeholder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Speedbumps",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Speedbumps",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Speedbumps_Baseline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_SB_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_SB_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_SB_Year": {
						"type": "string"
					},
					"P_SB_Quarter": {
						"type": "string"
					},
					"SB1_MgrLvl": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB2_MgrTalent": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB3_MgrExp": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB4_Promotion": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB5_Applied5": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB6_SilvMedal": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB7_Mgr3Plus": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB8_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB9_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB10_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB11_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB12_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB13_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB14_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"SB15_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines/Custom Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Speedbumps_BL_Evergreen')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Speedbumps')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Qtr_Rec_FactTbl_Speedbumps_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_Processing_Speedbumps_Quarter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Load all fact tables to the database once audit files have been reviewed and any remediation action taken.",
				"activities": [
					{
						"name": "Append_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Speedbumps",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Speedbumps_Quarter",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Speedbumps_Quarter",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_BL_SB_Year": {
									"value": "@pipeline().parameters.P_BL_SB_Year",
									"type": "Expression"
								},
								"P_BL_SB_Quarter": {
									"value": "@pipeline().parameters.P_BL_SB_Quarter",
									"type": "Expression"
								},
								"P_Target_SB_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Target_SB_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_SB1_MgrLvl": {
									"value": "@pipeline().parameters.P_SB1_MgrLvl",
									"type": "Expression"
								},
								"P_SB2_MgrTalent": {
									"value": "@pipeline().parameters.P_SB2_MgrTalent",
									"type": "Expression"
								},
								"P_SB3_MgrExp": {
									"value": "@pipeline().parameters.P_SB3_MgrExp",
									"type": "Expression"
								},
								"P_SB4_Promotion": {
									"value": "@pipeline().parameters.P_SB4_Promotion",
									"type": "Expression"
								},
								"P_SB5_Applied5": {
									"value": "@pipeline().parameters.P_SB5_Applied5",
									"type": "Expression"
								},
								"P_SB6_SilvMedal": {
									"value": "@pipeline().parameters.P_SB6_SilvMedal",
									"type": "Expression"
								},
								"P_SB7_Mgr3Plus": {
									"value": "@pipeline().parameters.P_SB7_Mgr3Plus",
									"type": "Expression"
								},
								"P_SB8_Placeholder": {
									"value": "@pipeline().parameters.P_SB8_Placeholder",
									"type": "Expression"
								},
								"P_SB9_Placeholder": {
									"value": "@pipeline().parameters.P_SB9_Placeholder",
									"type": "Expression"
								},
								"P_SB10_Placeholder": {
									"value": "@pipeline().parameters.P_SB10_Placeholder",
									"type": "Expression"
								},
								"P_SB11_Placeholder": {
									"value": "@pipeline().parameters.P_SB11_Placeholder",
									"type": "Expression"
								},
								"P_SB12_Placeholder": {
									"value": "@pipeline().parameters.P_SB12_Placeholder",
									"type": "Expression"
								},
								"P_SB13_Placeholder": {
									"value": "@pipeline().parameters.P_SB13_Placeholder",
									"type": "Expression"
								},
								"P_SB14_Placeholder": {
									"value": "@pipeline().parameters.P_SB14_Placeholder",
									"type": "Expression"
								},
								"P_SB15_Placeholder": {
									"value": "@pipeline().parameters.P_SB15_Placeholder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Speedbumps_Quarter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_SB_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_SB_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_BL_SB_Year": {
						"type": "string"
					},
					"P_BL_SB_Quarter": {
						"type": "string"
					},
					"P_SB1_MgrLvl": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB2_MgrTalent": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB3_MgrExp": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB4_Promotion": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB5_Applied5": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB6_SilvMedal": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB7_Mgr3Plus": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB8_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB9_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB10_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB11_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB12_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB13_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB14_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB15_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Speedbumps')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Speedbumps_Quarter')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Qtr_Rec_FactTbl_Speedbumps_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/4_Processing_Speedbumps_Quarter_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Load all fact tables to the database once audit files have been reviewed and any remediation action taken.",
				"activities": [
					{
						"name": "Append_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Speedbumps",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_FactTbl_File_Speedbumps_Qtr_Bamboo",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_FactTbl_File_Speedbumps_Qtr_Bamboo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_BL_SB_Year": {
									"value": "@pipeline().parameters.P_BL_SB_Year",
									"type": "Expression"
								},
								"P_BL_SB_Quarter": {
									"value": "@pipeline().parameters.P_BL_SB_Quarter",
									"type": "Expression"
								},
								"P_SB1_MgrLvl": {
									"value": "@pipeline().parameters.P_SB1_MgrLvl",
									"type": "Expression"
								},
								"P_SB2_MgrTalent": {
									"value": "@pipeline().parameters.P_SB2_MgrTalent",
									"type": "Expression"
								},
								"P_SB3_MgrExp": {
									"value": "@pipeline().parameters.P_SB3_MgrExp",
									"type": "Expression"
								},
								"P_SB4_Promotion": {
									"value": "@pipeline().parameters.P_SB4_Promotion",
									"type": "Expression"
								},
								"P_SB5_Applied5": {
									"value": "@pipeline().parameters.P_SB5_Applied5",
									"type": "Expression"
								},
								"P_SB6_SilvMedal": {
									"value": "@pipeline().parameters.P_SB6_SilvMedal",
									"type": "Expression"
								},
								"P_SB7_Mgr3Plus": {
									"value": "@pipeline().parameters.P_SB7_Mgr3Plus",
									"type": "Expression"
								},
								"P_SB8_Placeholder": {
									"value": "@pipeline().parameters.P_SB8_Placeholder",
									"type": "Expression"
								},
								"P_SB9_Placeholder": {
									"value": "@pipeline().parameters.P_SB9_Placeholder",
									"type": "Expression"
								},
								"P_SB10_Placeholder": {
									"value": "@pipeline().parameters.P_SB10_Placeholder",
									"type": "Expression"
								},
								"P_SB11_Placeholder": {
									"value": "@pipeline().parameters.P_SB11_Placeholder",
									"type": "Expression"
								},
								"P_SB12_Placeholder": {
									"value": "@pipeline().parameters.P_SB12_Placeholder",
									"type": "Expression"
								},
								"P_SB13_Placeholder": {
									"value": "@pipeline().parameters.P_SB13_Placeholder",
									"type": "Expression"
								},
								"P_SB14_Placeholder": {
									"value": "@pipeline().parameters.P_SB14_Placeholder",
									"type": "Expression"
								},
								"P_SB15_Placeholder": {
									"value": "@pipeline().parameters.P_SB15_Placeholder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Output_FactTbl_File_Speedbumps_Qtr_Bamboo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Qtr_Rec_FactTbl_Speedbumps_NEW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_SB_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_SB_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_BL_SB_Year": {
						"type": "string"
					},
					"P_BL_SB_Quarter": {
						"type": "string"
					},
					"P_SB1_MgrLvl": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB2_MgrTalent": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB3_MgrExp": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB4_Promotion": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB5_Applied5": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB6_SilvMedal": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB7_Mgr3Plus": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB8_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB9_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB10_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB11_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB12_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB13_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB14_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					},
					"P_SB15_Placeholder": {
						"type": "string",
						"defaultValue": "Y"
					}
				},
				"folder": {
					"name": "Client/Client Setup Routines/Custom Setup Routines"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Speedbumps')]",
				"[concat(variables('factoryId'), '/pipelines/Output_FactTbl_File_Speedbumps_Qtr_Bamboo')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Qtr_Rec_FactTbl_Speedbumps_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Applicant",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Applicant",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_Applicant_No_All",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_ApplStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Applicant",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_ApplStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_ApplicantStatus_No_All",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Core",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_ApplStatus",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Core",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All_Qtr": {
									"value": "@pipeline().parameters.P_Delete_Hist_Core_No_All_Qtr",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_DivSlate",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Core",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_DivSlate",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_DiverseSlate_No_All",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_OtherCore",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_DivSlate",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_OtherCore",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All_Qtr": {
									"value": "@pipeline().parameters.P_Delete_Hist_OtherCore_No_All_Qtr",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_PerfRatingHist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_OtherCore",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_PerfRatingHist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_PerfRatingHist_No_All",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Req",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_PerfRatingHist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Req",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_Requisitions_No_All",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_SilverMedalist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Req",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_SilverMedalist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_SilverMedal_No_All_Qtr",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Talent",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_SilverMedalist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Talent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								},
								"P_Delete_History_No_All": {
									"value": "@pipeline().parameters.P_Delete_Hist_Talent_No_All",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_YearRef",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Talent",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_YearRef",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_Hist_Core_No_All_Qtr": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_OtherCore_No_All_Qtr": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_SilverMedal_No_All_Qtr": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_Applicant_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_ApplicantStatus_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_DiverseSlate_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_PerfRatingHist_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_Requisitions_No_All": {
						"type": "string",
						"defaultValue": "No"
					},
					"P_Delete_Hist_Talent_No_All": {
						"type": "string",
						"defaultValue": "No"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:31:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Applicant')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_ApplStatus')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Core')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_DivSlate')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_OtherCore')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_PerfRatingHist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Req')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_SilverMedalist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Talent')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_YearRef')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_All_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_ApplStatus_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Applicant_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_ApplStatus_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Applicant_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Applicant_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_ClientInfo_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_ApplStatus_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_ClientInfo_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Core_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_ClientInfo_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Core_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_DivSlate_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Core_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_DivSlate_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_OtherCore_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_DivSlate_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_OtherCore_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_PerfRating_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_OtherCore_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_PerfRating_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Req_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_PerfRating_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Req_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_SilverMedalist_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Req_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_SilverMedalist_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Speedbumps_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_SilverMedalist_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Speedbumps_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_Talent_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Speedbumps_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_Talent_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_FactTbl_YearRef_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_FactTbl_Talent_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_FactTbl_YearRef_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_ApplStatus_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Applicant_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_ClientInfo_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Core_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_DivSlate_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_OtherCore_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_PerfRating_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Req_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_SilverMedalist_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Speedbumps_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_Talent_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_FactTbl_YearRef_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_ApplStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_ApplStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ApplStatus": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendApplStatusFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_ApplicantStatus",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_ApplicantStatus",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ApplicantStatus": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:14:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_ApplStatus')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_ApplicantStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_ApplStatus_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_ApplStatus_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ApplStatus": {},
									"AppendApplStatusFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_ApplStatus_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Applicant",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Applicant",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_Applicant",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Applicant",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ApplicantFact": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T19:52:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Applicant')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Applicant')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Applicant_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Applicant_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicant": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Applicant_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ClientInfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Tbl_Client",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Client",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Tbl_Client",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_EngagementType": {
										"value": "'@{pipeline().parameters.P_Client_Engagement_Type}'",
										"type": "Expression"
									},
									"Flow_Client_Desc": {
										"value": "'@{pipeline().parameters.P_Client_Desc}'",
										"type": "Expression"
									},
									"Flow_Client_Sector": {
										"value": "'@{pipeline().parameters.P_Client_Sector}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceCore": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"LoadClientInfo": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Client",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Client",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Client_Engagement_Type": {
						"type": "string"
					},
					"P_Client_Desc": {
						"type": "string"
					},
					"P_Client_Sector": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:44:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Tbl_Client')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_Client')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ClientInfo_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Tbl_Client_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Tbl_Client_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceCore": {},
									"LoadClientInfo": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Tbl_Client_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Core",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteQtrHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Core",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Core": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendCoreFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_Core",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Core",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Core": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "DeleteQtrHistory",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'QTR')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_Qtr_Rec_FactTbl_Core",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_Qtr_Rec_FactTbl_Core",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												},
												"Flow_Year": {
													"value": "'@{pipeline().parameters.P_Folder_Year}'",
													"type": "Expression"
												},
												"Flow_Quarter": {
													"value": "'@{pipeline().parameters.P_Folder_Quarter}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Core": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All_Qtr": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T19:52:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Core')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Core')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_Qtr_Rec_FactTbl_Core')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Core_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Core_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Core": {},
									"AppendCoreFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Core_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_DivSlate",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_DivSlate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DivSlate": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendDivSlateFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_DivSlate",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_DivSlate",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"DivSlateFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:19:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_DivSlate')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_DivSlate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_DivSlate_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_DivSlate_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DivSlate": {},
									"AppendDivSlateFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_DivSlate_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Other",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteQtrHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_OtherCore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendOtherFactTbl": {},
									"OtherNullRecordOutput": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_OtherCore",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_OtherCore",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"OtherCoreFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "DeleteQtrHistory",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All_Qtr, 'Qtr')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_Qtr_Rec_FactTbl_OtherCore",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_Qtr_Rec_FactTbl_OtherCore",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												},
												"Flow_Year": {
													"value": "'@{pipeline().parameters.P_Folder_Year}'",
													"type": "Expression"
												},
												"Flow_Quarter": {
													"value": "'@{pipeline().parameters.P_Folder_Quarter}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"OtherCoreFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All_Qtr": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T17:55:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_OtherCore')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_OtherCore')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_Qtr_Rec_FactTbl_OtherCore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_OtherCore_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_OtherCore_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Other": {},
									"AppendOtherFactTbl": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_OtherCore_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_PerfRatingHist",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_PerfRatingHist",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PerRatingHistory": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendTalentMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_PerfRatingHist",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_PerfRatingHist",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"PerfRatingHistFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:23:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_PerfRatingHist')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_PerfRatingHist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRating_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_PerfRatingHist_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_PerfRatingHist_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PerRatingHistory": {},
									"AppendTalentMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_PerfRatingHist_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Req",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Req",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendReqFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_Req",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Req",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Requisition": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:26:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Req')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Req')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Req_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Req_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Requisitions": {},
									"AppendReqFact": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Req_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_SilverMedalist",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_SilverMedalist",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SilverMedalist": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendSilverMedalistFAct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_SilverMedalist",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_SilverMedalist",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SilverMedalistFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T17:55:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_SilverMedalist')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_SilverMedalist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_SilverMedalist_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_SilverMedalist_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_SilverMedalist_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SilverMedalist": {},
									"AppendSilverMedalistFAct": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_SilverMedalist_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Speedbumps",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Speedbumps",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Speedbumps": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:44:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Speedbumps')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Speedbumps_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Speedbumps_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Speedbumps_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Speedbumps": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Speedbumps_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Talent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Talent",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DeleteAllHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Talent",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Talent": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendTalentMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DeleteAllHistory",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Delete_History_No_All, 'All')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_All_Rec_FactTbl_Talent",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Talent",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"TalentFactTbl": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_Delete_History_No_All": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:31:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Talent')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Talent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Talent_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_Talent_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_Talent_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Talent": {},
									"AppendTalentMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Talent_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_YearRef')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_YearRef",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_All_Rec_FactTbl_YearRef",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_YearRef",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"YearRef": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendYearRef": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_All_Rec_FactTbl_YearRef",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_YearRef",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"YearRefTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:31:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_YearRef')]",
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_YearRef')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_YearRef_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_FactTbl_YearRef_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_FactTbl_YearRef_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"YearRef": {},
									"AppendYearRef": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_YearRef_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_ApplicantFlow",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ApplicantFlow",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_BusHierarchy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ApplicantFlow",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_BusHierarchy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_CorpTitle",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_BusHierarchy",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_CorpTitle",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Disability",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_CorpTitle",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Disability",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Ethnicity",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Disability",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Ethnicity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Event",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Ethnicity",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Event",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Gender",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Event",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Gender",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_LGTBQ",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Gender",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_LGTBQ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Location",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_LGTBQ",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_PerformanceRating",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Location",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_PerformanceRating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ReqStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_PerformanceRating",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ReqStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ReqType",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ReqStatus",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ReqType",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Veteran",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ReqType",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Veteran",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_ApplicantFlow')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_BusHierarchy')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_CorpTitle')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Disability')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Event')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_LGTBQ')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Location')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_PerformanceRating')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_ReqStatus')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_ReqType')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Veteran')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_All_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_BusHierarchy_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ApplicantFlow_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_BusHierarchy_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ApplicantFlow_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ApplicantFlow_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_CorpTitle_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_BusHierarchy_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_CorpTitle_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Disability_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_CorpTitle_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Disability_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Ethnicity_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Disability_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Ethnicity_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Event_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Ethnicity_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Event_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Gender_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Event_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Gender_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_LGTBQ_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Gender_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_LGTBQ_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Location_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_LGTBQ_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Location_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_PerformanceRating_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_Location_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_PerformanceRating_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ReqStatus_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_PerformanceRating_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ReqStatus_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_ReqType_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ReqStatus_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_ReqType_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Append_Mapping_Veteran_Hist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Append_Mapping_ReqType_Hist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Append_Mapping_Veteran_Hist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Hist_Client_Dt": {
									"value": "@pipeline().parameters.P_Hist_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_BusHierarchy_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_ApplicantFlow_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_CorpTitle_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Disability_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Ethnicity_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Event_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Gender_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_LGTBQ_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Location_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_PerformanceRating_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_ReqStatus_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_ReqType_Hist')]",
				"[concat(variables('factoryId'), '/pipelines/Append_Mapping_Veteran_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ApplicantFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_ApplicantFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_ApplFlow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_ApplicantFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ApplicantFlowMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendApplicantFlowMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_ApplFlow1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ApplFlow",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_ApplicantFlow')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_ApplFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ApplicantFlow_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_ApplicantFlow_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_ApplicantFlow_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ApplicantFlowMapping": {},
									"AppendApplicantFlowMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_ApplicantFlow_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_BusHierarchy",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_BusHierarchy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_BusHierarchy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BusHierarchy": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendBusHierarchyMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_BusHierarchy",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_BusHierarchy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_BusHierarchy')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_BusHierarchy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_BusHierarchy_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_BusHierarchy_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_BusHierarchy_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BusHierarchy": {},
									"AppendBusHierarchyMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_BusHierarchy_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_CorpTitle",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_CorpTitle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_CorpTitle",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CorpTitle": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendCorpTitleMappingToDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_CorpTitle",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_CorpTitle",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_CorpTitle')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_CorpTitle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_CorpTitle_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_CorpTitle",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_CorpTitle_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CorpTitle": {},
									"AppendCorpTitleMappingToDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_CorpTitle_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Disability",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Disability",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Disability",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Disability": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_Disability",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Disability",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Disability')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Disability')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Disability_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Disability_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Disability_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Disability": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Disability_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Ethnicity",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Ethnicity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Ethnicity",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Ethnicity": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendEthnicityMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_Ethnicity",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Ethnicity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Ethnicity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Ethnicity_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Ethnicity_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Ethnicity_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Ethnicity": {},
									"AppendEthnicityMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Ethnicity_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Event",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Event",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Event",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Event": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendEventMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_Event",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Event",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Event')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Event')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Event_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Event_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Event_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Event": {},
									"AppendEventMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Event_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Gender",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Gender",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Gender",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Gender": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_Gender",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Gender",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Gender')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Gender_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Gender_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Gender_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Gender": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Gender_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_LGBTQ",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_LGTBQ",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_LGBTQ",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"LGTBQ": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_LGTBQ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_LGTBQ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_LGBTQ')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_LGTBQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_LGTBQ_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_LGBTQ_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_LGBTQ_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"LGTBQ": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_LGBTQ_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Location",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Location",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Location": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendLocationMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_Location",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Location')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Location')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Location_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Location_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Location_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Location": {},
									"AppendLocationMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Location_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_PerformanceRating",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_PerfRating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_PerformanceRating",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Performance": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendPerformanceMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_PerfRating",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_PerfRating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_PerformanceRating')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_PerfRating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_PerformanceRating_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_PerformanceRating_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_PerformanceRating_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Performance": {},
									"AppendPerformanceMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_PerformanceRating_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_ReqStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_ReqStatusMap",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_ReqStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RequisitionStatus": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendReqStatusMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_ReqStatusMap",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ReqStatusMap",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_ReqStatus')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_ReqStatusMap')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqStatus_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_ReqStatus_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_ReqStatus_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"RequisitionStatus": {},
									"AppendReqStatusMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_ReqStatus_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_ReqType",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_ReqType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_ReqType",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RequisitionType": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"AppendReqStatusMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_ReqType",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ReqType",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_ReqType')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_ReqType')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqType_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_ReqType_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_ReqType_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"RequisitionType": {},
									"AppendReqStatusMapping": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_ReqType_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Veteran",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Veteran",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Veteran",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Veteran": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_Rec_Mapping_Veteran",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Veteran",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Veteran')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Veteran')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Veteran_Hist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_Mapping_Veteran_Hist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Mapping_Veteran_Hist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Hist_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Hist_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Veteran": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Hist_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load From Prior Engagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Mapping_Veteran_Hist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_TmpTbl_OtherCoreAnalysis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append_TmpTbl_OtherCoreAnalysis",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete_TmpTbl_OtherCoreAnalysis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Append_Tbl_OthCoreAnalysis",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceTmpOtherCoreAnalysis": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@pipeline().parameters.P_Folder_Quarter",
											"type": "Expression"
										}
									},
									"AppendOtherCoreAnalysisTmp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete_TmpTbl_OtherCoreAnalysis",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_TmpTbl_OtherCoreAnalysis",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Load Temp Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T20:31:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Append_Tbl_OthCoreAnalysis')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_TmpTbl_OtherCoreAnalysis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Female')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01035335"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_AmerIndAlaskNat_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_AmerIndAlaskNat_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_AmerIndAlaskNat_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_AmerIndAlaskNat_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_AmerIndAlaskNat_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_AmerIndAlaskNat_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_AmerIndAlaskNat_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Male')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01035294"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_AmerIndAlaskNat_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_AmerIndAlaskNat_Male",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_AmerIndAlaskNat_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_AmerIndAlaskNat_Male",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_AmerIndAlaskNat_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_AmerIndAlaskNat_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_AmerIndAlaskNat_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Total')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01035243Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_AmerIndAlaskNat_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_AmerIndAlaskNat_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_AmerIndAlaskNat_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_AmerIndAlaskNat_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_AmerIndAlaskNat_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_AmerIndAlaskNat_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_AmerIndAlaskNat_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01032342Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092765"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Female_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Female_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Female_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Female_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Female_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092180Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Female_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Female_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Female_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Female_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Female_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Female_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01032301Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Male",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Male",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092764"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Male_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Male_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Male_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Male_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Male_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092179Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Male_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Male_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Male_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Male_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Male_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Male_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01032183Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092763"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Total_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Total_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Total_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Total_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Total_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092178Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Asian_Total_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Asian_Total_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Asian_Total_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Asian_Total_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Asian_Total_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Asian_Total_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000008Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092762"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Female_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Female_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Female_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Female_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Female_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092177Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Female_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Female_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Female_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Female_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Female_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Female_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000007Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Male",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Male",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092761"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Male_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Male_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Male_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Male_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Male_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092176Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Male_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Male_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Male_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Male_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Male_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Male_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000006Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092760"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Total_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Total_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Total_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Total_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Total_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092175Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Black_Total_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Black_Total_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Black_Total_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Black_Total_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Black_Total_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Black_Total_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Female_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000002Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Female_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000011Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Latinx_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Latinx_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Latinx_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Latinx_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Latinx_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Latinx_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Latinx_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Male_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000010Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Latinx_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Latinx_Male",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Latinx_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Latinx_Male",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Latinx_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Latinx_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Latinx_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Total_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000009Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Latinx_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Latinx_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Latinx_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Latinx_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Latinx_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Latinx_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Latinx_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Male_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000001Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Male",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Male",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Female_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01035645"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_NatHawPacIsl_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_NatHawPacIsl_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_NatHawPacIsl_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_NatHawPacIsl_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_NatHawPacIsl_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_NatHawPacIsl_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_NatHawPacIsl_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Male_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01035604"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_NatHawPacIsl_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_NatHawPacIsl_Male",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_NatHawPacIsl_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_NatHawPacIsl_Male",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_NatHawPacIsl_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_NatHawPacIsl_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_NatHawPacIsl_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Total_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01035553Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_NatHawPacIsl_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_NatHawPacIsl_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_NatHawPacIsl_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_NatHawPacIsl_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_NatHawPacIsl_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_NatHawPacIsl_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_NatHawPacIsl_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01083443"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Other_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Other_Female_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Other_Female_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Other_Female_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Other_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Other_Female_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Other_Female_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01083442"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Other_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Other_Male_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Other_Male_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Other_Male_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Other_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Other_Male_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Other_Male_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01083441"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Other_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Other_Total_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Other_Total_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Other_Total_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Other_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Other_Total_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Other_Total_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Total_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000000Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Female')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092156"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_TwoOrMore_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_TwoOrMore_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_TwoOrMore_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_TwoOrMore_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_TwoOrMore_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_TwoOrMore_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Male')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092155"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_TwoOrMore_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_TwoOrMore_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_TwoOrMore_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_TwoOrMore_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_TwoOrMore_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_TwoOrMore_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Total_Output')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092154Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_TwoOrMore_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_TwoOrMore_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_TwoOrMore_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_TwoOrMore_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_TwoOrMore_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_TwoOrMore_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Update_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BLS_Update_All_Set1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Update_All_Set1",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Update_All_Set2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Update_All_Set2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BLS_Update_All_Set1')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Update_All_Set2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Update_All_Set1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BLS_AmerIndAlaskNat_Female",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_AmerIndAlaskNat_Female",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_AmerIndAlaskNat_Male",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_AmerIndAlaskNat_Male",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_AmerIndAlaskNat_Total",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_AmerIndAlaskNat_Total",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Female_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Female",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Male_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Male",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Total_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Total",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Female_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Female",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Male_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Male",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Total_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Total",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Female_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Female_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Latinx_Female_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Latinx_Female_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Latinx_Male_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Latinx_Male_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Latinx_Total_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Latinx_Total_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Male_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Male_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_NatHawPacIsl_Female_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_NatHawPacIsl_Female_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_NatHawPacIsl_Male_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_NatHawPacIsl_Male_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_NatHawPacIsl_Total_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_NatHawPacIsl_Total_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Total_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Total_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_TwoOrMore_Female",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_TwoOrMore_Female",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_TwoOrMore_Male",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_TwoOrMore_Male",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_TwoOrMore_Total_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_TwoOrMore_Total_Output",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Female_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Female",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Male_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Male",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Total_Output",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Total",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Female_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Female_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Female_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Female_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Male_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Male_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Male_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Male_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Total_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Total_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Asian_Total_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Asian_Total_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Female_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Female_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Female_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Female_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Male_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Male_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Male_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Male_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Total_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Total_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Black_Total_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Black_Total_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BLS_AmerIndAlaskNat_Female')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_AmerIndAlaskNat_Male')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_AmerIndAlaskNat_Total')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Female')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Male')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Total')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Female')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Male')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Total')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Female_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Latinx_Female_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Latinx_Male_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Latinx_Total_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Male_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_NatHawPacIsl_Female_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_NatHawPacIsl_Male_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_NatHawPacIsl_Total_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Total_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_TwoOrMore_Female')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_TwoOrMore_Male')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_TwoOrMore_Total_Output')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Female')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Male')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Total')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Female_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Male_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Total_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Asian_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Female_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Male_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Total_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Black_Total_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Update_All_Set2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BLS_White_Female_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Female_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Female_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Female_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Male_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Male_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Male_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Male_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Total_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Total_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_White_Total_NonHisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_White_Total_NonHisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Other_Female_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Other_Female_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Other_Male_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Other_Male_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BLS_Other_Total_Hisp",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Other_Total_Hisp",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Female_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Male_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Total_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_White_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Other_Female_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Other_Male_Hisp')]",
				"[concat(variables('factoryId'), '/pipelines/BLS_Other_Total_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000005Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Female",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Female",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Female",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Female",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Female",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Female')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Female')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092759"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Female_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Female_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Female_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Female_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Female_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Female_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092174Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Female_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Female_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Female_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Female_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Female_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Female_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000004Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Male",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Male",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Male",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Male",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Male",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Male')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Male')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092758"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Male_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Male_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Male_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Male_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Male_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Male_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092173Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Male_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Male_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Male_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Male_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Male_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Male_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01000003Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Total",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Total",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Total",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Total",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Total",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Total')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Total')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092757"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Total_Hisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Total_Hisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Total_Hisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Total_Hisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Total_Hisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Total_Hisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_BLS_Site",
								"type": "DatasetReference",
								"parameters": {
									"SeriesId": "https://api.bls.gov/publicAPI/v2/timeseries/data/LNU01092172Q"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_BLS_White_Total_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BLS_White_Total_NonHisp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BLS_White_Total_NonHisp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BLSJsonSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BLS_White_Total_NonHisp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Json_BLS_White_Total_NonHisp",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Site')]",
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/dataflows/BLS_White_Total_NonHisp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Client_Records')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_All",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_All",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_All",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_All",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_All",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_All')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_All')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Speedbumps",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_Speedbumps",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SpeedbumpsFactTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Speedbumps')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Speedbumps_NEW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete_Qtr_Rec_FactTbl_Speedbmps",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Qtr_Rec_FactTbl_Speedbmps",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Year": {
										"value": "'@{pipeline().parameters.P_SB_Year}'",
										"type": "Expression"
									},
									"Flow_Quarter": {
										"value": "'@{pipeline().parameters.P_SB_Quarter}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Speedbumps": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_SB_Year": {
						"type": "string"
					},
					"P_SB_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Qtr_Rec_FactTbl_Speedbmps')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Speedbumps",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_All_Rec_FactTbl_Speedbumps",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Applicant",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Speedbumps",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Applicant",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_ApplicantStatus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Applicant",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_ApplicantStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Client",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_ApplicantStatus",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Client",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Core",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Client",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Core",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_DivSlate",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Core",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_DivSlate",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_OtherCore",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_DivSlate",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_OtherCore",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_PerfRatingHist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_OtherCore",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_PerfRatingHist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Req",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_PerfRatingHist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Req",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_SilverMedalist",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Req",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_SilverMedalist",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_Talent",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_SilverMedalist",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_Talent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_FactTbl_YearRef",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_FactTbl_Talent",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_FactTbl_YearRef",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Delete_All_Rec_FactTbl_Speedbumps')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_Applicant')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_ApplicantStatus')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_Client')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_Core')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_DivSlate')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_OtherCore')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_PerfRatingHist')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_Req')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_SilverMedalist')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_Talent')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_FactTbl_YearRef')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Applicant",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_Applicant",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ApplicantFact": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Applicant')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_ApplicantStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_ApplicantStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_ApplicantStatus",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ApplicantStatus": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_ApplicantStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_Client')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Client",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_Client",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ClientTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Client')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Core",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_Core",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Core": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Core')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_DivSlate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_DivSlate",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DivSlateFactTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_DivSlate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_OtherCore",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_OtherCore",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherCoreFactTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_OtherCore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_PerfRatingHist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_PerfRatingHist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PerfRatingHistFactTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_PerfRatingHist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Req",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_Req",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Requisition": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Req')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_SilverMedalist",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_SilverMedalist",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SilverMedalistFactTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_SilverMedalist')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_Talent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_Talent",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_Talent",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TalentFactTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Talent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_FactTbl_YearRef')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_FactTbl_YearRef",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_All_Rec_FactTbl_YearRef",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"YearRefTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_YearRef')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Veteran",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Veteran",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_ApplFlow",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Veteran",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ApplFlow",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_BusHierarchy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_ApplFlow",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_BusHierarchy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_CorpTitle",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_BusHierarchy",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_CorpTitle",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Disability",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_CorpTitle",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Disability",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Ethnicity",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Disability",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Ethnicity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Event",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Ethnicity",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Event",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Gender",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Event",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Gender",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_LGTBQ",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Gender",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_LGTBQ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_Location",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_LGTBQ",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_PerfRating",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_Location",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_PerfRating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_ReqStatusMap",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_PerfRating",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ReqStatusMap",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Delete_Rec_Mapping_ReqType",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Delete_Rec_Mapping_ReqStatusMap",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Delete_Rec_Mapping_ReqType",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Veteran')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_ApplFlow')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_BusHierarchy')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_CorpTitle')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Disability')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Event')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_LGTBQ')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_Location')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_PerfRating')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_ReqStatusMap')]",
				"[concat(variables('factoryId'), '/pipelines/Delete_Rec_Mapping_ReqType')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_ApplFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_ApplFlow",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ApplicantFlowMap": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_ApplFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_BusHierarchy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_BusHierarchy",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BusinessHIerarchy": {},
									"DeleteRecordsFromCandidateStatus": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_BusHierarchy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_CorpTitle",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_CorpTitle",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CorpTitleMap": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_CorpTitle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Disability",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_Disability",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DisabilityMap": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_Disability')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Ethnicity",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_Ethnicity",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"EthnicityMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_Ethnicity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Event",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_Event",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"EventMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_Event')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Gender",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_Gender",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"GenderMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_Gender')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_LGTBQ",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_LGTBQ",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"LGBTQMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_LGTBQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Location",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_Location",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"LocationMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_Location')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_PerfRating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_PerfRating",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_PerfRating",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PerfRatingMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_PerfRating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ReqStatusMap')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_ReqStatusMap",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_ReqStatusMap",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReqStatusMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_ReqStatusMap')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_ReqType",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_ReqType",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReqTypeMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_ReqType')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all client table records in the database (Fact Tables and Mapping) based on the parameters for Client Id and Client Engagement Dt. ",
				"activities": [
					{
						"name": "Delete_Rec_Mapping_Veteran",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Rec_Mapping_Veteran",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"VeteranMapTbl": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Mapping"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T14:43:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Rec_Mapping_Veteran')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_TmpTbl_OtherCoreAnalysis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "WARNING - This pipeline will delete all Other Analysis Temp records",
				"activities": [
					{
						"name": "Delete_TmpTbl_OtherCoreAnalysis",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delete_Tmp_OtherCoreAnalysis",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Core": {},
									"DeleteRecords": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Client/Database/Delete Records/Temp Tables"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_Tmp_OtherCoreAnalysis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_BLSTbl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FullLoad_BLSTbl",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FullLoad_BLSTbl",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AmerIndAlaskNatFemale": {},
									"AmerIndAlaskNatMale": {},
									"AmerIndAlaskNatTotal": {},
									"AsianFemale": {},
									"AsianMale": {},
									"AsianTotal": {},
									"BlackFemale": {},
									"BlackMale": {},
									"BlackTotal": {},
									"Female": {},
									"LatinxFemale": {},
									"LatinxMale": {},
									"LatinxTotal": {},
									"Male": {},
									"NatHawPacIslFemale": {},
									"NatHawPacIslMale": {},
									"NatHawPacIslTotal": {},
									"Total": {},
									"TwoOrMoreFemale": {},
									"TwoOrMoreMale": {},
									"TwoOrMoreTotal": {},
									"WhiteFemale": {},
									"WhiteMale": {},
									"WhiteTotal": {},
									"AsianFemaleHisp": {},
									"AsianFemaleNonHisp": {},
									"AsianMaleHisp": {},
									"AsianMaleNonHisp": {},
									"AsianTotalHisp": {},
									"AsianTotalNonHisp": {},
									"BlackFemaleHisp": {},
									"BlackFemaleNonHisp": {},
									"BlackMaleHisp": {},
									"BlackMaleNonHisp": {},
									"BlackTotalHisp": {},
									"BlackTotalNonHisp": {},
									"OtherFemaleHisp": {},
									"OtherMaleHisp": {},
									"OtherTotalHisp": {},
									"WhiteFemaleHisp": {},
									"WhiteFemaleNonHisp": {},
									"WhiteMaleHisp": {},
									"WhiteMaleNonHisp": {},
									"WhiteTotalHisp": {},
									"WhiteTotalNonHisp": {},
									"FullLoadBLSTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FullLoad_BLSTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move_Templates_Into_ClientFldr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_Binary_CoreTemplate_ProcessingFldr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Source_Binary_TemplatesFldr",
								"type": "DatasetReference",
								"parameters": {
									"Source_Client_Fldr": {
										"value": "@pipeline().parameters.P_Client_Id",
										"type": "Expression"
									},
									"Source_Client_Date": {
										"value": "@pipeline().parameters.P_Client_Dt",
										"type": "Expression"
									},
									"Source_Client_Year": {
										"value": "@pipeline().parameters.P_Folder_Year",
										"type": "Expression"
									},
									"Source_Client_Quarter": {
										"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_Binary_TalentAcqTemplate_ProcessingFldr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Source_Binary_TemplatesFldr",
								"type": "DatasetReference",
								"parameters": {
									"Source_Client_Fldr": {
										"value": "@pipeline().parameters.P_Client_Id",
										"type": "Expression"
									},
									"Source_Client_Date": {
										"value": "@pipeline().parameters.P_Client_Dt",
										"type": "Expression"
									},
									"Source_Client_Year": {
										"value": "@pipeline().parameters.P_Folder_Year",
										"type": "Expression"
									},
									"Source_Client_Quarter": {
										"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy data3",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_Binary_OtherTemplate_ProcessingFldr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Source_Binary_TemplatesFldr",
								"type": "DatasetReference",
								"parameters": {
									"Source_Client_Fldr": {
										"value": "@pipeline().parameters.P_Client_Id",
										"type": "Expression"
									},
									"Source_Client_Date": {
										"value": "@pipeline().parameters.P_Client_Dt",
										"type": "Expression"
									},
									"Source_Client_Year": {
										"value": "@pipeline().parameters.P_Folder_Year",
										"type": "Expression"
									},
									"Source_Client_Quarter": {
										"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Binary_CoreTemplate_ProcessingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_Binary_TemplatesFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_Binary_TalentAcqTemplate_ProcessingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_Binary_OtherTemplate_ProcessingFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Adhc_Evergreen_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merge all core events into one file.",
				"activities": [
					{
						"name": "DF_Adhoc_OtherFact_Evergreen",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Adhoc_OtherFact_Evergreen",
								"type": "DataFlowReference",
								"parameters": {
									"SB_BL_Year": {
										"value": "'@{pipeline().parameters.P_Folder_Year}'",
										"type": "Expression"
									},
									"SB_BL_Quarter": {
										"value": "'@{pipeline().parameters.P_Folder_Quarter}'",
										"type": "Expression"
									},
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PerfRatingHistory": {},
									"CoreYear": {},
									"LevelMapForEmp": {},
									"Talent": {},
									"OtherCore": {},
									"CoreForSupplement": {},
									"EthnicityMap": {},
									"GenderMap": {},
									"OutPutFactTable": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Client Adhoc"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Adhoc_OtherFact_Evergreen')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_All_Mapping_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Output_Mapping_ApplFlow",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_ApplFlow",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_BusHierarchy",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_BusHierarchy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_CorpTitle",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_CorpTitle",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_Disability",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_Disability",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_Ethnicity",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_Ethnicity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_Event",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_Event",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_Gender",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_Gender",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_LGTBQ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_LGTBQ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_Location",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_Performance",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_Performance",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_ReqStatus",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_ReqStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_ReqType",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_ReqType",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Mapping_Veteran",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Mapping_Veteran",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_ApplFlow')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_BusHierarchy')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_CorpTitle')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_Disability')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_Event')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_LGTBQ')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_Location')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_Performance')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_ReqStatus')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_ReqType')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Mapping_Veteran')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_ApplStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_ApplStatus",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_ApplStatus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"EthnicityMap": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"GenderMap": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantMap": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_ApplStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Applicant')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_Applicant_File_Append_2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (2)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append_3",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append_2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (3)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append_4",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append_3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (4)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append_5",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append_4",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (5)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append_6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append_5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (6)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append_7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append_6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (7)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append8",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append_7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (8)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append9",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (9)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append10",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append9",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (10)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append11",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append10",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (11)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append12",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append11",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (12)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append13",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append12",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (13)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append14",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append13",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (14)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append15",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append14",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (15)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append16",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append15",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (16)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append17",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append16",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (17)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append18",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append17",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (18)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append19",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append18",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (19)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File_Append20",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_Applicant_File_Append19",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantAppendFile": {
										"AppendFileName": "Elloree Data Submission Template - TA.xlsx",
										"WorkSheetName": "DATA_JobApplicants (20)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_Applicant_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Applicant_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"variables": {
					"FailureSheet": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Applicant_File_Append')]",
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Applicant_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merge all core events into one file.",
				"activities": [
					{
						"name": "DF_FactTbl_Core_File_Quarterly",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Core_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Headcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Terminations": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Hires": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Promotions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Core_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_DivSlate_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_DivSlate_File",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"EthnicityMap": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"GenderMap": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantMap": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink2": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_DivSlate_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merge all core events into one file.",
				"activities": [
					{
						"name": "DF_FactTbl_OtherCore_File_Append2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (2)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append3",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (3)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append4",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (4)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append5",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append4",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (5)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append6",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (6)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append7",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (7)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append8",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (8)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append9",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (9)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append10",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append9",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (10)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append11",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append10",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (11)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append12",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append11",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (12)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append13",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append12",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (13)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append14",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append13",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (14)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append15",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append14",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (15)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append16",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append15",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (16)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append17",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append16",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (17)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append18",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append17",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (18)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append19",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append18",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (19)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File_Append20",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_OtherCore_File_Append19",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"OtherAppend": {
										"AppendFileName": "Elloree Data Submission Template (Other).xlsx",
										"WorkSheetName": "DATA_WorkerOther (20)",
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_OtherCore_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_OtherCore_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"variables": {
					"FailureSheet": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_OtherCore_File_Append')]",
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_OtherCore_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_PerfRatingHist_Init_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_PerfRatingHist_Init_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Core": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Performance": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"PerformanceMapping": {},
									"HistoricalCoreDB": {},
									"HistoricalTalentDB": {},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_FactTbl_PerfRatingHist_Final_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_FactTbl_PerfRatingHist_Init_File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_PerfRatingHist_Final_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PerformanceHistory": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Core": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CoreForHCTEventYears": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"PerfRatingHistFactTbl": {},
									"CoreDBHist": {},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_PerfRatingHist_Init_File')]",
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_PerfRatingHist_Final_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_PerfRatingHist_TestINIT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_PerfRatingHist_Init_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_PerfRatingHist_Init_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Core": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Performance": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"PerformanceMapping": {},
									"HistoricalCoreDB": {},
									"HistoricalTalentDB": {},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_PerfRatingHist_Init_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Req')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merge all core events into one file.",
				"activities": [
					{
						"name": "DF_FactTbl_JobReq_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_JobReq_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_JobReq_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Req_Append')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merge all core events into one file.",
				"activities": [
					{
						"name": "DF_FactTbl_JobReq_File_Append_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_JobReq_File_Append",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"JobRegFactTableFile": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"JobReqAppendFile": {
										"AppendFileName": {
											"value": "@pipeline().parameters.P_AppendFile",
											"type": "Expression"
										},
										"WorkSheetName": {
											"value": "@pipeline().parameters.P_AppendSheet",
											"type": "Expression"
										},
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_AppendFile": {
						"type": "string",
						"defaultValue": "Elloree Data Submission Template - TA.xlsx"
					},
					"P_AppendSheet": {
						"type": "string",
						"defaultValue": "DATA_JobRequisition"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_JobReq_File_Append')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_SilverMedalApplicant_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_SilverMedalApplicant_File",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicantMap": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_SilverMedalApplicant_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Speedbumps_BL_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_Speedbumps_Baseline",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Speedbumps_BL_wParam_Bamboo",
								"type": "DataFlowReference",
								"parameters": {
									"SB_BL_Year": {
										"value": "'@{pipeline().parameters.P_BL_SB_Year}'",
										"type": "Expression"
									},
									"SB_BL_Quarter": {
										"value": "'@{pipeline().parameters.P_BL_SB_Quarter}'",
										"type": "Expression"
									},
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"SB1_MgrLvl": {
										"value": "'@{pipeline().parameters.P_SB1_MgrLvl}'",
										"type": "Expression"
									},
									"SB2_MgrTalent": {
										"value": "'@{pipeline().parameters.P_SB2_MgrTalent}'",
										"type": "Expression"
									},
									"SB3_MgrExp": {
										"value": "'@{pipeline().parameters.P_SB3_MgrExp}'",
										"type": "Expression"
									},
									"SB4_Promotion": {
										"value": "'@{pipeline().parameters.P_SB4_Promotion}'",
										"type": "Expression"
									},
									"SB5_Applied5": {
										"value": "'@{pipeline().parameters.P_SB5_Applied5}'",
										"type": "Expression"
									},
									"SB6_SilvMedal": {
										"value": "'@{pipeline().parameters.P_SB6_SilvMedal}'",
										"type": "Expression"
									},
									"SB7_Mgr3Plus": {
										"value": "'@{pipeline().parameters.P_SB7_Mgr3Plus}'",
										"type": "Expression"
									},
									"SB8_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB8_Placeholder}'",
										"type": "Expression"
									},
									"SB9_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB9_Placeholder}'",
										"type": "Expression"
									},
									"SB10_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB10_Placeholder}'",
										"type": "Expression"
									},
									"SB11_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB11_Placeholder}'",
										"type": "Expression"
									},
									"SB12_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB12_Placeholder}'",
										"type": "Expression"
									},
									"SB13_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB13_Placeholder}'",
										"type": "Expression"
									},
									"SB14_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB14_Placeholder}'",
										"type": "Expression"
									},
									"SB15_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB15_Placeholder}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreFact": {},
									"SilverMedalist": {},
									"PerfRatingHistory": {},
									"CoreYear": {},
									"LevelMapForEmp": {},
									"CorePromo": {},
									"Applicant": {},
									"AllCore": {},
									"Talent": {},
									"OutputSpeedbumpsFactTbl": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_BL_SB_Year": {
						"type": "string"
					},
					"P_BL_SB_Quarter": {
						"type": "string"
					},
					"P_SB1_MgrLvl": {
						"type": "string"
					},
					"P_SB2_MgrTalent": {
						"type": "string"
					},
					"P_SB3_MgrExp": {
						"type": "string"
					},
					"P_SB4_Promotion": {
						"type": "string"
					},
					"P_SB5_Applied5": {
						"type": "string"
					},
					"P_SB6_SilvMedal": {
						"type": "string"
					},
					"P_SB7_Mgr3Plus": {
						"type": "string"
					},
					"P_SB8_Placeholder": {
						"type": "string"
					},
					"P_SB9_Placeholder": {
						"type": "string"
					},
					"P_SB10_Placeholder": {
						"type": "string"
					},
					"P_SB11_Placeholder": {
						"type": "string"
					},
					"P_SB12_Placeholder": {
						"type": "string"
					},
					"P_SB13_Placeholder": {
						"type": "string"
					},
					"P_SB14_Placeholder": {
						"type": "string"
					},
					"P_SB15_Placeholder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files/Create Custom Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Speedbumps_BL_wParam_Bamboo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Speedbumps_BL_Evergreen')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_Speedbumps_BL_wParam_Evergreen",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Speedbumps_BL_wParam_Evergreen",
								"type": "DataFlowReference",
								"parameters": {
									"SB_BL_Year": {
										"value": "'@{pipeline().parameters.P_BL_SB_Year}'",
										"type": "Expression"
									},
									"SB_BL_Quarter": {
										"value": "'@{pipeline().parameters.P_BL_SB_Quarter}'",
										"type": "Expression"
									},
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"SB1_MgrLvl": {
										"value": "'@{pipeline().parameters.P_SB1_MgrLvl}'",
										"type": "Expression"
									},
									"SB2_MgrTalent": {
										"value": "'@{pipeline().parameters.P_SB2_MgrTalent}'",
										"type": "Expression"
									},
									"SB3_MgrExp": {
										"value": "'@{pipeline().parameters.P_SB3_MgrExp}'",
										"type": "Expression"
									},
									"SB4_Promotion": {
										"value": "'@{pipeline().parameters.P_SB4_Promotion}'",
										"type": "Expression"
									},
									"SB5_Applied5": {
										"value": "'@{pipeline().parameters.P_SB5_Applied5}'",
										"type": "Expression"
									},
									"SB6_SilvMedal": {
										"value": "'@{pipeline().parameters.P_SB6_SilvMedal}'",
										"type": "Expression"
									},
									"SB7_Mgr3Plus": {
										"value": "'@{pipeline().parameters.P_SB7_Mgr3Plus}'",
										"type": "Expression"
									},
									"SB8_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB8_Placeholder}'",
										"type": "Expression"
									},
									"SB9_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB9_Placeholder}'",
										"type": "Expression"
									},
									"SB10_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB10_Placeholder}'",
										"type": "Expression"
									},
									"SB11_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB11_Placeholder}'",
										"type": "Expression"
									},
									"SB12_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB12_Placeholder}'",
										"type": "Expression"
									},
									"SB13_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB13_Placeholder}'",
										"type": "Expression"
									},
									"SB14_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB14_Placeholder}'",
										"type": "Expression"
									},
									"SB15_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB15_Placeholder}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreFact": {},
									"SilverMedalist": {},
									"PerfRatingHistory": {},
									"CoreYear": {},
									"LevelMapForEmp": {},
									"CorePromo": {},
									"Applicant": {},
									"AllCore": {},
									"Talent": {},
									"OtherCore": {},
									"OutputSpeedbumpsFactTbl": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_BL_SB_Year": {
						"type": "string"
					},
					"P_BL_SB_Quarter": {
						"type": "string"
					},
					"P_SB1_MgrLvl": {
						"type": "string"
					},
					"P_SB2_MgrTalent": {
						"type": "string"
					},
					"P_SB3_MgrExp": {
						"type": "string"
					},
					"P_SB4_Promotion": {
						"type": "string"
					},
					"P_SB5_Applied5": {
						"type": "string"
					},
					"P_SB6_SilvMedal": {
						"type": "string"
					},
					"P_SB7_Mgr3Plus": {
						"type": "string"
					},
					"P_SB8_Placeholder": {
						"type": "string"
					},
					"P_SB9_Placeholder": {
						"type": "string"
					},
					"P_SB10_Placeholder": {
						"type": "string"
					},
					"P_SB11_Placeholder": {
						"type": "string"
					},
					"P_SB12_Placeholder": {
						"type": "string"
					},
					"P_SB13_Placeholder": {
						"type": "string"
					},
					"P_SB14_Placeholder": {
						"type": "string"
					},
					"P_SB15_Placeholder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files/Create Custom Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Speedbumps_BL_wParam_Evergreen')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Speedbumps_Baseline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SB8_Placeholder",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Speedbumps_BL_wParam",
								"type": "DataFlowReference",
								"parameters": {
									"SB_BL_Year": {
										"value": "'@{pipeline().parameters.P_BL_SB_Year}'",
										"type": "Expression"
									},
									"SB_BL_Quarter": {
										"value": "'@{pipeline().parameters.P_BL_SB_Quarter}'",
										"type": "Expression"
									},
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"SB1_MgrLvl": {
										"value": "'@{pipeline().parameters.SB1_MgrLvl}'",
										"type": "Expression"
									},
									"SB2_MgrTalent": {
										"value": "'@{pipeline().parameters.SB2_MgrTalent}'",
										"type": "Expression"
									},
									"SB3_MgrExp": {
										"value": "'@{pipeline().parameters.SB3_MgrExp}'",
										"type": "Expression"
									},
									"SB4_Promotion": {
										"value": "'@{pipeline().parameters.SB4_Promotion}'",
										"type": "Expression"
									},
									"SB5_Applied5": {
										"value": "'@{pipeline().parameters.SB5_Applied5}'",
										"type": "Expression"
									},
									"SB6_SilvMedal": {
										"value": "'@{pipeline().parameters.SB6_SilvMedal}'",
										"type": "Expression"
									},
									"SB7_Mgr3Plus": {
										"value": "'@{pipeline().parameters.SB7_Mgr3Plus}'",
										"type": "Expression"
									},
									"SB8_Placeholder": {
										"value": "'@{pipeline().parameters.SB8_Placeholder}'",
										"type": "Expression"
									},
									"SB9_Placeholder": {
										"value": "'@{pipeline().parameters.SB9_Placeholder}'",
										"type": "Expression"
									},
									"SB10_Placeholder": {
										"value": "'@{pipeline().parameters.SB10_Placeholder}'",
										"type": "Expression"
									},
									"SB11_Placeholder": {
										"value": "'@{pipeline().parameters.SB11_Placeholder}'",
										"type": "Expression"
									},
									"SB12_Placeholder": {
										"value": "'@{pipeline().parameters.SB12_Placeholder}'",
										"type": "Expression"
									},
									"SB13_Placeholder": {
										"value": "'@{pipeline().parameters.SB13_Placeholder}'",
										"type": "Expression"
									},
									"SB14_Placeholder": {
										"value": "'@{pipeline().parameters.SB14_Placeholder}'",
										"type": "Expression"
									},
									"SB15_Placeholder": {
										"value": "'@{pipeline().parameters.SB15_Placeholder}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreFact": {},
									"SilverMedalist": {},
									"PerfRatingHistory": {},
									"CoreYear": {},
									"LevelMapForEmp": {},
									"CorePromo": {},
									"Applicant": {},
									"AllCore": {},
									"Talent": {},
									"OutputSpeedbumpsFactTbl": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_BL_SB_Year": {
						"type": "string"
					},
					"P_BL_SB_Quarter": {
						"type": "string"
					},
					"SB1_MgrLvl": {
						"type": "string"
					},
					"SB2_MgrTalent": {
						"type": "string"
					},
					"SB3_MgrExp": {
						"type": "string"
					},
					"SB4_Promotion": {
						"type": "string"
					},
					"SB5_Applied5": {
						"type": "string"
					},
					"SB6_SilvMedal": {
						"type": "string"
					},
					"SB7_Mgr3Plus": {
						"type": "string"
					},
					"SB8_Placeholder": {
						"type": "string"
					},
					"SB9_Placeholder": {
						"type": "string"
					},
					"SB10_Placeholder": {
						"type": "string"
					},
					"SB11_Placeholder": {
						"type": "string"
					},
					"SB12_Placeholder": {
						"type": "string"
					},
					"SB13_Placeholder": {
						"type": "string"
					},
					"SB14_Placeholder": {
						"type": "string"
					},
					"SB15_Placeholder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Speedbumps_BL_wParam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Speedbumps_Qtr_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo",
								"type": "DataFlowReference",
								"parameters": {
									"SB_BL_Year": {
										"value": "'@{pipeline().parameters.P_BL_SB_Year}'",
										"type": "Expression"
									},
									"SB_BL_Quarter": {
										"value": "'@{pipeline().parameters.P_BL_SB_Quarter}'",
										"type": "Expression"
									},
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"SB_Target_Year": {
										"value": "'@{pipeline().parameters.P_Folder_Year}'",
										"type": "Expression"
									},
									"SB_Target_Quarter": {
										"value": "'@{pipeline().parameters.P_Folder_Quarter}'",
										"type": "Expression"
									},
									"SB1_MgrLvl": {
										"value": "'@{pipeline().parameters.P_SB1_MgrLvl}'",
										"type": "Expression"
									},
									"SB2_MgrTalent": {
										"value": "'@{pipeline().parameters.P_SB2_MgrTalent}'",
										"type": "Expression"
									},
									"SB3_MgrExp": {
										"value": "'@{pipeline().parameters.P_SB3_MgrExp}'",
										"type": "Expression"
									},
									"SB4_Promotion": {
										"value": "'@{pipeline().parameters.P_SB4_Promotion}'",
										"type": "Expression"
									},
									"SB5_Applied5": {
										"value": "'@{pipeline().parameters.P_SB5_Applied5}'",
										"type": "Expression"
									},
									"SB6_SilvMedal": {
										"value": "'@{pipeline().parameters.P_SB6_SilvMedal}'",
										"type": "Expression"
									},
									"SB7_Mgr3Plus": {
										"value": "'@{pipeline().parameters.P_SB7_Mgr3Plus}'",
										"type": "Expression"
									},
									"SB8_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB8_Placeholder}'",
										"type": "Expression"
									},
									"SB9_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB9_Placeholder}'",
										"type": "Expression"
									},
									"SB10_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB10_Placeholder}'",
										"type": "Expression"
									},
									"SB11_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB11_Placeholder}'",
										"type": "Expression"
									},
									"SB12_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB12_Placeholder}'",
										"type": "Expression"
									},
									"SB13_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB13_Placeholder}'",
										"type": "Expression"
									},
									"SB14_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB14_Placeholder}'",
										"type": "Expression"
									},
									"SB15_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB15_Placeholder}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreHCT": {},
									"SilverMedalist": {},
									"CoreYear": {},
									"LevelMapForEmp": {},
									"CorePromo": {},
									"Applicant": {},
									"SpeedbumpsDBBaseline": {},
									"CoreTerminations": {},
									"PerfRatingHistory": {},
									"AllCore": {},
									"AllSpeedbumpsForInactiveWorkerSet": {},
									"Talent": {},
									"OutputSpeedbumpsFactTbl": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_BL_SB_Year": {
						"type": "string"
					},
					"P_BL_SB_Quarter": {
						"type": "string"
					},
					"P_SB1_MgrLvl": {
						"type": "string"
					},
					"P_SB2_MgrTalent": {
						"type": "string"
					},
					"P_SB3_MgrExp": {
						"type": "string"
					},
					"P_SB4_Promotion": {
						"type": "string"
					},
					"P_SB5_Applied5": {
						"type": "string"
					},
					"P_SB6_SilvMedal": {
						"type": "string"
					},
					"P_SB7_Mgr3Plus": {
						"type": "string"
					},
					"P_SB8_Placeholder": {
						"type": "string"
					},
					"P_SB9_Placeholder": {
						"type": "string"
					},
					"P_SB10_Placeholder": {
						"type": "string"
					},
					"P_SB11_Placeholder": {
						"type": "string"
					},
					"P_SB12_Placeholder": {
						"type": "string"
					},
					"P_SB13_Placeholder": {
						"type": "string"
					},
					"P_SB14_Placeholder": {
						"type": "string"
					},
					"P_SB15_Placeholder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files/Create Custom Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Speedbumps_Quarter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_FactTbl_Speedbumps_Quarter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Speedbumps_Quarter_wParam",
								"type": "DataFlowReference",
								"parameters": {
									"SB_BL_Year": {
										"value": "'@{pipeline().parameters.P_BL_SB_Year}'",
										"type": "Expression"
									},
									"SB_BL_Quarter": {
										"value": "'@{pipeline().parameters.P_BL_SB_Quarter}'",
										"type": "Expression"
									},
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"SB_Target_Year": {
										"value": "'@{pipeline().parameters.P_Target_SB_Year}'",
										"type": "Expression"
									},
									"SB_Target_Quarter": {
										"value": "'@{pipeline().parameters.P_Target_SB_Quarter}'",
										"type": "Expression"
									},
									"SB1_MgrLvl": {
										"value": "'@{pipeline().parameters.P_SB1_MgrLvl}'",
										"type": "Expression"
									},
									"SB2_MgrTalent": {
										"value": "'@{pipeline().parameters.P_SB2_MgrTalent}'",
										"type": "Expression"
									},
									"SB3_MgrExp": {
										"value": "'@{pipeline().parameters.P_SB3_MgrExp}'",
										"type": "Expression"
									},
									"SB4_Promotion": {
										"value": "'@{pipeline().parameters.P_SB4_Promotion}'",
										"type": "Expression"
									},
									"SB5_Applied5": {
										"value": "'@{pipeline().parameters.P_SB5_Applied5}'",
										"type": "Expression"
									},
									"SB6_SilvMedal": {
										"value": "'@{pipeline().parameters.P_SB6_SilvMedal}'",
										"type": "Expression"
									},
									"SB7_Mgr3Plus": {
										"value": "'@{pipeline().parameters.P_SB7_Mgr3Plus}'",
										"type": "Expression"
									},
									"SB8_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB8_Placeholder}'",
										"type": "Expression"
									},
									"SB9_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB9_Placeholder}'",
										"type": "Expression"
									},
									"SB10_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB10_Placeholder}'",
										"type": "Expression"
									},
									"SB11_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB11_Placeholder}'",
										"type": "Expression"
									},
									"SB12_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB12_Placeholder}'",
										"type": "Expression"
									},
									"SB13_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB13_Placeholder}'",
										"type": "Expression"
									},
									"SB14_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB14_Placeholder}'",
										"type": "Expression"
									},
									"SB15_Placeholder": {
										"value": "'@{pipeline().parameters.P_SB15_Placeholder}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreHCT": {},
									"SilverMedalist": {},
									"CoreYear": {},
									"LevelMapForEmp": {},
									"CorePromo": {},
									"Applicant": {},
									"SpeedbumpsDBBaseline": {},
									"CoreTerminations": {},
									"PerfRatingHistory": {},
									"AllCore": {},
									"AllSpeedbumpsForInactiveWorkerSet": {},
									"OutputSpeedbumpsFactTbl": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					},
					"P_BL_SB_Year": {
						"type": "string"
					},
					"P_BL_SB_Quarter": {
						"type": "string"
					},
					"P_Target_SB_Year": {
						"type": "string"
					},
					"P_Target_SB_Quarter": {
						"type": "string"
					},
					"P_SB1_MgrLvl": {
						"type": "string"
					},
					"P_SB2_MgrTalent": {
						"type": "string"
					},
					"P_SB3_MgrExp": {
						"type": "string"
					},
					"P_SB4_Promotion": {
						"type": "string"
					},
					"P_SB5_Applied5": {
						"type": "string"
					},
					"P_SB6_SilvMedal": {
						"type": "string"
					},
					"P_SB7_Mgr3Plus": {
						"type": "string"
					},
					"P_SB8_Placeholder": {
						"type": "string"
					},
					"P_SB9_Placeholder": {
						"type": "string"
					},
					"P_SB10_Placeholder": {
						"type": "string"
					},
					"P_SB11_Placeholder": {
						"type": "string"
					},
					"P_SB12_Placeholder": {
						"type": "string"
					},
					"P_SB13_Placeholder": {
						"type": "string"
					},
					"P_SB14_Placeholder": {
						"type": "string"
					},
					"P_SB15_Placeholder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Speedbumps_Quarter_wParam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_File_Talent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merge all core events into one file.",
				"activities": [
					{
						"name": "DF_FactTbl_Talent_File",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_Talent_File",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Talent": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_Talent_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_FactTbl_YearRef')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Merge all core events into one file.",
				"activities": [
					{
						"name": "DF_FactTbl_YearRefTable",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_FactTbl_YearRefTable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Core": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputYearRefTable": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Fact Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_FactTbl_YearRefTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_ApplFlow_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_ApplFlow",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllApplicantData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplFlowMappingTbl": {},
									"ApplicantDatabaseRecords": {},
									"OutputWorkingApplFlowMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepApplFlowMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_ApplFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_BusHierarchy_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_BusHierarchy",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"HierarchyMappingTbl": {},
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseReqRecords": {},
									"OutputWorkingHierarchyMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepHierarchyMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_BusHierarchy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_CorpTitle_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_CorpTitle",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CorpTitleMappingTableClient": {},
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseReqRecords": {},
									"OutputMappingToPrepFldr": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputMappingToWorkingFldr": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_CorpTitle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_Disability_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_Disability",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DisabilityMappingTbl": {},
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseApplicantRecords": {},
									"OutputWorkingDisabilityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepDisabilityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_Disability')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_Ethnicity_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_Ethnicity",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"EthnicityMappingTbl": {},
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseApplicantRecords": {},
									"OutputWorkingEthnicityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepEthnicityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_Ethnicity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_Event_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_Event",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"EventMappingTbl": {},
									"DatabaseCoreRecords": {},
									"OutputWorkingEventMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepEventMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_Event')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_Gender_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_Gender",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"GenderMappingTbl": {},
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseApplicantRecords": {},
									"OutputWorkingEthnicityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepEthnicityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_Gender')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_LGTBQ_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_LGTBQ",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"LGTBQMappingTbl": {},
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseApplicantRecords": {},
									"OutputWorkinglgtbqMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepLGTBQMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_LGTBQ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_Location_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_Location",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"LocationMappingTbl": {},
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseReqRecords": {},
									"OutputWorkingEthnicityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepEthnicityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_Location')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Performance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_Performance",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_Performance",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PerfromanceRatingMapTbl": {},
									"Talent": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseTalentRecords": {},
									"OutputWorkingPerformanceMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepPerformanceMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_Performance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_ReqStatus_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_ReqStatus",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllReqData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ReqStatusMappingTbl": {},
									"DatabaseReqRecords": {},
									"OutputWorkingReqStatusMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepReqStatusMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_ReqStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_ReqType_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_ReqType",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllReqData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ReqTypeMappingTbl": {},
									"DatabaseReqRecords": {},
									"OutputWorkingReqTypeMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepReqTypeMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_ReqType')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Mapping_Veteran_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Mapping_Veteran",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"VeteranMappingTbl": {},
									"Applicant": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DatabaseCoreRecords": {},
									"DatabaseApplicantRecords": {},
									"OutputWorkingVeteranMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPrepVeteranMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Mapping Table Files"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Mapping_Veteran')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_All')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Output_Review_ApplicantId_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_ApplicantId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_BusHierarchy_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_BusHierarchy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_Columns_Core",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_Columns_Core",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_CorpTitle_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_CorpTitle",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_Duplicates_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_Duplicates",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_Ethnicity_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_Ethnicity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_Event_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_Event",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_Gender_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_Gender",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_Location_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_ManagerId_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_ManagerId",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_NullValues_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_NullValues",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_PerformanceRating_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_PerformanceRating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_WorkerID_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_WorkerID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_WorkerIdOverTime_Qtr",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_WorkerIdOverTime",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Output_Review_Columns_TA",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Output_Review_Columns_TA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"P_Client_Id": {
									"value": "@pipeline().parameters.P_Client_Id",
									"type": "Expression"
								},
								"P_Client_Dt": {
									"value": "@pipeline().parameters.P_Client_Dt",
									"type": "Expression"
								},
								"P_Folder_Year": {
									"value": "@pipeline().parameters.P_Folder_Year",
									"type": "Expression"
								},
								"P_Folder_Quarter": {
									"value": "@pipeline().parameters.P_Folder_Quarter",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T15:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Output_Review_ApplicantId')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_BusHierarchy')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_Columns_Core')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_CorpTitle')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_Duplicates')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_Ethnicity')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_Event')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_Gender')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_Location')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_ManagerId')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_NullValues')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_PerformanceRating')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_WorkerID')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_WorkerIdOverTime')]",
				"[concat(variables('factoryId'), '/pipelines/Output_Review_Columns_TA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_ApplicantId')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Output duplicates report to the audit folder for review.",
				"activities": [
					{
						"name": "DF_Review_ApplicantID",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_ApplicantID",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ApplicantTemplate": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputAudit": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_ApplicantID')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Review_BusHierarchy",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_BusHierarchy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"BusinessMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"BSOutputAllHierarchy": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"BSOutputLOBlvl1Hierarchy": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_BusHierarchy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_Columns_Core')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Review_Template_Column_Core",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Template_Column_Core",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Headcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Terminations": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Promotions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Hires": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"TalentAssessment": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"HeadcountColumnMapping": {},
									"HiresColumnMapping": {},
									"TerminationsColumnMapping": {},
									"PromotionsColumnMapping": {},
									"TalentAssessmentColumnMapping": {},
									"OutputColumnSummaryReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Template_Column_Core')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_Columns_TA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Review_Template_Column_TA",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Template_Column_TA",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RequisitionColumnMapping": {},
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"ApplicanrColumnMapping": {},
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Template_Column_TA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_CorpTitle_Review",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_CorpTitle",
								"type": "DataFlowReference",
								"parameters": {
									"TitleReview_ClientId": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"TitleReview_ClientDt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CorpTitleMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputCorpTitleReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_CorpTitle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_Duplicates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Output duplicates report to the audit folder for review.",
				"activities": [
					{
						"name": "DuplicateReview",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Duplicate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CorePromotions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Talent": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CoreHeadcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CoreTerminations": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CoreHires": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Other": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"DivSlates": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"EventDuplicatesReport": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Duplicate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Output audit file for ethnicity review.",
				"activities": [
					{
						"name": "EthnicityReview",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Ethnicity",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"EthnicityMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputEthnicityReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Ethnicity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_Event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EventSummaryReview",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_EventSummary",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputEventSummaryReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_EventSummary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_Gender')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenderReview",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Gender",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"GenderMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputEthnicityReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Gender')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_Location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LocationReview",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Location",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"LocationMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputEthnicityReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Location')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_ManagerId')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Output audit file for ethnicity review.",
				"activities": [
					{
						"name": "DF_Review_ManagerId",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_ManagerId",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CoreForHCT": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputMgrCountbyEvent": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_ManagerId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_NullValues')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Review_Nulls_Headcount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_Headcount",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreHeadcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_Nulls_TalentAssessment",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_TalentAssessment",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreTalent": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_Nulls_Hires",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_Hires",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreHires": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_Nulls_Promotions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_Promotions",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CorePromotions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_Nulls_Terminations",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_Terminations",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CoreTerminations": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_Nulls_Requisitions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_Requisitions",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Requisitions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_Nulls_Applicants",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_Applicants",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_Nulls_Other",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_Nulls_Other",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Applicants": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Review_NullValue_Qtr",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_NullValue",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputNullReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_Headcount')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_TalentAssessment')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_Hires')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_Promotions')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_Terminations')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_Requisitions')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_Applicants')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_Nulls_Other')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Review_NullValue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PerformanceReview",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_PerformanceRating",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AllCoreData": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"PerformanceMapping": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPeerformanceReview": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_PerformanceRating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_WorkerID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BS_WorkerIDReview",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_WorkerId",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Headcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Terminations": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Promotions": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Talent": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"Hires": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputTotalSummary": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputTermIDsNotInHeadcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputPromoIDsNotInHeadcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputTalentIDsNotInHeadcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"OutputHireIDsNotInHeadcount": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_WorkerId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Output_Review_WorkerIdOverTime')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflowWOrkerIDBetweenHCT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Review_WorkerId_HCT_Compare",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Core": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									},
									"CoreDB": {},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Create Audit Reports"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-11T23:59:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Review_WorkerId_HCT_Compare')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunFilesAndLoad_BLSTbl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BLS_Update_All",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BLS_Update_All",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load_BLSTbl",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "BLS_Update_All",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load_BLSTbl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-14T00:01:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BLS_Update_All')]",
				"[concat(variables('factoryId'), '/pipelines/Load_BLSTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST_Append_FactTbl_Req_Qtr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Full Load",
						"description": "Load Quarter data into database.  **IMPORTANT ** A full load will delete all prior table activity.",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Full_Load_Y_or_N,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Delete_Rec_FactTbl_Req",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Delete_All_Rec_FactTbl_Req",
											"type": "DataFlowReference",
											"parameters": {
												"Flow_Client_Id": {
													"value": "'@{pipeline().parameters.P_Client_Id}'",
													"type": "Expression"
												},
												"Flow_Client_Dt": {
													"value": "'@{pipeline().parameters.P_Client_Dt}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Requisition": {},
												"DeleteRecords": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Append_FactTbl_Req_Qtr",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Delete_Rec_FactTbl_Req",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Append_FactTbl_Req",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"Requisitions": {
													"Source_Client_Fldr": {
														"value": "@pipeline().parameters.P_Client_Id",
														"type": "Expression"
													},
													"Source_Client_Date": {
														"value": "@pipeline().parameters.P_Client_Dt",
														"type": "Expression"
													},
													"Source_Client_Year": {
														"value": "@pipeline().parameters.P_Client_Year",
														"type": "Expression"
													},
													"Source_Client_Quarter": {
														"value": "@pipeline().parameters.P_Client_Quarter",
														"type": "Expression"
													}
												},
												"AppendReqFact": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Delta Load",
						"description": "Load Quarter data into database.  **IMPORTANT ** A full load will delete all prior table activity.",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(pipeline().parameters.P_Full_Load_Y_or_N,'N')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Append_FactTbl_Req_Qtr_copy1",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Append_FactTbl_Req",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"Requisitions": {
													"Source_Client_Fldr": {
														"value": "@pipeline().parameters.P_Client_Id",
														"type": "Expression"
													},
													"Source_Client_Date": {
														"value": "@pipeline().parameters.P_Client_Dt",
														"type": "Expression"
													},
													"Source_Client_Year": {
														"value": "@pipeline().parameters.P_Client_Year",
														"type": "Expression"
													},
													"Source_Client_Quarter": {
														"value": "@pipeline().parameters.P_Client_Quarter",
														"type": "Expression"
													}
												},
												"AppendReqFact": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Client_Year": {
						"type": "string"
					},
					"P_Client_Quarter": {
						"type": "string"
					},
					"P_Full_Load_Y_or_N": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Database/Testing"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-12T16:53:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Delete_All_Rec_FactTbl_Req')]",
				"[concat(variables('factoryId'), '/dataflows/Append_FactTbl_Req')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Adhoc_OtherAnaylysis_Output",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Adhoc_OtherAnaylysis_Curr",
								"type": "DataFlowReference",
								"parameters": {
									"Flow_Client_Id": {
										"value": "'@{pipeline().parameters.P_Client_Id}'",
										"type": "Expression"
									},
									"Flow_Client_Dt": {
										"value": "'@{pipeline().parameters.P_Client_Dt}'",
										"type": "Expression"
									},
									"Flow_Folder_Year": {
										"value": "'@{pipeline().parameters.P_Folder_Year}'",
										"type": "Expression"
									},
									"Flow_Folder_Quarter": {
										"value": "'@{pipeline().parameters.P_Folder_Quarter}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AllOtherCore": {},
									"AllOtherTblAnalysis": {},
									"OtherCoreWorkers": {},
									"OtherCoreYear": {},
									"sink1": {
										"Source_Client_Fldr": {
											"value": "@pipeline().parameters.P_Client_Id",
											"type": "Expression"
										},
										"Source_Client_Date": {
											"value": "@pipeline().parameters.P_Client_Dt",
											"type": "Expression"
										},
										"Source_Client_Year": {
											"value": "@pipeline().parameters.P_Folder_Year",
											"type": "Expression"
										},
										"Source_Client_Quarter": {
											"value": "@concat('Q',pipeline().parameters.P_Folder_Quarter)",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_Client_Id": {
						"type": "string"
					},
					"P_Client_Dt": {
						"type": "string"
					},
					"P_Folder_Year": {
						"type": "string"
					},
					"P_Folder_Quarter": {
						"type": "string"
					}
				},
				"variables": {
					"tempCounter": {
						"type": "String"
					},
					"Counter": {
						"type": "String"
					},
					"T1_Type": {
						"type": "String"
					},
					"T1_Year": {
						"type": "String"
					},
					"T1_Quarter": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Adhoc_OtherAnaylysis_Curr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_AmerIndAlaskNat_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_AmerIndAlaskNat_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_AmerIndAlaskNat_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Female_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Female_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Male_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Male_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Total_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Total_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Female_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Female_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Male_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Male_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Total_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Total_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Latinx_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Latinx_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Latinx_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_NatHawPacIsl_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_NatHawPacIsl_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_NatHawPacIsl_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Female_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Other_Female_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Male_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Other_Male_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Total_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Other_Total_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_TwoOrMore_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_TwoOrMore_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_TwoOrMore_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Female_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Female_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Female.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Male_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Male_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Male.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_Hisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Total_Hisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_NonHisp_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Total_NonHisp.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_Tbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Table Source Files"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Total.csv",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "SourceId",
						"type": "String"
					},
					{
						"name": "Desc",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Latest",
						"type": "String"
					},
					{
						"name": "EthnicOrigin",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Headcount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DELETE_Source_Template_JobRequisition')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_JobRequisition",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template - TA.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Requisition Type",
						"type": "String"
					},
					{
						"name": "Posting Date",
						"type": "String"
					},
					{
						"name": "Requisition Status",
						"type": "String"
					},
					{
						"name": "Number of Openings",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Function",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work Office City",
						"type": "String"
					},
					{
						"name": "Work Office State",
						"type": "String"
					},
					{
						"name": "Work Office Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Hiring Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Primary Recruiter Worker ID",
						"type": "String"
					},
					{
						"name": "Requisition Other (1)",
						"type": "String"
					},
					{
						"name": "Requisition Other (2)",
						"type": "String"
					},
					{
						"name": "Requisition Other (3)",
						"type": "String"
					},
					{
						"name": "Requisition Other (4)",
						"type": "String"
					},
					{
						"name": "Requisition Other (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "myvariablevalue.txt",
						"folderPath": "Dogwood/7-31-2022/FactTbl/2022",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_AmerIndAlaskNat_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_AmerIndAlaskNat_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_AmerIndAlaskNat_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_AmerIndAlaskNat_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_AmerIndAlaskNat_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_AmerIndAlaskNat_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Female_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Female_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Male_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Male_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Total_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Asian_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Asian_Total_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Female_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Female_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Male_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Male_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Total_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Black_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Black_Total_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Latinx_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Latinx_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Latinx_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Latinx_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Latinx_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Latinx_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_NatHawPacIsl_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_NatHawPacIsl_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_NatHawPacIsl_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_NatHawPacIsl_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_NatHawPacIsl_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_NatHawPacIsl_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Other_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Other_Female_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Other_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Other_Male_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Other_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Other_Total_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_TwoOrMore_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_TwoOrMore_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_TwoOrMore_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_TwoOrMore_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_TwoOrMore_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_TwoOrMore_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Female')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Female",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Female_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Female_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Male')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Male",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Male_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Male_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Total')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Total",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Total_Hisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_BLS_White_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS/BLS Json Source Files"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BLS_White_Total_NonHisp",
						"folderPath": "External Data/BLS",
						"container": "processing"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string"
						},
						"responseTime": {
							"type": "integer"
						},
						"message": {
							"type": "array"
						},
						"Results": {
							"type": "object",
							"properties": {
								"series": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"seriesID": {
												"type": "string"
											},
											"data": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"year": {
															"type": "string"
														},
														"period": {
															"type": "string"
														},
														"periodName": {
															"type": "string"
														},
														"latest": {
															"type": "string"
														},
														"value": {
															"type": "string"
														},
														"footnotes": {
															"type": "array",
															"items": {
																"type": "object"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessingFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_AnalysisTblFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Analysis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Analysis/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_AuditFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Audit"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Audit/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_BLS_Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "External Data/BLS",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_BLS_Site')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference",
					"parameters": {
						"SeriesId": {
							"value": "@dataset().SeriesId",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SeriesId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Binary_CoreTemplate_ProcessingFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template.xlsx",
						"container": "processing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Binary_OtherTemplate_ProcessingFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template (Other).xlsx",
						"container": "processing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Binary_TalentAcqTemplate_ProcessingFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template - TA.xlsx",
						"container": "processing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Binary_TemplatesFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),\nconcat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_ColumnMapping_Applicant')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Applicant",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_ColumnMapping_Headcount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Headcount",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_ColumnMapping_Hires')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Hires",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_ColumnMapping_Promotions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Promotions",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_ColumnMapping_Requisition')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Requisition",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_ColumnMapping_TalentAssessment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "TalentAssessment",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_ColumnMapping_Terminations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Terminations",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTblFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_AllCoreData_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CoreFctTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Engagement Type",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "EventMonth",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Code",
						"type": "String"
					},
					{
						"name": "Event Type",
						"type": "String"
					},
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "Event Reason",
						"type": "String"
					},
					{
						"name": "Worker Status",
						"type": "String"
					},
					{
						"name": "Worker Type",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Family/Function",
						"type": "String"
					},
					{
						"name": "Years in Job",
						"type": "String"
					},
					{
						"name": "Previous Job Title",
						"type": "String"
					},
					{
						"name": "Previous Job Family/Function",
						"type": "String"
					},
					{
						"name": "Original Hire Date",
						"type": "String"
					},
					{
						"name": "Current Hire Date",
						"type": "String"
					},
					{
						"name": "Years of Service",
						"type": "String"
					},
					{
						"name": "Years of Service Band",
						"type": "String"
					},
					{
						"name": "Years of Service Sort ID",
						"type": "String"
					},
					{
						"name": "Last Promo Date",
						"type": "String"
					},
					{
						"name": "Rehire Indicator",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Previous Corporate Title",
						"type": "String"
					},
					{
						"name": "Manager Indicator",
						"type": "String"
					},
					{
						"name": "Direct Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work City",
						"type": "String"
					},
					{
						"name": "Work State",
						"type": "String"
					},
					{
						"name": "Work Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Legacy Organization",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Birth Year",
						"type": "String"
					},
					{
						"name": "Generation Desc",
						"type": "String"
					},
					{
						"name": "Generation Sort ID",
						"type": "String"
					},
					{
						"name": "EmpCount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_ApplStatus_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "TAApplStatusFactTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Applicant ID",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "EventMonth",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Applicant Type",
						"type": "String"
					},
					{
						"name": "Elloree Applicant Final Disposition",
						"type": "String"
					},
					{
						"name": "Elloree Applicant Category",
						"type": "String"
					},
					{
						"name": "Elloree Submitted to Mgr Fl",
						"type": "String"
					},
					{
						"name": "Elloree Race",
						"type": "String"
					},
					{
						"name": "Elloree Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Elloree Gender",
						"type": "String"
					},
					{
						"name": "Applicant",
						"type": "String"
					},
					{
						"name": "White Appl",
						"type": "String"
					},
					{
						"name": "Black Appl",
						"type": "String"
					},
					{
						"name": "Latinx Appl",
						"type": "String"
					},
					{
						"name": "Asian Appl",
						"type": "String"
					},
					{
						"name": "Two or More Appl",
						"type": "String"
					},
					{
						"name": "Other Appl",
						"type": "String"
					},
					{
						"name": "DNSID Appl",
						"type": "String"
					},
					{
						"name": "Female Appl",
						"type": "String"
					},
					{
						"name": "PoC Appl",
						"type": "String"
					},
					{
						"name": "Male Appl",
						"type": "String"
					},
					{
						"name": "Other Gender Appl",
						"type": "String"
					},
					{
						"name": "DNSID Gender Appl",
						"type": "String"
					},
					{
						"name": "Diverse Applicant",
						"type": "String"
					},
					{
						"name": "Applicant Rejected by HR",
						"type": "String"
					},
					{
						"name": "Applicant Withdrew",
						"type": "String"
					},
					{
						"name": "Candidate",
						"type": "String"
					},
					{
						"name": "Candidate Rejected by HR",
						"type": "String"
					},
					{
						"name": "Candidate StM",
						"type": "String"
					},
					{
						"name": "Candidate Rejected by HM",
						"type": "String"
					},
					{
						"name": "Candidate Interviewed",
						"type": "String"
					},
					{
						"name": "Candidate Hired",
						"type": "String"
					},
					{
						"name": "Candidate Withdrew",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_Applicant_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ApplicantTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "EventMonth",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Applicant ID",
						"type": "String"
					},
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "Applicant Type",
						"type": "String"
					},
					{
						"name": "Internal Worker ID",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Applicant Final Disposition",
						"type": "String"
					},
					{
						"name": "Applicant Step Before Final Disposition",
						"type": "String"
					},
					{
						"name": "Applicant Rejected Reason",
						"type": "String"
					},
					{
						"name": "Applicant Other (1)",
						"type": "String"
					},
					{
						"name": "Applicant Other (2)",
						"type": "String"
					},
					{
						"name": "Applicant Other (3)",
						"type": "String"
					},
					{
						"name": "Applicant Other (4)",
						"type": "String"
					},
					{
						"name": "Applicant Other (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_DivSlate_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "TASlateFactTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Candidates StM",
						"type": "String"
					},
					{
						"name": "External Candidates StM",
						"type": "String"
					},
					{
						"name": "Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Candidates Hired",
						"type": "String"
					},
					{
						"name": "White Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal White Candidates StM",
						"type": "String"
					},
					{
						"name": "External White Candidates StM",
						"type": "String"
					},
					{
						"name": "White Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal White Candidates Hired",
						"type": "String"
					},
					{
						"name": "External White Candidates Hired",
						"type": "String"
					},
					{
						"name": "Black Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Black Candidates StM",
						"type": "String"
					},
					{
						"name": "External Black Candidates StM",
						"type": "String"
					},
					{
						"name": "Black Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Black Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Black Candidates Hired",
						"type": "String"
					},
					{
						"name": "Latinx Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Latinx Candidates StM",
						"type": "String"
					},
					{
						"name": "External Latinx Candidates StM",
						"type": "String"
					},
					{
						"name": "Latinx Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Latinx Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Latinx Candidates Hired",
						"type": "String"
					},
					{
						"name": "Asian Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Asian Candidates StM",
						"type": "String"
					},
					{
						"name": "External Asian Candidates StM",
						"type": "String"
					},
					{
						"name": "Asian Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Asian Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Asian Candidates Hired",
						"type": "String"
					},
					{
						"name": "2+ Races Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal 2+ Races Candidates StM",
						"type": "String"
					},
					{
						"name": "External 2+ Races Candidates StM",
						"type": "String"
					},
					{
						"name": "2+ Races Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal 2+ Races Candidates Hired",
						"type": "String"
					},
					{
						"name": "External 2+ Races Candidates Hired",
						"type": "String"
					},
					{
						"name": "Other Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Other Candidates StM",
						"type": "String"
					},
					{
						"name": "External Other Candidates StM",
						"type": "String"
					},
					{
						"name": "Other Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Other Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Other Candidates Hired",
						"type": "String"
					},
					{
						"name": "Male Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Male Candidates StM",
						"type": "String"
					},
					{
						"name": "External Male Candidates StM",
						"type": "String"
					},
					{
						"name": "Male Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Male Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Male Candidates Hired",
						"type": "String"
					},
					{
						"name": "Female Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Female Candidates StM",
						"type": "String"
					},
					{
						"name": "External Female Candidates StM",
						"type": "String"
					},
					{
						"name": "Female Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Female Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Female Candidates Hired",
						"type": "String"
					},
					{
						"name": "Other Gender Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Other Gender Candidates StM",
						"type": "String"
					},
					{
						"name": "External Other Gender Candidates StM",
						"type": "String"
					},
					{
						"name": "Other Gender Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Other Gender Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Other Gender Candidates Hired",
						"type": "String"
					},
					{
						"name": "PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "External PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "PoC  Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal PoC  Candidates Hired",
						"type": "String"
					},
					{
						"name": "External PoC  Candidates Hired",
						"type": "String"
					},
					{
						"name": "Diverse Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Diverse Candidates StM",
						"type": "String"
					},
					{
						"name": "External Diverse Candidates StM",
						"type": "String"
					},
					{
						"name": "Diverse Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Diverse Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Diverse Candidates Hired",
						"type": "String"
					},
					{
						"name": "Female Not PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Female Not PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "External Female Not PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Female Not PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Female Not PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Female Not PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Female PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Female PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "External Female PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Female PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Female PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Female PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Not Female PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Not Female PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "External Not Female PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Not Female PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Not Female PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Not Female PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Not Female Not PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Internal Not Female Not PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "External Not Female Not PoC Candidates StM",
						"type": "String"
					},
					{
						"name": "Not Female Not PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Internal Not Female Not PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "External Not Female Not PoC Candidates Hired",
						"type": "String"
					},
					{
						"name": "Diverse Slate",
						"type": "String"
					},
					{
						"name": "Internal Diverse Slate",
						"type": "String"
					},
					{
						"name": "External Diverse Slate",
						"type": "String"
					},
					{
						"name": "No Diverse Slate",
						"type": "String"
					},
					{
						"name": "Internal No Diverse Slate",
						"type": "String"
					},
					{
						"name": "External No Diverse Slate",
						"type": "String"
					},
					{
						"name": "Diverse Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal Diverse Hired Slate",
						"type": "String"
					},
					{
						"name": "External Diverse Hired Slate",
						"type": "String"
					},
					{
						"name": "PoC Slate",
						"type": "String"
					},
					{
						"name": "Internal PoC Slate",
						"type": "String"
					},
					{
						"name": "External PoC Slate",
						"type": "String"
					},
					{
						"name": "No PoC Slate",
						"type": "String"
					},
					{
						"name": "Internal No PoC Slate",
						"type": "String"
					},
					{
						"name": "External No PoC Slate",
						"type": "String"
					},
					{
						"name": "PoC Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal PoC Hired Slate",
						"type": "String"
					},
					{
						"name": "External PoC Hired Slate",
						"type": "String"
					},
					{
						"name": "White Slate",
						"type": "String"
					},
					{
						"name": "Internal White Slate",
						"type": "String"
					},
					{
						"name": "External White Slate",
						"type": "String"
					},
					{
						"name": "No White Slate",
						"type": "String"
					},
					{
						"name": "Internal No White Slate",
						"type": "String"
					},
					{
						"name": "External No White Slate",
						"type": "String"
					},
					{
						"name": "White Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal White Hired Slate",
						"type": "String"
					},
					{
						"name": "External White Hired Slate",
						"type": "String"
					},
					{
						"name": "Black Slate",
						"type": "String"
					},
					{
						"name": "Internal Black Slate",
						"type": "String"
					},
					{
						"name": "External Black Slate",
						"type": "String"
					},
					{
						"name": "No Black Slate",
						"type": "String"
					},
					{
						"name": "Internal No Black Slate",
						"type": "String"
					},
					{
						"name": "External No Black Slate",
						"type": "String"
					},
					{
						"name": "Black Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal Black Hired Slate",
						"type": "String"
					},
					{
						"name": "External Black Hired Slate",
						"type": "String"
					},
					{
						"name": "Latinx Slate",
						"type": "String"
					},
					{
						"name": "Internal Latinx Slate",
						"type": "String"
					},
					{
						"name": "External Latinx Slate",
						"type": "String"
					},
					{
						"name": "No Latinx Slate",
						"type": "String"
					},
					{
						"name": "Internal No Latinx Slate",
						"type": "String"
					},
					{
						"name": "External No Latinx Slate",
						"type": "String"
					},
					{
						"name": "Latinx Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal Latinx Hired Slate",
						"type": "String"
					},
					{
						"name": "External Latinx Hired Slate",
						"type": "String"
					},
					{
						"name": "Asian Slate",
						"type": "String"
					},
					{
						"name": "Internal Asian Slate",
						"type": "String"
					},
					{
						"name": "External Asian Slate",
						"type": "String"
					},
					{
						"name": "No Asian Slate",
						"type": "String"
					},
					{
						"name": "Internal No Asian Slate",
						"type": "String"
					},
					{
						"name": "External No Asian Slate",
						"type": "String"
					},
					{
						"name": "Asian Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal Asian Hired Slate",
						"type": "String"
					},
					{
						"name": "External Asian Hired Slate",
						"type": "String"
					},
					{
						"name": "2+ Races Slate",
						"type": "String"
					},
					{
						"name": "Internal 2+ Races Slate",
						"type": "String"
					},
					{
						"name": "External 2+ Races Slate",
						"type": "String"
					},
					{
						"name": "No 2+ Races Slate",
						"type": "String"
					},
					{
						"name": "Internal No 2+ Races Slate",
						"type": "String"
					},
					{
						"name": "External No 2+ Races Slate",
						"type": "String"
					},
					{
						"name": "2+ Races Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal 2+ Races Hired Slate",
						"type": "String"
					},
					{
						"name": "External 2+ Races Hired Slate",
						"type": "String"
					},
					{
						"name": "Other Race Slate",
						"type": "String"
					},
					{
						"name": "Internal Other Race Slate",
						"type": "String"
					},
					{
						"name": "External Other Race Slate",
						"type": "String"
					},
					{
						"name": "No Other Race Slate",
						"type": "String"
					},
					{
						"name": "Internal No Other Race Slate",
						"type": "String"
					},
					{
						"name": "External No Other Race Slate",
						"type": "String"
					},
					{
						"name": "Other Race Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal Other Race Hired Slate",
						"type": "String"
					},
					{
						"name": "External Other Race Hired Slate",
						"type": "String"
					},
					{
						"name": "Female Slate",
						"type": "String"
					},
					{
						"name": "Internal Female Slate",
						"type": "String"
					},
					{
						"name": "External Female Slate",
						"type": "String"
					},
					{
						"name": "No Female Slate",
						"type": "String"
					},
					{
						"name": "Internal No Female Slate",
						"type": "String"
					},
					{
						"name": "External No Female Slate",
						"type": "String"
					},
					{
						"name": "Female Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal Female Hired Slate",
						"type": "String"
					},
					{
						"name": "External Female Hired Slate",
						"type": "String"
					},
					{
						"name": "Male Slate",
						"type": "String"
					},
					{
						"name": "Internal Male Slate",
						"type": "String"
					},
					{
						"name": "External Male Slate",
						"type": "String"
					},
					{
						"name": "No Male Slate",
						"type": "String"
					},
					{
						"name": "Internal No Male Slate",
						"type": "String"
					},
					{
						"name": "External No Male Slate",
						"type": "String"
					},
					{
						"name": "Male Hired Slate",
						"type": "String"
					},
					{
						"name": "Internal Male Hired Slate",
						"type": "String"
					},
					{
						"name": "External Male Hired Slate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_JobReq_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ReqTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Engagement Type",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "EventMonth",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "EventId",
						"type": "String"
					},
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Requisition Type",
						"type": "String"
					},
					{
						"name": "Posting Date",
						"type": "String"
					},
					{
						"name": "Requisition Status",
						"type": "String"
					},
					{
						"name": "Number of Openings",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Function",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work Office City",
						"type": "String"
					},
					{
						"name": "Work Office State",
						"type": "String"
					},
					{
						"name": "Work Office Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Hiring Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Primary Recruiter Worker ID",
						"type": "String"
					},
					{
						"name": "Requisition Other (1)",
						"type": "String"
					},
					{
						"name": "Requisition Other (2)",
						"type": "String"
					},
					{
						"name": "Requisition Other (3)",
						"type": "String"
					},
					{
						"name": "Requisition Other (4)",
						"type": "String"
					},
					{
						"name": "Requisition Other (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_Json_PipelineResult')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),\nconcat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "proessing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_OtherCore_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OthrCoreFlexTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "EventMonth",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event ID",
						"type": "String"
					},
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "Event (Type)",
						"type": "String"
					},
					{
						"name": "Event (Desc)",
						"type": "String"
					},
					{
						"name": "Other (Char Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Char Value 2)",
						"type": "String"
					},
					{
						"name": "Other (Num Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Num Value 2)",
						"type": "String"
					},
					{
						"name": "Other (Date Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Date Value 2)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_PerRatingHistory_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PerformanceHistoryFactTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Last Performance Year",
						"type": "String"
					},
					{
						"name": "Last Performance Rating Date",
						"type": "String"
					},
					{
						"name": "Last Client Performance Rating",
						"type": "String"
					},
					{
						"name": "Last Elloree Performance Rating",
						"type": "String"
					},
					{
						"name": "Last Elloree Performance Rating Sort Id",
						"type": "String"
					},
					{
						"name": "Last Top Talent Ind",
						"type": "String"
					},
					{
						"name": "Curr Performance Year",
						"type": "String"
					},
					{
						"name": "Curr Performance Rating Date",
						"type": "String"
					},
					{
						"name": "Curr Talent Tag",
						"type": "String"
					},
					{
						"name": "Curr Client Performance Rating",
						"type": "String"
					},
					{
						"name": "Curr Elloree Performance Rating",
						"type": "String"
					},
					{
						"name": "Curr Elloree Performance Rating Sort Id",
						"type": "String"
					},
					{
						"name": "Curr Top Talent Ind",
						"type": "String"
					},
					{
						"name": "P1 Performance Year",
						"type": "String"
					},
					{
						"name": "P1 Performance Rating Date",
						"type": "String"
					},
					{
						"name": "P1 Client Performance Rating",
						"type": "String"
					},
					{
						"name": "P1 Elloree Performance Rating",
						"type": "String"
					},
					{
						"name": "P1 Elloree Performance Rating Sort Id",
						"type": "String"
					},
					{
						"name": "P1 Top Talent Ind",
						"type": "String"
					},
					{
						"name": "P2 Performance Year",
						"type": "String"
					},
					{
						"name": "P2 Client Performance Rating",
						"type": "String"
					},
					{
						"name": "P2 Performance Rating Date",
						"type": "String"
					},
					{
						"name": "P2 Elloree Performance Rating",
						"type": "String"
					},
					{
						"name": "P2 Elloree Performance Rating Sort Id",
						"type": "String"
					},
					{
						"name": "P2 Top Talent Ind",
						"type": "String"
					},
					{
						"name": "P3 Performance Year",
						"type": "String"
					},
					{
						"name": "P3 Client Performance Rating",
						"type": "String"
					},
					{
						"name": "P3 Performance Rating Date",
						"type": "String"
					},
					{
						"name": "P3 Elloree Performance Rating",
						"type": "String"
					},
					{
						"name": "P3 Elloree Performance Rating Sort Id",
						"type": "String"
					},
					{
						"name": "P3 Top Talent Ind",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_Pipeline_ApplFail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PipelineApplFctTbl_Worksheet.txt",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_SilverMedalist_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SilverMedalistFactTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Applicant ID",
						"type": "String"
					},
					{
						"name": "Internal Worker ID",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Silver Medalist Ind",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_Speedbumps_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "SpeedbumpsFactTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Core Event Id",
						"type": "String"
					},
					{
						"name": "Core Event Quarter",
						"type": "String"
					},
					{
						"name": "Core Event Date",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Speedbump Worker Status",
						"type": "String"
					},
					{
						"name": "Speedbump Population Ind",
						"type": "String"
					},
					{
						"name": "Speedbump 1 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 1 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 1 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 2 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 2 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 2 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 3 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 3 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 3 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 4 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 4 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 4 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 5 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 5 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 5 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 6 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 6 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 6 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 7 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 7 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 7 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 8 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 8 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 8 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 9 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 9 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 9 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 10 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 10 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 10 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 11 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 11 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 11 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 12 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 12 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 12 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 13 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 13 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 13 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 14 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 14 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 14 Flag",
						"type": "String"
					},
					{
						"name": "Speedbump 15 Name",
						"type": "String"
					},
					{
						"name": "Speedbump 15 Desc",
						"type": "String"
					},
					{
						"name": "Speedbump 15 Flag",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_TalentData_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "TalentFactTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "Event Type",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Performance Rating",
						"type": "String"
					},
					{
						"name": "Performance Rating Date",
						"type": "String"
					},
					{
						"name": "Talent Identifier (1)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (2)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (3)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (4)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_FactTbl_YearRef_File')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Fact Table"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "YearRefTbl.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('FactTbl/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "CurrEventYear",
						"type": "String"
					},
					{
						"name": "P1EventYear",
						"type": "String"
					},
					{
						"name": "P2EventYear",
						"type": "String"
					},
					{
						"name": "P3EventYear",
						"type": "String"
					},
					{
						"name": "P4EventYear",
						"type": "String"
					},
					{
						"name": "P5EventYear",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_MappingPrepFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Prep')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_MappingWorkingFldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_Applicant')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "applflow_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Applicant Final Disposition",
						"type": "String"
					},
					{
						"name": "Client Applicant Step Before Final Disposition",
						"type": "String"
					},
					{
						"name": "Client Applicant Rejected Reason",
						"type": "String"
					},
					{
						"name": "Elloree Applicant Final Disposition",
						"type": "String"
					},
					{
						"name": "Elloree Applicant Category",
						"type": "String"
					},
					{
						"name": "Elloree Submitted to Mgr Fl",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Applicant Final Disposition",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Applicant Category",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Submitted to Mgr Fl",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2021 Job Applicant",
						"type": "String"
					},
					{
						"name": "2022 Job Applicant",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "business_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Client Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Client Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Client Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Elloree Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Elloree Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Elloree Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Elloree Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Hire",
						"type": "String"
					},
					{
						"name": "2018 Promo",
						"type": "String"
					},
					{
						"name": "2018 Term",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2019 Hire",
						"type": "String"
					},
					{
						"name": "2019 Promo",
						"type": "String"
					},
					{
						"name": "2019 Term",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "corp_title_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Corporate Title",
						"type": "String"
					},
					{
						"name": "Elloree Corporate Title",
						"type": "String"
					},
					{
						"name": "Client Elloree Corporate Title",
						"type": "String"
					},
					{
						"name": "Elloree Corporate Title Sort",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Corporate Title",
						"type": "String"
					},
					{
						"name": "Suggested Client Elloree Corporate Title",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Corporate Title Sort",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount Curr Title",
						"type": "String"
					},
					{
						"name": "2017 Headcount Prev Title",
						"type": "String"
					},
					{
						"name": "2018 Headcount Curr Title",
						"type": "String"
					},
					{
						"name": "2018 Headcount Prev Title",
						"type": "String"
					},
					{
						"name": "2018 Hire Curr Title",
						"type": "String"
					},
					{
						"name": "2018 Hire Prev Title",
						"type": "String"
					},
					{
						"name": "2018 Promo Curr Title",
						"type": "String"
					},
					{
						"name": "2018 Promo Prev Title",
						"type": "String"
					},
					{
						"name": "2018 Term Curr Title",
						"type": "String"
					},
					{
						"name": "2018 Term Prev Title",
						"type": "String"
					},
					{
						"name": "2019 Headcount Curr Title",
						"type": "String"
					},
					{
						"name": "2019 Headcount Prev Title",
						"type": "String"
					},
					{
						"name": "2019 Hire Curr Title",
						"type": "String"
					},
					{
						"name": "2019 Hire Prev Title",
						"type": "String"
					},
					{
						"name": "2019 Promo Curr Title",
						"type": "String"
					},
					{
						"name": "2019 Promo Prev Title",
						"type": "String"
					},
					{
						"name": "2019 Term Curr Title",
						"type": "String"
					},
					{
						"name": "2019 Term Prev Title",
						"type": "String"
					},
					{
						"name": "2020 Headcount Curr Title",
						"type": "String"
					},
					{
						"name": "2020 Headcount Prev Title",
						"type": "String"
					},
					{
						"name": "2020 Hire Curr Title",
						"type": "String"
					},
					{
						"name": "2020 Hire Prev Title",
						"type": "String"
					},
					{
						"name": "2020 Promo Curr Title",
						"type": "String"
					},
					{
						"name": "2020 Promo Prev Title",
						"type": "String"
					},
					{
						"name": "2020 Term Curr Title",
						"type": "String"
					},
					{
						"name": "2020 Term Prev Title",
						"type": "String"
					},
					{
						"name": "2021 Headcount Curr Title",
						"type": "String"
					},
					{
						"name": "2021 Headcount Prev Title",
						"type": "String"
					},
					{
						"name": "2021 Hire Curr Title",
						"type": "String"
					},
					{
						"name": "2021 Hire Prev Title",
						"type": "String"
					},
					{
						"name": "2021 Promo Curr Title",
						"type": "String"
					},
					{
						"name": "2021 Promo Prev Title",
						"type": "String"
					},
					{
						"name": "2021 Term Curr Title",
						"type": "String"
					},
					{
						"name": "2021 Term Prev Title",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "disability_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Disability Ind",
						"type": "String"
					},
					{
						"name": "Elloree Disability Ind",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Disability Ind",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Hire",
						"type": "String"
					},
					{
						"name": "2018 Promo",
						"type": "String"
					},
					{
						"name": "2018 Term",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2019 Hire",
						"type": "String"
					},
					{
						"name": "2019 Promo",
						"type": "String"
					},
					{
						"name": "2019 Term",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ethnicity_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Race",
						"type": "String"
					},
					{
						"name": "Client Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Elloree Race",
						"type": "String"
					},
					{
						"name": "Elloree Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Race",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Hire",
						"type": "String"
					},
					{
						"name": "2018 Promo",
						"type": "String"
					},
					{
						"name": "2018 Term",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2019 Hire",
						"type": "String"
					},
					{
						"name": "2019 Promo",
						"type": "String"
					},
					{
						"name": "2019 Term",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "event_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Event",
						"type": "String"
					},
					{
						"name": "Client Event Type",
						"type": "String"
					},
					{
						"name": "Client Event Reason",
						"type": "String"
					},
					{
						"name": "Elloree Event",
						"type": "String"
					},
					{
						"name": "Elloree Event Type",
						"type": "String"
					},
					{
						"name": "Elloree Event Reason",
						"type": "String"
					},
					{
						"name": "Elloree Termination Reason",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Event",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Event Type",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Event Reason",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Termination Reason",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					},
					{
						"name": "2022 Headcount",
						"type": "String"
					},
					{
						"name": "2022 Hire",
						"type": "String"
					},
					{
						"name": "2022 Promo",
						"type": "String"
					},
					{
						"name": "2022 Term",
						"type": "String"
					},
					{
						"name": "2023 Promo",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "gender_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Gender",
						"type": "String"
					},
					{
						"name": "Elloree Gender",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Gender",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Hire",
						"type": "String"
					},
					{
						"name": "2018 Promo",
						"type": "String"
					},
					{
						"name": "2018 Term",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2019 Hire",
						"type": "String"
					},
					{
						"name": "2019 Promo",
						"type": "String"
					},
					{
						"name": "2019 Term",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "lgtbq_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client LGTBQ",
						"type": "String"
					},
					{
						"name": "Elloree LGTBQ",
						"type": "String"
					},
					{
						"name": "Suggested Elloree LGTBQ",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Hire",
						"type": "String"
					},
					{
						"name": "2018 Promo",
						"type": "String"
					},
					{
						"name": "2018 Term",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2019 Hire",
						"type": "String"
					},
					{
						"name": "2019 Promo",
						"type": "String"
					},
					{
						"name": "2019 Term",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "location_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Work Office Location",
						"type": "String"
					},
					{
						"name": "Client Work City",
						"type": "String"
					},
					{
						"name": "Client Work State",
						"type": "String"
					},
					{
						"name": "Client Work Country",
						"type": "String"
					},
					{
						"name": "Client Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Elloree Work Ofiice",
						"type": "String"
					},
					{
						"name": "Elloree Work City",
						"type": "String"
					},
					{
						"name": "Elloree Work State",
						"type": "String"
					},
					{
						"name": "Elloree Work Region",
						"type": "String"
					},
					{
						"name": "Elloree Work Country",
						"type": "String"
					},
					{
						"name": "Elloree Strategic Location",
						"type": "String"
					},
					{
						"name": "Elloree Location Sort Id",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Work City",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Work State",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Work Country",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Work Region",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Strategic Location",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Location Sort Id",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Hire",
						"type": "String"
					},
					{
						"name": "2018 Promo",
						"type": "String"
					},
					{
						"name": "2018 Term",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2019 Hire",
						"type": "String"
					},
					{
						"name": "2019 Promo",
						"type": "String"
					},
					{
						"name": "2019 Term",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "perf_rating_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Performance Rating",
						"type": "String"
					},
					{
						"name": "Elloree Performance Rating",
						"type": "String"
					},
					{
						"name": "Elloree Performance Rating Sort",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Performance Rating",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Performane Rating Sort Id",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Talent Assessment",
						"type": "String"
					},
					{
						"name": "2018 Talent Assessment",
						"type": "String"
					},
					{
						"name": "2019 Talent Assessment",
						"type": "String"
					},
					{
						"name": "2020 Talent Assessment",
						"type": "String"
					},
					{
						"name": "2021 Talent Assessment",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "reqstatus_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Requisition Status",
						"type": "String"
					},
					{
						"name": "Elloree Requisition Status",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Requisition Status",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2021 Requisition",
						"type": "String"
					},
					{
						"name": "2022 Requisition",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "reqtype_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Requisition Type",
						"type": "String"
					},
					{
						"name": "Elloree Requisition Type",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Requisition Type",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2021 Job Requisition",
						"type": "String"
					},
					{
						"name": "2022 Job Requisition",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "veteran_mapping.csv",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/Mapping/',concat(concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter),'/Working')))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Client ID",
						"type": "String"
					},
					{
						"name": "Client Engagement Date",
						"type": "String"
					},
					{
						"name": "Client Veteran",
						"type": "String"
					},
					{
						"name": "Elloree Veteran",
						"type": "String"
					},
					{
						"name": "Suggested Elloree Veteran",
						"type": "String"
					},
					{
						"name": "Suggested Source",
						"type": "String"
					},
					{
						"name": "2017 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Headcount",
						"type": "String"
					},
					{
						"name": "2018 Hire",
						"type": "String"
					},
					{
						"name": "2018 Promo",
						"type": "String"
					},
					{
						"name": "2018 Term",
						"type": "String"
					},
					{
						"name": "2019 Headcount",
						"type": "String"
					},
					{
						"name": "2019 Hire",
						"type": "String"
					},
					{
						"name": "2019 Promo",
						"type": "String"
					},
					{
						"name": "2019 Term",
						"type": "String"
					},
					{
						"name": "2020 Headcount",
						"type": "String"
					},
					{
						"name": "2020 Hire",
						"type": "String"
					},
					{
						"name": "2020 Promo",
						"type": "String"
					},
					{
						"name": "2020 Term",
						"type": "String"
					},
					{
						"name": "2021 Headcount",
						"type": "String"
					},
					{
						"name": "2021 Hire",
						"type": "String"
					},
					{
						"name": "2021 Promo",
						"type": "String"
					},
					{
						"name": "2021 Term",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_TalentAssessmentColumnMapping')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "TalentAssessment",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "column_mapping.xlsx",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Sort Id",
						"type": "String"
					},
					{
						"name": "Column Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Admin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Mapping"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Template Admin",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Analysis_OtherTbl_1P')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Analysis"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OtherCoreTableAnalysis_Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Analysis/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))\n",
							"type": "Expression"
						},
						"container": "processing"
					},
					"sheetIndex": 1,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Analysis_OtherTbl_2P')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Analysis"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OtherCoreTableAnalysis_Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Analysis/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))\n",
							"type": "Expression"
						},
						"container": "processing"
					},
					"sheetIndex": 2,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Analysis_OtherTbl_3P')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Analysis"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OtherCoreTableAnalysis_Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Analysis/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))\n",
							"type": "Expression"
						},
						"container": "processing"
					},
					"sheetIndex": 3,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Analysis_OtherTbl_Curr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Analysis"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OtherCoreTableAnalysis_Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Analysis/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))\n",
							"type": "Expression"
						},
						"container": "processing"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Quarter",
						"type": "String"
					},
					{
						"name": "Notes",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Applicant_Append')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"AppendFileName": {
						"type": "string",
						"defaultValue": "Elloree Data Submission Template - TA.xlsx"
					},
					"WorkSheetName": {
						"type": "string",
						"defaultValue": "DATA_JobApplicants"
					},
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().WorkSheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().AppendFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Applicant ID",
						"type": "String"
					},
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "Applicant Type",
						"type": "String"
					},
					{
						"name": "Internal Worker ID",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Applicant Final Disposition",
						"type": "String"
					},
					{
						"name": "Applicant Step Before Final Disposition",
						"type": "String"
					},
					{
						"name": "Applicant Rejected Reason",
						"type": "String"
					},
					{
						"name": "Applicant Other (1)",
						"type": "String"
					},
					{
						"name": "Applicant Other (2)",
						"type": "String"
					},
					{
						"name": "Applicant Other (3)",
						"type": "String"
					},
					{
						"name": "Applicant Other (4)",
						"type": "String"
					},
					{
						"name": "Applicant Other (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Fldr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Headcount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_Headcount",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Worker Status",
						"type": "String"
					},
					{
						"name": "Worker Type",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Family/Function",
						"type": "String"
					},
					{
						"name": "Years in Job",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Manager Indicator",
						"type": "String"
					},
					{
						"name": "Direct Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Legacy Organization",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work City",
						"type": "String"
					},
					{
						"name": "Work State",
						"type": "String"
					},
					{
						"name": "Work Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Original Hire Date",
						"type": "String"
					},
					{
						"name": "Current Hire Date",
						"type": "String"
					},
					{
						"name": "Years of Service",
						"type": "String"
					},
					{
						"name": "Last Promo Date",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Birth Year",
						"type": "String"
					},
					{
						"name": "Generation Desc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Hires')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to template to pull hires tab.",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_Hire",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Event Type",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Worker Type",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Family/Function",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Manager Indicator",
						"type": "String"
					},
					{
						"name": "Direct Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Legacy Organization",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work City",
						"type": "String"
					},
					{
						"name": "Work State",
						"type": "String"
					},
					{
						"name": "Work Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Original Hire Date",
						"type": "String"
					},
					{
						"name": "Current Hire Date",
						"type": "String"
					},
					{
						"name": "Rehire Indicator",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Birth Year",
						"type": "String"
					},
					{
						"name": "Generation Desc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_JobApplicants')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_JobApplicants",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template - TA.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Applicant ID",
						"type": "String"
					},
					{
						"name": "Source",
						"type": "String"
					},
					{
						"name": "Applicant Type",
						"type": "String"
					},
					{
						"name": "Internal Worker ID",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Applicant Final Disposition",
						"type": "String"
					},
					{
						"name": "Applicant Step Before Final Disposition",
						"type": "String"
					},
					{
						"name": "Applicant Rejected Reason",
						"type": "String"
					},
					{
						"name": "Applicant Other (1)",
						"type": "String"
					},
					{
						"name": "Applicant Other (2)",
						"type": "String"
					},
					{
						"name": "Applicant Other (3)",
						"type": "String"
					},
					{
						"name": "Applicant Other (4)",
						"type": "String"
					},
					{
						"name": "Applicant Other (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_JobReq_Append')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"AppendFileName": {
						"type": "string",
						"defaultValue": "Elloree Data Submission Template - TA.xlsx"
					},
					"WorkSheetName": {
						"type": "string",
						"defaultValue": "DATA_JobRequisition"
					},
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().WorkSheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().AppendFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Requisition Type",
						"type": "String"
					},
					{
						"name": "Posting Date",
						"type": "String"
					},
					{
						"name": "Requisition Status",
						"type": "String"
					},
					{
						"name": "Number of Openings",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Function",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work Office City",
						"type": "String"
					},
					{
						"name": "Work Office State",
						"type": "String"
					},
					{
						"name": "Work Office Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Hiring Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Primary Recruiter Worker ID",
						"type": "String"
					},
					{
						"name": "Requisition Other (1)",
						"type": "String"
					},
					{
						"name": "Requisition Other (2)",
						"type": "String"
					},
					{
						"name": "Requisition Other (3)",
						"type": "String"
					},
					{
						"name": "Requisition Other (4)",
						"type": "String"
					},
					{
						"name": "Requisition Other (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_WorkerOther",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template (Other).xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Event (Type)",
						"type": "String"
					},
					{
						"name": "Event (Desc)",
						"type": "String"
					},
					{
						"name": "Other (Char Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Char Value 2)",
						"type": "String"
					},
					{
						"name": "Other (Num Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Num Value 2)",
						"type": "String"
					},
					{
						"name": "Other (Date Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Date Value 2)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_OtherCore_Append')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"AppendFileName": {
						"type": "string",
						"defaultValue": "Elloree Data Submission Template (Other).xlsx"
					},
					"WorkSheetName": {
						"type": "string",
						"defaultValue": "DATA_WorkerOther (2)"
					},
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().WorkSheetName",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().AppendFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Event (Type)",
						"type": "String"
					},
					{
						"name": "Event (Desc)",
						"type": "String"
					},
					{
						"name": "Other (Char Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Char Value 2)",
						"type": "String"
					},
					{
						"name": "Other (Num Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Num Value 2)",
						"type": "String"
					},
					{
						"name": "Other (Date Value 1)",
						"type": "String"
					},
					{
						"name": "Other (Date Value 2)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Promotions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_Promotion",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Event Type",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Worker Type",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Family/Function",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Previous Job Title",
						"type": "String"
					},
					{
						"name": "Previous Job Family/Function",
						"type": "String"
					},
					{
						"name": "Previous Corporate Title",
						"type": "String"
					},
					{
						"name": "Manager Indicator",
						"type": "String"
					},
					{
						"name": "Direct Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work City",
						"type": "String"
					},
					{
						"name": "Work State",
						"type": "String"
					},
					{
						"name": "Work Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Original Hire Date",
						"type": "String"
					},
					{
						"name": "Current Hire Date",
						"type": "String"
					},
					{
						"name": "Years of Service",
						"type": "String"
					},
					{
						"name": "Years in Job",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Birth Year",
						"type": "String"
					},
					{
						"name": "Generation Desc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Req_Test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_JobRequisition",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template - TA.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Requisition ID",
						"type": "String"
					},
					{
						"name": "Requisition Type",
						"type": "String"
					},
					{
						"name": "Posting Date",
						"type": "String"
					},
					{
						"name": "Requisition Status",
						"type": "String"
					},
					{
						"name": "Number of Openings",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Function",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work Office City",
						"type": "String"
					},
					{
						"name": "Work Office State",
						"type": "String"
					},
					{
						"name": "Work Office Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Hiring Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Primary Recruiter Worker ID",
						"type": "String"
					},
					{
						"name": "Requisition Other (1)",
						"type": "String"
					},
					{
						"name": "Requisition Other (2)",
						"type": "String"
					},
					{
						"name": "Requisition Other (3)",
						"type": "String"
					},
					{
						"name": "Requisition Other (4)",
						"type": "String"
					},
					{
						"name": "Requisition Other (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_TalentAssessment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_TalentAssessment",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Event Type",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Performance Rating",
						"type": "String"
					},
					{
						"name": "Performance Rating Date",
						"type": "String"
					},
					{
						"name": "Top Performer",
						"type": "String"
					},
					{
						"name": "Talent Identifier (1)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (2)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (3)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (4)",
						"type": "String"
					},
					{
						"name": "Talent Identifier (5)",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Template_Terminations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Source_Client_Fldr": {
						"type": "string"
					},
					"Source_Client_Date": {
						"type": "string"
					},
					"Source_Client_Year": {
						"type": "string"
					},
					"Source_Client_Quarter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Client/Template Prep/Template"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "DATA_Term",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Elloree Data Submission Template.xlsx",
						"folderPath": {
							"value": "@concat(concat(dataset().Source_Client_Fldr,'/'),concat(replace(dataset().Source_Client_Date,'/','-'),'/',concat('Templates/',concat(dataset().Source_Client_Year),trim(dataset().Source_Client_Quarter))))",
							"type": "Expression"
						},
						"container": "processing"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>",
						"type": "String"
					},
					{
						"name": "Event Year",
						"type": "String"
					},
					{
						"name": "Event Quarter",
						"type": "String"
					},
					{
						"name": "Event Date",
						"type": "String"
					},
					{
						"name": "Event Type",
						"type": "String"
					},
					{
						"name": "Event Reason",
						"type": "String"
					},
					{
						"name": "Worker ID",
						"type": "String"
					},
					{
						"name": "Worker Type",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Job Family/Function",
						"type": "String"
					},
					{
						"name": "Years in Job",
						"type": "String"
					},
					{
						"name": "Corporate Title",
						"type": "String"
					},
					{
						"name": "Manager Indicator",
						"type": "String"
					},
					{
						"name": "Direct Manager Worker ID",
						"type": "String"
					},
					{
						"name": "Work Office Location",
						"type": "String"
					},
					{
						"name": "Work City",
						"type": "String"
					},
					{
						"name": "Work State",
						"type": "String"
					},
					{
						"name": "Work Country",
						"type": "String"
					},
					{
						"name": "Strategic Work Location Ind",
						"type": "String"
					},
					{
						"name": "Original Hire Date",
						"type": "String"
					},
					{
						"name": "Current Hire Date",
						"type": "String"
					},
					{
						"name": "Years of Service",
						"type": "String"
					},
					{
						"name": "Last Promo Date",
						"type": "String"
					},
					{
						"name": "Business Group Level 1",
						"type": "String"
					},
					{
						"name": "Business Group Level 2",
						"type": "String"
					},
					{
						"name": "Business Group Level 3",
						"type": "String"
					},
					{
						"name": "Business Group Level 4",
						"type": "String"
					},
					{
						"name": "Race",
						"type": "String"
					},
					{
						"name": "Hispanic or Latino Origin",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Veteran Ind",
						"type": "String"
					},
					{
						"name": "LGTBQ",
						"type": "String"
					},
					{
						"name": "Disability Ind",
						"type": "String"
					},
					{
						"name": "Birth Year",
						"type": "String"
					},
					{
						"name": "Generation Desc",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_USCensus_Site')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestServiceUSCensusTest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SeriesId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "&for=metropolitan%20statistical%20area/micropolitan%20statistical%20area:*"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestServiceUSCensusTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sheet.txt",
						"folderPath": "Dogwood/7-31-2022/FactTbl/2022",
						"container": "processing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentApplFlowMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientApplFinalDisp",
						"type": "nvarchar"
					},
					{
						"name": "ClientApplStepBeforeFinalDisp",
						"type": "nvarchar"
					},
					{
						"name": "ClientApplRejectedReason",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeApplFinalDisp",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeApplCategory",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeSubmittedtoMgrFl",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TAApplMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentApplStatusFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Silver Medalist Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ApplId",
						"type": "nvarchar"
					},
					{
						"name": "ReqId",
						"type": "nvarchar"
					},
					{
						"name": "EventDt",
						"type": "date"
					},
					{
						"name": "EventMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Applicants",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WhiteAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BlackAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LatinxAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AsianAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TwoorMoreAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OtherAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DNSIDAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PoCAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FemaleAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MaleAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OtherGenderAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DNSIDGenderAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DiverseAppl",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ApplRejected",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ApplWithdrew",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Candidates",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CandRejectedHR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CandRejectedHM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CandInterviewed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CandWithdrew",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TAApplStatusFactTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentApplicantFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Applicant Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientEngagementType",
						"type": "nvarchar"
					},
					{
						"name": "EventDt",
						"type": "date"
					},
					{
						"name": "EventMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Event",
						"type": "nvarchar"
					},
					{
						"name": "EventId",
						"type": "nvarchar"
					},
					{
						"name": "ReqId",
						"type": "nvarchar"
					},
					{
						"name": "ApplicantId",
						"type": "nvarchar"
					},
					{
						"name": "Source",
						"type": "nvarchar"
					},
					{
						"name": "ApplType",
						"type": "nvarchar"
					},
					{
						"name": "InternalWorkerId",
						"type": "nvarchar"
					},
					{
						"name": "Race",
						"type": "nvarchar"
					},
					{
						"name": "HispanicLatinoOrigin",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Veteran",
						"type": "nvarchar"
					},
					{
						"name": "LGTBQ",
						"type": "nvarchar"
					},
					{
						"name": "DisabilityInd",
						"type": "nvarchar"
					},
					{
						"name": "ApplFinalDisp",
						"type": "nvarchar"
					},
					{
						"name": "ApplStepBeforeFinalDisp",
						"type": "nvarchar"
					},
					{
						"name": "ApplRejectedReason",
						"type": "nvarchar"
					},
					{
						"name": "ApplOther1",
						"type": "nvarchar"
					},
					{
						"name": "ApplOther2",
						"type": "nvarchar"
					},
					{
						"name": "ApplOther3",
						"type": "nvarchar"
					},
					{
						"name": "ApplOther4",
						"type": "nvarchar"
					},
					{
						"name": "ApplOther5",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TAApplTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentBLSTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "External Data/BLS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "LastRefreshDt",
						"type": "date"
					},
					{
						"name": "Source",
						"type": "nvarchar"
					},
					{
						"name": "SourceId",
						"type": "nvarchar"
					},
					{
						"name": "SourceDesc",
						"type": "nvarchar"
					},
					{
						"name": "Year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Latest",
						"type": "nvarchar"
					},
					{
						"name": "EthnicOrigin",
						"type": "nvarchar"
					},
					{
						"name": "Race",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Headcount",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "BLSTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentBusHierarchyMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Business Hierarchy mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientBusGrpLvl1",
						"type": "nvarchar"
					},
					{
						"name": "ClientBusGrpLvl2",
						"type": "nvarchar"
					},
					{
						"name": "ClientBusGrpLvl3",
						"type": "nvarchar"
					},
					{
						"name": "ClientBusGrpLvl4",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeBusGrpLvl1",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeBusGrpLvl2",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeBusGrpLvl3",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeBusGrpLvl4",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "BusinessMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentClientTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientEngagementType",
						"type": "nvarchar"
					},
					{
						"name": "ClientSector",
						"type": "nvarchar"
					},
					{
						"name": "ClientDesc",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ClientTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentCoreFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientEngagementType",
						"type": "nvarchar"
					},
					{
						"name": "WorkerId",
						"type": "nvarchar"
					},
					{
						"name": "EventDt",
						"type": "date"
					},
					{
						"name": "EventMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Event",
						"type": "nvarchar"
					},
					{
						"name": "EventId",
						"type": "nvarchar"
					},
					{
						"name": "EventType",
						"type": "nvarchar"
					},
					{
						"name": "EventReason",
						"type": "nvarchar"
					},
					{
						"name": "WorkerStatus",
						"type": "nvarchar"
					},
					{
						"name": "WorkerType",
						"type": "nvarchar"
					},
					{
						"name": "JobTitle",
						"type": "nvarchar"
					},
					{
						"name": "JobFunction",
						"type": "nvarchar"
					},
					{
						"name": "YearsinJob",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PrevJobTitle",
						"type": "nvarchar"
					},
					{
						"name": "PrevJobFunction",
						"type": "nvarchar"
					},
					{
						"name": "LastPromoDt",
						"type": "date"
					},
					{
						"name": "OrigHireDt",
						"type": "date"
					},
					{
						"name": "CurrHireDt",
						"type": "date"
					},
					{
						"name": "RehireInd",
						"type": "nvarchar"
					},
					{
						"name": "YearsofSrvc",
						"type": "float",
						"precision": 15
					},
					{
						"name": "YearsofSrvcBand",
						"type": "nvarchar"
					},
					{
						"name": "YearsofSrvcBandSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CorpTitle",
						"type": "nvarchar"
					},
					{
						"name": "PrevCorpTitle",
						"type": "nvarchar"
					},
					{
						"name": "ManagerInd",
						"type": "nvarchar"
					},
					{
						"name": "DirectMgrWorkerId",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeLoc",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeCity",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeState",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeCountry",
						"type": "nvarchar"
					},
					{
						"name": "WorkStrategicLocInd",
						"type": "nvarchar"
					},
					{
						"name": "LegacyOrg",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl1",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl2",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl3",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl4",
						"type": "nvarchar"
					},
					{
						"name": "Race",
						"type": "nvarchar"
					},
					{
						"name": "HispanicLatinoOrigin",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Veteran",
						"type": "nvarchar"
					},
					{
						"name": "LGTBQ",
						"type": "nvarchar"
					},
					{
						"name": "DisabilityInd",
						"type": "nvarchar"
					},
					{
						"name": "BirthYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Generation",
						"type": "nvarchar"
					},
					{
						"name": "GenerationSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmpCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CoreFactTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentCorpTitleMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to gender mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientCorpTitle",
						"type": "nvarchar"
					},
					{
						"name": "ClientElloreeCorpTitle",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeCorpTitle",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeCorpTitleSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "CorpTitleMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentDisabilityMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to disability mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientDisabilityInd",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeDisabilityInd",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DisabilityMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentDivSlateFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReqId",
						"type": "nvarchar"
					},
					{
						"name": "CandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WhiteCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntWhiteCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtWhiteCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WhiteCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntWhiteCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtWhiteCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BlackCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntBlackCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtBlackCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BlackCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntBlackCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtBlackCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LatinxCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntLatinxCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtLatinxCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LatinxCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntLatinxCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtLatinxCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AsianCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntAsianCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtAsianCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AsianCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntAsianCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtAsianCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TwoPlusRacesCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntTwoPlusRacesCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtTwoPlusRacesCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TwoPlusRacesCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntTwoPlusRacesCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtTwoPlusRacesCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OtherCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntOtherCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtOtherCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OtherCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntOtherCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtOtherCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MaleCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntMaleCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtMaleCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MaleCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntMaleCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtMaleCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FemaleCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntFemaleCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtFemaleCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FemaleCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntFemaleCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtFemaleCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OtherGenderCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntOtherGenderCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtOtherGenderCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OtherGenderCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntOtherGenderCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtOtherGenderCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DiverseCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntDiverseCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtDiverseCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DiverseCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntDiverseCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtDiverseCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FemalePoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntFemalePoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtFemalePoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FemalePoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntFemalePoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtFemalePoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FemaleNotPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntFemaleNotPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtFemaleNotPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FemaleNotPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntFemaleNotPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtFemaleNotPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NotFemalePoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntNotFemalePoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtNotFemalePoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NotFemalePoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntNotFemalePoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtNotFemalePoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NotFemaleNotPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntNotFemaleNotPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtNotFemaleNotPoCCandStM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NotFemaleNotPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IntNotFemaleNotPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ExtNotFemaleNotPoCCandHired",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DiverseSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntDiverseSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtDiverseSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoDiverseSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoDiverseSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoDiverseSlate",
						"type": "nvarchar"
					},
					{
						"name": "DiverseHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntDiverseHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtDiverseHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "PoCSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntPoCSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtPoCSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoPoCSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoPoCSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoPoCSlate",
						"type": "nvarchar"
					},
					{
						"name": "PoCHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntPoCHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtPoCHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "WhiteSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntWhiteSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtWhiteSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoWhiteSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoWhiteSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoWhiteSlate",
						"type": "nvarchar"
					},
					{
						"name": "WhiteHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntWhiteHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtWhiteHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "BlackSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntBlackSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtBlackSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoBlackSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoBlackSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoBlackSlate",
						"type": "nvarchar"
					},
					{
						"name": "BlackHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntBlackHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtBlackHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "LatinxSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntLatinxSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtLatinxSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoLatinxSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoLatinxSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoLatinxSlate",
						"type": "nvarchar"
					},
					{
						"name": "LatinxHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntLatinxHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtLatinxHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "AsianSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntAsianSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtAsianSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoAsianSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoAsianSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoAsianSlate",
						"type": "nvarchar"
					},
					{
						"name": "AsianHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntAsianHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtAsianHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "TwoPlusRacesSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntTwoPlusRacesSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtTwoPlusRacesSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoTwoPlusRacesSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoTwoPlusRacesSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoTwoPlusRacesSlate",
						"type": "nvarchar"
					},
					{
						"name": "TwoPlusRacesHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntTwoPlusRacesHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtTwoPlusRacesHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "OtherRaceSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntOtherRaceSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtOtherRaceSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoOtherRaceSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoOtherRaceSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoOtherRaceSlate",
						"type": "nvarchar"
					},
					{
						"name": "OtherRaceHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntOtherRaceHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtOtherRaceHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "FemaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntFemaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtFemaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoFemaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoFemaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoFemaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "FemaleHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntFemaleHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtFemaleHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "MaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntMaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtMaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "NoMaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntNoMaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtNoMaleSlate",
						"type": "nvarchar"
					},
					{
						"name": "MaleHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "IntMaleHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "ExtMaleHiredSlate",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TASlateFactTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentEthnicityMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to gender mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientRace",
						"type": "nvarchar"
					},
					{
						"name": "ClientHispanicLatinoOrigin",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeRace",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeHispanicLatinoOrigin",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeEthnicGroup",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EthnicityMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentEventMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to gender mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientEvent",
						"type": "nvarchar"
					},
					{
						"name": "ClientEventType",
						"type": "nvarchar"
					},
					{
						"name": "ClientEventReason",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeEvent",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeEventType",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeEventReason",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeTermReason",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "EventMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentGenderMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to gender mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientGender",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeGender",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "GenderMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentLGBTQMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to LGBTQ mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientLGTBQ",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeLGTBQ",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "LGTBQMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentLocationMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to gender mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientWorkOffice",
						"type": "nvarchar"
					},
					{
						"name": "ClientWorkCity",
						"type": "nvarchar"
					},
					{
						"name": "ClientWorkState",
						"type": "nvarchar"
					},
					{
						"name": "ClientWorkCountry",
						"type": "nvarchar"
					},
					{
						"name": "ClientStrategicLoc",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeWorkOffice",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeWorkCity",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeWorkState",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeWorkCountry",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeWorkRegion",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeStrategicLoc",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeLocSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "LocationMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentOtherCoreFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Other Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientEngagementType",
						"type": "nvarchar"
					},
					{
						"name": "WorkerId",
						"type": "nvarchar"
					},
					{
						"name": "EventDt",
						"type": "date"
					},
					{
						"name": "EventMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Event",
						"type": "nvarchar"
					},
					{
						"name": "EventId",
						"type": "nvarchar"
					},
					{
						"name": "EventDesc",
						"type": "nvarchar"
					},
					{
						"name": "EventType",
						"type": "nvarchar"
					},
					{
						"name": "OtherCharVal11",
						"type": "nvarchar"
					},
					{
						"name": "OtherCharVal2",
						"type": "nvarchar"
					},
					{
						"name": "OtherNumVal1",
						"type": "float",
						"precision": 15
					},
					{
						"name": "OtherNumVal2",
						"type": "float",
						"precision": 15
					},
					{
						"name": "OtherDtVal1",
						"type": "date"
					},
					{
						"name": "OtherDtVal2",
						"type": "date"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "OtherCoreFactTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentPerfRatingHistFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WorkerId",
						"type": "nvarchar"
					},
					{
						"name": "LastPerfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastPerfRatingDt",
						"type": "date"
					},
					{
						"name": "LastClientPerfRating",
						"type": "nvarchar"
					},
					{
						"name": "LastElloreePerfRating",
						"type": "nvarchar"
					},
					{
						"name": "LastElloreePerfRatingSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastTopTalentInd",
						"type": "nvarchar"
					},
					{
						"name": "CurrPerfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CurrPerfRatingDt",
						"type": "date"
					},
					{
						"name": "CurrTalentTag",
						"type": "nvarchar"
					},
					{
						"name": "CurrClientPerfRating",
						"type": "nvarchar"
					},
					{
						"name": "CurrElloreePerfRating",
						"type": "nvarchar"
					},
					{
						"name": "CurrElloreePerfRatingSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CurrTopTalentInd",
						"type": "nvarchar"
					},
					{
						"name": "P1PerfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P1PerfRatingDt",
						"type": "date"
					},
					{
						"name": "P1ClientPerfRating",
						"type": "nvarchar"
					},
					{
						"name": "P1ElloreePerfRating",
						"type": "nvarchar"
					},
					{
						"name": "P1ElloreePerfRatingSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P1TopTalentInd",
						"type": "varchar"
					},
					{
						"name": "P2PerfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P2PerfRatingDt",
						"type": "date"
					},
					{
						"name": "P2ClientPerfRating",
						"type": "nvarchar"
					},
					{
						"name": "P2ElloreePerfRating",
						"type": "nvarchar"
					},
					{
						"name": "P2ElloreePerfRatingSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P2TopTalentInd",
						"type": "varchar"
					},
					{
						"name": "P3PerfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P3PerfRatingDt",
						"type": "date"
					},
					{
						"name": "P3ClientPerfRating",
						"type": "nvarchar"
					},
					{
						"name": "P3ElloreePerfRating",
						"type": "nvarchar"
					},
					{
						"name": "P3ElloreePerfRatingSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P3TopTalentInd",
						"type": "varchar"
					},
					{
						"name": "LastTalentTagYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastTalentTag",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PerfRatingHistTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentPerfRatingMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to gender mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientPerfRating",
						"type": "nvarchar"
					},
					{
						"name": "ElloreePerfRating",
						"type": "nvarchar"
					},
					{
						"name": "ElloreePerfRatingSortId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "PerfRatingMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentReqFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientEngagementType",
						"type": "nvarchar"
					},
					{
						"name": "EventDt",
						"type": "date"
					},
					{
						"name": "EventMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Event",
						"type": "nvarchar"
					},
					{
						"name": "EventId",
						"type": "nvarchar"
					},
					{
						"name": "ReqId",
						"type": "nvarchar"
					},
					{
						"name": "ReqType",
						"type": "nvarchar"
					},
					{
						"name": "PostingDt",
						"type": "date"
					},
					{
						"name": "ReqStatus",
						"type": "nvarchar"
					},
					{
						"name": "NumberofOpenings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "JobTitle",
						"type": "nvarchar"
					},
					{
						"name": "JobFunction",
						"type": "nvarchar"
					},
					{
						"name": "CorpTitle",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeLoc",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeCity",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeState",
						"type": "nvarchar"
					},
					{
						"name": "WorkOfficeCountry",
						"type": "nvarchar"
					},
					{
						"name": "WorkStrategicLocInd",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl1",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl2",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl3",
						"type": "nvarchar"
					},
					{
						"name": "BusinessGrpLvl4",
						"type": "nvarchar"
					},
					{
						"name": "HiringMgrWorkerId",
						"type": "nvarchar"
					},
					{
						"name": "PrimaryRecruiterWorkerId",
						"type": "nvarchar"
					},
					{
						"name": "ReqOther1",
						"type": "nvarchar"
					},
					{
						"name": "ReqOther2",
						"type": "nvarchar"
					},
					{
						"name": "ReqOther3",
						"type": "nvarchar"
					},
					{
						"name": "ReqOther4",
						"type": "nvarchar"
					},
					{
						"name": "ReqOther5",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TAReqTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentReqStatusMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientReqStatus",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeReqStatus",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TAReqStatusMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentReqTypeMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientReqType",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeReqType",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TAReqTypeMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentSilverMedalistFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Silver Medalist Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ReqId",
						"type": "nvarchar"
					},
					{
						"name": "ApplId",
						"type": "nvarchar"
					},
					{
						"name": "IntWorkerId",
						"type": "nvarchar"
					},
					{
						"name": "SilverMedalistInd",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TASilverMedalistFactTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentSpeedbumpsFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "EventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CoreEventId",
						"type": "nvarchar"
					},
					{
						"name": "CoreEventQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CoreEventDate",
						"type": "date"
					},
					{
						"name": "WorkerId",
						"type": "nvarchar"
					},
					{
						"name": "SpeedbumnpWorkerStatus",
						"type": "nvarchar"
					},
					{
						"name": "SpeedbumpPopulationInd",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump1Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump1Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump1Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump2Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump2Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump2Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump3Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump3Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump3Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump4Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump4Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump4Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump5Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump5Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump5Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump6Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump6Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump6Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump7Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump7Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump7Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump8Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump8Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump8Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump9Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump9Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump9Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump10Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump10Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump10Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump11Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump11Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump11Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump12Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump12Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump12Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump13Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump13Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump13Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump14Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump14Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump14Flag",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump15Name",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump15Desc",
						"type": "nvarchar"
					},
					{
						"name": "Speedbump15Flag",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SpeedbumpsFactTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentTalentFactTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Talent Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "WorkerId",
						"type": "nvarchar"
					},
					{
						"name": "EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDt",
						"type": "date"
					},
					{
						"name": "Event",
						"type": "nvarchar"
					},
					{
						"name": "EventType",
						"type": "nvarchar"
					},
					{
						"name": "PerfRating",
						"type": "nvarchar"
					},
					{
						"name": "PerfRatingDt",
						"type": "date"
					},
					{
						"name": "TalentIdentifier1",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier2",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier3",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier4",
						"type": "nvarchar"
					},
					{
						"name": "TalentIdentifier5",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TalentFactTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentTmp_OtherAnalysisTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quarter",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tmp_OtherAnalysisTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentVeteranMapTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to veteran mapping table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "ClientVeteran",
						"type": "nvarchar"
					},
					{
						"name": "ElloreeVeteran",
						"type": "nvarchar"
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "VeteranMapTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentYearRefTbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connection to Core Fact table",
				"linkedServiceName": {
					"referenceName": "etalentdb_connection",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Client/Database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientId",
						"type": "nvarchar"
					},
					{
						"name": "ClientEngagementDt",
						"type": "date"
					},
					{
						"name": "CurEventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P1EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P2EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P3EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P4EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "P5EventYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LoadDt",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "YearRefTbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/etalentdb_connection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorage2_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"SeriesId": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"authenticationType": "Basic",
					"userName": "[parameters('RestService1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RestService1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestServiceUSCensusTest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestServiceUSCensusTest_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('RestServiceUSCensusTest_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RestServiceUSCensusTest_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/etalentdb_connection')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('etalentdb_connection_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdatedCoreData')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/audit/blobs/",
					"blobPathEndsWith": "All Core Data.csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('UpdatedCoreData_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1 test')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-05-20T21:56:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_ApplStatus_File",
								"type": "DatasetReference"
							},
							"name": "ApplStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendApplStatusFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Applicant ID} as string,",
						"          {Requisition ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Applicant Type} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Elloree Gender} as string,",
						"          Applicant as integer,",
						"          {White Appl} as integer,",
						"          {Black Appl} as integer,",
						"          {Latinx Appl} as integer,",
						"          {Asian Appl} as integer,",
						"          {Two or More Appl} as integer,",
						"          {Other Appl} as integer,",
						"          {DNSID Appl} as integer,",
						"          {Female Appl} as integer,",
						"          {PoC Appl} as integer,",
						"          {Male Appl} as integer,",
						"          {Other Gender Appl} as integer,",
						"          {DNSID Gender Appl} as integer,",
						"          {Diverse Applicant} as integer,",
						"          {Applicant Rejected by HR} as integer,",
						"          {Applicant Withdrew} as integer,",
						"          Candidate as integer,",
						"          {Candidate Rejected by HR} as integer,",
						"          {Candidate StM} as integer,",
						"          {Candidate Rejected by HM} as integer,",
						"          {Candidate Interviewed} as integer,",
						"          {Candidate Hired} as integer,",
						"          {Candidate Withdrew} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplStatus",
						"ApplStatus alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Date})),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Applicant ID}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          EventDt = {Event Date},",
						"          ReqId = {Requisition ID},",
						"          ApplId = {Applicant ID},",
						"          {Applicant Type},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Elloree Gender},",
						"          Applicants = Applicant,",
						"          WhiteAppl = {White Appl},",
						"          BlackAppl = {Black Appl},",
						"          LatinxAppl = {Latinx Appl},",
						"          AsianAppl = {Asian Appl},",
						"          TwoorMoreAppl = {Two or More Appl},",
						"          OtherAppl = {Other Appl},",
						"          PoCAppl = {PoC Appl},",
						"          DNSIDAppl = {DNSID Appl},",
						"          FemaleAppl = {Female Appl},",
						"          MaleAppl = {Male Appl},",
						"          OtherGenderAppl = {Other Gender Appl},",
						"          DNSIDGenderAppl = {DNSID Gender Appl},",
						"          DiverseAppl = {Diverse Applicant},",
						"          ApplRejected = {Applicant Rejected by HR},",
						"          ApplWithdrew = {Applicant Withdrew},",
						"          Candidates = Candidate,",
						"          CandRejectedHR = {Candidate Rejected by HR},",
						"          CandStM = {Candidate StM},",
						"          CandRejectedHM = {Candidate Rejected by HM},",
						"          CandInterviewed = {Candidate Interviewed},",
						"          CandHired = {Candidate Hired},",
						"          CandWithdrew = {Candidate Withdrew}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','ReqId','ApplId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ApplId,",
						"          ReqId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Applicants,",
						"          WhiteAppl,",
						"          BlackAppl,",
						"          LatinxAppl,",
						"          AsianAppl,",
						"          TwoorMoreAppl,",
						"          OtherAppl,",
						"          DNSIDAppl,",
						"          PoCAppl,",
						"          FemaleAppl,",
						"          MaleAppl,",
						"          OtherGenderAppl,",
						"          DNSIDGenderAppl,",
						"          DiverseAppl,",
						"          ApplRejected,",
						"          ApplWithdrew,",
						"          Candidates,",
						"          CandRejectedHR,",
						"          CandStM,",
						"          CandRejectedHM,",
						"          CandInterviewed,",
						"          CandHired,",
						"          CandWithdrew,",
						"          LoadDt",
						"     )) ~> AppendApplStatusFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_ApplStatus_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplStatusFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_ApplStatus_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendApplStatusFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplStatusFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> ApplStatus",
						"ApplStatus alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','ReqId','ApplId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ApplId,",
						"          ReqId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Applicants,",
						"          WhiteAppl,",
						"          BlackAppl,",
						"          LatinxAppl,",
						"          AsianAppl,",
						"          TwoorMoreAppl,",
						"          OtherAppl,",
						"          DNSIDAppl,",
						"          PoCAppl,",
						"          FemaleAppl,",
						"          MaleAppl,",
						"          OtherGenderAppl,",
						"          DNSIDGenderAppl,",
						"          DiverseAppl,",
						"          ApplRejected,",
						"          ApplWithdrew,",
						"          Candidates,",
						"          CandRejectedHR,",
						"          CandStM,",
						"          CandRejectedHM,",
						"          CandInterviewed,",
						"          CandHired,",
						"          CandWithdrew,",
						"          LoadDt",
						"     )) ~> AppendApplStatusFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentApplStatusFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "RemoveNullRows"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"RemoveNullRows alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Date})),",
						"     deleteIf(isNull(Event)),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Applicant ID}))) ~> alterRow1",
						"derivedColumn2 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventDt = {Event Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          EventId,",
						"          Event,",
						"          ReqId = {Requisition ID},",
						"          ApplicantId = {Applicant ID},",
						"          Source,",
						"          ApplType = {Applicant Type},",
						"          InternalWorkerId = {Internal Worker ID},",
						"          Race,",
						"          HispanicLatinoOrigin = {Hispanic or Latino Origin},",
						"          Gender,",
						"          Veteran = {Veteran Ind},",
						"          LGTBQ,",
						"          DisabilityInd = {Disability Ind},",
						"          ApplFinalDisp = {Applicant Final Disposition},",
						"          ApplStepBeforeFinalDisp = {Applicant Step Before Final Disposition},",
						"          ApplRejectedReason = {Applicant Rejected Reason},",
						"          ApplOther1 = {Applicant Other (1)},",
						"          ApplOther2 = {Applicant Other (2)},",
						"          ApplOther3 = {Applicant Other (3)},",
						"          ApplOther4 = {Applicant Other (4)},",
						"          ApplOther5 = {Applicant Other (5)},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"Applicant filter(!(isNull({Event Date}))||!(isNull({Applicant ID}))) ~> RemoveNullRows",
						"alterRow1 derive(EventId = 'APP',",
						"          LoadDt = currentDate()) ~> derivedColumn2",
						"AlterColumnNamesforMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ApplicantId','ReqId','EventDt','EventId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Applicant_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Applicant",
						"Applicant alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          LoadDt = currentDate()) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ApplicantId','ReqId','EventDt','EventId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendCoreFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "RemoveNullRows"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"RemoveNullRows alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Worker ID})),",
						"     deleteIf(isNull({Event Date})),",
						"     deleteIf(isNull({Event Year})),",
						"     deleteIf(isNull({Event Code})),",
						"     deleteIf(isNull({Event Type})),",
						"     deleteIf(isNull(Event)),",
						"     deleteIf(isNull({Event Reason})),",
						"     deleteIf(isNull({Worker Status})),",
						"     deleteIf(isNull({Worker Type})),",
						"     deleteIf(isNull({Job Title})),",
						"     deleteIf(isNull({Job Family/Function})),",
						"     deleteIf(isNull({Years in Job})),",
						"     deleteIf(isNull({Previous Job Title})),",
						"     deleteIf(isNull({Previous Job Family/Function})),",
						"     deleteIf(isNull({Original Hire Date})),",
						"     deleteIf(isNull({Current Hire Date})),",
						"     deleteIf(isNull({Years of Service})),",
						"     deleteIf(isNull({Years of Service Band})),",
						"     deleteIf(isNull({Years of Service Sort ID})),",
						"     deleteIf(isNull({Rehire Indicator})),",
						"     deleteIf(isNull({Corporate Title})),",
						"     deleteIf(isNull({Previous Corporate Title})),",
						"     deleteIf(isNull({Manager Indicator})),",
						"     deleteIf(isNull({Direct Manager Worker ID})),",
						"     deleteIf(isNull({Work Office Location})),",
						"     deleteIf(isNull({Work City})),",
						"     deleteIf(isNull({Work State})),",
						"     deleteIf(isNull({Work Country})),",
						"     deleteIf(isNull({Strategic Work Location Ind})),",
						"     deleteIf(isNull({Legacy Organization})),",
						"     deleteIf(isNull({Business Group Level 1})),",
						"     deleteIf(isNull({Business Group Level 2})),",
						"     deleteIf(isNull({Business Group Level 3})),",
						"     deleteIf(isNull({Business Group Level 4})),",
						"     deleteIf(isNull(Race)),",
						"     deleteIf(isNull({Hispanic or Latino Origin})),",
						"     deleteIf(isNull(Gender)),",
						"     deleteIf(isNull({Veteran Ind})),",
						"     deleteIf(isNull(LGTBQ)),",
						"     deleteIf(isNull({Disability Ind})),",
						"     deleteIf(isNull({Generation Desc})),",
						"     deleteIf(isNull({Generation Sort ID})),",
						"     deleteIf(isNull(EmpCount))) ~> alterRow1",
						"Core filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientEngagementType = {Client Engagement Type},",
						"          WorkerId = {Worker ID},",
						"          EventDt = {Event Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId = {Event Code},",
						"          EventType = {Event Type},",
						"          EventReason = {Event Reason},",
						"          WorkerStatus = {Worker Status},",
						"          WorkerType = {Worker Type},",
						"          JobTitle = {Job Title},",
						"          JobFunction = {Job Family/Function},",
						"          YearsinJob = {Years in Job},",
						"          PrevJobTitle = {Previous Job Title},",
						"          PrevJobFunction = {Previous Job Family/Function},",
						"          LastPromoDt = {Last Promo Date},",
						"          OrigHireDt = {Original Hire Date},",
						"          CurrHireDt = {Current Hire Date},",
						"          RehireInd = {Rehire Indicator},",
						"          YearsofSrvc = {Years of Service},",
						"          YearsofSrvcBand = {Years of Service Band},",
						"          YearsofSrvcBandSortId = {Years of Service Sort ID},",
						"          CorpTitle = {Corporate Title},",
						"          PrevCorpTitle = {Previous Corporate Title},",
						"          ManagerInd = {Manager Indicator},",
						"          DirectMgrWorkerId = {Direct Manager Worker ID},",
						"          WorkOfficeLoc = {Work Office Location},",
						"          WorkOfficeCity = {Work City},",
						"          WorkOfficeState = {Work State},",
						"          WorkOfficeCountry = {Work Country},",
						"          WorkStrategicLocInd = {Strategic Work Location Ind},",
						"          LegacyOrg = {Legacy Organization},",
						"          BusinessGrpLvl1 = {Business Group Level 1},",
						"          BusinessGrpLvl2 = {Business Group Level 2},",
						"          BusinessGrpLvl3 = {Business Group Level 3},",
						"          BusinessGrpLvl4 = {Business Group Level 4},",
						"          Race,",
						"          HispanicLatinoOrigin = {Hispanic or Latino Origin},",
						"          Gender,",
						"          Veteran = {Veteran Ind},",
						"          LGTBQ,",
						"          DisabilityInd = {Disability Ind},",
						"          BirthYear = {Birth Year},",
						"          Generation = {Generation Desc},",
						"          GenerationSortId = {Generation Sort ID},",
						"          EmpCount,",
						"          LoadDt",
						"     )) ~> AppendCoreFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Core_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendCoreFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendCoreFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_DivSlate_File",
								"type": "DatasetReference"
							},
							"name": "DivSlate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendDivSlateFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveNullRows"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Requisition ID} as string,",
						"          {Event Year} as short,",
						"          {Candidates StM} as integer,",
						"          {Internal Candidates StM} as integer,",
						"          {External Candidates StM} as integer,",
						"          {Candidates Hired} as integer,",
						"          {Internal Candidates Hired} as integer,",
						"          {External Candidates Hired} as integer,",
						"          {White Candidates StM} as integer,",
						"          {Internal White Candidates StM} as integer,",
						"          {External White Candidates StM} as integer,",
						"          {White Candidates Hired} as integer,",
						"          {Internal White Candidates Hired} as integer,",
						"          {External White Candidates Hired} as integer,",
						"          {Black Candidates StM} as integer,",
						"          {Internal Black Candidates StM} as integer,",
						"          {External Black Candidates StM} as integer,",
						"          {Black Candidates Hired} as integer,",
						"          {Internal Black Candidates Hired} as integer,",
						"          {External Black Candidates Hired} as integer,",
						"          {Latinx Candidates StM} as integer,",
						"          {Internal Latinx Candidates StM} as integer,",
						"          {External Latinx Candidates StM} as integer,",
						"          {Latinx Candidates Hired} as integer,",
						"          {Internal Latinx Candidates Hired} as integer,",
						"          {External Latinx Candidates Hired} as integer,",
						"          {Asian Candidates StM} as integer,",
						"          {Internal Asian Candidates StM} as integer,",
						"          {External Asian Candidates StM} as integer,",
						"          {Asian Candidates Hired} as integer,",
						"          {Internal Asian Candidates Hired} as integer,",
						"          {External Asian Candidates Hired} as integer,",
						"          {2+ Races Candidates StM} as integer,",
						"          {Internal 2+ Races Candidates StM} as integer,",
						"          {External 2+ Races Candidates StM} as integer,",
						"          {2+ Races Candidates Hired} as integer,",
						"          {Internal 2+ Races Candidates Hired} as integer,",
						"          {External 2+ Races Candidates Hired} as integer,",
						"          {Other Candidates StM} as integer,",
						"          {Internal Other Candidates StM} as integer,",
						"          {External Other Candidates StM} as integer,",
						"          {Other Candidates Hired} as integer,",
						"          {Internal Other Candidates Hired} as integer,",
						"          {External Other Candidates Hired} as integer,",
						"          {Male Candidates StM} as integer,",
						"          {Internal Male Candidates StM} as integer,",
						"          {External Male Candidates StM} as integer,",
						"          {Male Candidates Hired} as integer,",
						"          {Internal Male Candidates Hired} as integer,",
						"          {External Male Candidates Hired} as integer,",
						"          {Female Candidates StM} as integer,",
						"          {Internal Female Candidates StM} as integer,",
						"          {External Female Candidates StM} as integer,",
						"          {Female Candidates Hired} as integer,",
						"          {Internal Female Candidates Hired} as integer,",
						"          {External Female Candidates Hired} as integer,",
						"          {Other Gender Candidates StM} as integer,",
						"          {Internal Other Gender Candidates StM} as integer,",
						"          {External Other Gender Candidates StM} as integer,",
						"          {Other Gender Candidates Hired} as integer,",
						"          {Internal Other Gender Candidates Hired} as integer,",
						"          {External Other Gender Candidates Hired} as integer,",
						"          {PoC Candidates StM} as integer,",
						"          {Internal PoC Candidates StM} as integer,",
						"          {External PoC Candidates StM} as integer,",
						"          {PoC  Candidates Hired} as integer,",
						"          {Internal PoC  Candidates Hired} as integer,",
						"          {External PoC  Candidates Hired} as integer,",
						"          {Diverse Candidates StM} as integer,",
						"          {Internal Diverse Candidates StM} as integer,",
						"          {External Diverse Candidates StM} as integer,",
						"          {Diverse Candidates Hired} as integer,",
						"          {Internal Diverse Candidates Hired} as integer,",
						"          {External Diverse Candidates Hired} as integer,",
						"          {Female Not PoC Candidates StM} as integer,",
						"          {Internal Female Not PoC Candidates StM} as integer,",
						"          {External Female Not PoC Candidates StM} as integer,",
						"          {Female Not PoC Candidates Hired} as integer,",
						"          {Internal Female Not PoC Candidates Hired} as integer,",
						"          {External Female Not PoC Candidates Hired} as integer,",
						"          {Female PoC Candidates StM} as integer,",
						"          {Internal Female PoC Candidates StM} as integer,",
						"          {External Female PoC Candidates StM} as integer,",
						"          {Female PoC Candidates Hired} as integer,",
						"          {Internal Female PoC Candidates Hired} as integer,",
						"          {External Female PoC Candidates Hired} as integer,",
						"          {Not Female PoC Candidates StM} as integer,",
						"          {Internal Not Female PoC Candidates StM} as integer,",
						"          {External Not Female PoC Candidates StM} as integer,",
						"          {Not Female PoC Candidates Hired} as integer,",
						"          {Internal Not Female PoC Candidates Hired} as integer,",
						"          {External Not Female PoC Candidates Hired} as integer,",
						"          {Not Female Not PoC Candidates StM} as integer,",
						"          {Internal Not Female Not PoC Candidates StM} as integer,",
						"          {External Not Female Not PoC Candidates StM} as integer,",
						"          {Not Female Not PoC Candidates Hired} as integer,",
						"          {Internal Not Female Not PoC Candidates Hired} as integer,",
						"          {External Not Female Not PoC Candidates Hired} as integer,",
						"          {Diverse Slate} as string,",
						"          {Internal Diverse Slate} as string,",
						"          {External Diverse Slate} as string,",
						"          {No Diverse Slate} as string,",
						"          {Internal No Diverse Slate} as string,",
						"          {External No Diverse Slate} as string,",
						"          {Diverse Hired Slate} as string,",
						"          {Internal Diverse Hired Slate} as string,",
						"          {External Diverse Hired Slate} as string,",
						"          {PoC Slate} as string,",
						"          {Internal PoC Slate} as string,",
						"          {External PoC Slate} as string,",
						"          {No PoC Slate} as string,",
						"          {Internal No PoC Slate} as string,",
						"          {External No PoC Slate} as string,",
						"          {PoC Hired Slate} as string,",
						"          {Internal PoC Hired Slate} as string,",
						"          {External PoC Hired Slate} as string,",
						"          {White Slate} as string,",
						"          {Internal White Slate} as string,",
						"          {External White Slate} as string,",
						"          {No White Slate} as string,",
						"          {Internal No White Slate} as string,",
						"          {External No White Slate} as string,",
						"          {White Hired Slate} as string,",
						"          {Internal White Hired Slate} as string,",
						"          {External White Hired Slate} as string,",
						"          {Black Slate} as string,",
						"          {Internal Black Slate} as string,",
						"          {External Black Slate} as string,",
						"          {No Black Slate} as string,",
						"          {Internal No Black Slate} as string,",
						"          {External No Black Slate} as string,",
						"          {Black Hired Slate} as string,",
						"          {Internal Black Hired Slate} as string,",
						"          {External Black Hired Slate} as string,",
						"          {Latinx Slate} as string,",
						"          {Internal Latinx Slate} as string,",
						"          {External Latinx Slate} as string,",
						"          {No Latinx Slate} as string,",
						"          {Internal No Latinx Slate} as string,",
						"          {External No Latinx Slate} as string,",
						"          {Latinx Hired Slate} as string,",
						"          {Internal Latinx Hired Slate} as string,",
						"          {External Latinx Hired Slate} as string,",
						"          {Asian Slate} as string,",
						"          {Internal Asian Slate} as string,",
						"          {External Asian Slate} as string,",
						"          {No Asian Slate} as string,",
						"          {Internal No Asian Slate} as string,",
						"          {External No Asian Slate} as string,",
						"          {Asian Hired Slate} as string,",
						"          {Internal Asian Hired Slate} as string,",
						"          {External Asian Hired Slate} as string,",
						"          {2+ Races Slate} as string,",
						"          {Internal 2+ Races Slate} as string,",
						"          {External 2+ Races Slate} as string,",
						"          {No 2+ Races Slate} as string,",
						"          {Internal No 2+ Races Slate} as string,",
						"          {External No 2+ Races Slate} as string,",
						"          {2+ Races Hired Slate} as string,",
						"          {Internal 2+ Races Hired Slate} as string,",
						"          {External 2+ Races Hired Slate} as string,",
						"          {Other Race Slate} as string,",
						"          {Internal Other Race Slate} as string,",
						"          {External Other Race Slate} as string,",
						"          {No Other Race Slate} as string,",
						"          {Internal No Other Race Slate} as string,",
						"          {External No Other Race Slate} as string,",
						"          {Other Race Hired Slate} as string,",
						"          {Internal Other Race Hired Slate} as string,",
						"          {External Other Race Hired Slate} as string,",
						"          {Female Slate} as string,",
						"          {Internal Female Slate} as string,",
						"          {External Female Slate} as string,",
						"          {No Female Slate} as string,",
						"          {Internal No Female Slate} as string,",
						"          {External No Female Slate} as string,",
						"          {Female Hired Slate} as string,",
						"          {Internal Female Hired Slate} as string,",
						"          {External Female Hired Slate} as string,",
						"          {Male Slate} as string,",
						"          {Internal Male Slate} as string,",
						"          {External Male Slate} as string,",
						"          {No Male Slate} as string,",
						"          {Internal No Male Slate} as string,",
						"          {External No Male Slate} as string,",
						"          {Male Hired Slate} as string,",
						"          {Internal Male Hired Slate} as string,",
						"          {External Male Hired Slate} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DivSlate",
						"RemoveNullRows alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Candidates StM},",
						"          {Internal Candidates StM},",
						"          {External Candidates StM},",
						"          {Candidates Hired},",
						"          {Internal Candidates Hired},",
						"          {External Candidates Hired},",
						"          {White Candidates StM},",
						"          {Internal White Candidates StM},",
						"          {External White Candidates StM},",
						"          {White Candidates Hired},",
						"          {Internal White Candidates Hired},",
						"          {External White Candidates Hired},",
						"          {Black Candidates StM},",
						"          {Internal Black Candidates StM},",
						"          {External Black Candidates StM},",
						"          {Black Candidates Hired},",
						"          {Internal Black Candidates Hired},",
						"          {External Black Candidates Hired},",
						"          {Latinx Candidates StM},",
						"          {Internal Latinx Candidates StM},",
						"          {External Latinx Candidates StM},",
						"          {Latinx Candidates Hired},",
						"          {Internal Latinx Candidates Hired},",
						"          {External Latinx Candidates Hired},",
						"          {Asian Candidates StM},",
						"          {Internal Asian Candidates StM},",
						"          {External Asian Candidates StM},",
						"          {Asian Candidates Hired},",
						"          {Internal Asian Candidates Hired},",
						"          {External Asian Candidates Hired},",
						"          {2+ Races Candidates StM},",
						"          {Internal 2+ Races Candidates StM},",
						"          {External 2+ Races Candidates StM},",
						"          {2+ Races Candidates Hired},",
						"          {Internal 2+ Races Candidates Hired},",
						"          {External 2+ Races Candidates Hired},",
						"          {Other Candidates StM},",
						"          {Internal Other Candidates StM},",
						"          {External Other Candidates StM},",
						"          {Other Candidates Hired},",
						"          {Internal Other Candidates Hired},",
						"          {External Other Candidates Hired},",
						"          {Male Candidates StM},",
						"          {Internal Male Candidates StM},",
						"          {External Male Candidates StM},",
						"          {Male Candidates Hired},",
						"          {Internal Male Candidates Hired},",
						"          {External Male Candidates Hired},",
						"          {Female Candidates StM},",
						"          {Internal Female Candidates StM},",
						"          {External Female Candidates StM},",
						"          {Female Candidates Hired},",
						"          {Internal Female Candidates Hired},",
						"          {External Female Candidates Hired},",
						"          {Other Gender Candidates StM},",
						"          {Internal Other Gender Candidates StM},",
						"          {External Other Gender Candidates StM},",
						"          {Other Gender Candidates Hired},",
						"          {Internal Other Gender Candidates Hired},",
						"          {External Other Gender Candidates Hired},",
						"          {PoC Candidates StM},",
						"          {Internal PoC Candidates StM},",
						"          {External PoC Candidates StM},",
						"          {PoC  Candidates Hired},",
						"          {Internal PoC  Candidates Hired},",
						"          {External PoC  Candidates Hired},",
						"          {Diverse Candidates StM},",
						"          {Internal Diverse Candidates StM},",
						"          {External Diverse Candidates StM},",
						"          {Diverse Candidates Hired},",
						"          {Internal Diverse Candidates Hired},",
						"          {External Diverse Candidates Hired},",
						"          {Female Not PoC Candidates StM},",
						"          {Internal Female Not PoC Candidates StM},",
						"          {External Female Not PoC Candidates StM},",
						"          {Female Not PoC Candidates Hired},",
						"          {Internal Female Not PoC Candidates Hired},",
						"          {External Female Not PoC Candidates Hired},",
						"          {Female PoC Candidates StM},",
						"          {Internal Female PoC Candidates StM},",
						"          {External Female PoC Candidates StM},",
						"          {Female PoC Candidates Hired},",
						"          {Internal Female PoC Candidates Hired},",
						"          {External Female PoC Candidates Hired},",
						"          {Not Female PoC Candidates StM},",
						"          {Internal Not Female PoC Candidates StM},",
						"          {External Not Female PoC Candidates StM},",
						"          {Not Female PoC Candidates Hired},",
						"          {Internal Not Female PoC Candidates Hired},",
						"          {External Not Female PoC Candidates Hired},",
						"          {Not Female Not PoC Candidates StM},",
						"          {Internal Not Female Not PoC Candidates StM},",
						"          {External Not Female Not PoC Candidates StM},",
						"          {Not Female Not PoC Candidates Hired},",
						"          {Internal Not Female Not PoC Candidates Hired},",
						"          {External Not Female Not PoC Candidates Hired},",
						"          {Diverse Slate},",
						"          {Internal Diverse Slate},",
						"          {External Diverse Slate},",
						"          {No Diverse Slate},",
						"          {Internal No Diverse Slate},",
						"          {External No Diverse Slate},",
						"          {Diverse Hired Slate},",
						"          {Internal Diverse Hired Slate},",
						"          {External Diverse Hired Slate},",
						"          {PoC Slate},",
						"          {Internal PoC Slate},",
						"          {External PoC Slate},",
						"          {No PoC Slate},",
						"          {Internal No PoC Slate},",
						"          {External No PoC Slate},",
						"          {PoC Hired Slate},",
						"          {Internal PoC Hired Slate},",
						"          {External PoC Hired Slate},",
						"          {White Slate},",
						"          {Internal White Slate},",
						"          {External White Slate},",
						"          {No White Slate},",
						"          {Internal No White Slate},",
						"          {External No White Slate},",
						"          {White Hired Slate},",
						"          {Internal White Hired Slate},",
						"          {External White Hired Slate},",
						"          {Black Slate},",
						"          {Internal Black Slate},",
						"          {External Black Slate},",
						"          {No Black Slate},",
						"          {Internal No Black Slate},",
						"          {External No Black Slate},",
						"          {Black Hired Slate},",
						"          {Internal Black Hired Slate},",
						"          {External Black Hired Slate},",
						"          {Latinx Slate},",
						"          {Internal Latinx Slate},",
						"          {External Latinx Slate},",
						"          {No Latinx Slate},",
						"          {Internal No Latinx Slate},",
						"          {External No Latinx Slate},",
						"          {Latinx Hired Slate},",
						"          {Internal Latinx Hired Slate},",
						"          {External Latinx Hired Slate},",
						"          {Asian Slate},",
						"          {Internal Asian Slate},",
						"          {External Asian Slate},",
						"          {No Asian Slate},",
						"          {Internal No Asian Slate},",
						"          {External No Asian Slate},",
						"          {Asian Hired Slate},",
						"          {Internal Asian Hired Slate},",
						"          {External Asian Hired Slate},",
						"          {2+ Races Slate},",
						"          {Internal 2+ Races Slate},",
						"          {External 2+ Races Slate},",
						"          {No 2+ Races Slate},",
						"          {Internal No 2+ Races Slate},",
						"          {External No 2+ Races Slate},",
						"          {2+ Races Hired Slate},",
						"          {Internal 2+ Races Hired Slate},",
						"          {External 2+ Races Hired Slate},",
						"          {Other Race Slate},",
						"          {Internal Other Race Slate},",
						"          {External Other Race Slate},",
						"          {No Other Race Slate},",
						"          {Internal No Other Race Slate},",
						"          {External No Other Race Slate},",
						"          {Other Race Hired Slate},",
						"          {Internal Other Race Hired Slate},",
						"          {External Other Race Hired Slate},",
						"          {Female Slate},",
						"          {Internal Female Slate},",
						"          {External Female Slate},",
						"          {No Female Slate},",
						"          {Internal No Female Slate},",
						"          {External No Female Slate},",
						"          {Female Hired Slate},",
						"          {Internal Female Hired Slate},",
						"          {External Female Hired Slate},",
						"          {Male Slate},",
						"          {Internal Male Slate},",
						"          {External Male Slate},",
						"          {No Male Slate},",
						"          {Internal No Male Slate},",
						"          {External No Male Slate},",
						"          {Male Hired Slate},",
						"          {Internal Male Hired Slate},",
						"          {External Male Hired Slate}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"DivSlate filter(!(isNull({Requisition ID}))) ~> RemoveNullRows",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          ReqId = {Requisition ID},",
						"          CandStM = {Candidates StM},",
						"          IntCandStM = {Internal Candidates StM},",
						"          ExtCandStM = {External Candidates StM},",
						"          CandHired = {Candidates Hired},",
						"          IntCandHired = {Internal Candidates Hired},",
						"          ExtCandHired = {External Candidates Hired},",
						"          WhiteCandStM = {White Candidates StM},",
						"          IntWhiteCandStM = {Internal White Candidates StM},",
						"          ExtWhiteCandStM = {External White Candidates StM},",
						"          WhiteCandHired = {White Candidates Hired},",
						"          IntWhiteCandHired = {Internal White Candidates Hired},",
						"          ExtWhiteCandHired = {External White Candidates Hired},",
						"          BlackCandStM = {Black Candidates StM},",
						"          IntBlackCandStM = {Internal Black Candidates StM},",
						"          ExtBlackCandStM = {External Black Candidates StM},",
						"          BlackCandHired = {Black Candidates Hired},",
						"          IntBlackCandHired = {Internal Black Candidates Hired},",
						"          ExtBlackCandHired = {External Black Candidates Hired},",
						"          LatinxCandStM = {Latinx Candidates StM},",
						"          IntLatinxCandStM = {Internal Latinx Candidates StM},",
						"          ExtLatinxCandStM = {External Latinx Candidates StM},",
						"          LatinxCandHired = {Latinx Candidates Hired},",
						"          IntLatinxCandHired = {Internal Latinx Candidates Hired},",
						"          ExtLatinxCandHired = {External Latinx Candidates Hired},",
						"          AsianCandStM = {Asian Candidates StM},",
						"          IntAsianCandStM = {Internal Asian Candidates StM},",
						"          ExtAsianCandStM = {External Asian Candidates StM},",
						"          AsianCandHired = {Asian Candidates Hired},",
						"          IntAsianCandHired = {Internal Asian Candidates Hired},",
						"          ExtAsianCandHired = {External Asian Candidates Hired},",
						"          TwoPlusRacesCandStM = {2+ Races Candidates StM},",
						"          IntTwoPlusRacesCandStM = {Internal 2+ Races Candidates StM},",
						"          ExtTwoPlusRacesCandStM = {External 2+ Races Candidates StM},",
						"          TwoPlusRacesCandHired = {2+ Races Candidates Hired},",
						"          IntTwoPlusRacesCandHired = {Internal 2+ Races Candidates Hired},",
						"          ExtTwoPlusRacesCandHired = {External 2+ Races Candidates Hired},",
						"          OtherCandStM = {Other Candidates StM},",
						"          IntOtherCandStM = {Internal Other Candidates StM},",
						"          ExtOtherCandStM = {External Other Candidates StM},",
						"          OtherCandHired = {Other Candidates Hired},",
						"          IntOtherCandHired = {Internal Other Candidates Hired},",
						"          ExtOtherCandHired = {External Other Candidates Hired},",
						"          MaleCandStM = {Male Candidates StM},",
						"          IntMaleCandStM = {Internal Male Candidates StM},",
						"          ExtMaleCandStM = {External Male Candidates StM},",
						"          MaleCandHired = {Male Candidates Hired},",
						"          IntMaleCandHired = {Internal Male Candidates Hired},",
						"          ExtMaleCandHired = {External Male Candidates Hired},",
						"          FemaleCandStM = {Female Candidates StM},",
						"          IntFemaleCandStM = {Internal Female Candidates StM},",
						"          ExtFemaleCandStM = {External Female Candidates StM},",
						"          FemaleCandHired = {Female Candidates Hired},",
						"          IntFemaleCandHired = {Internal Female Candidates Hired},",
						"          ExtFemaleCandHired = {External Female Candidates Hired},",
						"          OtherGenderCandStM = {Other Gender Candidates StM},",
						"          IntOtherGenderCandStM = {Internal Other Gender Candidates StM},",
						"          ExtOtherGenderCandStM = {External Other Gender Candidates StM},",
						"          OtherGenderCandHired = {Other Gender Candidates Hired},",
						"          IntOtherGenderCandHired = {Internal Other Gender Candidates Hired},",
						"          ExtOtherGenderCandHired = {External Other Gender Candidates Hired},",
						"          PoCCandStM = {PoC Candidates StM},",
						"          IntPoCCandStM = {Internal PoC Candidates StM},",
						"          ExtPoCCandStM = {External PoC Candidates StM},",
						"          PoCCandHired = {PoC  Candidates Hired},",
						"          IntPoCCandHired = {Internal PoC  Candidates Hired},",
						"          ExtPoCCandHired = {External PoC  Candidates Hired},",
						"          DiverseCandStM = {Diverse Candidates StM},",
						"          IntDiverseCandStM = {Internal Diverse Candidates StM},",
						"          ExtDiverseCandStM = {External Diverse Candidates StM},",
						"          DiverseCandHired = {Diverse Candidates Hired},",
						"          IntDiverseCandHired = {Internal Diverse Candidates Hired},",
						"          ExtDiverseCandHired = {External Diverse Candidates Hired},",
						"          FemaleNotPoCCandStM = {Female Not PoC Candidates StM},",
						"          IntFemaleNotPoCCandStM = {Internal Female Not PoC Candidates StM},",
						"          ExtFemaleNotPoCCandStM = {External Female Not PoC Candidates StM},",
						"          FemaleNotPoCCandHired = {Female Not PoC Candidates Hired},",
						"          IntFemaleNotPoCCandHired = {Internal Female Not PoC Candidates Hired},",
						"          ExtFemaleNotPoCCandHired = {External Female Not PoC Candidates Hired},",
						"          FemalePoCCandStM = {Female PoC Candidates StM},",
						"          IntFemalePoCCandStM = {Internal Female PoC Candidates StM},",
						"          ExtFemalePoCCandStM = {External Female PoC Candidates StM},",
						"          FemalePoCCandHired = {Female PoC Candidates Hired},",
						"          IntFemalePoCCandHired = {Internal Female PoC Candidates Hired},",
						"          ExtFemalePoCCandHired = {External Female PoC Candidates Hired},",
						"          NotFemalePoCCandStM = {Not Female PoC Candidates StM},",
						"          IntNotFemalePoCCandStM = {Internal Not Female PoC Candidates StM},",
						"          ExtNotFemalePoCCandStM = {External Not Female PoC Candidates StM},",
						"          NotFemaleNotPoCCandHired = {Not Female PoC Candidates Hired},",
						"          IntNotFemaleNotPoCCandHired = {Internal Not Female PoC Candidates Hired},",
						"          ExtNotFemaleNotPoCCandHired = {External Not Female PoC Candidates Hired},",
						"          NotFemaleNotPoCCandStM = {Not Female Not PoC Candidates StM},",
						"          IntNotFemaleNotPoCCandStM = {Internal Not Female Not PoC Candidates StM},",
						"          ExtNotFemaleNotPoCCandStM = {External Not Female Not PoC Candidates StM},",
						"          NotFemalePoCCandHired = {Not Female Not PoC Candidates Hired},",
						"          IntNotFemalePoCCandHired = {Internal Not Female Not PoC Candidates Hired},",
						"          ExtNotFemalePoCCandHired = {External Not Female Not PoC Candidates Hired},",
						"          DiverseSlate = {Diverse Slate},",
						"          IntDiverseSlate = {Internal Diverse Slate},",
						"          ExtDiverseSlate = {External Diverse Slate},",
						"          NoDiverseSlate = {No Diverse Slate},",
						"          IntNoDiverseSlate = {Internal No Diverse Slate},",
						"          ExtNoDiverseSlate = {External No Diverse Slate},",
						"          DiverseHiredSlate = {Diverse Hired Slate},",
						"          IntDiverseHiredSlate = {Internal Diverse Hired Slate},",
						"          ExtDiverseHiredSlate = {External Diverse Hired Slate},",
						"          PoCSlate = {PoC Slate},",
						"          IntPoCSlate = {Internal PoC Slate},",
						"          ExtPoCSlate = {External PoC Slate},",
						"          NoPoCSlate = {No PoC Slate},",
						"          IntNoPoCSlate = {Internal No PoC Slate},",
						"          ExtNoPoCSlate = {External No PoC Slate},",
						"          PoCHiredSlate = {PoC Hired Slate},",
						"          IntPoCHiredSlate = {Internal PoC Hired Slate},",
						"          ExtPoCHiredSlate = {External PoC Hired Slate},",
						"          WhiteSlate = {White Slate},",
						"          IntWhiteSlate = {Internal White Slate},",
						"          ExtWhiteSlate = {External White Slate},",
						"          NoWhiteSlate = {No White Slate},",
						"          IntNoWhiteSlate = {Internal No White Slate},",
						"          ExtNoWhiteSlate = {External No White Slate},",
						"          WhiteHiredSlate = {White Hired Slate},",
						"          IntWhiteHiredSlate = {Internal White Hired Slate},",
						"          ExtWhiteHiredSlate = {External White Hired Slate},",
						"          BlackSlate = {Black Slate},",
						"          IntBlackSlate = {Internal Black Slate},",
						"          ExtBlackSlate = {External Black Slate},",
						"          NoBlackSlate = {No Black Slate},",
						"          IntNoBlackSlate = {Internal No Black Slate},",
						"          ExtNoBlackSlate = {External No Black Slate},",
						"          BlackHiredSlate = {Black Hired Slate},",
						"          IntBlackHiredSlate = {Internal Black Hired Slate},",
						"          ExtBlackHiredSlate = {External Black Hired Slate},",
						"          LatinxSlate = {Latinx Slate},",
						"          IntLatinxSlate = {Internal Latinx Slate},",
						"          ExtLatinxSlate = {External Latinx Slate},",
						"          NoLatinxSlate = {No Latinx Slate},",
						"          IntNoLatinxSlate = {Internal No Latinx Slate},",
						"          ExtNoLatinxSlate = {External No Latinx Slate},",
						"          LatinxHiredSlate = {Latinx Hired Slate},",
						"          IntLatinxHiredSlate = {Internal Latinx Hired Slate},",
						"          ExtLatinxHiredSlate = {External Latinx Hired Slate},",
						"          AsianSlate = {Asian Slate},",
						"          IntAsianSlate = {Internal Asian Slate},",
						"          ExtAsianSlate = {External Asian Slate},",
						"          NoAsianSlate = {No Asian Slate},",
						"          IntNoAsianSlate = {Internal No Asian Slate},",
						"          ExtNoAsianSlate = {External No Asian Slate},",
						"          AsianHiredSlate = {Asian Hired Slate},",
						"          IntAsianHiredSlate = {Internal Asian Hired Slate},",
						"          ExtAsianHiredSlate = {External Asian Hired Slate},",
						"          TwoPlusRacesSlate = {2+ Races Slate},",
						"          IntTwoPlusRacesSlate = {Internal 2+ Races Slate},",
						"          ExtTwoPlusRacesSlate = {External 2+ Races Slate},",
						"          NoTwoPlusRacesSlate = {No 2+ Races Slate},",
						"          IntNoTwoPlusRacesSlate = {Internal No 2+ Races Slate},",
						"          ExtNoTwoPlusRacesSlate = {External No 2+ Races Slate},",
						"          TwoPlusRacesHiredSlate = {2+ Races Hired Slate},",
						"          IntTwoPlusRacesHiredSlate = {Internal 2+ Races Hired Slate},",
						"          ExtTwoPlusRacesHiredSlate = {External 2+ Races Hired Slate},",
						"          OtherRaceSlate = {Other Race Slate},",
						"          IntOtherRaceSlate = {Internal Other Race Slate},",
						"          ExtOtherRaceSlate = {External Other Race Slate},",
						"          NoOtherRaceSlate = {No Other Race Slate},",
						"          IntNoOtherRaceSlate = {Internal No Other Race Slate},",
						"          ExtNoOtherRaceSlate = {External No Other Race Slate},",
						"          OtherRaceHiredSlate = {Other Race Hired Slate},",
						"          IntOtherRaceHiredSlate = {Internal Other Race Hired Slate},",
						"          ExtOtherRaceHiredSlate = {External Other Race Hired Slate},",
						"          FemaleSlate = {Female Slate},",
						"          IntFemaleSlate = {Internal Female Slate},",
						"          ExtFemaleSlate = {External Female Slate},",
						"          NoFemaleSlate = {No Female Slate},",
						"          IntNoFemaleSlate = {Internal No Female Slate},",
						"          ExtNoFemaleSlate = {External No Female Slate},",
						"          FemaleHiredSlate = {Female Hired Slate},",
						"          IntFemaleHiredSlate = {Internal Female Hired Slate},",
						"          ExtFemaleHiredSlate = {External Female Hired Slate},",
						"          MaleSlate = {Male Slate},",
						"          IntMaleSlate = {Internal Male Slate},",
						"          ExtMaleSlate = {External Male Slate},",
						"          NoMaleSlate = {No Male Slate},",
						"          IntNoMaleSlate = {Internal No Male Slate},",
						"          ExtNoMaleSlate = {External No Male Slate},",
						"          MaleHiredSlate = {Male Hired Slate},",
						"          IntMaleHiredSlate = {Internal Male Hired Slate},",
						"          ExtMaleHiredSlate = {External Male Hired Slate},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendDivSlateFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_DivSlate_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentDivSlateFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_DivSlate_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DivSlate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendDivSlateFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASlateFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> DivSlate",
						"DivSlate alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          ReqId,",
						"          CandStM,",
						"          IntCandStM,",
						"          ExtCandStM,",
						"          CandHired,",
						"          IntCandHired,",
						"          ExtCandHired,",
						"          WhiteCandStM,",
						"          IntWhiteCandStM,",
						"          ExtWhiteCandStM,",
						"          WhiteCandHired,",
						"          IntWhiteCandHired,",
						"          ExtWhiteCandHired,",
						"          BlackCandStM,",
						"          IntBlackCandStM,",
						"          ExtBlackCandStM,",
						"          BlackCandHired,",
						"          IntBlackCandHired,",
						"          ExtBlackCandHired,",
						"          LatinxCandStM,",
						"          IntLatinxCandStM,",
						"          ExtLatinxCandStM,",
						"          LatinxCandHired,",
						"          IntLatinxCandHired,",
						"          ExtLatinxCandHired,",
						"          AsianCandStM,",
						"          IntAsianCandStM,",
						"          ExtAsianCandStM,",
						"          AsianCandHired,",
						"          IntAsianCandHired,",
						"          ExtAsianCandHired,",
						"          TwoPlusRacesCandStM,",
						"          IntTwoPlusRacesCandStM,",
						"          ExtTwoPlusRacesCandStM,",
						"          TwoPlusRacesCandHired,",
						"          IntTwoPlusRacesCandHired,",
						"          ExtTwoPlusRacesCandHired,",
						"          OtherCandStM,",
						"          IntOtherCandStM,",
						"          ExtOtherCandStM,",
						"          OtherCandHired,",
						"          IntOtherCandHired,",
						"          ExtOtherCandHired,",
						"          MaleCandStM,",
						"          IntMaleCandStM,",
						"          ExtMaleCandStM,",
						"          MaleCandHired,",
						"          IntMaleCandHired,",
						"          ExtMaleCandHired,",
						"          FemaleCandStM,",
						"          IntFemaleCandStM,",
						"          ExtFemaleCandStM,",
						"          FemaleCandHired,",
						"          IntFemaleCandHired,",
						"          ExtFemaleCandHired,",
						"          OtherGenderCandStM,",
						"          IntOtherGenderCandStM,",
						"          ExtOtherGenderCandStM,",
						"          OtherGenderCandHired,",
						"          IntOtherGenderCandHired,",
						"          ExtOtherGenderCandHired,",
						"          PoCCandStM,",
						"          IntPoCCandStM,",
						"          ExtPoCCandStM,",
						"          PoCCandHired,",
						"          IntPoCCandHired,",
						"          ExtPoCCandHired,",
						"          DiverseCandStM,",
						"          IntDiverseCandStM,",
						"          ExtDiverseCandStM,",
						"          DiverseCandHired,",
						"          IntDiverseCandHired,",
						"          ExtDiverseCandHired,",
						"          FemalePoCCandStM,",
						"          IntFemalePoCCandStM,",
						"          ExtFemalePoCCandStM,",
						"          FemalePoCCandHired,",
						"          IntFemalePoCCandHired,",
						"          ExtFemalePoCCandHired,",
						"          FemaleNotPoCCandStM,",
						"          IntFemaleNotPoCCandStM,",
						"          ExtFemaleNotPoCCandStM,",
						"          FemaleNotPoCCandHired,",
						"          IntFemaleNotPoCCandHired,",
						"          ExtFemaleNotPoCCandHired,",
						"          NotFemalePoCCandStM,",
						"          IntNotFemalePoCCandStM,",
						"          ExtNotFemalePoCCandStM,",
						"          NotFemalePoCCandHired,",
						"          IntNotFemalePoCCandHired,",
						"          ExtNotFemalePoCCandHired,",
						"          NotFemaleNotPoCCandStM,",
						"          IntNotFemaleNotPoCCandStM,",
						"          ExtNotFemaleNotPoCCandStM,",
						"          NotFemaleNotPoCCandHired,",
						"          IntNotFemaleNotPoCCandHired,",
						"          ExtNotFemaleNotPoCCandHired,",
						"          DiverseSlate,",
						"          IntDiverseSlate,",
						"          ExtDiverseSlate,",
						"          NoDiverseSlate,",
						"          IntNoDiverseSlate,",
						"          ExtNoDiverseSlate,",
						"          DiverseHiredSlate,",
						"          IntDiverseHiredSlate,",
						"          ExtDiverseHiredSlate,",
						"          PoCSlate,",
						"          IntPoCSlate,",
						"          ExtPoCSlate,",
						"          NoPoCSlate,",
						"          IntNoPoCSlate,",
						"          ExtNoPoCSlate,",
						"          PoCHiredSlate,",
						"          IntPoCHiredSlate,",
						"          ExtPoCHiredSlate,",
						"          WhiteSlate,",
						"          IntWhiteSlate,",
						"          ExtWhiteSlate,",
						"          NoWhiteSlate,",
						"          IntNoWhiteSlate,",
						"          ExtNoWhiteSlate,",
						"          WhiteHiredSlate,",
						"          IntWhiteHiredSlate,",
						"          ExtWhiteHiredSlate,",
						"          BlackSlate,",
						"          IntBlackSlate,",
						"          ExtBlackSlate,",
						"          NoBlackSlate,",
						"          IntNoBlackSlate,",
						"          ExtNoBlackSlate,",
						"          BlackHiredSlate,",
						"          IntBlackHiredSlate,",
						"          ExtBlackHiredSlate,",
						"          LatinxSlate,",
						"          IntLatinxSlate,",
						"          ExtLatinxSlate,",
						"          NoLatinxSlate,",
						"          IntNoLatinxSlate,",
						"          ExtNoLatinxSlate,",
						"          LatinxHiredSlate,",
						"          IntLatinxHiredSlate,",
						"          ExtLatinxHiredSlate,",
						"          AsianSlate,",
						"          IntAsianSlate,",
						"          ExtAsianSlate,",
						"          NoAsianSlate,",
						"          IntNoAsianSlate,",
						"          ExtNoAsianSlate,",
						"          AsianHiredSlate,",
						"          IntAsianHiredSlate,",
						"          ExtAsianHiredSlate,",
						"          TwoPlusRacesSlate,",
						"          IntTwoPlusRacesSlate,",
						"          ExtTwoPlusRacesSlate,",
						"          NoTwoPlusRacesSlate,",
						"          IntNoTwoPlusRacesSlate,",
						"          ExtNoTwoPlusRacesSlate,",
						"          TwoPlusRacesHiredSlate,",
						"          IntTwoPlusRacesHiredSlate,",
						"          ExtTwoPlusRacesHiredSlate,",
						"          OtherRaceSlate,",
						"          IntOtherRaceSlate,",
						"          ExtOtherRaceSlate,",
						"          NoOtherRaceSlate,",
						"          IntNoOtherRaceSlate,",
						"          ExtNoOtherRaceSlate,",
						"          OtherRaceHiredSlate,",
						"          IntOtherRaceHiredSlate,",
						"          ExtOtherRaceHiredSlate,",
						"          FemaleSlate,",
						"          IntFemaleSlate,",
						"          ExtFemaleSlate,",
						"          NoFemaleSlate,",
						"          IntNoFemaleSlate,",
						"          ExtNoFemaleSlate,",
						"          FemaleHiredSlate,",
						"          IntFemaleHiredSlate,",
						"          ExtFemaleHiredSlate,",
						"          MaleSlate,",
						"          IntMaleSlate,",
						"          ExtMaleSlate,",
						"          NoMaleSlate,",
						"          IntNoMaleSlate,",
						"          ExtNoMaleSlate,",
						"          MaleHiredSlate,",
						"          IntMaleHiredSlate,",
						"          ExtMaleHiredSlate,",
						"          LoadDt",
						"     )) ~> AppendDivSlateFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentDivSlateFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendOtherFactTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OtherNullRecordOutput"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as double,",
						"          {Other (Num Value 2)} as double,",
						"          {Other (Date Value 1)} as date,",
						"          {Other (Date Value 2)} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"Other alterRow(deleteIf(isNull({Worker ID})),",
						"     upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Year})),",
						"     deleteIf(isNull({Event (Type)}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          WorkerId = {Worker ID},",
						"          EventDt = {Event Date},",
						"          EventMonth,",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId = {Event ID},",
						"          EventType = {Event (Type)},",
						"          EventDesc = {Event (Desc)},",
						"          OtherCharVal1 = {Other (Char Value 1)},",
						"          OtherCharVal2 = {Other (Char Value 2)},",
						"          OtherNumVal1 = {Other (Num Value 1)},",
						"          OtherNumVal2 = {Other (Num Value 2)},",
						"          OtherDtVal1 = {Other (Date Value 1)},",
						"          OtherDtVal2 = {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(WorkerId = iif(isNull(WorkerId),'N/A',WorkerId),",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 filter(WorkerId!='N/A') ~> filter1",
						"derivedColumn1 filter(WorkerId=='N/A') ~> filter2",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventYear','EventType','EventDesc','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventDesc,",
						"          EventType,",
						"          OtherCharVal11 = OtherCharVal1,",
						"          OtherCharVal2,",
						"          OtherNumVal1,",
						"          OtherNumVal2,",
						"          OtherDtVal1,",
						"          OtherDtVal2,",
						"          LoadDt",
						"     )) ~> AppendOtherFactTbl",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Other Core Fact Table Load - Reject Records.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OtherNullRecordOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_OtherCore_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_OtherCore_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendOtherFactTbl"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Other",
						"Other alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventYear','EventType','WorkerId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendOtherFactTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "PerRatingHistory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendTalentMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date,",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as short,",
						"          {Curr Performance Rating Date} as date,",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as integer,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as short,",
						"          {P1 Performance Rating Date} as date,",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as integer,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as short,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as date,",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as integer,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as short,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as date,",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as integer,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerRatingHistory",
						"PerRatingHistory alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Worker ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          WorkerId = {Worker ID},",
						"          LastPerfYear = {Last Performance Year},",
						"          LastPerfRatingDt = {Last Performance Rating Date},",
						"          LastClientPerfRating = {Last Client Performance Rating},",
						"          LastElloreePerfRating = {Last Elloree Performance Rating},",
						"          LastElloreePerfRatingSortId = {Last Elloree Performance Rating Sort Id},",
						"          LastTopTalentInd = {Last Top Talent Ind},",
						"          CurrPerfYear = {Curr Performance Year},",
						"          CurrPerfRatingDt = {Curr Performance Rating Date},",
						"          CurrTalentTag = {Curr Talent Tag},",
						"          CurrClientPerfRating = {Curr Client Performance Rating},",
						"          CurrElloreePerfRating = {Curr Elloree Performance Rating},",
						"          CurrElloreePerfRatingSortId = {Curr Elloree Performance Rating Sort Id},",
						"          CurrTopTalentInd = {Curr Top Talent Ind},",
						"          P1PerfYear = {P1 Performance Year},",
						"          P1PerfRatingDt = {P1 Performance Rating Date},",
						"          P1ClientPerfRating = {P1 Client Performance Rating},",
						"          P1ElloreePerfRating = {P1 Elloree Performance Rating},",
						"          P1ElloreePerfRatingSortId = {P1 Elloree Performance Rating Sort Id},",
						"          P1TopTalentInd = {P1 Top Talent Ind},",
						"          P2PerfYear = {P2 Performance Year},",
						"          P2PerfRatingDt = {P2 Performance Rating Date},",
						"          P2ClientPerfRating = {P2 Client Performance Rating},",
						"          P2ElloreePerfRating = {P2 Elloree Performance Rating},",
						"          P2ElloreePerfRatingSortId = {P2 Elloree Performance Rating Sort Id},",
						"          P2TopTalentInd = {P2 Top Talent Ind},",
						"          P3PerfYear = {P3 Performance Year},",
						"          P3PerfRatingDt = {P3 Performance Rating Date},",
						"          P3ClientPerfRating = {P3 Client Performance Rating},",
						"          P3ElloreePerfRating = {P3 Elloree Performance Rating},",
						"          P3ElloreePerfRatingSortId = {P3 Elloree Performance Rating Sort Id},",
						"          P3TopTalentInd = {P3 Top Talent Ind},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"AlterColumnNamesforMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          WorkerId,",
						"          LastPerfYear,",
						"          LastPerfRatingDt,",
						"          LastClientPerfRating,",
						"          LastElloreePerfRating,",
						"          LastElloreePerfRatingSortId,",
						"          LastTopTalentInd,",
						"          CurrPerfYear,",
						"          CurrPerfRatingDt,",
						"          CurrTalentTag,",
						"          CurrClientPerfRating,",
						"          CurrElloreePerfRating,",
						"          CurrElloreePerfRatingSortId,",
						"          CurrTopTalentInd,",
						"          P1PerfYear,",
						"          P1PerfRatingDt,",
						"          P1ClientPerfRating,",
						"          P1ElloreePerfRating,",
						"          P1ElloreePerfRatingSortId,",
						"          P1TopTalentInd,",
						"          P2PerfYear,",
						"          P2PerfRatingDt,",
						"          P2ClientPerfRating,",
						"          P2ElloreePerfRating,",
						"          P2ElloreePerfRatingSortId,",
						"          P2TopTalentInd,",
						"          P3PerfYear,",
						"          P3PerfRatingDt,",
						"          P3ClientPerfRating,",
						"          P3ElloreePerfRating,",
						"          P3ElloreePerfRatingSortId,",
						"          P3TopTalentInd,",
						"          LoadDt",
						"     )) ~> AppendTalentMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_PerRatingHistory_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_PerfRatingHist_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerRatingHistory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendTalentMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> PerRatingHistory",
						"PerRatingHistory alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendTalentMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "addLoadDt"
						},
						{
							"name": "RestrictFieldColumnLength"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date 'yyyy-MM-dd',",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull(Event)),",
						"     deleteIf(isNull({Requisition ID}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventDt = {Event Date},",
						"          EventQuarter = {Event Quarter},",
						"          EventMonth,",
						"          EventYear = {Event Year},",
						"          Event,",
						"          EventId,",
						"          ReqId = {Requisition ID},",
						"          ReqType = {Requisition Type},",
						"          PostingDt = {Posting Date},",
						"          ReqStatus = {Requisition Status},",
						"          NumberofOpenings = {Number of Openings},",
						"          JobTitle = {Job Title},",
						"          JobFunction = {Job Function},",
						"          CorpTitle = {Corporate Title},",
						"          WorkOfficeLoc = {Work Office Location},",
						"          WorkOfficeCity = {Work Office City},",
						"          WorkOfficeState = {Work Office State},",
						"          WorkOfficeCountry = {Work Office Country},",
						"          WorkStrategicLocInd = {Strategic Work Location Ind},",
						"          BusinessGrpLvl1 = {Business Group Level 1},",
						"          BusinessGrpLvl2 = {Business Group Level 2},",
						"          BusinessGrpLvl3 = {Business Group Level 3},",
						"          BusinessGrpLvl4 = {Business Group Level 4},",
						"          HiringMgrWorkerId = {Hiring Manager Worker ID},",
						"          PrimaryRecruiterWorkerId = {Primary Recruiter Worker ID},",
						"          ReqOther1 = {Requisition Other (1)},",
						"          ReqOther2 = {Requisition Other (2)},",
						"          ReqOther3 = {Requisition Other (3)},",
						"          ReqOther4 = {Requisition Other (4)},",
						"          ReqOther5 = {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> addLoadDt",
						"addLoadDt derive(JobTitle = left(JobTitle,100)) ~> RestrictFieldColumnLength",
						"RestrictFieldColumnLength sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          ReqId,",
						"          ReqType,",
						"          PostingDt,",
						"          ReqStatus,",
						"          NumberofOpenings,",
						"          JobTitle,",
						"          JobFunction,",
						"          CorpTitle,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          HiringMgrWorkerId,",
						"          PrimaryRecruiterWorkerId,",
						"          ReqOther1,",
						"          ReqOther2,",
						"          ReqOther3,",
						"          ReqOther4,",
						"          ReqOther5,",
						"          LoadDt",
						"     )) ~> AppendReqFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Req_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqFact"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "addLoadDt"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Requisitions",
						"Requisitions alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> addLoadDt",
						"addLoadDt sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','EventId','ReqId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_SilverMedalist_File",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendSilverMedalistFAct"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Event Year} as short,",
						"          {Applicant ID} as string,",
						"          {Internal Worker ID} as string,",
						"          {Requisition ID} as string,",
						"          {Silver Medalist Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SilverMedalist",
						"SilverMedalist alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Event Year})),",
						"     deleteIf(isNull({Requisition ID})),",
						"     deleteIf(isNull({Applicant ID}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          ApplId = {Applicant ID},",
						"          IntWorkerId = {Internal Worker ID},",
						"          ReqId = {Requisition ID},",
						"          SilverMedalistInd = {Silver Medalist Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventYear','ReqId','ApplId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendSilverMedalistFAct"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_SilverMedalist_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_SilverMedalist_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendSilverMedalistFAct"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"SilverMedalist alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventYear','ReqId','ApplId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendSilverMedalistFAct"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Speedbumps_File",
								"type": "DatasetReference"
							},
							"name": "Speedbumps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Core Event Id} as string,",
						"          {Core Event Quarter} as integer,",
						"          {Core Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Speedbump Worker Status} as string,",
						"          {Speedbump Population Ind} as string,",
						"          {Speedbump 1 Name} as string,",
						"          {Speedbump 1 Desc} as string,",
						"          {Speedbump 1 Flag} as string,",
						"          {Speedbump 2 Name} as string,",
						"          {Speedbump 2 Desc} as string,",
						"          {Speedbump 2 Flag} as string,",
						"          {Speedbump 3 Name} as string,",
						"          {Speedbump 3 Desc} as string,",
						"          {Speedbump 3 Flag} as string,",
						"          {Speedbump 4 Name} as string,",
						"          {Speedbump 4 Desc} as string,",
						"          {Speedbump 4 Flag} as string,",
						"          {Speedbump 5 Name} as string,",
						"          {Speedbump 5 Desc} as string,",
						"          {Speedbump 5 Flag} as string,",
						"          {Speedbump 6 Name} as string,",
						"          {Speedbump 6 Desc} as string,",
						"          {Speedbump 6 Flag} as string,",
						"          {Speedbump 7 Name} as string,",
						"          {Speedbump 7 Desc} as string,",
						"          {Speedbump 7 Flag} as string,",
						"          {Speedbump 8 Name} as string,",
						"          {Speedbump 8 Desc} as string,",
						"          {Speedbump 8 Flag} as string,",
						"          {Speedbump 9 Name} as string,",
						"          {Speedbump 9 Desc} as string,",
						"          {Speedbump 9 Flag} as string,",
						"          {Speedbump 10 Name} as string,",
						"          {Speedbump 10 Desc} as string,",
						"          {Speedbump 10 Flag} as string,",
						"          {Speedbump 11 Name} as string,",
						"          {Speedbump 11 Desc} as string,",
						"          {Speedbump 11 Flag} as string,",
						"          {Speedbump 12 Name} as string,",
						"          {Speedbump 12 Desc} as string,",
						"          {Speedbump 12 Flag} as string,",
						"          {Speedbump 13 Name} as string,",
						"          {Speedbump 13 Desc} as string,",
						"          {Speedbump 13 Flag} as string,",
						"          {Speedbump 14 Name} as string,",
						"          {Speedbump 14 Desc} as string,",
						"          {Speedbump 14 Flag} as string,",
						"          {Speedbump 15 Name} as string,",
						"          {Speedbump 15 Desc} as string,",
						"          {Speedbump 15 Flag} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Speedbumps",
						"Speedbumps alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Worker ID})),",
						"     deleteIf(isNull({Event Year}))) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventQuarter = {Event Quarter},",
						"          EventYear = {Event Year},",
						"          CoreEventId = {Core Event Id},",
						"          CoreEventQuarter = {Core Event Quarter},",
						"          CoreEventDate = {Core Event Date},",
						"          WorkerId = {Worker ID},",
						"          SpeedbumnpWorkerStatus = {Speedbump Worker Status},",
						"          SpeedbumpPopulationInd = {Speedbump Population Ind},",
						"          Speedbump1Name = {Speedbump 1 Name},",
						"          Speedbump1Desc = {Speedbump 1 Desc},",
						"          Speedbump1Flag = {Speedbump 1 Flag},",
						"          Speedbump2Name = {Speedbump 2 Name},",
						"          Speedbump2Desc = {Speedbump 2 Desc},",
						"          Speedbump2Flag = {Speedbump 2 Flag},",
						"          Speedbump3Name = {Speedbump 3 Name},",
						"          Speedbump3Desc = {Speedbump 3 Desc},",
						"          Speedbump3Flag = {Speedbump 3 Flag},",
						"          Speedbump4Name = {Speedbump 4 Name},",
						"          Speedbump4Desc = {Speedbump 4 Desc},",
						"          Speedbump4Flag = {Speedbump 4 Flag},",
						"          Speedbump5Name = {Speedbump 5 Name},",
						"          Speedbump5Desc = {Speedbump 5 Desc},",
						"          Speedbump5Flag = {Speedbump 5 Flag},",
						"          Speedbump6Name = {Speedbump 6 Name},",
						"          Speedbump6Desc = {Speedbump 6 Desc},",
						"          Speedbump6Flag = {Speedbump 6 Flag},",
						"          Speedbump7Name = {Speedbump 7 Name},",
						"          Speedbump7Desc = {Speedbump 7 Desc},",
						"          Speedbump7Flag = {Speedbump 7 Flag},",
						"          Speedbump8Name = {Speedbump 8 Name},",
						"          Speedbump8Desc = {Speedbump 8 Desc},",
						"          Speedbump8Flag = {Speedbump 8 Flag},",
						"          Speedbump9Name = {Speedbump 9 Name},",
						"          Speedbump9Desc = {Speedbump 9 Desc},",
						"          Speedbump9Flag = {Speedbump 9 Flag},",
						"          Speedbump10Name = {Speedbump 10 Name},",
						"          Speedbump10Desc = {Speedbump 10 Desc},",
						"          Speedbump10Flag = {Speedbump 10 Flag},",
						"          Speedbump11Name = {Speedbump 11 Name},",
						"          Speedbump11Desc = {Speedbump 11 Desc},",
						"          Speedbump11Flag = {Speedbump 11 Flag},",
						"          Speedbump12Name = {Speedbump 12 Name},",
						"          Speedbump12Desc = {Speedbump 12 Desc},",
						"          Speedbump12Flag = {Speedbump 12 Flag},",
						"          Speedbump13Name = {Speedbump 13 Name},",
						"          Speedbump13Desc = {Speedbump 13 Desc},",
						"          Speedbump13Flag = {Speedbump 13 Flag},",
						"          Speedbump14Name = {Speedbump 14 Name},",
						"          Speedbump14Desc = {Speedbump 14 Desc},",
						"          Speedbump14Flag = {Speedbump 14 Flag},",
						"          Speedbump15Name = {Speedbump 15 Name},",
						"          Speedbump15Desc = {Speedbump 15 Desc},",
						"          Speedbump15Flag = {Speedbump 15 Flag},",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','EventYear','EventQuarter'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventQuarter,",
						"          EventYear,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate,",
						"          WorkerId,",
						"          SpeedbumnpWorkerStatus,",
						"          SpeedbumpPopulationInd,",
						"          Speedbump1Name,",
						"          Speedbump1Desc,",
						"          Speedbump1Flag,",
						"          Speedbump2Name,",
						"          Speedbump2Desc,",
						"          Speedbump2Flag,",
						"          Speedbump3Name,",
						"          Speedbump3Desc,",
						"          Speedbump3Flag,",
						"          Speedbump4Name,",
						"          Speedbump4Desc,",
						"          Speedbump4Flag,",
						"          Speedbump5Name,",
						"          Speedbump5Desc,",
						"          Speedbump5Flag,",
						"          Speedbump6Name,",
						"          Speedbump6Desc,",
						"          Speedbump6Flag,",
						"          Speedbump7Name,",
						"          Speedbump7Desc,",
						"          Speedbump7Flag,",
						"          Speedbump8Name,",
						"          Speedbump8Desc,",
						"          Speedbump8Flag,",
						"          Speedbump9Name,",
						"          Speedbump9Desc,",
						"          Speedbump9Flag,",
						"          Speedbump10Name,",
						"          Speedbump10Desc,",
						"          Speedbump10Flag,",
						"          Speedbump11Name,",
						"          Speedbump11Desc,",
						"          Speedbump11Flag,",
						"          Speedbump12Name,",
						"          Speedbump12Desc,",
						"          Speedbump12Flag,",
						"          Speedbump13Name,",
						"          Speedbump13Desc,",
						"          Speedbump13Flag,",
						"          Speedbump14Name,",
						"          Speedbump14Desc,",
						"          Speedbump14Flag,",
						"          Speedbump15Name,",
						"          Speedbump15Desc,",
						"          Speedbump15Flag,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Speedbumps_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentSpeedbumpsFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Speedbumps_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "Speedbumps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Speedbumps",
						"Speedbumps alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','WorkerId','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          EventQuarter,",
						"          EventYear,",
						"          WorkerId,",
						"          SpeedbumpPopulationInd,",
						"          Speedbump1Name,",
						"          Speedbump1Desc,",
						"          Speedbump1Flag,",
						"          Speedbump2Name,",
						"          Speedbump2Desc,",
						"          Speedbump2Flag,",
						"          Speedbump3Name,",
						"          Speedbump3Desc,",
						"          Speedbump3Flag,",
						"          Speedbump4Name,",
						"          Speedbump4Desc,",
						"          Speedbump4Flag,",
						"          Speedbump5Name,",
						"          Speedbump5Desc,",
						"          Speedbump5Flag,",
						"          Speedbump6Name,",
						"          Speedbump6Desc,",
						"          Speedbump6Flag,",
						"          Speedbump7Name,",
						"          Speedbump7Desc,",
						"          Speedbump7Flag,",
						"          Speedbump8Name,",
						"          Speedbump8Desc,",
						"          Speedbump8Flag,",
						"          Speedbump9Name,",
						"          Speedbump9Desc,",
						"          Speedbump9Flag,",
						"          Speedbump10Name,",
						"          Speedbump10Desc,",
						"          Speedbump10Flag,",
						"          Speedbump11Name,",
						"          Speedbump11Desc,",
						"          Speedbump11Flag,",
						"          Speedbump12Name,",
						"          Speedbump12Desc,",
						"          Speedbump12Flag,",
						"          Speedbump13Name,",
						"          Speedbump13Desc,",
						"          Speedbump13Flag,",
						"          Speedbump14Name,",
						"          Speedbump14Desc,",
						"          Speedbump14Flag,",
						"          Speedbump15Name,",
						"          Speedbump15Desc,",
						"          Speedbump15Flag,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentSpeedbumpsFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Talent')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendTalentMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"Talent alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Performance Rating}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          EventYear = {Event Year},",
						"          EventDt = {Event Date},",
						"          Event,",
						"          EventType = {Event Type},",
						"          WorkerId = {Worker ID},",
						"          PerfRating = {Performance Rating},",
						"          PerfRatingDt = {Performance Rating Date},",
						"          TalentIdentifier1 = {Talent Identifier (1)},",
						"          TalentIdentifier2 = {Talent Identifier (2)},",
						"          TalentIdentifier3 = {Talent Identifier (3)},",
						"          TalentIdentifier4 = {Talent Identifier (4)},",
						"          TalentIdentifier5 = {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(Event = 'PER',",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','PerfRating'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendTalentMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_TalentData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_Talent_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "AppendTalentMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"Talent alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','EventDt','PerfRating'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendTalentMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_YearRef')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_YearRef_File",
								"type": "DatasetReference"
							},
							"name": "YearRef"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "AppendYearRef"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          CurrEventYear as short,",
						"          P1EventYear as short,",
						"          P2EventYear as short,",
						"          P3EventYear as short,",
						"          P4EventYear as short,",
						"          P5EventYear as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> YearRef",
						"YearRef alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date}))) ~> alterRow1",
						"derivedColumn1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          CurEventYear = CurrEventYear,",
						"          P1EventYear,",
						"          P2EventYear,",
						"          P3EventYear,",
						"          P4EventYear,",
						"          P5EventYear,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"alterRow1 derive(LoadDt = currentDate()) ~> derivedColumn1",
						"AlterColumnNamesforMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendYearRef"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_YearRef_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentYearRefTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_FactTbl_YearRef_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "YearRef"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "AppendYearRef"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[YearRefTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> YearRef",
						"YearRef alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendYearRef"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentYearRefTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ApplicantFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantFlowMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendApplicantFlowMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantFlowMapping",
						"ApplicantFlowMapping alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Applicant Final Disposition})),",
						"     deleteIf(isNull({Client Applicant Step Before Final Disposition})),",
						"     deleteIf(isNull({Client Applicant Rejected Reason})),",
						"     deleteIf(isNull({Elloree Applicant Final Disposition})),",
						"     deleteIf(isNull({Elloree Applicant Category})),",
						"     deleteIf(isNull({Elloree Submitted to Mgr Fl}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientApplFinalDisp = {Client Applicant Final Disposition},",
						"          ClientApplStepBeforeFinalDisp = {Client Applicant Step Before Final Disposition},",
						"          ClientApplRejectedReason = {Client Applicant Rejected Reason},",
						"          ElloreeApplFinalDisp = {Elloree Applicant Final Disposition},",
						"          ElloreeApplCategory = {Elloree Applicant Category},",
						"          ElloreeSubmittedtoMgrFl = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientApplFinalDisp','ClientApplStepBeforeFinalDisp','ClientApplRejectedReason'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendApplicantFlowMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Applicant')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplFlowMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ApplicantFlow_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantFlowMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendApplicantFlowMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantFlowMapping",
						"ApplicantFlowMapping alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientApplFinalDisp','ClientApplStepBeforeFinalDisp','ClientApplRejectedReason'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendApplicantFlowMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentApplFlowMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "BusHierarchy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendBusHierarchyMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BusHierarchy",
						"BusHierarchy alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Business Group Level 1})),",
						"     deleteIf(isNull({Elloree Business Group Level 2})),",
						"     deleteIf(isNull({Elloree Business Group Level 3})),",
						"     deleteIf(isNull({Elloree Business Group Level 4}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientBusGrpLvl1 = {Client Business Group Level 1},",
						"          ElloreeBusGrpLvl1 = {Elloree Business Group Level 1},",
						"          ClientBusGrpLvl2 = {Client Business Group Level 2},",
						"          ElloreeBusGrpLvl2 = {Elloree Business Group Level 2},",
						"          ClientBusGrpLvl3 = {Client Business Group Level 3},",
						"          ElloreeBusGrpLvl3 = {Elloree Business Group Level 3},",
						"          ClientBusGrpLvl4 = {Client Business Group Level 4},",
						"          ElloreeBusGrpLvl4 = {Elloree Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientBusGrpLvl1','ClientBusGrpLvl2','ClientBusGrpLvl3','ClientBusGrpLvl4'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendBusHierarchyMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_BusHierarchy')]",
				"[concat(variables('factoryId'), '/datasets/etalentBusHierarchyMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_BusHierarchy_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "BusHierarchy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendBusHierarchyMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[BusinessMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> BusHierarchy",
						"BusHierarchy alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientBusGrpLvl1','ClientBusGrpLvl2','ClientBusGrpLvl3','ClientBusGrpLvl4'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendBusHierarchyMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentBusHierarchyMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_CorpTitle",
								"type": "DatasetReference"
							},
							"name": "CorpTitle"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendCorpTitleMappingToDB"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Corporate Title} as string,",
						"          {Elloree Corporate Title} as string,",
						"          {Client Elloree Corporate Title} as string,",
						"          {Elloree Corporate Title Sort} as string,",
						"          {Suggested Elloree Corporate Title} as string,",
						"          {Suggested Client Elloree Corporate Title} as string,",
						"          {Suggested Elloree Corporate Title Sort} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount Curr Title} as string,",
						"          {2017 Headcount Prev Title} as string,",
						"          {2018 Headcount Curr Title} as string,",
						"          {2018 Headcount Prev Title} as string,",
						"          {2018 Hire Curr Title} as string,",
						"          {2018 Hire Prev Title} as string,",
						"          {2018 Promo Curr Title} as string,",
						"          {2018 Promo Prev Title} as string,",
						"          {2018 Term Curr Title} as string,",
						"          {2018 Term Prev Title} as string,",
						"          {2019 Headcount Curr Title} as string,",
						"          {2019 Headcount Prev Title} as string,",
						"          {2019 Hire Curr Title} as string,",
						"          {2019 Hire Prev Title} as string,",
						"          {2019 Promo Curr Title} as string,",
						"          {2019 Promo Prev Title} as string,",
						"          {2019 Term Curr Title} as string,",
						"          {2019 Term Prev Title} as string,",
						"          {2020 Headcount Curr Title} as string,",
						"          {2020 Headcount Prev Title} as string,",
						"          {2020 Hire Curr Title} as string,",
						"          {2020 Hire Prev Title} as string,",
						"          {2020 Promo Curr Title} as string,",
						"          {2020 Promo Prev Title} as string,",
						"          {2020 Term Curr Title} as string,",
						"          {2020 Term Prev Title} as string,",
						"          {2021 Headcount Curr Title} as string,",
						"          {2021 Headcount Prev Title} as string,",
						"          {2021 Hire Curr Title} as string,",
						"          {2021 Hire Prev Title} as string,",
						"          {2021 Promo Curr Title} as string,",
						"          {2021 Promo Prev Title} as string,",
						"          {2021 Term Curr Title} as string,",
						"          {2021 Term Prev Title} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorpTitle",
						"CorpTitle alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Corporate Title})),",
						"     deleteIf(isNull({Elloree Corporate Title Sort}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientCorpTitle = {Client Corporate Title},",
						"          ClientElloreeCorpTitle = {Client Elloree Corporate Title},",
						"          ElloreeCorpTitle = {Elloree Corporate Title},",
						"          ElloreeCorpTitleSortId = {Elloree Corporate Title Sort},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientCorpTitle'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendCorpTitleMappingToDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_CorpTitle')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_CorpTitle_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitle"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendCorpTitleMappingToDB"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> CorpTitle",
						"CorpTitle alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientCorpTitle'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendCorpTitleMappingToDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Disability",
								"type": "DatasetReference"
							},
							"name": "Disability"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Disability Ind} as string,",
						"          {Elloree Disability Ind} as string,",
						"          {Suggested Elloree Disability Ind} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Disability",
						"Disability alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Disability Ind})),",
						"     deleteIf(isNull({Elloree Disability Ind}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientDisabilityInd = {Client Disability Ind},",
						"          ElloreeDisabilityInd = {Elloree Disability Ind},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientDisabilityInd'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Disability')]",
				"[concat(variables('factoryId'), '/datasets/etalentDisabilityMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Disability_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "Disability"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[DisabilityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Disability",
						"Disability alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientDisabilityInd'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentDisabilityMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "Ethnicity"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Ethnicity",
						"Ethnicity alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Race})),",
						"     deleteIf(isNull({Elloree Hispanic or Latino Origin}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientRace = {Client Race},",
						"          ClientHispanicLatinoOrigin = {Client Hispanic or Latino Origin},",
						"          ElloreeRace = {Elloree Race},",
						"          ElloreeHispanicLatinoOrigin = {Elloree Hispanic or Latino Origin},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientRace','ClientHispanicLatinoOrigin'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendEthnicityMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/datasets/etalentEthnicityMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Ethnicity_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "Ethnicity"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EthnicityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Ethnicity",
						"Ethnicity alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientRace','ClientHispanicLatinoOrigin'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendEthnicityMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentEthnicityMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Event",
								"type": "DatasetReference"
							},
							"name": "Event"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendEventMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Event} as string,",
						"          {Client Event Type} as string,",
						"          {Client Event Reason} as string,",
						"          {Elloree Event} as string,",
						"          {Elloree Event Type} as string,",
						"          {Elloree Event Reason} as string,",
						"          {Elloree Termination Reason} as string,",
						"          {Suggested Elloree Event} as string,",
						"          {Suggested Elloree Event Type} as string,",
						"          {Suggested Elloree Event Reason} as string,",
						"          {Suggested Elloree Termination Reason} as string,",
						"          {Suggested Source} as string,",
						"          {2019 Headcount} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string,",
						"          {2022 Headcount} as string,",
						"          {2022 Hire} as string,",
						"          {2022 Promo} as string,",
						"          {2022 Term} as string,",
						"          {2023 Promo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Event",
						"Event alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Event})),",
						"     deleteIf(isNull({Elloree Event Type})),",
						"     deleteIf(isNull({Elloree Event Reason})),",
						"     deleteIf(isNull({Elloree Termination Reason}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientEvent = {Client Event},",
						"          ElloreeEvent = {Elloree Event},",
						"          ClientEventType = {Client Event Type},",
						"          ElloreeEventType = {Elloree Event Type},",
						"          ClientEventReason = {Client Event Reason},",
						"          ElloreeEventReason = {Elloree Event Reason},",
						"          ElloreeTermReason = {Elloree Termination Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientEvent','ClientEventType','ClientEventReason'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendEventMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Event')]",
				"[concat(variables('factoryId'), '/datasets/etalentEventMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Event_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "Event"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendEventMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EventMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Event",
						"Event alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientEvent','ClientEventType','ClientEventReason'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendEventMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentEventMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "Gender"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Gender",
						"Gender alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Gender})),",
						"     deleteIf(isNull({Elloree Gender}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientGender = {Client Gender},",
						"          ElloreeGender = {Elloree Gender},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientGender'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/datasets/etalentGenderMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Gender_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "Gender"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[GenderMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Gender",
						"Gender alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientGender'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentGenderMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_LGBTQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_LGTBQ",
								"type": "DatasetReference"
							},
							"name": "LGTBQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client LGTBQ} as string,",
						"          {Elloree LGTBQ} as string,",
						"          {Suggested Elloree LGTBQ} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LGTBQ",
						"LGTBQ alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client LGTBQ})),",
						"     deleteIf(isNull({Elloree LGTBQ}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientLGTBQ = {Client LGTBQ},",
						"          ElloreeLGTBQ = {Elloree LGTBQ},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientLGTBQ'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientLGTBQ,",
						"          ElloreeLGTBQ,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_LGTBQ')]",
				"[concat(variables('factoryId'), '/datasets/etalentLGBTQMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_LGBTQ_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "LGTBQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LGTBQMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> LGTBQ",
						"LGTBQ alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientLGTBQ'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientLGTBQ,",
						"          ElloreeLGTBQ,",
						"          LoadDt",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentLGBTQMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Location",
								"type": "DatasetReference"
							},
							"name": "Location"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendLocationMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Work Office Location} as string,",
						"          {Client Work City} as string,",
						"          {Client Work State} as string,",
						"          {Client Work Country} as string,",
						"          {Client Strategic Work Location Ind} as string,",
						"          {Elloree Work Ofiice} as string,",
						"          {Elloree Work City} as string,",
						"          {Elloree Work State} as string,",
						"          {Elloree Work Region} as string,",
						"          {Elloree Work Country} as string,",
						"          {Elloree Strategic Location} as string,",
						"          {Elloree Location Sort Id} as string,",
						"          {Suggested Elloree Work City} as string,",
						"          {Suggested Elloree Work State} as string,",
						"          {Suggested Elloree Work Country} as string,",
						"          {Suggested Elloree Work Region} as string,",
						"          {Suggested Elloree Strategic Location} as string,",
						"          {Suggested Elloree Location Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Location",
						"Location alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Elloree Work Region})),",
						"     deleteIf(isNull({Elloree Work Country})),",
						"     deleteIf(isNull({Elloree Work State})),",
						"     deleteIf(isNull({Elloree Work City})),",
						"     deleteIf(isNull({Elloree Work Ofiice})),",
						"     deleteIf(isNull({Elloree Location Sort Id}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientWorkOffice = {Client Work Office Location},",
						"          ClientWorkCity = {Client Work City},",
						"          ClientWorkState = {Client Work State},",
						"          ClientWorkCountry = {Client Work Country},",
						"          ClientStrategicLoc = {Client Strategic Work Location Ind},",
						"          ElloreeWorkOfiice = {Elloree Work Ofiice},",
						"          ElloreeWorkCity = {Elloree Work City},",
						"          ElloreeWorkState = {Elloree Work State},",
						"          ElloreeWorkCountry = {Elloree Work Country},",
						"          ElloreeWorkRegion = {Elloree Work Region},",
						"          ElloreeStrategicLoc = {Elloree Strategic Location},",
						"          ElloreeLocSortId = {Elloree Location Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientWorkOffice','ClientWorkCountry','ClientWorkState','ClientWorkCity','ClientStrategicLoc'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientWorkOffice,",
						"          ClientWorkCity,",
						"          ClientWorkState,",
						"          ClientWorkCountry,",
						"          ClientStrategicLoc,",
						"          ElloreeWorkOffice = ElloreeWorkOfiice,",
						"          ElloreeWorkCity,",
						"          ElloreeWorkState,",
						"          ElloreeWorkCountry,",
						"          ElloreeWorkRegion,",
						"          ElloreeStrategicLoc,",
						"          ElloreeLocSortId,",
						"          LoadDt",
						"     )) ~> AppendLocationMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Location')]",
				"[concat(variables('factoryId'), '/datasets/etalentLocationMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Location_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "Location"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendLocationMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LocationMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Location",
						"Location alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientWorkOffice','ClientWorkCountry','ClientWorkState','ClientWorkCity','ClientStrategicLoc'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendLocationMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentLocationMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_PerformanceRating",
								"type": "DatasetReference"
							},
							"name": "Performance"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendPerformanceMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Performance Rating} as string,",
						"          {Elloree Performance Rating} as string,",
						"          {Elloree Performance Rating Sort} as string,",
						"          {Suggested Elloree Performance Rating} as string,",
						"          {Suggested Elloree Performane Rating Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Talent Assessment} as string,",
						"          {2018 Talent Assessment} as string,",
						"          {2019 Talent Assessment} as string,",
						"          {2020 Talent Assessment} as string,",
						"          {2021 Talent Assessment} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Performance",
						"Performance alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Performance Rating})),",
						"     deleteIf(isNull({Elloree Performance Rating})),",
						"     deleteIf(isNull({Elloree Performance Rating Sort}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientPerfRating = {Client Performance Rating},",
						"          ElloreePerfRating = {Elloree Performance Rating},",
						"          ElloreePerfRatingSortId = {Elloree Performance Rating Sort},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientPerfRating'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendPerformanceMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_PerformanceRating')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_PerformanceRating_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "Performance"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendPerformanceMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Performance",
						"Performance alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientPerfRating'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendPerformanceMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_ReqStatus",
								"type": "DatasetReference"
							},
							"name": "RequisitionStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Requisition Status} as string,",
						"          {Elloree Requisition Status} as string,",
						"          {Suggested Elloree Requisition Status} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Requisition} as string,",
						"          {2022 Requisition} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RequisitionStatus",
						"RequisitionStatus alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Requisition Status})),",
						"     deleteIf(isNull({Elloree Requisition Status}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientReqStatus = {Client Requisition Status},",
						"          ElloreeReqStatus = {Elloree Requisition Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_ReqStatus')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqStatusMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqStatus_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "RequisitionStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqStatusMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> RequisitionStatus",
						"RequisitionStatus alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentReqStatusMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_ReqType",
								"type": "DatasetReference"
							},
							"name": "RequisitionType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Requisition Type} as string,",
						"          {Elloree Requisition Type} as string,",
						"          {Suggested Elloree Requisition Type} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Requisition} as string,",
						"          {2022 Job Requisition} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RequisitionType",
						"RequisitionType alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Requisition Type})),",
						"     deleteIf(isNull({Elloree Requisition Type}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientReqType = {Client Requisition Type},",
						"          ElloreeReqType = {Elloree Requisition Type}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_ReqType')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqTypeMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_ReqType_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "RequisitionType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "AppendReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTypeMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> RequisitionType",
						"RequisitionType alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientReqType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AppendReqStatusMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentReqTypeMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Mapping_Veteran",
								"type": "DatasetReference"
							},
							"name": "Veteran"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterColumnNamesforMap"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Veteran} as string,",
						"          {Elloree Veteran} as string,",
						"          {Suggested Elloree Veteran} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Veteran",
						"Veteran alterRow(upsertIf(true()),",
						"     deleteIf(isNull({Client ID})),",
						"     deleteIf(isNull({Client Engagement Date})),",
						"     deleteIf(isNull({Client Veteran})),",
						"     deleteIf(isNull({Elloree Veteran}))) ~> alterRow1",
						"alterRow1 select(mapColumn(",
						"          ClientVeteran = {Client Veteran},",
						"          ElloreeVeteran = {Elloree Veteran},",
						"          ClientId = {Client ID},",
						"          ClientEngagementDt = {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AlterColumnNamesforMap",
						"AlterColumnNamesforMap derive(LoadDt = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientVeteran'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Veteran')]",
				"[concat(variables('factoryId'), '/datasets/etalentVeteranMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Mapping_Veteran_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Mapping Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "Veteran"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[VeteranMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> Veteran",
						"Veteran alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 derive(LoadDt = currentDate(),",
						"          ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientVeteran'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentVeteranMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Tbl_Client')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "SourceCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "LoadClientInfo"
						}
					],
					"transformations": [
						{
							"name": "RemoveNull"
						},
						{
							"name": "GroupClientInfo"
						},
						{
							"name": "AssignDerivedColumns"
						},
						{
							"name": "SelectFinalOutput"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_EngagementType as string,",
						"     Flow_Client_Desc as string,",
						"     Flow_Client_Sector as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceCore",
						"SourceCore filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNull",
						"RemoveNull aggregate(groupBy({Client Engagement Date}),",
						"     ClientId = max({Client ID})) ~> GroupClientInfo",
						"GroupClientInfo derive(ClientDesc = $Flow_Client_Desc,",
						"          ClientEngagementType = $Flow_Client_EngagementType,",
						"          ClientSector = $Flow_Client_Sector,",
						"          LoadDt = currentDate()) ~> AssignDerivedColumns",
						"alterRow2 select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt = {Client Engagement Date},",
						"          ClientEngagementType,",
						"          ClientSector,",
						"          ClientDesc,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"AssignDerivedColumns alterRow(upsertIf(true())) ~> alterRow2",
						"SelectFinalOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientEngagementType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          ClientEngagementType,",
						"          ClientSector,",
						"          ClientDesc,",
						"          LoadDt",
						"     ),",
						"     partitionBy('hash', 1)) ~> LoadClientInfo"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentClientTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Tbl_Client_Hist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Load Fact Tables/Load Prior Engagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "SourceCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "LoadClientInfo"
						}
					],
					"transformations": [
						{
							"name": "AssignDerivedColumns"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Hist_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[ClientTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Hist_Client_Dt}'\"),",
						"     format: 'query') ~> SourceCore",
						"SourceCore derive(ClientEngagementDt = toDate($Flow_Client_Dt,'MM/dd/yyyy'),",
						"          LoadDt = currentDate()) ~> AssignDerivedColumns",
						"AssignDerivedColumns alterRow(upsertIf(true())) ~> alterRow2",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ClientId','ClientEngagementDt','ClientEngagementType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> LoadClientInfo"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentClientTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Append_Tbl_OthCoreAnalysis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Temp Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Analysis_OtherTbl_Curr",
								"type": "DatasetReference"
							},
							"name": "SourceTmpOtherCoreAnalysis"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "AppendOtherCoreAnalysisTmp"
						}
					],
					"transformations": [
						{
							"name": "AssignDerivedColumns"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Notes as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceTmpOtherCoreAnalysis",
						"SourceTmpOtherCoreAnalysis derive(Type = iif(isNull(Type),'NA',Type),",
						"          Year = iif(isNull(Year),0,Year),",
						"          Quarter = iif(isNull(Quarter),0,Quarter)) ~> AssignDerivedColumns",
						"AssignDerivedColumns alterRow(upsertIf(true())) ~> alterRow2",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Id','Type','Year','Quarter'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Id,",
						"          Type,",
						"          Year,",
						"          Quarter",
						"     )) ~> AppendOtherCoreAnalysisTmp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_Analysis_OtherTbl_Curr')]",
				"[concat(variables('factoryId'), '/datasets/etalentTmp_OtherAnalysisTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_AmerIndAlaskNat_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'American Indian or Alaska Native',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian labor force, Women, American Indian or Alaska Native only',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_AmerIndAlaskNat_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_AmerIndAlaskNat_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_AmerIndAlaskNat_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'American Indian or Alaska Native',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian labor force, Men, American Indian or Alaska Native only',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_AmerIndAlaskNat_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_AmerIndAlaskNat_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_AmerIndAlaskNat_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_AmerIndAlaskNat_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'American Indian or Alaska Native',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - American Indian or Alaska Native',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_AmerIndAlaskNat_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_AmerIndAlaskNat_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Female_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Female_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, Non-Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Female_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Male_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Male_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, Non-Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Male_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Asian',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Total_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Asian_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Asian_Total_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Asian',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Asian, Non-Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Asian_Total_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Asian_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Black or African American Women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Black or African American, Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Female_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Female_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Black or African American, Non-Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Female_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Black or African American Men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Black or African American, Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Male_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Male_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Black or African American, Non-Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Male_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Black or African American',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Black or African American, Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Total_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Black_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Black_Total_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Black',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Black or African American, Non-Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Black_Total_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Black_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'All',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Latinx_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Latinx',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Hispanic or Latino Women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Latinx_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Latinx_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Latinx_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Latinx',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Hispanic or Latino Men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Latinx_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Latinx_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Latinx_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Latinx_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Latinx',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Hispanic or Latino',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Latinx_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Latinx_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'All',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - Men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_NatHawPacIsl_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Native Hawaiian or Other Pacific Islander',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian labor force, Women, Native Hawaiian or other Pacific Islander only',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_NatHawPacIsl_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_NatHawPacIsl_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_NatHawPacIsl_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Native Hawaiian or Other Pacific Islander',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian labor force, Men, Native Hawaiian or other Pacific Islander only',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_NatHawPacIsl_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_NatHawPacIsl_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_NatHawPacIsl_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_NatHawPacIsl_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Native Hawaiian or Other Pacific Islander',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Native Hawaiian or Other Pacific Islander',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_NatHawPacIsl_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_NatHawPacIsl_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Other_Female_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Other_Male_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Other_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Other_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Other',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Other Hispanic or Latino',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Other_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Other_Total_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'All',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, women',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_TwoOrMore_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races, men',",
						"          Quarter = 4,",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_TwoOrMore_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_TwoOrMore_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_TwoOrMore_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'Two or more races',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - Two or more races',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_TwoOrMore_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_TwoOrMore_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Female')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Female_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Female_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Female_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Female',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, women',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Female_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Female_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White Men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Male')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Male_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Male_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Male_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'Male',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic, men',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Male_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Male_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'All',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force Level - White',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Total')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_Hisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_Hisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_Hisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Total_Hisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLS_White_Total_NonHisp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_BLS_White_Total_NonHisp",
								"type": "DatasetReference"
							},
							"name": "BLSJsonSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_BLS_Output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten3"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          status as string,",
						"          responseTime as integer,",
						"          message as string[],",
						"          Results as (series as (seriesID as string, data as (year as string, period as string, periodName as string, latest as string, value as string, footnotes as ({} as string)[])[])[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> BLSJsonSource",
						"BLSJsonSource foldDown(unroll(Results.series),",
						"     mapColumn(",
						"          status,",
						"          responseTime,",
						"          message,",
						"          seriesID = Results.series.seriesID,",
						"          data = Results.series.data",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 foldDown(unroll(data),",
						"     mapColumn(",
						"          seriesID,",
						"          year = data.year,",
						"          period = data.period,",
						"          latest = data.latest,",
						"          value = data.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 derive(Race = 'White',",
						"          Source = 'BLS',",
						"          EthnicOrigin = 'Non-Hispanic or Latino',",
						"          Gender = 'All',",
						"          SeriesDesc = '(unadj) Civilian Labor Force - White, Non-Hispanic',",
						"          Quarter = iif(period=='Q01',1,iif(period=='Q02',2,iif(period=='Q03',3,iif(period=='Q04',4,0)))),",
						"          Headcount = toInteger(value)*1000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Source,",
						"          SourceId = seriesID,",
						"          Desc = SeriesDesc,",
						"          Year = year,",
						"          Quarter,",
						"          Latest = latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['BLS_White_Total_NonHisp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_BLS_White_Total_NonHisp')]",
				"[concat(variables('factoryId'), '/datasets/Source_BLS_Output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_Fact_OtherCoreAnalysis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Adhoc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T1OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T2OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T3OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T4OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T5OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T6OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T7OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T8OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T9OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T10OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T11OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T12OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T13OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T14OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T15OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T16OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T17OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T18OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T19OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T20OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T21OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T22OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T23OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T24OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T25OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T26OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T27OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T28OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T29OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T30OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T31OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T32OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T33OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T34OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T35OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T36OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T37OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T38OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T39OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T40OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T41OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T42OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T43OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T44OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T45OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T46OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T47OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T48OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T49OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T50OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFullPop"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "join1"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "SelectCleanup"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          T1_WorkerId as string,",
						"          T1_EventType as string,",
						"          T1_CharVal1 as string,",
						"          T1_CharVal2 as string,",
						"          T1_NumVal1 as double,",
						"          T1_NumVal2 as double,",
						"          T1_DtVal1 as date,",
						"          T1_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T1_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T1_EventType,OtherCharVal11 T1_CharVal1,OtherCharVal2 T1_CharVal2,OtherNumVal1 as T1_NumVal1,OtherNumVal2 as T1_NumVal2,OtherDtVal1 as T1_DtVal1,OtherDtVal2 as T1_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=1)\"),",
						"     format: 'query') ~> T1OtherCore",
						"source(output(",
						"          T2_WorkerId as string,",
						"          T2_EventType as string,",
						"          T2_CharVal1 as string,",
						"          T2_CharVal2 as string,",
						"          T2_NumVal1 as double,",
						"          T2_NumVal2 as double,",
						"          T2_DtVal1 as date,",
						"          T2_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T2_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T2_EventType,OtherCharVal11 T2_CharVal1,OtherCharVal2 T2_CharVal2,OtherNumVal1 as T2_NumVal1,OtherNumVal2 as T2_NumVal2,OtherDtVal1 as T2_DtVal1,OtherDtVal2 as T2_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=2)\"),",
						"     format: 'query') ~> T2OtherCore",
						"source(output(",
						"          T3_WorkerId as string,",
						"          T3_EventType as string,",
						"          T3_CharVal1 as string,",
						"          T3_CharVal2 as string,",
						"          T3_NumVal1 as double,",
						"          T3_NumVal2 as double,",
						"          T3_DtVal1 as date,",
						"          T3_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T3_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T3_EventType,OtherCharVal11 T3_CharVal1,OtherCharVal2 T3_CharVal2,OtherNumVal1 as T3_NumVal1,OtherNumVal2 as T3_NumVal2,OtherDtVal1 as T3_DtVal1,OtherDtVal2 as T3_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=3)\"),",
						"     format: 'query') ~> T3OtherCore",
						"source(output(",
						"          T4_WorkerId as string,",
						"          T4_EventType as string,",
						"          T4_CharVal1 as string,",
						"          T4_CharVal2 as string,",
						"          T4_NumVal1 as double,",
						"          T4_NumVal2 as double,",
						"          T4_DtVal1 as date,",
						"          T4_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T4_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T4_EventType,OtherCharVal11 T4_CharVal1,OtherCharVal2 T4_CharVal2,OtherNumVal1 as T4_NumVal1,OtherNumVal2 as T4_NumVal2,OtherDtVal1 as T4_DtVal1,OtherDtVal2 as T4_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=4)\"),",
						"     format: 'query') ~> T4OtherCore",
						"source(output(",
						"          T5_WorkerId as string,",
						"          T5_EventType as string,",
						"          T5_CharVal1 as string,",
						"          T5_CharVal2 as string,",
						"          T5_NumVal1 as double,",
						"          T5_NumVal2 as double,",
						"          T5_DtVal1 as date,",
						"          T5_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T5_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T5_EventType,OtherCharVal11 T5_CharVal1,OtherCharVal2 T5_CharVal2,OtherNumVal1 as T5_NumVal1,OtherNumVal2 as T5_NumVal2,OtherDtVal1 as T5_DtVal1,OtherDtVal2 as T5_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=5)\"),",
						"     format: 'query') ~> T5OtherCore",
						"source(output(",
						"          T6_WorkerId as string,",
						"          T6_EventType as string,",
						"          T6_CharVal1 as string,",
						"          T6_CharVal2 as string,",
						"          T6_NumVal1 as double,",
						"          T6_NumVal2 as double,",
						"          T6_DtVal1 as date,",
						"          T6_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T6_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T6_EventType,OtherCharVal11 T6_CharVal1,OtherCharVal2 T6_CharVal2,OtherNumVal1 as T6_NumVal1,OtherNumVal2 as T6_NumVal2,OtherDtVal1 as T6_DtVal1,OtherDtVal2 as T6_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=6)\"),",
						"     format: 'query') ~> T6OtherCore",
						"source(output(",
						"          T7_WorkerId as string,",
						"          T7_EventType as string,",
						"          T7_CharVal1 as string,",
						"          T7_CharVal2 as string,",
						"          T7_NumVal1 as double,",
						"          T7_NumVal2 as double,",
						"          T7_DtVal1 as date,",
						"          T7_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T7_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T7_EventType,OtherCharVal11 T7_CharVal1,OtherCharVal2 T7_CharVal2,OtherNumVal1 as T7_NumVal1,OtherNumVal2 as T7_NumVal2,OtherDtVal1 as T7_DtVal1,OtherDtVal2 as T7_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=7)\"),",
						"     format: 'query') ~> T7OtherCore",
						"source(output(",
						"          T8_WorkerId as string,",
						"          T8_EventType as string,",
						"          T8_CharVal1 as string,",
						"          T8_CharVal2 as string,",
						"          T8_NumVal1 as double,",
						"          T8_NumVal2 as double,",
						"          T8_DtVal1 as date,",
						"          T8_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T8_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T8_EventType,OtherCharVal11 T8_CharVal1,OtherCharVal2 T8_CharVal2,OtherNumVal1 as T8_NumVal1,OtherNumVal2 as T8_NumVal2,OtherDtVal1 as T8_DtVal1,OtherDtVal2 as T8_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=8)\"),",
						"     format: 'query') ~> T8OtherCore",
						"source(output(",
						"          T9_WorkerId as string,",
						"          T9_EventType as string,",
						"          T9_CharVal1 as string,",
						"          T9_CharVal2 as string,",
						"          T9_NumVal1 as double,",
						"          T9_NumVal2 as double,",
						"          T9_DtVal1 as date,",
						"          T9_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T9_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T9_EventType,OtherCharVal11 T9_CharVal1,OtherCharVal2 T9_CharVal2,OtherNumVal1 as T9_NumVal1,OtherNumVal2 as T9_NumVal2,OtherDtVal1 as T9_DtVal1,OtherDtVal2 as T9_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=9)\"),",
						"     format: 'query') ~> T9OtherCore",
						"source(output(",
						"          T10_WorkerId as string,",
						"          T10_EventType as string,",
						"          T10_CharVal1 as string,",
						"          T10_CharVal2 as string,",
						"          T10_NumVal1 as double,",
						"          T10_NumVal2 as double,",
						"          T10_DtVal1 as date,",
						"          T10_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T10_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T10_EventType,OtherCharVal11 T10_CharVal1,OtherCharVal2 T10_CharVal2,OtherNumVal1 as T10_NumVal1,OtherNumVal2 as T10_NumVal2,OtherDtVal1 as T10_DtVal1,OtherDtVal2 as T10_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=10)\"),",
						"     format: 'query') ~> T10OtherCore",
						"source(output(",
						"          T11_WorkerId as string,",
						"          T11_EventType as string,",
						"          T11_CharVal1 as string,",
						"          T11_CharVal2 as string,",
						"          T11_NumVal1 as double,",
						"          T11_NumVal2 as double,",
						"          T11_DtVal1 as date,",
						"          T11_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T11_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T11_EventType,OtherCharVal11 T11_CharVal1,OtherCharVal2 T11_CharVal2,OtherNumVal1 as T11_NumVal1,OtherNumVal2 as T11_NumVal2,OtherDtVal1 as T11_DtVal1,OtherDtVal2 as T11_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=11)\"),",
						"     format: 'query') ~> T11OtherCore",
						"source(output(",
						"          T12_WorkerId as string,",
						"          T12_EventType as string,",
						"          T12_CharVal1 as string,",
						"          T12_CharVal2 as string,",
						"          T12_NumVal1 as double,",
						"          T12_NumVal2 as double,",
						"          T12_DtVal1 as date,",
						"          T12_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T12_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T12_EventType,OtherCharVal11 T12_CharVal1,OtherCharVal2 T12_CharVal2,OtherNumVal1 as T12_NumVal1,OtherNumVal2 as T12_NumVal2,OtherDtVal1 as T12_DtVal1,OtherDtVal2 as T12_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=12)\"),",
						"     format: 'query') ~> T12OtherCore",
						"source(output(",
						"          T13_WorkerId as string,",
						"          T13_EventType as string,",
						"          T13_CharVal1 as string,",
						"          T13_CharVal2 as string,",
						"          T13_NumVal1 as double,",
						"          T13_NumVal2 as double,",
						"          T13_DtVal1 as date,",
						"          T13_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T13_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T13_EventType,OtherCharVal11 T13_CharVal1,OtherCharVal2 T13_CharVal2,OtherNumVal1 as T13_NumVal1,OtherNumVal2 as T13_NumVal2,OtherDtVal1 as T13_DtVal1,OtherDtVal2 as T13_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=13)\"),",
						"     format: 'query') ~> T13OtherCore",
						"source(output(",
						"          T14_WorkerId as string,",
						"          T14_EventType as string,",
						"          T14_CharVal1 as string,",
						"          T14_CharVal2 as string,",
						"          T14_NumVal1 as double,",
						"          T14_NumVal2 as double,",
						"          T14_DtVal1 as date,",
						"          T14_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T14_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T14_EventType,OtherCharVal11 T14_CharVal1,OtherCharVal2 T14_CharVal2,OtherNumVal1 as T14_NumVal1,OtherNumVal2 as T14_NumVal2,OtherDtVal1 as T14_DtVal1,OtherDtVal2 as T14_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=14)\"),",
						"     format: 'query') ~> T14OtherCore",
						"source(output(",
						"          T15_WorkerId as string,",
						"          T15_EventType as string,",
						"          T15_CharVal1 as string,",
						"          T15_CharVal2 as string,",
						"          T15_NumVal1 as double,",
						"          T15_NumVal2 as double,",
						"          T15_DtVal1 as date,",
						"          T15_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T15_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T15_EventType,OtherCharVal11 T15_CharVal1,OtherCharVal2 T15_CharVal2,OtherNumVal1 as T15_NumVal1,OtherNumVal2 as T15_NumVal2,OtherDtVal1 as T15_DtVal1,OtherDtVal2 as T15_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=15)\"),",
						"     format: 'query') ~> T15OtherCore",
						"source(output(",
						"          T16_WorkerId as string,",
						"          T16_EventType as string,",
						"          T16_CharVal1 as string,",
						"          T16_CharVal2 as string,",
						"          T16_NumVal1 as double,",
						"          T16_NumVal2 as double,",
						"          T16_DtVal1 as date,",
						"          T16_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T16_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T16_EventType,OtherCharVal11 T16_CharVal1,OtherCharVal2 T16_CharVal2,OtherNumVal1 as T16_NumVal1,OtherNumVal2 as T16_NumVal2,OtherDtVal1 as T16_DtVal1,OtherDtVal2 as T16_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=16)\"),",
						"     format: 'query') ~> T16OtherCore",
						"source(output(",
						"          T17_WorkerId as string,",
						"          T17_EventType as string,",
						"          T17_CharVal1 as string,",
						"          T17_CharVal2 as string,",
						"          T17_NumVal1 as double,",
						"          T17_NumVal2 as double,",
						"          T17_DtVal1 as date,",
						"          T17_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T17_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T17_EventType,OtherCharVal11 T17_CharVal1,OtherCharVal2 T17_CharVal2,OtherNumVal1 as T17_NumVal1,OtherNumVal2 as T17_NumVal2,OtherDtVal1 as T17_DtVal1,OtherDtVal2 as T17_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=17)\"),",
						"     format: 'query') ~> T17OtherCore",
						"source(output(",
						"          T18_WorkerId as string,",
						"          T18_EventType as string,",
						"          T18_CharVal1 as string,",
						"          T18_CharVal2 as string,",
						"          T18_NumVal1 as double,",
						"          T18_NumVal2 as double,",
						"          T18_DtVal1 as date,",
						"          T18_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T18_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T18_EventType,OtherCharVal11 T18_CharVal1,OtherCharVal2 T18_CharVal2,OtherNumVal1 as T18_NumVal1,OtherNumVal2 as T18_NumVal2,OtherDtVal1 as T18_DtVal1,OtherDtVal2 as T18_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=18)\"),",
						"     format: 'query') ~> T18OtherCore",
						"source(output(",
						"          T19_WorkerId as string,",
						"          T19_EventType as string,",
						"          T19_CharVal1 as string,",
						"          T19_CharVal2 as string,",
						"          T19_NumVal1 as double,",
						"          T19_NumVal2 as double,",
						"          T19_DtVal1 as date,",
						"          T19_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T19_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T19_EventType,OtherCharVal11 T19_CharVal1,OtherCharVal2 T19_CharVal2,OtherNumVal1 as T19_NumVal1,OtherNumVal2 as T19_NumVal2,OtherDtVal1 as T19_DtVal1,OtherDtVal2 as T19_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=19)\"),",
						"     format: 'query') ~> T19OtherCore",
						"source(output(",
						"          T20_WorkerId as string,",
						"          T20_EventType as string,",
						"          T20_CharVal1 as string,",
						"          T20_CharVal2 as string,",
						"          T20_NumVal1 as double,",
						"          T20_NumVal2 as double,",
						"          T20_DtVal1 as date,",
						"          T20_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T20_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T20_EventType,OtherCharVal11 T20_CharVal1,OtherCharVal2 T20_CharVal2,OtherNumVal1 as T20_NumVal1,OtherNumVal2 as T20_NumVal2,OtherDtVal1 as T20_DtVal1,OtherDtVal2 as T20_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=20)\"),",
						"     format: 'query') ~> T20OtherCore",
						"source(output(",
						"          T21_WorkerId as string,",
						"          T21_EventType as string,",
						"          T21_CharVal1 as string,",
						"          T21_CharVal2 as string,",
						"          T21_NumVal1 as double,",
						"          T21_NumVal2 as double,",
						"          T21_DtVal1 as date,",
						"          T21_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T21_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T21_EventType,OtherCharVal11 T21_CharVal1,OtherCharVal2 T21_CharVal2,OtherNumVal1 as T21_NumVal1,OtherNumVal2 as T21_NumVal2,OtherDtVal1 as T21_DtVal1,OtherDtVal2 as T21_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=21)\"),",
						"     format: 'query') ~> T21OtherCore",
						"source(output(",
						"          T22_WorkerId as string,",
						"          T22_EventType as string,",
						"          T22_CharVal1 as string,",
						"          T22_CharVal2 as string,",
						"          T22_NumVal1 as double,",
						"          T22_NumVal2 as double,",
						"          T22_DtVal1 as date,",
						"          T22_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T22_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T22_EventType,OtherCharVal11 T22_CharVal1,OtherCharVal2 T22_CharVal2,OtherNumVal1 as T22_NumVal1,OtherNumVal2 as T22_NumVal2,OtherDtVal1 as T22_DtVal1,OtherDtVal2 as T22_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=22)\"),",
						"     format: 'query') ~> T22OtherCore",
						"source(output(",
						"          T23_WorkerId as string,",
						"          T23_EventType as string,",
						"          T23_CharVal1 as string,",
						"          T23_CharVal2 as string,",
						"          T23_NumVal1 as double,",
						"          T23_NumVal2 as double,",
						"          T23_DtVal1 as date,",
						"          T23_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T23_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T23_EventType,OtherCharVal11 T23_CharVal1,OtherCharVal2 T23_CharVal2,OtherNumVal1 as T23_NumVal1,OtherNumVal2 as T23_NumVal2,OtherDtVal1 as T23_DtVal1,OtherDtVal2 as T23_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=23)\"),",
						"     format: 'query') ~> T23OtherCore",
						"source(output(",
						"          T24_WorkerId as string,",
						"          T24_EventType as string,",
						"          T24_CharVal1 as string,",
						"          T24_CharVal2 as string,",
						"          T24_NumVal1 as double,",
						"          T24_NumVal2 as double,",
						"          T24_DtVal1 as date,",
						"          T24_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T24_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T24_EventType,OtherCharVal11 T24_CharVal1,OtherCharVal2 T24_CharVal2,OtherNumVal1 as T24_NumVal1,OtherNumVal2 as T24_NumVal2,OtherDtVal1 as T24_DtVal1,OtherDtVal2 as T24_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=24)\"),",
						"     format: 'query') ~> T24OtherCore",
						"source(output(",
						"          T25_WorkerId as string,",
						"          T25_EventType as string,",
						"          T25_CharVal1 as string,",
						"          T25_CharVal2 as string,",
						"          T25_NumVal1 as double,",
						"          T25_NumVal2 as double,",
						"          T25_DtVal1 as date,",
						"          T25_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T25_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T25_EventType,OtherCharVal11 T25_CharVal1,OtherCharVal2 T25_CharVal2,OtherNumVal1 as T25_NumVal1,OtherNumVal2 as T25_NumVal2,OtherDtVal1 as T25_DtVal1,OtherDtVal2 as T25_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=25)\"),",
						"     format: 'query') ~> T25OtherCore",
						"source(output(",
						"          T26_WorkerId as string,",
						"          T26_EventType as string,",
						"          T26_CharVal1 as string,",
						"          T26_CharVal2 as string,",
						"          T26_NumVal1 as double,",
						"          T26_NumVal2 as double,",
						"          T26_DtVal1 as date,",
						"          T26_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T26_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T26_EventType,OtherCharVal11 T26_CharVal1,OtherCharVal2 T26_CharVal2,OtherNumVal1 as T26_NumVal1,OtherNumVal2 as T26_NumVal2,OtherDtVal1 as T26_DtVal1,OtherDtVal2 as T26_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=26)\"),",
						"     format: 'query') ~> T26OtherCore",
						"source(output(",
						"          T27_WorkerId as string,",
						"          T27_EventType as string,",
						"          T27_CharVal1 as string,",
						"          T27_CharVal2 as string,",
						"          T27_NumVal1 as double,",
						"          T27_NumVal2 as double,",
						"          T27_DtVal1 as date,",
						"          T27_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T27_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T27_EventType,OtherCharVal11 T27_CharVal1,OtherCharVal2 T27_CharVal2,OtherNumVal1 as T27_NumVal1,OtherNumVal2 as T27_NumVal2,OtherDtVal1 as T27_DtVal1,OtherDtVal2 as T27_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=27)\"),",
						"     format: 'query') ~> T27OtherCore",
						"source(output(",
						"          T28_WorkerId as string,",
						"          T28_EventType as string,",
						"          T28_CharVal1 as string,",
						"          T28_CharVal2 as string,",
						"          T28_NumVal1 as double,",
						"          T28_NumVal2 as double,",
						"          T28_DtVal1 as date,",
						"          T28_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T28_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T28_EventType,OtherCharVal11 T28_CharVal1,OtherCharVal2 T28_CharVal2,OtherNumVal1 as T28_NumVal1,OtherNumVal2 as T28_NumVal2,OtherDtVal1 as T28_DtVal1,OtherDtVal2 as T28_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=28)\"),",
						"     format: 'query') ~> T28OtherCore",
						"source(output(",
						"          T29_WorkerId as string,",
						"          T29_EventType as string,",
						"          T29_CharVal1 as string,",
						"          T29_CharVal2 as string,",
						"          T29_NumVal1 as double,",
						"          T29_NumVal2 as double,",
						"          T29_DtVal1 as date,",
						"          T29_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T29_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T29_EventType,OtherCharVal11 T29_CharVal1,OtherCharVal2 T29_CharVal2,OtherNumVal1 as T29_NumVal1,OtherNumVal2 as T29_NumVal2,OtherDtVal1 as T29_DtVal1,OtherDtVal2 as T29_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=29)\"),",
						"     format: 'query') ~> T29OtherCore",
						"source(output(",
						"          T30_WorkerId as string,",
						"          T30_EventType as string,",
						"          T30_CharVal1 as string,",
						"          T30_CharVal2 as string,",
						"          T30_NumVal1 as double,",
						"          T30_NumVal2 as double,",
						"          T30_DtVal1 as date,",
						"          T30_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T30_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T30_EventType,OtherCharVal11 T30_CharVal1,OtherCharVal2 T30_CharVal2,OtherNumVal1 as T30_NumVal1,OtherNumVal2 as T30_NumVal2,OtherDtVal1 as T30_DtVal1,OtherDtVal2 as T30_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=30)\"),",
						"     format: 'query') ~> T30OtherCore",
						"source(output(",
						"          T31_WorkerId as string,",
						"          T31_EventType as string,",
						"          T31_CharVal1 as string,",
						"          T31_CharVal2 as string,",
						"          T31_NumVal1 as double,",
						"          T31_NumVal2 as double,",
						"          T31_DtVal1 as date,",
						"          T31_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T31_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T31_EventType,OtherCharVal11 T31_CharVal1,OtherCharVal2 T31_CharVal2,OtherNumVal1 as T31_NumVal1,OtherNumVal2 as T31_NumVal2,OtherDtVal1 as T31_DtVal1,OtherDtVal2 as T31_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=31)\"),",
						"     format: 'query') ~> T31OtherCore",
						"source(output(",
						"          T32_WorkerId as string,",
						"          T32_EventType as string,",
						"          T32_CharVal1 as string,",
						"          T32_CharVal2 as string,",
						"          T32_NumVal1 as double,",
						"          T32_NumVal2 as double,",
						"          T32_DtVal1 as date,",
						"          T32_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T32_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T32_EventType,OtherCharVal11 T32_CharVal1,OtherCharVal2 T32_CharVal2,OtherNumVal1 as T32_NumVal1,OtherNumVal2 as T32_NumVal2,OtherDtVal1 as T32_DtVal1,OtherDtVal2 as T32_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=32)\"),",
						"     format: 'query') ~> T32OtherCore",
						"source(output(",
						"          T33_WorkerId as string,",
						"          T33_EventType as string,",
						"          T33_CharVal1 as string,",
						"          T33_CharVal2 as string,",
						"          T33_NumVal1 as double,",
						"          T33_NumVal2 as double,",
						"          T33_DtVal1 as date,",
						"          T33_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T33_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T33_EventType,OtherCharVal11 T33_CharVal1,OtherCharVal2 T33_CharVal2,OtherNumVal1 as T33_NumVal1,OtherNumVal2 as T33_NumVal2,OtherDtVal1 as T33_DtVal1,OtherDtVal2 as T33_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=33)\"),",
						"     format: 'query') ~> T33OtherCore",
						"source(output(",
						"          T34_WorkerId as string,",
						"          T34_EventType as string,",
						"          T34_CharVal1 as string,",
						"          T34_CharVal2 as string,",
						"          T34_NumVal1 as double,",
						"          T34_NumVal2 as double,",
						"          T34_DtVal1 as date,",
						"          T34_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T34_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T34_EventType,OtherCharVal11 T34_CharVal1,OtherCharVal2 T34_CharVal2,OtherNumVal1 as T34_NumVal1,OtherNumVal2 as T34_NumVal2,OtherDtVal1 as T34_DtVal1,OtherDtVal2 as T34_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=34)\"),",
						"     format: 'query') ~> T34OtherCore",
						"source(output(",
						"          T35_WorkerId as string,",
						"          T35_EventType as string,",
						"          T35_CharVal1 as string,",
						"          T35_CharVal2 as string,",
						"          T35_NumVal1 as double,",
						"          T35_NumVal2 as double,",
						"          T35_DtVal1 as date,",
						"          T35_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T35_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T35_EventType,OtherCharVal11 T35_CharVal1,OtherCharVal2 T35_CharVal2,OtherNumVal1 as T35_NumVal1,OtherNumVal2 as T35_NumVal2,OtherDtVal1 as T35_DtVal1,OtherDtVal2 as T35_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=35)\"),",
						"     format: 'query') ~> T35OtherCore",
						"source(output(",
						"          T36_WorkerId as string,",
						"          T36_EventType as string,",
						"          T36_CharVal1 as string,",
						"          T36_CharVal2 as string,",
						"          T36_NumVal1 as double,",
						"          T36_NumVal2 as double,",
						"          T36_DtVal1 as date,",
						"          T36_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T36_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T36_EventType,OtherCharVal11 T36_CharVal1,OtherCharVal2 T36_CharVal2,OtherNumVal1 as T36_NumVal1,OtherNumVal2 as T36_NumVal2,OtherDtVal1 as T36_DtVal1,OtherDtVal2 as T36_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=36)\"),",
						"     format: 'query') ~> T36OtherCore",
						"source(output(",
						"          T37_WorkerId as string,",
						"          T37_EventType as string,",
						"          T37_CharVal1 as string,",
						"          T37_CharVal2 as string,",
						"          T37_NumVal1 as double,",
						"          T37_NumVal2 as double,",
						"          T37_DtVal1 as date,",
						"          T37_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T37_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T37_EventType,OtherCharVal11 T37_CharVal1,OtherCharVal2 T37_CharVal2,OtherNumVal1 as T37_NumVal1,OtherNumVal2 as T37_NumVal2,OtherDtVal1 as T37_DtVal1,OtherDtVal2 as T37_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=37)\"),",
						"     format: 'query') ~> T37OtherCore",
						"source(output(",
						"          T38_WorkerId as string,",
						"          T38_EventType as string,",
						"          T38_CharVal1 as string,",
						"          T38_CharVal2 as string,",
						"          T38_NumVal1 as double,",
						"          T38_NumVal2 as double,",
						"          T38_DtVal1 as date,",
						"          T38_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T38_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T38_EventType,OtherCharVal11 T38_CharVal1,OtherCharVal2 T38_CharVal2,OtherNumVal1 as T38_NumVal1,OtherNumVal2 as T38_NumVal2,OtherDtVal1 as T38_DtVal1,OtherDtVal2 as T38_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=38)\"),",
						"     format: 'query') ~> T38OtherCore",
						"source(output(",
						"          T39_WorkerId as string,",
						"          T39_EventType as string,",
						"          T39_CharVal1 as string,",
						"          T39_CharVal2 as string,",
						"          T39_NumVal1 as double,",
						"          T39_NumVal2 as double,",
						"          T39_DtVal1 as date,",
						"          T39_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T39_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T39_EventType,OtherCharVal11 T39_CharVal1,OtherCharVal2 T39_CharVal2,OtherNumVal1 as T39_NumVal1,OtherNumVal2 as T39_NumVal2,OtherDtVal1 as T39_DtVal1,OtherDtVal2 as T39_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=39)\"),",
						"     format: 'query') ~> T39OtherCore",
						"source(output(",
						"          T40_WorkerId as string,",
						"          T40_EventType as string,",
						"          T40_CharVal1 as string,",
						"          T40_CharVal2 as string,",
						"          T40_NumVal1 as double,",
						"          T40_NumVal2 as double,",
						"          T40_DtVal1 as date,",
						"          T40_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T40_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T40_EventType,OtherCharVal11 T40_CharVal1,OtherCharVal2 T40_CharVal2,OtherNumVal1 as T40_NumVal1,OtherNumVal2 as T40_NumVal2,OtherDtVal1 as T40_DtVal1,OtherDtVal2 as T40_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=40)\"),",
						"     format: 'query') ~> T40OtherCore",
						"source(output(",
						"          T41_WorkerId as string,",
						"          T41_EventType as string,",
						"          T41_CharVal1 as string,",
						"          T41_CharVal2 as string,",
						"          T41_NumVal1 as double,",
						"          T41_NumVal2 as double,",
						"          T41_DtVal1 as date,",
						"          T41_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T41_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T41_EventType,OtherCharVal11 T41_CharVal1,OtherCharVal2 T41_CharVal2,OtherNumVal1 as T41_NumVal1,OtherNumVal2 as T41_NumVal2,OtherDtVal1 as T41_DtVal1,OtherDtVal2 as T41_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=41)\"),",
						"     format: 'query') ~> T41OtherCore",
						"source(output(",
						"          T42_WorkerId as string,",
						"          T42_EventType as string,",
						"          T42_CharVal1 as string,",
						"          T42_CharVal2 as string,",
						"          T42_NumVal1 as double,",
						"          T42_NumVal2 as double,",
						"          T42_DtVal1 as date,",
						"          T42_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T42_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T42_EventType,OtherCharVal11 T42_CharVal1,OtherCharVal2 T42_CharVal2,OtherNumVal1 as T42_NumVal1,OtherNumVal2 as T42_NumVal2,OtherDtVal1 as T42_DtVal1,OtherDtVal2 as T42_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=42)\"),",
						"     format: 'query') ~> T42OtherCore",
						"source(output(",
						"          T43_WorkerId as string,",
						"          T43_EventType as string,",
						"          T43_CharVal1 as string,",
						"          T43_CharVal2 as string,",
						"          T43_NumVal1 as double,",
						"          T43_NumVal2 as double,",
						"          T43_DtVal1 as date,",
						"          T43_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T43_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T43_EventType,OtherCharVal11 T43_CharVal1,OtherCharVal2 T43_CharVal2,OtherNumVal1 as T43_NumVal1,OtherNumVal2 as T43_NumVal2,OtherDtVal1 as T43_DtVal1,OtherDtVal2 as T43_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=43)\"),",
						"     format: 'query') ~> T43OtherCore",
						"source(output(",
						"          T44_WorkerId as string,",
						"          T44_EventType as string,",
						"          T44_CharVal1 as string,",
						"          T44_CharVal2 as string,",
						"          T44_NumVal1 as double,",
						"          T44_NumVal2 as double,",
						"          T44_DtVal1 as date,",
						"          T44_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T44_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T44_EventType,OtherCharVal11 T44_CharVal1,OtherCharVal2 T44_CharVal2,OtherNumVal1 as T44_NumVal1,OtherNumVal2 as T44_NumVal2,OtherDtVal1 as T44_DtVal1,OtherDtVal2 as T44_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=44)\"),",
						"     format: 'query') ~> T44OtherCore",
						"source(output(",
						"          T45_WorkerId as string,",
						"          T45_EventType as string,",
						"          T45_CharVal1 as string,",
						"          T45_CharVal2 as string,",
						"          T45_NumVal1 as double,",
						"          T45_NumVal2 as double,",
						"          T45_DtVal1 as date,",
						"          T45_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T45_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T45_EventType,OtherCharVal11 T45_CharVal1,OtherCharVal2 T45_CharVal2,OtherNumVal1 as T45_NumVal1,OtherNumVal2 as T45_NumVal2,OtherDtVal1 as T45_DtVal1,OtherDtVal2 as T45_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=45)\"),",
						"     format: 'query') ~> T45OtherCore",
						"source(output(",
						"          T46_WorkerId as string,",
						"          T46_EventType as string,",
						"          T46_CharVal1 as string,",
						"          T46_CharVal2 as string,",
						"          T46_NumVal1 as double,",
						"          T46_NumVal2 as double,",
						"          T46_DtVal1 as date,",
						"          T46_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T46_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T46_EventType,OtherCharVal11 T46_CharVal1,OtherCharVal2 T46_CharVal2,OtherNumVal1 as T46_NumVal1,OtherNumVal2 as T46_NumVal2,OtherDtVal1 as T46_DtVal1,OtherDtVal2 as T46_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=46)\"),",
						"     format: 'query') ~> T46OtherCore",
						"source(output(",
						"          T47_WorkerId as string,",
						"          T47_EventType as string,",
						"          T47_CharVal1 as string,",
						"          T47_CharVal2 as string,",
						"          T47_NumVal1 as double,",
						"          T47_NumVal2 as double,",
						"          T47_DtVal1 as date,",
						"          T47_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T47_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T47_EventType,OtherCharVal11 T47_CharVal1,OtherCharVal2 T47_CharVal2,OtherNumVal1 as T47_NumVal1,OtherNumVal2 as T47_NumVal2,OtherDtVal1 as T47_DtVal1,OtherDtVal2 as T47_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=47)\"),",
						"     format: 'query') ~> T47OtherCore",
						"source(output(",
						"          T48_WorkerId as string,",
						"          T48_EventType as string,",
						"          T48_CharVal1 as string,",
						"          T48_CharVal2 as string,",
						"          T48_NumVal1 as double,",
						"          T48_NumVal2 as double,",
						"          T48_DtVal1 as date,",
						"          T48_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T48_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T48_EventType,OtherCharVal11 T48_CharVal1,OtherCharVal2 T48_CharVal2,OtherNumVal1 as T48_NumVal1,OtherNumVal2 as T48_NumVal2,OtherDtVal1 as T48_DtVal1,OtherDtVal2 as T48_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=48)\"),",
						"     format: 'query') ~> T48OtherCore",
						"source(output(",
						"          T49_WorkerId as string,",
						"          T49_EventType as string,",
						"          T49_CharVal1 as string,",
						"          T49_CharVal2 as string,",
						"          T49_NumVal1 as double,",
						"          T49_NumVal2 as double,",
						"          T49_DtVal1 as date,",
						"          T49_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T49_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T49_EventType,OtherCharVal11 T49_CharVal1,OtherCharVal2 T49_CharVal2,OtherNumVal1 as T49_NumVal1,OtherNumVal2 as T49_NumVal2,OtherDtVal1 as T49_DtVal1,OtherDtVal2 as T49_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=49)\"),",
						"     format: 'query') ~> T49OtherCore",
						"source(output(",
						"          T50_WorkerId as string,",
						"          T50_EventType as string,",
						"          T50_CharVal1 as string,",
						"          T50_CharVal2 as string,",
						"          T50_NumVal1 as double,",
						"          T50_NumVal2 as double,",
						"          T50_DtVal1 as date,",
						"          T50_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T50_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T50_EventType,OtherCharVal11 T50_CharVal1,OtherCharVal2 T50_CharVal2,OtherNumVal1 as T50_NumVal1,OtherNumVal2 as T50_NumVal2,OtherDtVal1 as T50_DtVal1,OtherDtVal2 as T50_DtVal2 From [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) IN (Select concat([Year],'-','Q',[Quarter],' ',[Type]) from [dbo].[Tmp_OtherAnalysisTbl] where Id=50)\"),",
						"     format: 'query') ~> T50OtherCore",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFullPop",
						"OtherCoreFullPop, T1OtherCore join(WorkerId == T1_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, T2OtherCore join(WorkerId == T2_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, T3OtherCore join(WorkerId == T3_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, T4OtherCore join(WorkerId == T4_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, T5OtherCore join(WorkerId == T5_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, T6OtherCore join(WorkerId == T6_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, T7OtherCore join(WorkerId == T7_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT7, T8OtherCore join(WorkerId == T8_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"joinT8, T9OtherCore join(WorkerId == T9_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, T10OtherCore join(WorkerId == T10_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, T11OtherCore join(WorkerId == T11_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, T12OtherCore join(WorkerId == T12_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, T13OtherCore join(WorkerId == T13_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, T14OtherCore join(WorkerId == T14_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, T15OtherCore join(WorkerId == T15_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, T16OtherCore join(WorkerId == T16_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, T17OtherCore join(WorkerId == T17_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, T18OtherCore join(WorkerId == T18_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, T19OtherCore join(WorkerId == T19_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, T20OtherCore join(WorkerId == T20_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, T21OtherCore join(WorkerId == T21_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, T22OtherCore join(WorkerId == T22_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, T23OtherCore join(WorkerId == T23_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, T24OtherCore join(WorkerId == T24_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, T25OtherCore join(WorkerId == T25_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, T26OtherCore join(WorkerId == T26_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, T27OtherCore join(WorkerId == T27_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, T28OtherCore join(WorkerId == T28_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, T29OtherCore join(WorkerId == T29_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, T30OtherCore join(WorkerId == T30_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, T31OtherCore join(WorkerId == T31_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, T32OtherCore join(WorkerId == T32_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, T33OtherCore join(WorkerId == T33_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, T34OtherCore join(WorkerId == T34_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, T35OtherCore join(WorkerId == T35_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, T36OtherCore join(WorkerId == T36_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, T37OtherCore join(WorkerId == T37_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, T38OtherCore join(WorkerId == T38_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, T39OtherCore join(WorkerId == T39_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, T40OtherCore join(WorkerId == T40_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40, T41OtherCore join(WorkerId == T41_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, T42OtherCore join(WorkerId == T42_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, T43OtherCore join(WorkerId == T43_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, T44OtherCore join(WorkerId == T44_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, T45OtherCore join(WorkerId == T45_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, T46OtherCore join(WorkerId == T46_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, T47OtherCore join(WorkerId == T47_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, T48OtherCore join(WorkerId == T48_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, T49OtherCore join(WorkerId == T49_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, T50OtherCore join(WorkerId == T50_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"joinT50 select(mapColumn(",
						"          WorkerId,",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          T1_EventType,",
						"          T1_CharVal1,",
						"          T1_CharVal2,",
						"          T1_NumVal1,",
						"          T1_NumVal2,",
						"          T1_DtVal1,",
						"          T1_DtVal2,",
						"          T2_EventType,",
						"          T2_CharVal1,",
						"          T2_CharVal2,",
						"          T2_NumVal1,",
						"          T2_NumVal2,",
						"          T2_DtVal1,",
						"          T2_DtVal2,",
						"          T3_EventType,",
						"          T3_CharVal1,",
						"          T3_CharVal2,",
						"          T3_NumVal1,",
						"          T3_NumVal2,",
						"          T3_DtVal1,",
						"          T3_DtVal2,",
						"          T4_EventType,",
						"          T4_CharVal1,",
						"          T4_CharVal2,",
						"          T4_NumVal1,",
						"          T4_NumVal2,",
						"          T4_DtVal1,",
						"          T4_DtVal2,",
						"          T5_EventType,",
						"          T5_CharVal1,",
						"          T5_CharVal2,",
						"          T5_NumVal1,",
						"          T5_NumVal2,",
						"          T5_DtVal1,",
						"          T5_DtVal2,",
						"          T6_EventType,",
						"          T6_CharVal1,",
						"          T6_CharVal2,",
						"          T6_NumVal1,",
						"          T6_NumVal2,",
						"          T6_DtVal1,",
						"          T6_DtVal2,",
						"          T7_EventType,",
						"          T7_CharVal1,",
						"          T7_CharVal2,",
						"          T7_NumVal1,",
						"          T7_NumVal2,",
						"          T7_DtVal1,",
						"          T7_DtVal2,",
						"          T8_EventType,",
						"          T8_CharVal1,",
						"          T8_CharVal2,",
						"          T8_NumVal1,",
						"          T8_NumVal2,",
						"          T8_DtVal1,",
						"          T8_DtVal2,",
						"          T9_EventType,",
						"          T9_CharVal1,",
						"          T9_CharVal2,",
						"          T9_NumVal1,",
						"          T9_NumVal2,",
						"          T9_DtVal1,",
						"          T9_DtVal2,",
						"          T10_EventType,",
						"          T10_CharVal1,",
						"          T10_CharVal2,",
						"          T10_NumVal1,",
						"          T10_NumVal2,",
						"          T10_DtVal1,",
						"          T10_DtVal2,",
						"          T11_EventType,",
						"          T11_CharVal1,",
						"          T11_CharVal2,",
						"          T11_NumVal1,",
						"          T11_NumVal2,",
						"          T11_DtVal1,",
						"          T11_DtVal2,",
						"          T12_EventType,",
						"          T12_CharVal1,",
						"          T12_CharVal2,",
						"          T12_NumVal1,",
						"          T12_NumVal2,",
						"          T12_DtVal1,",
						"          T12_DtVal2,",
						"          T13_EventType,",
						"          T13_CharVal1,",
						"          T13_CharVal2,",
						"          T13_NumVal1,",
						"          T13_NumVal2,",
						"          T13_DtVal1,",
						"          T13_DtVal2,",
						"          T14_EventType,",
						"          T14_CharVal1,",
						"          T14_CharVal2,",
						"          T14_NumVal1,",
						"          T14_NumVal2,",
						"          T14_DtVal1,",
						"          T14_DtVal2,",
						"          T15_EventType,",
						"          T15_CharVal1,",
						"          T15_CharVal2,",
						"          T15_NumVal1,",
						"          T15_NumVal2,",
						"          T15_DtVal1,",
						"          T15_DtVal2,",
						"          T16_EventType,",
						"          T16_CharVal1,",
						"          T16_CharVal2,",
						"          T16_NumVal1,",
						"          T16_NumVal2,",
						"          T16_DtVal1,",
						"          T16_DtVal2,",
						"          T17_EventType,",
						"          T17_CharVal1,",
						"          T17_CharVal2,",
						"          T17_NumVal1,",
						"          T17_NumVal2,",
						"          T17_DtVal1,",
						"          T17_DtVal2,",
						"          T18_EventType,",
						"          T18_CharVal1,",
						"          T18_CharVal2,",
						"          T18_NumVal1,",
						"          T18_NumVal2,",
						"          T18_DtVal1,",
						"          T18_DtVal2,",
						"          T19_EventType,",
						"          T19_CharVal1,",
						"          T19_CharVal2,",
						"          T19_NumVal1,",
						"          T19_NumVal2,",
						"          T19_DtVal1,",
						"          T19_DtVal2,",
						"          T20_EventType,",
						"          T20_CharVal1,",
						"          T20_CharVal2,",
						"          T20_NumVal1,",
						"          T20_NumVal2,",
						"          T20_DtVal1,",
						"          T20_DtVal2,",
						"          T21_EventType,",
						"          T21_CharVal1,",
						"          T21_CharVal2,",
						"          T21_NumVal1,",
						"          T21_NumVal2,",
						"          T21_DtVal1,",
						"          T21_DtVal2,",
						"          T22_EventType,",
						"          T22_CharVal1,",
						"          T22_CharVal2,",
						"          T22_NumVal1,",
						"          T22_NumVal2,",
						"          T22_DtVal1,",
						"          T22_DtVal2,",
						"          T23_EventType,",
						"          T23_CharVal1,",
						"          T23_CharVal2,",
						"          T23_NumVal1,",
						"          T23_NumVal2,",
						"          T23_DtVal1,",
						"          T23_DtVal2,",
						"          T24_EventType,",
						"          T24_CharVal1,",
						"          T24_CharVal2,",
						"          T24_NumVal1,",
						"          T24_NumVal2,",
						"          T24_DtVal1,",
						"          T24_DtVal2,",
						"          T25_EventType,",
						"          T25_CharVal1,",
						"          T25_CharVal2,",
						"          T25_NumVal1,",
						"          T25_NumVal2,",
						"          T25_DtVal1,",
						"          T25_DtVal2,",
						"          T26_EventType,",
						"          T26_CharVal1,",
						"          T26_CharVal2,",
						"          T26_NumVal1,",
						"          T26_NumVal2,",
						"          T26_DtVal1,",
						"          T26_DtVal2,",
						"          T27_EventType,",
						"          T27_CharVal1,",
						"          T27_CharVal2,",
						"          T27_NumVal1,",
						"          T27_NumVal2,",
						"          T27_DtVal1,",
						"          T27_DtVal2,",
						"          T28_EventType,",
						"          T28_CharVal1,",
						"          T28_CharVal2,",
						"          T28_NumVal1,",
						"          T28_NumVal2,",
						"          T28_DtVal1,",
						"          T28_DtVal2,",
						"          T29_EventType,",
						"          T29_CharVal1,",
						"          T29_CharVal2,",
						"          T29_NumVal1,",
						"          T29_NumVal2,",
						"          T29_DtVal1,",
						"          T29_DtVal2,",
						"          T30_EventType,",
						"          T30_CharVal1,",
						"          T30_CharVal2,",
						"          T30_NumVal1,",
						"          T30_NumVal2,",
						"          T30_DtVal1,",
						"          T30_DtVal2,",
						"          T31_EventType,",
						"          T31_CharVal1,",
						"          T31_CharVal2,",
						"          T31_NumVal1,",
						"          T31_NumVal2,",
						"          T31_DtVal1,",
						"          T31_DtVal2,",
						"          T32_EventType,",
						"          T32_CharVal1,",
						"          T32_CharVal2,",
						"          T32_NumVal1,",
						"          T32_NumVal2,",
						"          T32_DtVal1,",
						"          T32_DtVal2,",
						"          T33_EventType,",
						"          T33_CharVal1,",
						"          T33_CharVal2,",
						"          T33_NumVal1,",
						"          T33_NumVal2,",
						"          T33_DtVal1,",
						"          T33_DtVal2,",
						"          T34_EventType,",
						"          T34_CharVal1,",
						"          T34_CharVal2,",
						"          T34_NumVal1,",
						"          T34_NumVal2,",
						"          T34_DtVal1,",
						"          T34_DtVal2,",
						"          T35_EventType,",
						"          T35_CharVal1,",
						"          T35_CharVal2,",
						"          T35_NumVal1,",
						"          T35_NumVal2,",
						"          T35_DtVal1,",
						"          T35_DtVal2,",
						"          T36_EventType,",
						"          T36_CharVal1,",
						"          T36_CharVal2,",
						"          T36_NumVal1,",
						"          T36_NumVal2,",
						"          T36_DtVal1,",
						"          T36_DtVal2,",
						"          T37_EventType,",
						"          T37_CharVal1,",
						"          T37_CharVal2,",
						"          T37_NumVal1,",
						"          T37_NumVal2,",
						"          T37_DtVal1,",
						"          T37_DtVal2,",
						"          T38_EventType,",
						"          T38_CharVal1,",
						"          T38_CharVal2,",
						"          T38_NumVal1,",
						"          T38_NumVal2,",
						"          T38_DtVal1,",
						"          T38_DtVal2,",
						"          T39_EventType,",
						"          T39_CharVal1,",
						"          T39_CharVal2,",
						"          T39_NumVal1,",
						"          T39_NumVal2,",
						"          T39_DtVal1,",
						"          T39_DtVal2,",
						"          T40_EventType,",
						"          T40_CharVal1,",
						"          T40_CharVal2,",
						"          T40_NumVal1,",
						"          T40_NumVal2,",
						"          T40_DtVal1,",
						"          T40_DtVal2,",
						"          T41_EventType,",
						"          T41_CharVal1,",
						"          T41_CharVal2,",
						"          T41_NumVal1,",
						"          T41_NumVal2,",
						"          T41_DtVal1,",
						"          T41_DtVal2,",
						"          T42_EventType,",
						"          T42_CharVal1,",
						"          T42_CharVal2,",
						"          T42_NumVal1,",
						"          T42_NumVal2,",
						"          T42_DtVal1,",
						"          T42_DtVal2,",
						"          T43_EventType,",
						"          T43_CharVal1,",
						"          T43_CharVal2,",
						"          T43_NumVal1,",
						"          T43_NumVal2,",
						"          T43_DtVal1,",
						"          T43_DtVal2,",
						"          T44_EventType,",
						"          T44_CharVal1,",
						"          T44_CharVal2,",
						"          T44_NumVal1,",
						"          T44_NumVal2,",
						"          T44_DtVal1,",
						"          T44_DtVal2,",
						"          T45_EventType,",
						"          T45_CharVal1,",
						"          T45_CharVal2,",
						"          T45_NumVal1,",
						"          T45_NumVal2,",
						"          T45_DtVal1,",
						"          T45_DtVal2,",
						"          T46_EventType,",
						"          T46_CharVal1,",
						"          T46_CharVal2,",
						"          T46_NumVal1,",
						"          T46_NumVal2,",
						"          T46_DtVal1,",
						"          T46_DtVal2,",
						"          T47_EventType,",
						"          T47_CharVal1,",
						"          T47_CharVal2,",
						"          T47_NumVal1,",
						"          T47_NumVal2,",
						"          T47_DtVal1,",
						"          T47_DtVal2,",
						"          T48_EventType,",
						"          T48_CharVal1,",
						"          T48_CharVal2,",
						"          T48_NumVal1,",
						"          T48_NumVal2,",
						"          T48_DtVal1,",
						"          T48_DtVal2,",
						"          T49_EventType,",
						"          T49_CharVal1,",
						"          T49_CharVal2,",
						"          T49_NumVal1,",
						"          T49_NumVal2,",
						"          T49_DtVal1,",
						"          T49_DtVal2,",
						"          T50_EventType,",
						"          T50_CharVal1,",
						"          T50_CharVal2,",
						"          T50_NumVal1,",
						"          T50_NumVal2,",
						"          T50_DtVal1,",
						"          T50_DtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCleanup",
						"SelectCleanup derive({Analysis Year} = left(T1_EventType,4)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherAnalysisFctTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherAnaylysis_Curr')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "OtherCoreAnalysisMaxYearOutput"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select max(Year) as Year from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          WorkerId,",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Data Collection Year},",
						"          {Data Collection Quarter},",
						"          {Event Year} = Year,",
						"          {T1 Type},",
						"          {T1 OtherCharVal1},",
						"          {T1 OtherCharVal2},",
						"          {T1 OtherNumVal1},",
						"          {T1 OtherNumVal2},",
						"          {T1 OtherDtVal1},",
						"          {T1 OtherDtVal2},",
						"          {T2 Type},",
						"          {T2 OtherCharVal1} = {T1 Type},",
						"          {T2 OtherCharVal2},",
						"          {T2 OtherNumVal1},",
						"          {T2 OtherNumVal2},",
						"          {T2 OtherDtVal1},",
						"          {T2 OtherDtVal2},",
						"          {T3 Type},",
						"          {T3 OtherCharVal1},",
						"          {T3 OtherCharVal2},",
						"          {T3 OtherNumVal1},",
						"          {T3 OtherNumVal2},",
						"          {T3 OtherDtVal1},",
						"          {T3 OtherDtVal2},",
						"          {T4 Type},",
						"          {T4 OtherCharVal1},",
						"          {T4 OtherCharVal2},",
						"          {T4 OtherNumVal1},",
						"          {T4 OtherNumVal2},",
						"          {T4 OtherDtVal1},",
						"          {T4 OtherDtVal2},",
						"          {T5 Type},",
						"          {T5 OtherCharVal1},",
						"          {T5 OtherCharVal2},",
						"          {T5 OtherNumVal1},",
						"          {T5 OtherNumVal2},",
						"          {T5 OtherDtVal1},",
						"          {T5 OtherDtVal2},",
						"          {T6 Type},",
						"          {T6 OtherCharVal1},",
						"          {T6 OtherCharVal2},",
						"          {T6 OtherNumVal1},",
						"          {T6 OtherNumVal2},",
						"          {T6 OtherDtVal1},",
						"          {T6 OtherDtVal2},",
						"          {T7 Type},",
						"          {T7 OtherCharVal1},",
						"          {T7 OtherCharVal2},",
						"          {T7 OtherNumVal1},",
						"          {T7 OtherNumVal2},",
						"          {T7 OtherDtVal1},",
						"          {T7 OtherDtVal2},",
						"          {T8 Type},",
						"          {T8 OtherCharVal1},",
						"          {T8 OtherCharVal2},",
						"          {T8 OtherNumVal1},",
						"          {T8 OtherNumVal2},",
						"          {T8 OtherDtVal1},",
						"          {T8 OtherDtVal2},",
						"          {T9 Type},",
						"          {T9 OtherCharVal1},",
						"          {T9 OtherCharVal2},",
						"          {T9 OtherNumVal1},",
						"          {T9 OtherNumVal2},",
						"          {T9 OtherDtVal1},",
						"          {T9 OtherDtVal2},",
						"          {T10 Type},",
						"          {T10 OtherCharVal1},",
						"          {T10 OtherCharVal2},",
						"          {T10 OtherNumVal1},",
						"          {T10 OtherNumVal2},",
						"          {T10 OtherDtVal1},",
						"          {T10 OtherDtVal2},",
						"          {T11 Type},",
						"          {T11 OtherCharVal1},",
						"          {T11 OtherCharVal2},",
						"          {T11 OtherNumVal1},",
						"          {T11 OtherNumVal2},",
						"          {T11 OtherDtVal1},",
						"          {T11 OtherDtVal2},",
						"          {T12 Type},",
						"          {T12 OtherCharVal1},",
						"          {T12 OtherCharVal2},",
						"          {T12 OtherNumVal1},",
						"          {T12 OtherNumVal2},",
						"          {T12 OtherDtVal1},",
						"          {T12 OtherDtVal2},",
						"          {T13 Type},",
						"          {T13 OtherCharVal1},",
						"          {T13 OtherCharVal2},",
						"          {T13 OtherNumVal1},",
						"          {T13 OtherNumVal2},",
						"          {T13 OtherDtVal1},",
						"          {T13 OtherDtVal2},",
						"          {T14 Type},",
						"          {T14 OtherCharVal1},",
						"          {T14 OtherCharVal2},",
						"          {T14 OtherNumVal1},",
						"          {T14 OtherNumVal2},",
						"          {T14 OtherDtVal1},",
						"          {T14 OtherDtVal2},",
						"          {T15 Type},",
						"          {T15 OtherCharVal1},",
						"          {T15 OtherCharVal2},",
						"          {T15 OtherNumVal1},",
						"          {T15 OtherNumVal2},",
						"          {T15 OtherDtVal1},",
						"          {T15 OtherDtVal2},",
						"          {T16 Type},",
						"          {T16 OtherCharVal1},",
						"          {T16 OtherCharVal2},",
						"          {T16 OtherNumVal1},",
						"          {T16 OtherNumVal2},",
						"          {T16 OtherDtVal1},",
						"          {T16 OtherDtVal2},",
						"          {T17 Type},",
						"          {T17 OtherCharVal1},",
						"          {T17 OtherCharVal2},",
						"          {T17 OtherNumVal1},",
						"          {T17 OtherNumVal2},",
						"          {T17 OtherDtVal1},",
						"          {T17 OtherDtVal2},",
						"          {T18 Type},",
						"          {T18 OtherCharVal1},",
						"          {T18 OtherCharVal2},",
						"          {T18 OtherNumVal1},",
						"          {T18 OtherNumVal2},",
						"          {T18 OtherDtVal1},",
						"          {T18 OtherDtVal2},",
						"          {T19 Type},",
						"          {T19 OtherCharVal1},",
						"          {T19 OtherCharVal2},",
						"          {T19 OtherNumVal1},",
						"          {T19 OtherNumVal2},",
						"          {T19 OtherDtVal1},",
						"          {T19 OtherDtVal2},",
						"          {T20 Type},",
						"          {T20 OtherCharVal1},",
						"          {T20 OtherCharVal2},",
						"          {T20 OtherNumVal1},",
						"          {T20 OtherNumVal2},",
						"          {T20 OtherDtVal1},",
						"          {T20 OtherDtVal2},",
						"          {T21 Type},",
						"          {T21 OtherCharVal1},",
						"          {T21 OtherCharVal2},",
						"          {T21 OtherNumVal1},",
						"          {T21 OtherNumVal2},",
						"          {T21 OtherDtVal1},",
						"          {T21 OtherDtVal2},",
						"          {T22 Type},",
						"          {T22 OtherCharVal1},",
						"          {T22 OtherCharVal2},",
						"          {T22 OtherNumVal1},",
						"          {T22 OtherNumVal2},",
						"          {T22 OtherDtVal1},",
						"          {T22 OtherDtVal2},",
						"          {T23 Type},",
						"          {T23 OtherCharVal1},",
						"          {T23 OtherCharVal2},",
						"          {T23 OtherNumVal1},",
						"          {T23 OtherNumVal2},",
						"          {T23 OtherDtVal1},",
						"          {T23 OtherDtVal2},",
						"          {T24 Type},",
						"          {T24 OtherCharVal1},",
						"          {T24 OtherCharVal2},",
						"          {T24 OtherNumVal1},",
						"          {T24 OtherNumVal2},",
						"          {T24 OtherDtVal1},",
						"          {T24 OtherDtVal2},",
						"          {T25 Type},",
						"          {T25 OtherCharVal1},",
						"          {T25 OtherCharVal2},",
						"          {T25 OtherNumVal1},",
						"          {T25 OtherNumVal2},",
						"          {T25 OtherDtVal1},",
						"          {T25 OtherDtVal2},",
						"          {T26 Type},",
						"          {T26 OtherCharVal1},",
						"          {T26 OtherCharVal2},",
						"          {T26 OtherNumVal1},",
						"          {T26 OtherNumVal2},",
						"          {T26 OtherDtVal1},",
						"          {T26 OtherDtVal2},",
						"          {T27 Type},",
						"          {T27 OtherCharVal1},",
						"          {T27 OtherCharVal2},",
						"          {T27 OtherNumVal1},",
						"          {T27 OtherNumVal2},",
						"          {T27 OtherDtVal1},",
						"          {T27 OtherDtVal2},",
						"          {T28 Type},",
						"          {T28 OtherCharVal1},",
						"          {T28 OtherCharVal2},",
						"          {T28 OtherNumVal1},",
						"          {T28 OtherNumVal2},",
						"          {T28 OtherDtVal1},",
						"          {T28 OtherDtVal2},",
						"          {T29 Type},",
						"          {T29 OtherCharVal1},",
						"          {T29 OtherCharVal2},",
						"          {T29 OtherNumVal1},",
						"          {T29 OtherNumVal2},",
						"          {T29 OtherDtVal1},",
						"          {T29 OtherDtVal2},",
						"          {T30 Type},",
						"          {T30 OtherCharVal1},",
						"          {T30 OtherCharVal2},",
						"          {T30 OtherNumVal1},",
						"          {T30 OtherNumVal2},",
						"          {T30 OtherDtVal1},",
						"          {T30 OtherDtVal2},",
						"          {T31 Type},",
						"          {T31 OtherCharVal1},",
						"          {T31 OtherCharVal2},",
						"          {T31 OtherNumVal1},",
						"          {T31 OtherNumVal2},",
						"          {T31 OtherDtVal1},",
						"          {T31 OtherDtVal2},",
						"          {T32 Type},",
						"          {T32 OtherCharVal1},",
						"          {T32 OtherCharVal2},",
						"          {T32 OtherNumVal1},",
						"          {T32 OtherNumVal2},",
						"          {T32 OtherDtVal1},",
						"          {T32 OtherDtVal2},",
						"          {T33 Type},",
						"          {T33 OtherCharVal1},",
						"          {T33 OtherCharVal2},",
						"          {T33 OtherNumVal1},",
						"          {T33 OtherNumVal2},",
						"          {T33 OtherDtVal1},",
						"          {T33 OtherDtVal2},",
						"          {T34 Type},",
						"          {T34 OtherCharVal1},",
						"          {T34 OtherCharVal2},",
						"          {T34 OtherNumVal1},",
						"          {T34 OtherNumVal2},",
						"          {T34 OtherDtVal1},",
						"          {T34 OtherDtVal2},",
						"          {T35 Type},",
						"          {T35 OtherCharVal1},",
						"          {T35 OtherCharVal2},",
						"          {T35 OtherNumVal1},",
						"          {T35 OtherNumVal2},",
						"          {T35 OtherDtVal1},",
						"          {T35 OtherDtVal2},",
						"          {T36 Type},",
						"          {T36 OtherCharVal1},",
						"          {T36 OtherCharVal2},",
						"          {T36 OtherNumVal1},",
						"          {T36 OtherNumVal2},",
						"          {T36 OtherDtVal1},",
						"          {T36 OtherDtVal2},",
						"          {T37 Type},",
						"          {T37 OtherCharVal1},",
						"          {T37 OtherCharVal2},",
						"          {T37 OtherNumVal1},",
						"          {T37 OtherNumVal2},",
						"          {T37 OtherDtVal1},",
						"          {T37 OtherDtVal2},",
						"          {T38 Type},",
						"          {T38 OtherCharVal1},",
						"          {T38 OtherCharVal2},",
						"          {T38 OtherNumVal1},",
						"          {T38 OtherNumVal2},",
						"          {T38 OtherDtVal1},",
						"          {T38 OtherDtVal2},",
						"          {T39 Type},",
						"          {T39 OtherCharVal1},",
						"          {T39 OtherCharVal2},",
						"          {T39 OtherNumVal1},",
						"          {T39 OtherNumVal2},",
						"          {T39 OtherDtVal1},",
						"          {T39 OtherDtVal2},",
						"          {T40 Type},",
						"          {T40 OtherCharVal1},",
						"          {T40 OtherCharVal2},",
						"          {T40 OtherNumVal1},",
						"          {T40 OtherNumVal2},",
						"          {T40 OtherDtVal1},",
						"          {T40 OtherDtVal2},",
						"          {T41 Type},",
						"          {T41 OtherCharVal1},",
						"          {T41 OtherCharVal2},",
						"          {T41 OtherNumVal1},",
						"          {T41 OtherNumVal2},",
						"          {T41 OtherDtVal1},",
						"          {T41 OtherDtVal2},",
						"          {T42 Type},",
						"          {T42 OtherCharVal1},",
						"          {T42 OtherCharVal2},",
						"          {T42 OtherNumVal1},",
						"          {T42 OtherNumVal2},",
						"          {T42 OtherDtVal1},",
						"          {T42 OtherDtVal2},",
						"          {T43 Type},",
						"          {T43 OtherCharVal1},",
						"          {T43 OtherCharVal2},",
						"          {T43 OtherNumVal1},",
						"          {T43 OtherNumVal2},",
						"          {T43 OtherDtVal1},",
						"          {T43 OtherDtVal2},",
						"          {T44 Type},",
						"          {T44 OtherCharVal1},",
						"          {T44 OtherCharVal2},",
						"          {T44 OtherNumVal1},",
						"          {T44 OtherNumVal2},",
						"          {T44 OtherDtVal1},",
						"          {T44 OtherDtVal2},",
						"          {T45 Type},",
						"          {T45 OtherCharVal1},",
						"          {T45 OtherCharVal2},",
						"          {T45 OtherNumVal1},",
						"          {T45 OtherNumVal2},",
						"          {T45 OtherDtVal1},",
						"          {T45 OtherDtVal2},",
						"          {T46 Type},",
						"          {T46 OtherCharVal1},",
						"          {T46 OtherCharVal2},",
						"          {T46 OtherNumVal1},",
						"          {T46 OtherNumVal2},",
						"          {T46 OtherDtVal1},",
						"          {T46 OtherDtVal2},",
						"          {T47 Type},",
						"          {T47 OtherCharVal1},",
						"          {T47 OtherCharVal2},",
						"          {T47 OtherNumVal1},",
						"          {T47 OtherNumVal2},",
						"          {T47 OtherDtVal1},",
						"          {T47 OtherDtVal2},",
						"          {T48 Type},",
						"          {T48 OtherCharVal1},",
						"          {T48 OtherCharVal2},",
						"          {T48 OtherNumVal1},",
						"          {T48 OtherNumVal2},",
						"          {T48 OtherDtVal1},",
						"          {T48 OtherDtVal2},",
						"          {T49 Type},",
						"          {T49 OtherCharVal1},",
						"          {T49 OtherCharVal2},",
						"          {T49 OtherNumVal1},",
						"          {T49 OtherNumVal2},",
						"          {T49 OtherDtVal1},",
						"          {T49 OtherDtVal2},",
						"          {T50 Type},",
						"          {T50 OtherCharVal1},",
						"          {T50 OtherCharVal2},",
						"          {T50 OtherNumVal1},",
						"          {T50 OtherNumVal2},",
						"          {T50 OtherDtVal1},",
						"          {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreAnalysisMaxYearOutput join(ClientId == {Client Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"OtherCoreYear derive({Client Id} = $Flow_Client_Id) ~> OtherCoreAnalysisMaxYearOutput",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherFactAnalysis_Curr.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTmp_OtherAnalysisTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_AnalysisTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherAnaylysis_P1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "OtherCoreAnalysisMaxYearOutput"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select max(Year) as Year from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          WorkerId,",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Data Collection Year},",
						"          {Data Collection Quarter},",
						"          {Event Year} = Year,",
						"          {T1 Type},",
						"          {T1 OtherCharVal1},",
						"          {T1 OtherCharVal2},",
						"          {T1 OtherNumVal1},",
						"          {T1 OtherNumVal2},",
						"          {T1 OtherDtVal1},",
						"          {T1 OtherDtVal2},",
						"          {T2 Type},",
						"          {T2 OtherCharVal1} = {T1 Type},",
						"          {T2 OtherCharVal2},",
						"          {T2 OtherNumVal1},",
						"          {T2 OtherNumVal2},",
						"          {T2 OtherDtVal1},",
						"          {T2 OtherDtVal2},",
						"          {T3 Type},",
						"          {T3 OtherCharVal1},",
						"          {T3 OtherCharVal2},",
						"          {T3 OtherNumVal1},",
						"          {T3 OtherNumVal2},",
						"          {T3 OtherDtVal1},",
						"          {T3 OtherDtVal2},",
						"          {T4 Type},",
						"          {T4 OtherCharVal1},",
						"          {T4 OtherCharVal2},",
						"          {T4 OtherNumVal1},",
						"          {T4 OtherNumVal2},",
						"          {T4 OtherDtVal1},",
						"          {T4 OtherDtVal2},",
						"          {T5 Type},",
						"          {T5 OtherCharVal1},",
						"          {T5 OtherCharVal2},",
						"          {T5 OtherNumVal1},",
						"          {T5 OtherNumVal2},",
						"          {T5 OtherDtVal1},",
						"          {T5 OtherDtVal2},",
						"          {T6 Type},",
						"          {T6 OtherCharVal1},",
						"          {T6 OtherCharVal2},",
						"          {T6 OtherNumVal1},",
						"          {T6 OtherNumVal2},",
						"          {T6 OtherDtVal1},",
						"          {T6 OtherDtVal2},",
						"          {T7 Type},",
						"          {T7 OtherCharVal1},",
						"          {T7 OtherCharVal2},",
						"          {T7 OtherNumVal1},",
						"          {T7 OtherNumVal2},",
						"          {T7 OtherDtVal1},",
						"          {T7 OtherDtVal2},",
						"          {T8 Type},",
						"          {T8 OtherCharVal1},",
						"          {T8 OtherCharVal2},",
						"          {T8 OtherNumVal1},",
						"          {T8 OtherNumVal2},",
						"          {T8 OtherDtVal1},",
						"          {T8 OtherDtVal2},",
						"          {T9 Type},",
						"          {T9 OtherCharVal1},",
						"          {T9 OtherCharVal2},",
						"          {T9 OtherNumVal1},",
						"          {T9 OtherNumVal2},",
						"          {T9 OtherDtVal1},",
						"          {T9 OtherDtVal2},",
						"          {T10 Type},",
						"          {T10 OtherCharVal1},",
						"          {T10 OtherCharVal2},",
						"          {T10 OtherNumVal1},",
						"          {T10 OtherNumVal2},",
						"          {T10 OtherDtVal1},",
						"          {T10 OtherDtVal2},",
						"          {T11 Type},",
						"          {T11 OtherCharVal1},",
						"          {T11 OtherCharVal2},",
						"          {T11 OtherNumVal1},",
						"          {T11 OtherNumVal2},",
						"          {T11 OtherDtVal1},",
						"          {T11 OtherDtVal2},",
						"          {T12 Type},",
						"          {T12 OtherCharVal1},",
						"          {T12 OtherCharVal2},",
						"          {T12 OtherNumVal1},",
						"          {T12 OtherNumVal2},",
						"          {T12 OtherDtVal1},",
						"          {T12 OtherDtVal2},",
						"          {T13 Type},",
						"          {T13 OtherCharVal1},",
						"          {T13 OtherCharVal2},",
						"          {T13 OtherNumVal1},",
						"          {T13 OtherNumVal2},",
						"          {T13 OtherDtVal1},",
						"          {T13 OtherDtVal2},",
						"          {T14 Type},",
						"          {T14 OtherCharVal1},",
						"          {T14 OtherCharVal2},",
						"          {T14 OtherNumVal1},",
						"          {T14 OtherNumVal2},",
						"          {T14 OtherDtVal1},",
						"          {T14 OtherDtVal2},",
						"          {T15 Type},",
						"          {T15 OtherCharVal1},",
						"          {T15 OtherCharVal2},",
						"          {T15 OtherNumVal1},",
						"          {T15 OtherNumVal2},",
						"          {T15 OtherDtVal1},",
						"          {T15 OtherDtVal2},",
						"          {T16 Type},",
						"          {T16 OtherCharVal1},",
						"          {T16 OtherCharVal2},",
						"          {T16 OtherNumVal1},",
						"          {T16 OtherNumVal2},",
						"          {T16 OtherDtVal1},",
						"          {T16 OtherDtVal2},",
						"          {T17 Type},",
						"          {T17 OtherCharVal1},",
						"          {T17 OtherCharVal2},",
						"          {T17 OtherNumVal1},",
						"          {T17 OtherNumVal2},",
						"          {T17 OtherDtVal1},",
						"          {T17 OtherDtVal2},",
						"          {T18 Type},",
						"          {T18 OtherCharVal1},",
						"          {T18 OtherCharVal2},",
						"          {T18 OtherNumVal1},",
						"          {T18 OtherNumVal2},",
						"          {T18 OtherDtVal1},",
						"          {T18 OtherDtVal2},",
						"          {T19 Type},",
						"          {T19 OtherCharVal1},",
						"          {T19 OtherCharVal2},",
						"          {T19 OtherNumVal1},",
						"          {T19 OtherNumVal2},",
						"          {T19 OtherDtVal1},",
						"          {T19 OtherDtVal2},",
						"          {T20 Type},",
						"          {T20 OtherCharVal1},",
						"          {T20 OtherCharVal2},",
						"          {T20 OtherNumVal1},",
						"          {T20 OtherNumVal2},",
						"          {T20 OtherDtVal1},",
						"          {T20 OtherDtVal2},",
						"          {T21 Type},",
						"          {T21 OtherCharVal1},",
						"          {T21 OtherCharVal2},",
						"          {T21 OtherNumVal1},",
						"          {T21 OtherNumVal2},",
						"          {T21 OtherDtVal1},",
						"          {T21 OtherDtVal2},",
						"          {T22 Type},",
						"          {T22 OtherCharVal1},",
						"          {T22 OtherCharVal2},",
						"          {T22 OtherNumVal1},",
						"          {T22 OtherNumVal2},",
						"          {T22 OtherDtVal1},",
						"          {T22 OtherDtVal2},",
						"          {T23 Type},",
						"          {T23 OtherCharVal1},",
						"          {T23 OtherCharVal2},",
						"          {T23 OtherNumVal1},",
						"          {T23 OtherNumVal2},",
						"          {T23 OtherDtVal1},",
						"          {T23 OtherDtVal2},",
						"          {T24 Type},",
						"          {T24 OtherCharVal1},",
						"          {T24 OtherCharVal2},",
						"          {T24 OtherNumVal1},",
						"          {T24 OtherNumVal2},",
						"          {T24 OtherDtVal1},",
						"          {T24 OtherDtVal2},",
						"          {T25 Type},",
						"          {T25 OtherCharVal1},",
						"          {T25 OtherCharVal2},",
						"          {T25 OtherNumVal1},",
						"          {T25 OtherNumVal2},",
						"          {T25 OtherDtVal1},",
						"          {T25 OtherDtVal2},",
						"          {T26 Type},",
						"          {T26 OtherCharVal1},",
						"          {T26 OtherCharVal2},",
						"          {T26 OtherNumVal1},",
						"          {T26 OtherNumVal2},",
						"          {T26 OtherDtVal1},",
						"          {T26 OtherDtVal2},",
						"          {T27 Type},",
						"          {T27 OtherCharVal1},",
						"          {T27 OtherCharVal2},",
						"          {T27 OtherNumVal1},",
						"          {T27 OtherNumVal2},",
						"          {T27 OtherDtVal1},",
						"          {T27 OtherDtVal2},",
						"          {T28 Type},",
						"          {T28 OtherCharVal1},",
						"          {T28 OtherCharVal2},",
						"          {T28 OtherNumVal1},",
						"          {T28 OtherNumVal2},",
						"          {T28 OtherDtVal1},",
						"          {T28 OtherDtVal2},",
						"          {T29 Type},",
						"          {T29 OtherCharVal1},",
						"          {T29 OtherCharVal2},",
						"          {T29 OtherNumVal1},",
						"          {T29 OtherNumVal2},",
						"          {T29 OtherDtVal1},",
						"          {T29 OtherDtVal2},",
						"          {T30 Type},",
						"          {T30 OtherCharVal1},",
						"          {T30 OtherCharVal2},",
						"          {T30 OtherNumVal1},",
						"          {T30 OtherNumVal2},",
						"          {T30 OtherDtVal1},",
						"          {T30 OtherDtVal2},",
						"          {T31 Type},",
						"          {T31 OtherCharVal1},",
						"          {T31 OtherCharVal2},",
						"          {T31 OtherNumVal1},",
						"          {T31 OtherNumVal2},",
						"          {T31 OtherDtVal1},",
						"          {T31 OtherDtVal2},",
						"          {T32 Type},",
						"          {T32 OtherCharVal1},",
						"          {T32 OtherCharVal2},",
						"          {T32 OtherNumVal1},",
						"          {T32 OtherNumVal2},",
						"          {T32 OtherDtVal1},",
						"          {T32 OtherDtVal2},",
						"          {T33 Type},",
						"          {T33 OtherCharVal1},",
						"          {T33 OtherCharVal2},",
						"          {T33 OtherNumVal1},",
						"          {T33 OtherNumVal2},",
						"          {T33 OtherDtVal1},",
						"          {T33 OtherDtVal2},",
						"          {T34 Type},",
						"          {T34 OtherCharVal1},",
						"          {T34 OtherCharVal2},",
						"          {T34 OtherNumVal1},",
						"          {T34 OtherNumVal2},",
						"          {T34 OtherDtVal1},",
						"          {T34 OtherDtVal2},",
						"          {T35 Type},",
						"          {T35 OtherCharVal1},",
						"          {T35 OtherCharVal2},",
						"          {T35 OtherNumVal1},",
						"          {T35 OtherNumVal2},",
						"          {T35 OtherDtVal1},",
						"          {T35 OtherDtVal2},",
						"          {T36 Type},",
						"          {T36 OtherCharVal1},",
						"          {T36 OtherCharVal2},",
						"          {T36 OtherNumVal1},",
						"          {T36 OtherNumVal2},",
						"          {T36 OtherDtVal1},",
						"          {T36 OtherDtVal2},",
						"          {T37 Type},",
						"          {T37 OtherCharVal1},",
						"          {T37 OtherCharVal2},",
						"          {T37 OtherNumVal1},",
						"          {T37 OtherNumVal2},",
						"          {T37 OtherDtVal1},",
						"          {T37 OtherDtVal2},",
						"          {T38 Type},",
						"          {T38 OtherCharVal1},",
						"          {T38 OtherCharVal2},",
						"          {T38 OtherNumVal1},",
						"          {T38 OtherNumVal2},",
						"          {T38 OtherDtVal1},",
						"          {T38 OtherDtVal2},",
						"          {T39 Type},",
						"          {T39 OtherCharVal1},",
						"          {T39 OtherCharVal2},",
						"          {T39 OtherNumVal1},",
						"          {T39 OtherNumVal2},",
						"          {T39 OtherDtVal1},",
						"          {T39 OtherDtVal2},",
						"          {T40 Type},",
						"          {T40 OtherCharVal1},",
						"          {T40 OtherCharVal2},",
						"          {T40 OtherNumVal1},",
						"          {T40 OtherNumVal2},",
						"          {T40 OtherDtVal1},",
						"          {T40 OtherDtVal2},",
						"          {T41 Type},",
						"          {T41 OtherCharVal1},",
						"          {T41 OtherCharVal2},",
						"          {T41 OtherNumVal1},",
						"          {T41 OtherNumVal2},",
						"          {T41 OtherDtVal1},",
						"          {T41 OtherDtVal2},",
						"          {T42 Type},",
						"          {T42 OtherCharVal1},",
						"          {T42 OtherCharVal2},",
						"          {T42 OtherNumVal1},",
						"          {T42 OtherNumVal2},",
						"          {T42 OtherDtVal1},",
						"          {T42 OtherDtVal2},",
						"          {T43 Type},",
						"          {T43 OtherCharVal1},",
						"          {T43 OtherCharVal2},",
						"          {T43 OtherNumVal1},",
						"          {T43 OtherNumVal2},",
						"          {T43 OtherDtVal1},",
						"          {T43 OtherDtVal2},",
						"          {T44 Type},",
						"          {T44 OtherCharVal1},",
						"          {T44 OtherCharVal2},",
						"          {T44 OtherNumVal1},",
						"          {T44 OtherNumVal2},",
						"          {T44 OtherDtVal1},",
						"          {T44 OtherDtVal2},",
						"          {T45 Type},",
						"          {T45 OtherCharVal1},",
						"          {T45 OtherCharVal2},",
						"          {T45 OtherNumVal1},",
						"          {T45 OtherNumVal2},",
						"          {T45 OtherDtVal1},",
						"          {T45 OtherDtVal2},",
						"          {T46 Type},",
						"          {T46 OtherCharVal1},",
						"          {T46 OtherCharVal2},",
						"          {T46 OtherNumVal1},",
						"          {T46 OtherNumVal2},",
						"          {T46 OtherDtVal1},",
						"          {T46 OtherDtVal2},",
						"          {T47 Type},",
						"          {T47 OtherCharVal1},",
						"          {T47 OtherCharVal2},",
						"          {T47 OtherNumVal1},",
						"          {T47 OtherNumVal2},",
						"          {T47 OtherDtVal1},",
						"          {T47 OtherDtVal2},",
						"          {T48 Type},",
						"          {T48 OtherCharVal1},",
						"          {T48 OtherCharVal2},",
						"          {T48 OtherNumVal1},",
						"          {T48 OtherNumVal2},",
						"          {T48 OtherDtVal1},",
						"          {T48 OtherDtVal2},",
						"          {T49 Type},",
						"          {T49 OtherCharVal1},",
						"          {T49 OtherCharVal2},",
						"          {T49 OtherNumVal1},",
						"          {T49 OtherNumVal2},",
						"          {T49 OtherDtVal1},",
						"          {T49 OtherDtVal2},",
						"          {T50 Type},",
						"          {T50 OtherCharVal1},",
						"          {T50 OtherCharVal2},",
						"          {T50 OtherNumVal1},",
						"          {T50 OtherNumVal2},",
						"          {T50 OtherDtVal1},",
						"          {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreAnalysisMaxYearOutput join(ClientId == {Client Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"OtherCoreYear derive({Client Id} = $Flow_Client_Id) ~> OtherCoreAnalysisMaxYearOutput",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherFactAnalysis_P1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTmp_OtherAnalysisTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_AnalysisTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherAnaylysis_P2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "OtherCoreAnalysisMaxYearOutput"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select max(Year) as Year from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          WorkerId,",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Data Collection Year},",
						"          {Data Collection Quarter},",
						"          {Event Year} = Year,",
						"          {T1 Type},",
						"          {T1 OtherCharVal1},",
						"          {T1 OtherCharVal2},",
						"          {T1 OtherNumVal1},",
						"          {T1 OtherNumVal2},",
						"          {T1 OtherDtVal1},",
						"          {T1 OtherDtVal2},",
						"          {T2 Type},",
						"          {T2 OtherCharVal1} = {T1 Type},",
						"          {T2 OtherCharVal2},",
						"          {T2 OtherNumVal1},",
						"          {T2 OtherNumVal2},",
						"          {T2 OtherDtVal1},",
						"          {T2 OtherDtVal2},",
						"          {T3 Type},",
						"          {T3 OtherCharVal1},",
						"          {T3 OtherCharVal2},",
						"          {T3 OtherNumVal1},",
						"          {T3 OtherNumVal2},",
						"          {T3 OtherDtVal1},",
						"          {T3 OtherDtVal2},",
						"          {T4 Type},",
						"          {T4 OtherCharVal1},",
						"          {T4 OtherCharVal2},",
						"          {T4 OtherNumVal1},",
						"          {T4 OtherNumVal2},",
						"          {T4 OtherDtVal1},",
						"          {T4 OtherDtVal2},",
						"          {T5 Type},",
						"          {T5 OtherCharVal1},",
						"          {T5 OtherCharVal2},",
						"          {T5 OtherNumVal1},",
						"          {T5 OtherNumVal2},",
						"          {T5 OtherDtVal1},",
						"          {T5 OtherDtVal2},",
						"          {T6 Type},",
						"          {T6 OtherCharVal1},",
						"          {T6 OtherCharVal2},",
						"          {T6 OtherNumVal1},",
						"          {T6 OtherNumVal2},",
						"          {T6 OtherDtVal1},",
						"          {T6 OtherDtVal2},",
						"          {T7 Type},",
						"          {T7 OtherCharVal1},",
						"          {T7 OtherCharVal2},",
						"          {T7 OtherNumVal1},",
						"          {T7 OtherNumVal2},",
						"          {T7 OtherDtVal1},",
						"          {T7 OtherDtVal2},",
						"          {T8 Type},",
						"          {T8 OtherCharVal1},",
						"          {T8 OtherCharVal2},",
						"          {T8 OtherNumVal1},",
						"          {T8 OtherNumVal2},",
						"          {T8 OtherDtVal1},",
						"          {T8 OtherDtVal2},",
						"          {T9 Type},",
						"          {T9 OtherCharVal1},",
						"          {T9 OtherCharVal2},",
						"          {T9 OtherNumVal1},",
						"          {T9 OtherNumVal2},",
						"          {T9 OtherDtVal1},",
						"          {T9 OtherDtVal2},",
						"          {T10 Type},",
						"          {T10 OtherCharVal1},",
						"          {T10 OtherCharVal2},",
						"          {T10 OtherNumVal1},",
						"          {T10 OtherNumVal2},",
						"          {T10 OtherDtVal1},",
						"          {T10 OtherDtVal2},",
						"          {T11 Type},",
						"          {T11 OtherCharVal1},",
						"          {T11 OtherCharVal2},",
						"          {T11 OtherNumVal1},",
						"          {T11 OtherNumVal2},",
						"          {T11 OtherDtVal1},",
						"          {T11 OtherDtVal2},",
						"          {T12 Type},",
						"          {T12 OtherCharVal1},",
						"          {T12 OtherCharVal2},",
						"          {T12 OtherNumVal1},",
						"          {T12 OtherNumVal2},",
						"          {T12 OtherDtVal1},",
						"          {T12 OtherDtVal2},",
						"          {T13 Type},",
						"          {T13 OtherCharVal1},",
						"          {T13 OtherCharVal2},",
						"          {T13 OtherNumVal1},",
						"          {T13 OtherNumVal2},",
						"          {T13 OtherDtVal1},",
						"          {T13 OtherDtVal2},",
						"          {T14 Type},",
						"          {T14 OtherCharVal1},",
						"          {T14 OtherCharVal2},",
						"          {T14 OtherNumVal1},",
						"          {T14 OtherNumVal2},",
						"          {T14 OtherDtVal1},",
						"          {T14 OtherDtVal2},",
						"          {T15 Type},",
						"          {T15 OtherCharVal1},",
						"          {T15 OtherCharVal2},",
						"          {T15 OtherNumVal1},",
						"          {T15 OtherNumVal2},",
						"          {T15 OtherDtVal1},",
						"          {T15 OtherDtVal2},",
						"          {T16 Type},",
						"          {T16 OtherCharVal1},",
						"          {T16 OtherCharVal2},",
						"          {T16 OtherNumVal1},",
						"          {T16 OtherNumVal2},",
						"          {T16 OtherDtVal1},",
						"          {T16 OtherDtVal2},",
						"          {T17 Type},",
						"          {T17 OtherCharVal1},",
						"          {T17 OtherCharVal2},",
						"          {T17 OtherNumVal1},",
						"          {T17 OtherNumVal2},",
						"          {T17 OtherDtVal1},",
						"          {T17 OtherDtVal2},",
						"          {T18 Type},",
						"          {T18 OtherCharVal1},",
						"          {T18 OtherCharVal2},",
						"          {T18 OtherNumVal1},",
						"          {T18 OtherNumVal2},",
						"          {T18 OtherDtVal1},",
						"          {T18 OtherDtVal2},",
						"          {T19 Type},",
						"          {T19 OtherCharVal1},",
						"          {T19 OtherCharVal2},",
						"          {T19 OtherNumVal1},",
						"          {T19 OtherNumVal2},",
						"          {T19 OtherDtVal1},",
						"          {T19 OtherDtVal2},",
						"          {T20 Type},",
						"          {T20 OtherCharVal1},",
						"          {T20 OtherCharVal2},",
						"          {T20 OtherNumVal1},",
						"          {T20 OtherNumVal2},",
						"          {T20 OtherDtVal1},",
						"          {T20 OtherDtVal2},",
						"          {T21 Type},",
						"          {T21 OtherCharVal1},",
						"          {T21 OtherCharVal2},",
						"          {T21 OtherNumVal1},",
						"          {T21 OtherNumVal2},",
						"          {T21 OtherDtVal1},",
						"          {T21 OtherDtVal2},",
						"          {T22 Type},",
						"          {T22 OtherCharVal1},",
						"          {T22 OtherCharVal2},",
						"          {T22 OtherNumVal1},",
						"          {T22 OtherNumVal2},",
						"          {T22 OtherDtVal1},",
						"          {T22 OtherDtVal2},",
						"          {T23 Type},",
						"          {T23 OtherCharVal1},",
						"          {T23 OtherCharVal2},",
						"          {T23 OtherNumVal1},",
						"          {T23 OtherNumVal2},",
						"          {T23 OtherDtVal1},",
						"          {T23 OtherDtVal2},",
						"          {T24 Type},",
						"          {T24 OtherCharVal1},",
						"          {T24 OtherCharVal2},",
						"          {T24 OtherNumVal1},",
						"          {T24 OtherNumVal2},",
						"          {T24 OtherDtVal1},",
						"          {T24 OtherDtVal2},",
						"          {T25 Type},",
						"          {T25 OtherCharVal1},",
						"          {T25 OtherCharVal2},",
						"          {T25 OtherNumVal1},",
						"          {T25 OtherNumVal2},",
						"          {T25 OtherDtVal1},",
						"          {T25 OtherDtVal2},",
						"          {T26 Type},",
						"          {T26 OtherCharVal1},",
						"          {T26 OtherCharVal2},",
						"          {T26 OtherNumVal1},",
						"          {T26 OtherNumVal2},",
						"          {T26 OtherDtVal1},",
						"          {T26 OtherDtVal2},",
						"          {T27 Type},",
						"          {T27 OtherCharVal1},",
						"          {T27 OtherCharVal2},",
						"          {T27 OtherNumVal1},",
						"          {T27 OtherNumVal2},",
						"          {T27 OtherDtVal1},",
						"          {T27 OtherDtVal2},",
						"          {T28 Type},",
						"          {T28 OtherCharVal1},",
						"          {T28 OtherCharVal2},",
						"          {T28 OtherNumVal1},",
						"          {T28 OtherNumVal2},",
						"          {T28 OtherDtVal1},",
						"          {T28 OtherDtVal2},",
						"          {T29 Type},",
						"          {T29 OtherCharVal1},",
						"          {T29 OtherCharVal2},",
						"          {T29 OtherNumVal1},",
						"          {T29 OtherNumVal2},",
						"          {T29 OtherDtVal1},",
						"          {T29 OtherDtVal2},",
						"          {T30 Type},",
						"          {T30 OtherCharVal1},",
						"          {T30 OtherCharVal2},",
						"          {T30 OtherNumVal1},",
						"          {T30 OtherNumVal2},",
						"          {T30 OtherDtVal1},",
						"          {T30 OtherDtVal2},",
						"          {T31 Type},",
						"          {T31 OtherCharVal1},",
						"          {T31 OtherCharVal2},",
						"          {T31 OtherNumVal1},",
						"          {T31 OtherNumVal2},",
						"          {T31 OtherDtVal1},",
						"          {T31 OtherDtVal2},",
						"          {T32 Type},",
						"          {T32 OtherCharVal1},",
						"          {T32 OtherCharVal2},",
						"          {T32 OtherNumVal1},",
						"          {T32 OtherNumVal2},",
						"          {T32 OtherDtVal1},",
						"          {T32 OtherDtVal2},",
						"          {T33 Type},",
						"          {T33 OtherCharVal1},",
						"          {T33 OtherCharVal2},",
						"          {T33 OtherNumVal1},",
						"          {T33 OtherNumVal2},",
						"          {T33 OtherDtVal1},",
						"          {T33 OtherDtVal2},",
						"          {T34 Type},",
						"          {T34 OtherCharVal1},",
						"          {T34 OtherCharVal2},",
						"          {T34 OtherNumVal1},",
						"          {T34 OtherNumVal2},",
						"          {T34 OtherDtVal1},",
						"          {T34 OtherDtVal2},",
						"          {T35 Type},",
						"          {T35 OtherCharVal1},",
						"          {T35 OtherCharVal2},",
						"          {T35 OtherNumVal1},",
						"          {T35 OtherNumVal2},",
						"          {T35 OtherDtVal1},",
						"          {T35 OtherDtVal2},",
						"          {T36 Type},",
						"          {T36 OtherCharVal1},",
						"          {T36 OtherCharVal2},",
						"          {T36 OtherNumVal1},",
						"          {T36 OtherNumVal2},",
						"          {T36 OtherDtVal1},",
						"          {T36 OtherDtVal2},",
						"          {T37 Type},",
						"          {T37 OtherCharVal1},",
						"          {T37 OtherCharVal2},",
						"          {T37 OtherNumVal1},",
						"          {T37 OtherNumVal2},",
						"          {T37 OtherDtVal1},",
						"          {T37 OtherDtVal2},",
						"          {T38 Type},",
						"          {T38 OtherCharVal1},",
						"          {T38 OtherCharVal2},",
						"          {T38 OtherNumVal1},",
						"          {T38 OtherNumVal2},",
						"          {T38 OtherDtVal1},",
						"          {T38 OtherDtVal2},",
						"          {T39 Type},",
						"          {T39 OtherCharVal1},",
						"          {T39 OtherCharVal2},",
						"          {T39 OtherNumVal1},",
						"          {T39 OtherNumVal2},",
						"          {T39 OtherDtVal1},",
						"          {T39 OtherDtVal2},",
						"          {T40 Type},",
						"          {T40 OtherCharVal1},",
						"          {T40 OtherCharVal2},",
						"          {T40 OtherNumVal1},",
						"          {T40 OtherNumVal2},",
						"          {T40 OtherDtVal1},",
						"          {T40 OtherDtVal2},",
						"          {T41 Type},",
						"          {T41 OtherCharVal1},",
						"          {T41 OtherCharVal2},",
						"          {T41 OtherNumVal1},",
						"          {T41 OtherNumVal2},",
						"          {T41 OtherDtVal1},",
						"          {T41 OtherDtVal2},",
						"          {T42 Type},",
						"          {T42 OtherCharVal1},",
						"          {T42 OtherCharVal2},",
						"          {T42 OtherNumVal1},",
						"          {T42 OtherNumVal2},",
						"          {T42 OtherDtVal1},",
						"          {T42 OtherDtVal2},",
						"          {T43 Type},",
						"          {T43 OtherCharVal1},",
						"          {T43 OtherCharVal2},",
						"          {T43 OtherNumVal1},",
						"          {T43 OtherNumVal2},",
						"          {T43 OtherDtVal1},",
						"          {T43 OtherDtVal2},",
						"          {T44 Type},",
						"          {T44 OtherCharVal1},",
						"          {T44 OtherCharVal2},",
						"          {T44 OtherNumVal1},",
						"          {T44 OtherNumVal2},",
						"          {T44 OtherDtVal1},",
						"          {T44 OtherDtVal2},",
						"          {T45 Type},",
						"          {T45 OtherCharVal1},",
						"          {T45 OtherCharVal2},",
						"          {T45 OtherNumVal1},",
						"          {T45 OtherNumVal2},",
						"          {T45 OtherDtVal1},",
						"          {T45 OtherDtVal2},",
						"          {T46 Type},",
						"          {T46 OtherCharVal1},",
						"          {T46 OtherCharVal2},",
						"          {T46 OtherNumVal1},",
						"          {T46 OtherNumVal2},",
						"          {T46 OtherDtVal1},",
						"          {T46 OtherDtVal2},",
						"          {T47 Type},",
						"          {T47 OtherCharVal1},",
						"          {T47 OtherCharVal2},",
						"          {T47 OtherNumVal1},",
						"          {T47 OtherNumVal2},",
						"          {T47 OtherDtVal1},",
						"          {T47 OtherDtVal2},",
						"          {T48 Type},",
						"          {T48 OtherCharVal1},",
						"          {T48 OtherCharVal2},",
						"          {T48 OtherNumVal1},",
						"          {T48 OtherNumVal2},",
						"          {T48 OtherDtVal1},",
						"          {T48 OtherDtVal2},",
						"          {T49 Type},",
						"          {T49 OtherCharVal1},",
						"          {T49 OtherCharVal2},",
						"          {T49 OtherNumVal1},",
						"          {T49 OtherNumVal2},",
						"          {T49 OtherDtVal1},",
						"          {T49 OtherDtVal2},",
						"          {T50 Type},",
						"          {T50 OtherCharVal1},",
						"          {T50 OtherCharVal2},",
						"          {T50 OtherNumVal1},",
						"          {T50 OtherNumVal2},",
						"          {T50 OtherDtVal1},",
						"          {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreAnalysisMaxYearOutput join(ClientId == {Client Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"OtherCoreYear derive({Client Id} = $Flow_Client_Id) ~> OtherCoreAnalysisMaxYearOutput",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherFactAnalysis_P2.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTmp_OtherAnalysisTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_AnalysisTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherAnaylysis_P3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Analysis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "AllOtherTblAnalysis"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreWorkers"
						},
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreYear"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AnalysisTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "DerivedAddTypeId"
						},
						{
							"name": "SelectAnalyisTypeOutput"
						},
						{
							"name": "filterT1"
						},
						{
							"name": "filterT2"
						},
						{
							"name": "filterT3"
						},
						{
							"name": "filterT4"
						},
						{
							"name": "TypeT1"
						},
						{
							"name": "TypeT2"
						},
						{
							"name": "TypeT3"
						},
						{
							"name": "TypeT4"
						},
						{
							"name": "selectT1"
						},
						{
							"name": "filterT5"
						},
						{
							"name": "TypeT5"
						},
						{
							"name": "filterT6"
						},
						{
							"name": "TypeT6"
						},
						{
							"name": "filterT7"
						},
						{
							"name": "TypeT7"
						},
						{
							"name": "filterT8"
						},
						{
							"name": "TypeT8"
						},
						{
							"name": "filterT9"
						},
						{
							"name": "TypeT9"
						},
						{
							"name": "filterT10"
						},
						{
							"name": "TypeT10"
						},
						{
							"name": "filterT11"
						},
						{
							"name": "TypeT11"
						},
						{
							"name": "filterT12"
						},
						{
							"name": "TypeT12"
						},
						{
							"name": "filterT13"
						},
						{
							"name": "TypeT13"
						},
						{
							"name": "filterT14"
						},
						{
							"name": "TypeT14"
						},
						{
							"name": "filterT15"
						},
						{
							"name": "TypeT15"
						},
						{
							"name": "filterT16"
						},
						{
							"name": "TypeT16"
						},
						{
							"name": "filterT17"
						},
						{
							"name": "TypeT17"
						},
						{
							"name": "filterT18"
						},
						{
							"name": "TypeT18"
						},
						{
							"name": "filterT19"
						},
						{
							"name": "TypeT19"
						},
						{
							"name": "filterT20"
						},
						{
							"name": "TypeT20"
						},
						{
							"name": "filterT21"
						},
						{
							"name": "TypeT21"
						},
						{
							"name": "filterT22"
						},
						{
							"name": "TypeT22"
						},
						{
							"name": "filterT23"
						},
						{
							"name": "TypeT23"
						},
						{
							"name": "filterT24"
						},
						{
							"name": "TypeT24"
						},
						{
							"name": "filterT25"
						},
						{
							"name": "TypeT25"
						},
						{
							"name": "filterT26"
						},
						{
							"name": "TypeT26"
						},
						{
							"name": "filterT27"
						},
						{
							"name": "TypeT27"
						},
						{
							"name": "filterT28"
						},
						{
							"name": "TypeT28"
						},
						{
							"name": "filterT29"
						},
						{
							"name": "TypeT29"
						},
						{
							"name": "filterT30"
						},
						{
							"name": "TypeT30"
						},
						{
							"name": "filterT31"
						},
						{
							"name": "TypeT31"
						},
						{
							"name": "filterT32"
						},
						{
							"name": "TypeT32"
						},
						{
							"name": "filterT33"
						},
						{
							"name": "TypeT33"
						},
						{
							"name": "filterT34"
						},
						{
							"name": "TypeT34"
						},
						{
							"name": "filterT35"
						},
						{
							"name": "TypeT35"
						},
						{
							"name": "filterT36"
						},
						{
							"name": "TypeT36"
						},
						{
							"name": "filterT37"
						},
						{
							"name": "TypeT37"
						},
						{
							"name": "filterT38"
						},
						{
							"name": "TypeT38"
						},
						{
							"name": "filterT39"
						},
						{
							"name": "TypeT39"
						},
						{
							"name": "filterT40"
						},
						{
							"name": "TypeT40"
						},
						{
							"name": "filterT41"
						},
						{
							"name": "TypeT41"
						},
						{
							"name": "filterT42"
						},
						{
							"name": "TypeT42"
						},
						{
							"name": "filterT43"
						},
						{
							"name": "TypeT43"
						},
						{
							"name": "filterT44"
						},
						{
							"name": "TypeT44"
						},
						{
							"name": "filterT45"
						},
						{
							"name": "TypeT45"
						},
						{
							"name": "filterT46"
						},
						{
							"name": "TypeT46"
						},
						{
							"name": "filterT47"
						},
						{
							"name": "TypeT47"
						},
						{
							"name": "filterT48"
						},
						{
							"name": "TypeT48"
						},
						{
							"name": "filterT49"
						},
						{
							"name": "TypeT49"
						},
						{
							"name": "filterT50"
						},
						{
							"name": "TypeT50"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectT2"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectT3"
						},
						{
							"name": "join4"
						},
						{
							"name": "selectT4"
						},
						{
							"name": "join5"
						},
						{
							"name": "selectT5"
						},
						{
							"name": "join6"
						},
						{
							"name": "selectT6"
						},
						{
							"name": "join7"
						},
						{
							"name": "selectT7"
						},
						{
							"name": "join8"
						},
						{
							"name": "selectT8"
						},
						{
							"name": "join9"
						},
						{
							"name": "selectT9"
						},
						{
							"name": "join10"
						},
						{
							"name": "selectT10"
						},
						{
							"name": "join11"
						},
						{
							"name": "selectT11"
						},
						{
							"name": "join12"
						},
						{
							"name": "selectT12"
						},
						{
							"name": "join13"
						},
						{
							"name": "selectT13"
						},
						{
							"name": "join14"
						},
						{
							"name": "selectT14"
						},
						{
							"name": "join15"
						},
						{
							"name": "selectT15"
						},
						{
							"name": "join16"
						},
						{
							"name": "selectT16"
						},
						{
							"name": "join17"
						},
						{
							"name": "selectT17"
						},
						{
							"name": "join18"
						},
						{
							"name": "selectT18"
						},
						{
							"name": "join19"
						},
						{
							"name": "selectT19"
						},
						{
							"name": "join20"
						},
						{
							"name": "selectT20"
						},
						{
							"name": "join21"
						},
						{
							"name": "selectT21"
						},
						{
							"name": "join22"
						},
						{
							"name": "selectT22"
						},
						{
							"name": "join23"
						},
						{
							"name": "selectT23"
						},
						{
							"name": "join24"
						},
						{
							"name": "selectT24"
						},
						{
							"name": "join25"
						},
						{
							"name": "selectT25"
						},
						{
							"name": "join26"
						},
						{
							"name": "selectT26"
						},
						{
							"name": "join27"
						},
						{
							"name": "selectT27"
						},
						{
							"name": "join28"
						},
						{
							"name": "selectT28"
						},
						{
							"name": "join29"
						},
						{
							"name": "selectT29"
						},
						{
							"name": "join30"
						},
						{
							"name": "selectT30"
						},
						{
							"name": "join31"
						},
						{
							"name": "selectT31"
						},
						{
							"name": "join32"
						},
						{
							"name": "selectT32"
						},
						{
							"name": "join33"
						},
						{
							"name": "selectT33"
						},
						{
							"name": "join34"
						},
						{
							"name": "selectT34"
						},
						{
							"name": "join35"
						},
						{
							"name": "selectT35"
						},
						{
							"name": "join36"
						},
						{
							"name": "selectT36"
						},
						{
							"name": "join37"
						},
						{
							"name": "selectT37"
						},
						{
							"name": "join38"
						},
						{
							"name": "selectT38"
						},
						{
							"name": "join39"
						},
						{
							"name": "selectT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "selectT40"
						},
						{
							"name": "join41"
						},
						{
							"name": "selectT41"
						},
						{
							"name": "join42"
						},
						{
							"name": "selectT42"
						},
						{
							"name": "join43"
						},
						{
							"name": "selectT43"
						},
						{
							"name": "join44"
						},
						{
							"name": "selectT44"
						},
						{
							"name": "join45"
						},
						{
							"name": "selectT45"
						},
						{
							"name": "join46"
						},
						{
							"name": "selectT46"
						},
						{
							"name": "join47"
						},
						{
							"name": "selectT47"
						},
						{
							"name": "join48"
						},
						{
							"name": "selectT48"
						},
						{
							"name": "join49"
						},
						{
							"name": "selectT49"
						},
						{
							"name": "join50"
						},
						{
							"name": "selectT50"
						},
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "joinT6"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "joinT40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "CleanupJoinCollumns"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "JoinOtherAnalysisYear"
						},
						{
							"name": "OtherCoreAnalysisMaxYearOutput"
						},
						{
							"name": "UpdateNullandAddDateRelatedColumns"
						},
						{
							"name": "RemoveRecordsWithNoActivity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Folder_Year as string,",
						"     Flow_Folder_Quarter as string",
						"}",
						"source(output(",
						"          WorkerId as string,",
						"          Type as string,",
						"          OtherCharVal1 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as Type,OtherCharVal11 as OtherCharVal1,OtherCharVal2,OtherNumVal1,OtherNumVal2 ,OtherDtVal1 ,OtherDtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllOtherCore",
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> AllOtherTblAnalysis",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreWorkers",
						"source(output(",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select max(Year) as Year from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> OtherCoreYear",
						"AllOtherCore, TypeT1 join(Type == Type1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"AllOtherTblAnalysis derive({Type Id} = concat(concat(concat(concat(concat(toString(Year),'-'),'Q'),toString(Quarter)),' '),Type)) ~> DerivedAddTypeId",
						"DerivedAddTypeId select(mapColumn(",
						"          Id,",
						"          Type = {Type Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAnalyisTypeOutput",
						"SelectAnalyisTypeOutput filter(Id==1) ~> filterT1",
						"SelectAnalyisTypeOutput filter(Id==2) ~> filterT2",
						"SelectAnalyisTypeOutput filter(Id==3) ~> filterT3",
						"SelectAnalyisTypeOutput filter(Id==4) ~> filterT4",
						"filterT1 select(mapColumn(",
						"          Type1 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT1",
						"filterT2 select(mapColumn(",
						"          Type2 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT2",
						"filterT3 select(mapColumn(",
						"          Type3 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT3",
						"filterT4 select(mapColumn(",
						"          Type4 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT4",
						"join1 select(mapColumn(",
						"          {T1 WorkerId} = WorkerId,",
						"          {T1 Type} = Type,",
						"          {T1 OtherCharVal1} = OtherCharVal1,",
						"          {T1 OtherCharVal2} = OtherCharVal2,",
						"          {T1 OtherNumVal1} = OtherNumVal1,",
						"          {T1 OtherNumVal2} = OtherNumVal2,",
						"          {T1 OtherDtVal1} = OtherDtVal1,",
						"          {T1 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT1",
						"SelectAnalyisTypeOutput filter(Id==5) ~> filterT5",
						"filterT5 select(mapColumn(",
						"          Type5 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT5",
						"SelectAnalyisTypeOutput filter(Id==6) ~> filterT6",
						"filterT6 select(mapColumn(",
						"          Type6 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT6",
						"SelectAnalyisTypeOutput filter(Id==7) ~> filterT7",
						"filterT7 select(mapColumn(",
						"          Type7 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT7",
						"SelectAnalyisTypeOutput filter(Id==8) ~> filterT8",
						"filterT8 select(mapColumn(",
						"          Type8 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT8",
						"SelectAnalyisTypeOutput filter(Id==9) ~> filterT9",
						"filterT9 select(mapColumn(",
						"          Type9 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT9",
						"SelectAnalyisTypeOutput filter(Id==10) ~> filterT10",
						"filterT10 select(mapColumn(",
						"          Type10 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT10",
						"SelectAnalyisTypeOutput filter(Id==11) ~> filterT11",
						"filterT11 select(mapColumn(",
						"          Type11 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT11",
						"SelectAnalyisTypeOutput filter(Id==12) ~> filterT12",
						"filterT12 select(mapColumn(",
						"          Type12 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT12",
						"SelectAnalyisTypeOutput filter(Id==13) ~> filterT13",
						"filterT13 select(mapColumn(",
						"          Type13 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT13",
						"SelectAnalyisTypeOutput filter(Id==14) ~> filterT14",
						"filterT14 select(mapColumn(",
						"          Type14 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT14",
						"SelectAnalyisTypeOutput filter(Id==15) ~> filterT15",
						"filterT15 select(mapColumn(",
						"          Type15 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT15",
						"SelectAnalyisTypeOutput filter(Id==16) ~> filterT16",
						"filterT16 select(mapColumn(",
						"          Type16 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT16",
						"SelectAnalyisTypeOutput filter(Id==17) ~> filterT17",
						"filterT17 select(mapColumn(",
						"          Type17 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT17",
						"SelectAnalyisTypeOutput filter(Id==18) ~> filterT18",
						"filterT18 select(mapColumn(",
						"          Type18 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT18",
						"SelectAnalyisTypeOutput filter(Id==19) ~> filterT19",
						"filterT19 select(mapColumn(",
						"          Type19 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT19",
						"SelectAnalyisTypeOutput filter(Id==20) ~> filterT20",
						"filterT20 select(mapColumn(",
						"          Type20 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT20",
						"SelectAnalyisTypeOutput filter(Id==21) ~> filterT21",
						"filterT21 select(mapColumn(",
						"          Type21 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT21",
						"SelectAnalyisTypeOutput filter(Id==22) ~> filterT22",
						"filterT22 select(mapColumn(",
						"          Type22 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT22",
						"SelectAnalyisTypeOutput filter(Id==23) ~> filterT23",
						"filterT23 select(mapColumn(",
						"          Type23 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT23",
						"SelectAnalyisTypeOutput filter(Id==24) ~> filterT24",
						"filterT24 select(mapColumn(",
						"          Type24 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT24",
						"SelectAnalyisTypeOutput filter(Id==25) ~> filterT25",
						"filterT25 select(mapColumn(",
						"          Type25 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT25",
						"SelectAnalyisTypeOutput filter(Id==26) ~> filterT26",
						"filterT26 select(mapColumn(",
						"          Type26 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT26",
						"SelectAnalyisTypeOutput filter(Id==27) ~> filterT27",
						"filterT27 select(mapColumn(",
						"          Type27 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT27",
						"SelectAnalyisTypeOutput filter(Id==28) ~> filterT28",
						"filterT28 select(mapColumn(",
						"          Type28 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT28",
						"SelectAnalyisTypeOutput filter(Id==29) ~> filterT29",
						"filterT29 select(mapColumn(",
						"          Type29 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT29",
						"SelectAnalyisTypeOutput filter(Id==30) ~> filterT30",
						"filterT30 select(mapColumn(",
						"          Type30 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT30",
						"SelectAnalyisTypeOutput filter(Id==31) ~> filterT31",
						"filterT31 select(mapColumn(",
						"          Type31 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT31",
						"SelectAnalyisTypeOutput filter(Id==32) ~> filterT32",
						"filterT32 select(mapColumn(",
						"          Type32 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT32",
						"SelectAnalyisTypeOutput filter(Id==33) ~> filterT33",
						"filterT33 select(mapColumn(",
						"          Type33 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT33",
						"SelectAnalyisTypeOutput filter(Id==34) ~> filterT34",
						"filterT34 select(mapColumn(",
						"          Type34 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT34",
						"SelectAnalyisTypeOutput filter(Id==35) ~> filterT35",
						"filterT35 select(mapColumn(",
						"          Type35 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT35",
						"SelectAnalyisTypeOutput filter(Id==36) ~> filterT36",
						"filterT36 select(mapColumn(",
						"          Type36 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT36",
						"SelectAnalyisTypeOutput filter(Id==37) ~> filterT37",
						"filterT37 select(mapColumn(",
						"          Type37 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT37",
						"SelectAnalyisTypeOutput filter(Id==38) ~> filterT38",
						"filterT38 select(mapColumn(",
						"          Type38 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT38",
						"SelectAnalyisTypeOutput filter(Id==39) ~> filterT39",
						"filterT39 select(mapColumn(",
						"          Type39 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT39",
						"SelectAnalyisTypeOutput filter(Id==40) ~> filterT40",
						"filterT40 select(mapColumn(",
						"          Type40 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT40",
						"SelectAnalyisTypeOutput filter(Id==41) ~> filterT41",
						"filterT41 select(mapColumn(",
						"          Type41 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT41",
						"SelectAnalyisTypeOutput filter(Id==42) ~> filterT42",
						"filterT42 select(mapColumn(",
						"          Type42 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT42",
						"SelectAnalyisTypeOutput filter(Id==43) ~> filterT43",
						"filterT43 select(mapColumn(",
						"          Type43 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT43",
						"SelectAnalyisTypeOutput filter(Id==44) ~> filterT44",
						"filterT44 select(mapColumn(",
						"          Type44 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT44",
						"SelectAnalyisTypeOutput filter(Id==45) ~> filterT45",
						"filterT45 select(mapColumn(",
						"          Type45 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT45",
						"SelectAnalyisTypeOutput filter(Id==46) ~> filterT46",
						"filterT46 select(mapColumn(",
						"          Type46 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT46",
						"SelectAnalyisTypeOutput filter(Id==47) ~> filterT47",
						"filterT47 select(mapColumn(",
						"          Type47 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT47",
						"SelectAnalyisTypeOutput filter(Id==48) ~> filterT48",
						"filterT48 select(mapColumn(",
						"          Type48 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT48",
						"SelectAnalyisTypeOutput filter(Id==49) ~> filterT49",
						"filterT49 select(mapColumn(",
						"          Type49 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT49",
						"SelectAnalyisTypeOutput filter(Id==50) ~> filterT50",
						"filterT50 select(mapColumn(",
						"          Type50 = Type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TypeT50",
						"AllOtherCore, TypeT2 join(Type == Type2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {T2 WorkerId} = WorkerId,",
						"          {T2 Type} = Type,",
						"          {T2 OtherCharVal1} = OtherCharVal1,",
						"          {T2 OtherCharVal2} = OtherCharVal2,",
						"          {T2 OtherNumVal1} = OtherNumVal1,",
						"          {T2 OtherNumVal2} = OtherNumVal2,",
						"          {T2 OtherDtVal1} = OtherDtVal1,",
						"          {T2 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT2",
						"AllOtherCore, TypeT3 join(Type == Type3,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 select(mapColumn(",
						"          {T3 WorkerId} = WorkerId,",
						"          {T3 Type} = Type,",
						"          {T3 OtherCharVal1} = OtherCharVal1,",
						"          {T3 OtherCharVal2} = OtherCharVal2,",
						"          {T3 OtherNumVal1} = OtherNumVal1,",
						"          {T3 OtherNumVal2} = OtherNumVal2,",
						"          {T3 OtherDtVal1} = OtherDtVal1,",
						"          {T3 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT3",
						"AllOtherCore, TypeT4 join(Type == Type4,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          {T4 WorkerId} = WorkerId,",
						"          {T4 Type} = Type,",
						"          {T4 OtherCharVal1} = OtherCharVal1,",
						"          {T4 OtherCharVal2} = OtherCharVal2,",
						"          {T4 OtherNumVal1} = OtherNumVal1,",
						"          {T4 OtherNumVal2} = OtherNumVal2,",
						"          {T4 OtherDtVal1} = OtherDtVal1,",
						"          {T4 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT4",
						"AllOtherCore, TypeT5 join(Type == Type5,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5 select(mapColumn(",
						"          {T5 WorkerId} = WorkerId,",
						"          {T5 Type} = Type,",
						"          {T5 OtherCharVal1} = OtherCharVal1,",
						"          {T5 OtherCharVal2} = OtherCharVal2,",
						"          {T5 OtherNumVal1} = OtherNumVal1,",
						"          {T5 OtherNumVal2} = OtherNumVal2,",
						"          {T5 OtherDtVal1} = OtherDtVal1,",
						"          {T5 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT5",
						"AllOtherCore, TypeT6 join(Type == Type6,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6 select(mapColumn(",
						"          {T6 WorkerId} = WorkerId,",
						"          {T6 Type} = Type,",
						"          {T6 OtherCharVal1} = OtherCharVal1,",
						"          {T6 OtherCharVal2} = OtherCharVal2,",
						"          {T6 OtherNumVal1} = OtherNumVal1,",
						"          {T6 OtherNumVal2} = OtherNumVal2,",
						"          {T6 OtherDtVal1} = OtherDtVal1,",
						"          {T6 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT6",
						"AllOtherCore, TypeT7 join(Type == Type7,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7 select(mapColumn(",
						"          {T7 WorkerId} = WorkerId,",
						"          {T7 Type} = Type,",
						"          {T7 OtherCharVal1} = OtherCharVal1,",
						"          {T7 OtherCharVal2} = OtherCharVal2,",
						"          {T7 OtherNumVal1} = OtherNumVal1,",
						"          {T7 OtherNumVal2} = OtherNumVal2,",
						"          {T7 OtherDtVal1} = OtherDtVal1,",
						"          {T7 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT7",
						"AllOtherCore, TypeT8 join(Type == Type8,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8 select(mapColumn(",
						"          {T8 WorkerId} = WorkerId,",
						"          {T8 Type} = Type,",
						"          {T8 OtherCharVal1} = OtherCharVal1,",
						"          {T8 OtherCharVal2} = OtherCharVal2,",
						"          {T8 OtherNumVal1} = OtherNumVal1,",
						"          {T8 OtherNumVal2} = OtherNumVal2,",
						"          {T8 OtherDtVal1} = OtherDtVal1,",
						"          {T8 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT8",
						"AllOtherCore, TypeT9 join(Type == Type9,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9 select(mapColumn(",
						"          {T9 WorkerId} = WorkerId,",
						"          {T9 Type} = Type,",
						"          {T9 OtherCharVal1} = OtherCharVal1,",
						"          {T9 OtherCharVal2} = OtherCharVal2,",
						"          {T9 OtherNumVal1} = OtherNumVal1,",
						"          {T9 OtherNumVal2} = OtherNumVal2,",
						"          {T9 OtherDtVal1} = OtherDtVal1,",
						"          {T9 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT9",
						"AllOtherCore, TypeT10 join(Type == Type10,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          {T10 WorkerId} = WorkerId,",
						"          {T10 Type} = Type,",
						"          {T10 OtherCharVal1} = OtherCharVal1,",
						"          {T10 OtherCharVal2} = OtherCharVal2,",
						"          {T10 OtherNumVal1} = OtherNumVal1,",
						"          {T10 OtherNumVal2} = OtherNumVal2,",
						"          {T10 OtherDtVal1} = OtherDtVal1,",
						"          {T10 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT10",
						"AllOtherCore, TypeT11 join(Type == Type11,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join11",
						"join11 select(mapColumn(",
						"          {T11 WorkerId} = WorkerId,",
						"          {T11 Type} = Type,",
						"          {T11 OtherCharVal1} = OtherCharVal1,",
						"          {T11 OtherCharVal2} = OtherCharVal2,",
						"          {T11 OtherNumVal1} = OtherNumVal1,",
						"          {T11 OtherNumVal2} = OtherNumVal2,",
						"          {T11 OtherDtVal1} = OtherDtVal1,",
						"          {T11 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT11",
						"AllOtherCore, TypeT12 join(Type == Type12,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join12",
						"join12 select(mapColumn(",
						"          {T12 WorkerId} = WorkerId,",
						"          {T12 Type} = Type,",
						"          {T12 OtherCharVal1} = OtherCharVal1,",
						"          {T12 OtherCharVal2} = OtherCharVal2,",
						"          {T12 OtherNumVal1} = OtherNumVal1,",
						"          {T12 OtherNumVal2} = OtherNumVal2,",
						"          {T12 OtherDtVal1} = OtherDtVal1,",
						"          {T12 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT12",
						"AllOtherCore, TypeT13 join(Type == Type13,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join13",
						"join13 select(mapColumn(",
						"          {T13 WorkerId} = WorkerId,",
						"          {T13 Type} = Type,",
						"          {T13 OtherCharVal1} = OtherCharVal1,",
						"          {T13 OtherCharVal2} = OtherCharVal2,",
						"          {T13 OtherNumVal1} = OtherNumVal1,",
						"          {T13 OtherNumVal2} = OtherNumVal2,",
						"          {T13 OtherDtVal1} = OtherDtVal1,",
						"          {T13 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT13",
						"AllOtherCore, TypeT14 join(Type == Type14,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join14",
						"join14 select(mapColumn(",
						"          {T14 WorkerId} = WorkerId,",
						"          {T14 Type} = Type,",
						"          {T14 OtherCharVal1} = OtherCharVal1,",
						"          {T14 OtherCharVal2} = OtherCharVal2,",
						"          {T14 OtherNumVal1} = OtherNumVal1,",
						"          {T14 OtherNumVal2} = OtherNumVal2,",
						"          {T14 OtherDtVal1} = OtherDtVal1,",
						"          {T14 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT14",
						"AllOtherCore, TypeT15 join(Type == Type15,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join15",
						"join15 select(mapColumn(",
						"          {T15 WorkerId} = WorkerId,",
						"          {T15 Type} = Type,",
						"          {T15 OtherCharVal1} = OtherCharVal1,",
						"          {T15 OtherCharVal2} = OtherCharVal2,",
						"          {T15 OtherNumVal1} = OtherNumVal1,",
						"          {T15 OtherNumVal2} = OtherNumVal2,",
						"          {T15 OtherDtVal1} = OtherDtVal1,",
						"          {T15 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT15",
						"AllOtherCore, TypeT16 join(Type == Type16,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join16",
						"join16 select(mapColumn(",
						"          {T16 WorkerId} = WorkerId,",
						"          {T16 Type} = Type,",
						"          {T16 OtherCharVal1} = OtherCharVal1,",
						"          {T16 OtherCharVal2} = OtherCharVal2,",
						"          {T16 OtherNumVal1} = OtherNumVal1,",
						"          {T16 OtherNumVal2} = OtherNumVal2,",
						"          {T16 OtherDtVal1} = OtherDtVal1,",
						"          {T16 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT16",
						"AllOtherCore, TypeT17 join(Type == Type17,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join17",
						"join17 select(mapColumn(",
						"          {T17 WorkerId} = WorkerId,",
						"          {T17 Type} = Type,",
						"          {T17 OtherCharVal1} = OtherCharVal1,",
						"          {T17 OtherCharVal2} = OtherCharVal2,",
						"          {T17 OtherNumVal1} = OtherNumVal1,",
						"          {T17 OtherNumVal2} = OtherNumVal2,",
						"          {T17 OtherDtVal1} = OtherDtVal1,",
						"          {T17 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT17",
						"AllOtherCore, TypeT18 join(Type == Type18,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join18",
						"join18 select(mapColumn(",
						"          {T18 WorkerId} = WorkerId,",
						"          {T18 Type} = Type,",
						"          {T18 OtherCharVal1} = OtherCharVal1,",
						"          {T18 OtherCharVal2} = OtherCharVal2,",
						"          {T18 OtherNumVal1} = OtherNumVal1,",
						"          {T18 OtherNumVal2} = OtherNumVal2,",
						"          {T18 OtherDtVal1} = OtherDtVal1,",
						"          {T18 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT18",
						"AllOtherCore, TypeT19 join(Type == Type19,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join19",
						"join19 select(mapColumn(",
						"          {T19 WorkerId} = WorkerId,",
						"          {T19 Type} = Type,",
						"          {T19 OtherCharVal1} = OtherCharVal1,",
						"          {T19 OtherCharVal2} = OtherCharVal2,",
						"          {T19 OtherNumVal1} = OtherNumVal1,",
						"          {T19 OtherNumVal2} = OtherNumVal2,",
						"          {T19 OtherDtVal1} = OtherDtVal1,",
						"          {T19 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT19",
						"AllOtherCore, TypeT20 join(Type == Type20,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join20",
						"join20 select(mapColumn(",
						"          {T20 WorkerId} = WorkerId,",
						"          {T20 Type} = Type,",
						"          {T20 OtherCharVal1} = OtherCharVal1,",
						"          {T20 OtherCharVal2} = OtherCharVal2,",
						"          {T20 OtherNumVal1} = OtherNumVal1,",
						"          {T20 OtherNumVal2} = OtherNumVal2,",
						"          {T20 OtherDtVal1} = OtherDtVal1,",
						"          {T20 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT20",
						"AllOtherCore, TypeT21 join(Type == Type21,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join21",
						"join21 select(mapColumn(",
						"          {T21 WorkerId} = WorkerId,",
						"          {T21 Type} = Type,",
						"          {T21 OtherCharVal1} = OtherCharVal1,",
						"          {T21 OtherCharVal2} = OtherCharVal2,",
						"          {T21 OtherNumVal1} = OtherNumVal1,",
						"          {T21 OtherNumVal2} = OtherNumVal2,",
						"          {T21 OtherDtVal1} = OtherDtVal1,",
						"          {T21 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT21",
						"AllOtherCore, TypeT22 join(Type == Type22,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join22",
						"join22 select(mapColumn(",
						"          {T22 WorkerId} = WorkerId,",
						"          {T22 Type} = Type,",
						"          {T22 OtherCharVal1} = OtherCharVal1,",
						"          {T22 OtherCharVal2} = OtherCharVal2,",
						"          {T22 OtherNumVal1} = OtherNumVal1,",
						"          {T22 OtherNumVal2} = OtherNumVal2,",
						"          {T22 OtherDtVal1} = OtherDtVal1,",
						"          {T22 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT22",
						"AllOtherCore, TypeT23 join(Type == Type23,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join23",
						"join23 select(mapColumn(",
						"          {T23 WorkerId} = WorkerId,",
						"          {T23 Type} = Type,",
						"          {T23 OtherCharVal1} = OtherCharVal1,",
						"          {T23 OtherCharVal2} = OtherCharVal2,",
						"          {T23 OtherNumVal1} = OtherNumVal1,",
						"          {T23 OtherNumVal2} = OtherNumVal2,",
						"          {T23 OtherDtVal1} = OtherDtVal1,",
						"          {T23 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT23",
						"AllOtherCore, TypeT24 join(Type == Type24,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join24",
						"join24 select(mapColumn(",
						"          {T24 WorkerId} = WorkerId,",
						"          {T24 Type} = Type,",
						"          {T24 OtherCharVal1} = OtherCharVal1,",
						"          {T24 OtherCharVal2} = OtherCharVal2,",
						"          {T24 OtherNumVal1} = OtherNumVal1,",
						"          {T24 OtherNumVal2} = OtherNumVal2,",
						"          {T24 OtherDtVal1} = OtherDtVal1,",
						"          {T24 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT24",
						"AllOtherCore, TypeT25 join(Type == Type25,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join25",
						"join25 select(mapColumn(",
						"          {T25 WorkerId} = WorkerId,",
						"          {T25 Type} = Type,",
						"          {T25 OtherCharVal1} = OtherCharVal1,",
						"          {T25 OtherCharVal2} = OtherCharVal2,",
						"          {T25 OtherNumVal1} = OtherNumVal1,",
						"          {T25 OtherNumVal2} = OtherNumVal2,",
						"          {T25 OtherDtVal1} = OtherDtVal1,",
						"          {T25 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT25",
						"AllOtherCore, TypeT26 join(Type == Type26,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join26",
						"join26 select(mapColumn(",
						"          {T26 WorkerId} = WorkerId,",
						"          {T26 Type} = Type,",
						"          {T26 OtherCharVal1} = OtherCharVal1,",
						"          {T26 OtherCharVal2} = OtherCharVal2,",
						"          {T26 OtherNumVal1} = OtherNumVal1,",
						"          {T26 OtherNumVal2} = OtherNumVal2,",
						"          {T26 OtherDtVal1} = OtherDtVal1,",
						"          {T26 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT26",
						"AllOtherCore, TypeT27 join(Type == Type27,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join27",
						"join27 select(mapColumn(",
						"          {T27 WorkerId} = WorkerId,",
						"          {T27 Type} = Type,",
						"          {T27 OtherCharVal1} = OtherCharVal1,",
						"          {T27 OtherCharVal2} = OtherCharVal2,",
						"          {T27 OtherNumVal1} = OtherNumVal1,",
						"          {T27 OtherNumVal2} = OtherNumVal2,",
						"          {T27 OtherDtVal1} = OtherDtVal1,",
						"          {T27 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT27",
						"AllOtherCore, TypeT28 join(Type == Type28,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join28",
						"join28 select(mapColumn(",
						"          {T28 WorkerId} = WorkerId,",
						"          {T28 Type} = Type,",
						"          {T28 OtherCharVal1} = OtherCharVal1,",
						"          {T28 OtherCharVal2} = OtherCharVal2,",
						"          {T28 OtherNumVal1} = OtherNumVal1,",
						"          {T28 OtherNumVal2} = OtherNumVal2,",
						"          {T28 OtherDtVal1} = OtherDtVal1,",
						"          {T28 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT28",
						"AllOtherCore, TypeT29 join(Type == Type29,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join29",
						"join29 select(mapColumn(",
						"          {T29 WorkerId} = WorkerId,",
						"          {T29 Type} = Type,",
						"          {T29 OtherCharVal1} = OtherCharVal1,",
						"          {T29 OtherCharVal2} = OtherCharVal2,",
						"          {T29 OtherNumVal1} = OtherNumVal1,",
						"          {T29 OtherNumVal2} = OtherNumVal2,",
						"          {T29 OtherDtVal1} = OtherDtVal1,",
						"          {T29 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT29",
						"AllOtherCore, TypeT30 join(Type == Type30,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join30",
						"join30 select(mapColumn(",
						"          {T30 WorkerId} = WorkerId,",
						"          {T30 Type} = Type,",
						"          {T30 OtherCharVal1} = OtherCharVal1,",
						"          {T30 OtherCharVal2} = OtherCharVal2,",
						"          {T30 OtherNumVal1} = OtherNumVal1,",
						"          {T30 OtherNumVal2} = OtherNumVal2,",
						"          {T30 OtherDtVal1} = OtherDtVal1,",
						"          {T30 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT30",
						"AllOtherCore, TypeT31 join(Type == Type31,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join31",
						"join31 select(mapColumn(",
						"          {T31 WorkerId} = WorkerId,",
						"          {T31 Type} = Type,",
						"          {T31 OtherCharVal1} = OtherCharVal1,",
						"          {T31 OtherCharVal2} = OtherCharVal2,",
						"          {T31 OtherNumVal1} = OtherNumVal1,",
						"          {T31 OtherNumVal2} = OtherNumVal2,",
						"          {T31 OtherDtVal1} = OtherDtVal1,",
						"          {T31 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT31",
						"AllOtherCore, TypeT32 join(Type == Type32,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join32",
						"join32 select(mapColumn(",
						"          {T32 WorkerId} = WorkerId,",
						"          {T32 Type} = Type,",
						"          {T32 OtherCharVal1} = OtherCharVal1,",
						"          {T32 OtherCharVal2} = OtherCharVal2,",
						"          {T32 OtherNumVal1} = OtherNumVal1,",
						"          {T32 OtherNumVal2} = OtherNumVal2,",
						"          {T32 OtherDtVal1} = OtherDtVal1,",
						"          {T32 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT32",
						"AllOtherCore, TypeT33 join(Type == Type33,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join33",
						"join33 select(mapColumn(",
						"          {T33 WorkerId} = WorkerId,",
						"          {T33 Type} = Type,",
						"          {T33 OtherCharVal1} = OtherCharVal1,",
						"          {T33 OtherCharVal2} = OtherCharVal2,",
						"          {T33 OtherNumVal1} = OtherNumVal1,",
						"          {T33 OtherNumVal2} = OtherNumVal2,",
						"          {T33 OtherDtVal1} = OtherDtVal1,",
						"          {T33 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT33",
						"AllOtherCore, TypeT34 join(Type == Type34,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join34",
						"join34 select(mapColumn(",
						"          {T34 WorkerId} = WorkerId,",
						"          {T34 Type} = Type,",
						"          {T34 OtherCharVal1} = OtherCharVal1,",
						"          {T34 OtherCharVal2} = OtherCharVal2,",
						"          {T34 OtherNumVal1} = OtherNumVal1,",
						"          {T34 OtherNumVal2} = OtherNumVal2,",
						"          {T34 OtherDtVal1} = OtherDtVal1,",
						"          {T34 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT34",
						"AllOtherCore, TypeT35 join(Type == Type35,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join35",
						"join35 select(mapColumn(",
						"          {T35 WorkerId} = WorkerId,",
						"          {T35 Type} = Type,",
						"          {T35 OtherCharVal1} = OtherCharVal1,",
						"          {T35 OtherCharVal2} = OtherCharVal2,",
						"          {T35 OtherNumVal1} = OtherNumVal1,",
						"          {T35 OtherNumVal2} = OtherNumVal2,",
						"          {T35 OtherDtVal1} = OtherDtVal1,",
						"          {T35 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT35",
						"AllOtherCore, TypeT36 join(Type == Type36,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join36",
						"join36 select(mapColumn(",
						"          {T36 WorkerId} = WorkerId,",
						"          {T36 Type} = Type,",
						"          {T36 OtherCharVal1} = OtherCharVal1,",
						"          {T36 OtherCharVal2} = OtherCharVal2,",
						"          {T36 OtherNumVal1} = OtherNumVal1,",
						"          {T36 OtherNumVal2} = OtherNumVal2,",
						"          {T36 OtherDtVal1} = OtherDtVal1,",
						"          {T36 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT36",
						"AllOtherCore, TypeT37 join(Type == Type37,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join37",
						"join37 select(mapColumn(",
						"          {T37 WorkerId} = WorkerId,",
						"          {T37 Type} = Type,",
						"          {T37 OtherCharVal1} = OtherCharVal1,",
						"          {T37 OtherCharVal2} = OtherCharVal2,",
						"          {T37 OtherNumVal1} = OtherNumVal1,",
						"          {T37 OtherNumVal2} = OtherNumVal2,",
						"          {T37 OtherDtVal1} = OtherDtVal1,",
						"          {T37 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT37",
						"AllOtherCore, TypeT38 join(Type == Type38,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join38",
						"join38 select(mapColumn(",
						"          {T38 WorkerId} = WorkerId,",
						"          {T38 Type} = Type,",
						"          {T38 OtherCharVal1} = OtherCharVal1,",
						"          {T38 OtherCharVal2} = OtherCharVal2,",
						"          {T38 OtherNumVal1} = OtherNumVal1,",
						"          {T38 OtherNumVal2} = OtherNumVal2,",
						"          {T38 OtherDtVal1} = OtherDtVal1,",
						"          {T38 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT38",
						"AllOtherCore, TypeT39 join(Type == Type39,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join39",
						"join39 select(mapColumn(",
						"          {T39 WorkerId} = WorkerId,",
						"          {T39 Type} = Type,",
						"          {T39 OtherCharVal1} = OtherCharVal1,",
						"          {T39 OtherCharVal2} = OtherCharVal2,",
						"          {T39 OtherNumVal1} = OtherNumVal1,",
						"          {T39 OtherNumVal2} = OtherNumVal2,",
						"          {T39 OtherDtVal1} = OtherDtVal1,",
						"          {T39 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT39",
						"AllOtherCore, TypeT40 join(Type == Type40,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40 select(mapColumn(",
						"          {T40 WorkerId} = WorkerId,",
						"          {T40 Type} = Type,",
						"          {T40 OtherCharVal1} = OtherCharVal1,",
						"          {T40 OtherCharVal2} = OtherCharVal2,",
						"          {T40 OtherNumVal1} = OtherNumVal1,",
						"          {T40 OtherNumVal2} = OtherNumVal2,",
						"          {T40 OtherDtVal1} = OtherDtVal1,",
						"          {T40 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT40",
						"AllOtherCore, TypeT41 join(Type == Type41,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join41",
						"join41 select(mapColumn(",
						"          {T41 WorkerId} = WorkerId,",
						"          {T41 Type} = Type,",
						"          {T41 OtherCharVal1} = OtherCharVal1,",
						"          {T41 OtherCharVal2} = OtherCharVal2,",
						"          {T41 OtherNumVal1} = OtherNumVal1,",
						"          {T41 OtherNumVal2} = OtherNumVal2,",
						"          {T41 OtherDtVal1} = OtherDtVal1,",
						"          {T41 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT41",
						"AllOtherCore, TypeT42 join(Type == Type42,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join42",
						"join42 select(mapColumn(",
						"          {T42 WorkerId} = WorkerId,",
						"          {T42 Type} = Type,",
						"          {T42 OtherCharVal1} = OtherCharVal1,",
						"          {T42 OtherCharVal2} = OtherCharVal2,",
						"          {T42 OtherNumVal1} = OtherNumVal1,",
						"          {T42 OtherNumVal2} = OtherNumVal2,",
						"          {T42 OtherDtVal1} = OtherDtVal1,",
						"          {T42 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT42",
						"AllOtherCore, TypeT43 join(Type == Type43,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join43",
						"join43 select(mapColumn(",
						"          {T43 WorkerId} = WorkerId,",
						"          {T43 Type} = Type,",
						"          {T43 OtherCharVal1} = OtherCharVal1,",
						"          {T43 OtherCharVal2} = OtherCharVal2,",
						"          {T43 OtherNumVal1} = OtherNumVal1,",
						"          {T43 OtherNumVal2} = OtherNumVal2,",
						"          {T43 OtherDtVal1} = OtherDtVal1,",
						"          {T43 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT43",
						"AllOtherCore, TypeT44 join(Type == Type44,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join44",
						"join44 select(mapColumn(",
						"          {T44 WorkerId} = WorkerId,",
						"          {T44 Type} = Type,",
						"          {T44 OtherCharVal1} = OtherCharVal1,",
						"          {T44 OtherCharVal2} = OtherCharVal2,",
						"          {T44 OtherNumVal1} = OtherNumVal1,",
						"          {T44 OtherNumVal2} = OtherNumVal2,",
						"          {T44 OtherDtVal1} = OtherDtVal1,",
						"          {T44 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT44",
						"AllOtherCore, TypeT45 join(Type == Type45,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join45",
						"join45 select(mapColumn(",
						"          {T45 WorkerId} = WorkerId,",
						"          {T45 Type} = Type,",
						"          {T45 OtherCharVal1} = OtherCharVal1,",
						"          {T45 OtherCharVal2} = OtherCharVal2,",
						"          {T45 OtherNumVal1} = OtherNumVal1,",
						"          {T45 OtherNumVal2} = OtherNumVal2,",
						"          {T45 OtherDtVal1} = OtherDtVal1,",
						"          {T45 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT45",
						"AllOtherCore, TypeT46 join(Type == Type46,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join46",
						"join46 select(mapColumn(",
						"          {T46 WorkerId} = WorkerId,",
						"          {T46 Type} = Type,",
						"          {T46 OtherCharVal1} = OtherCharVal1,",
						"          {T46 OtherCharVal2} = OtherCharVal2,",
						"          {T46 OtherNumVal1} = OtherNumVal1,",
						"          {T46 OtherNumVal2} = OtherNumVal2,",
						"          {T46 OtherDtVal1} = OtherDtVal1,",
						"          {T46 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT46",
						"AllOtherCore, TypeT47 join(Type == Type47,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join47",
						"join47 select(mapColumn(",
						"          {T47 WorkerId} = WorkerId,",
						"          {T47 Type} = Type,",
						"          {T47 OtherCharVal1} = OtherCharVal1,",
						"          {T47 OtherCharVal2} = OtherCharVal2,",
						"          {T47 OtherNumVal1} = OtherNumVal1,",
						"          {T47 OtherNumVal2} = OtherNumVal2,",
						"          {T47 OtherDtVal1} = OtherDtVal1,",
						"          {T47 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT47",
						"AllOtherCore, TypeT48 join(Type == Type48,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join48",
						"join48 select(mapColumn(",
						"          {T48 WorkerId} = WorkerId,",
						"          {T48 Type} = Type,",
						"          {T48 OtherCharVal1} = OtherCharVal1,",
						"          {T48 OtherCharVal2} = OtherCharVal2,",
						"          {T48 OtherNumVal1} = OtherNumVal1,",
						"          {T48 OtherNumVal2} = OtherNumVal2,",
						"          {T48 OtherDtVal1} = OtherDtVal1,",
						"          {T48 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT48",
						"AllOtherCore, TypeT49 join(Type == Type49,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join49",
						"join49 select(mapColumn(",
						"          {T49 WorkerId} = WorkerId,",
						"          {T49 Type} = Type,",
						"          {T49 OtherCharVal1} = OtherCharVal1,",
						"          {T49 OtherCharVal2} = OtherCharVal2,",
						"          {T49 OtherNumVal1} = OtherNumVal1,",
						"          {T49 OtherNumVal2} = OtherNumVal2,",
						"          {T49 OtherDtVal1} = OtherDtVal1,",
						"          {T49 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT49",
						"AllOtherCore, TypeT50 join(Type == Type50,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join50",
						"join50 select(mapColumn(",
						"          {T50 WorkerId} = WorkerId,",
						"          {T50 Type} = Type,",
						"          {T50 OtherCharVal1} = OtherCharVal1,",
						"          {T50 OtherCharVal2} = OtherCharVal2,",
						"          {T50 OtherNumVal1} = OtherNumVal1,",
						"          {T50 OtherNumVal2} = OtherNumVal2,",
						"          {T50 OtherDtVal1} = OtherDtVal1,",
						"          {T50 OtherDtVal2} = OtherDtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectT50",
						"JoinOtherAnalysisYear, selectT1 join(WorkerId == {T1 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, selectT2 join(WorkerId == {T2 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, selectT3 join(WorkerId == {T3 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, selectT4 join(WorkerId == {T4 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, selectT5 join(WorkerId == {T5 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, selectT6 join(WorkerId == {T6 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT6",
						"joinT6, selectT7 join(WorkerId == {T7 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT8, selectT9 join(WorkerId == {T9 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, selectT10 join(WorkerId == {T10 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, selectT11 join(WorkerId == {T11 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, selectT12 join(WorkerId == {T12 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, selectT13 join(WorkerId == {T13 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, selectT14 join(WorkerId == {T14 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, selectT15 join(WorkerId == {T15 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, selectT16 join(WorkerId == {T16 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, selectT17 join(WorkerId == {T17 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, selectT18 join(WorkerId == {T18 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, selectT19 join(WorkerId == {T19 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, selectT20 join(WorkerId == {T20 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, selectT21 join(WorkerId == {T21 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, selectT22 join(WorkerId == {T22 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, selectT23 join(WorkerId == {T23 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, selectT24 join(WorkerId == {T24 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, selectT25 join(WorkerId == {T25 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, selectT26 join(WorkerId == {T26 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, selectT27 join(WorkerId == {T27 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, selectT28 join(WorkerId == {T28 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, selectT29 join(WorkerId == {T29 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, selectT30 join(WorkerId == {T30 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, selectT31 join(WorkerId == {T31 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, selectT32 join(WorkerId == {T32 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, selectT33 join(WorkerId == {T33 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, selectT34 join(WorkerId == {T34 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, selectT35 join(WorkerId == {T35 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, selectT36 join(WorkerId == {T36 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, selectT37 join(WorkerId == {T37 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, selectT38 join(WorkerId == {T38 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, selectT39 join(WorkerId == {T39 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, selectT40 join(WorkerId == {T40 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT40",
						"joinT40, selectT41 join(WorkerId == {T41 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, selectT42 join(WorkerId == {T42 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, selectT43 join(WorkerId == {T43 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, selectT44 join(WorkerId == {T44 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, selectT45 join(WorkerId == {T45 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, selectT46 join(WorkerId == {T46 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, selectT47 join(WorkerId == {T47 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, selectT48 join(WorkerId == {T48 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, selectT49 join(WorkerId == {T49 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, selectT50 join(WorkerId == {T50 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"RemoveRecordsWithNoActivity select(mapColumn(",
						"          WorkerId,",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Data Collection Year},",
						"          {Data Collection Quarter},",
						"          {Event Year} = Year,",
						"          {T1 Type},",
						"          {T1 OtherCharVal1},",
						"          {T1 OtherCharVal2},",
						"          {T1 OtherNumVal1},",
						"          {T1 OtherNumVal2},",
						"          {T1 OtherDtVal1},",
						"          {T1 OtherDtVal2},",
						"          {T2 Type},",
						"          {T2 OtherCharVal1} = {T1 Type},",
						"          {T2 OtherCharVal2},",
						"          {T2 OtherNumVal1},",
						"          {T2 OtherNumVal2},",
						"          {T2 OtherDtVal1},",
						"          {T2 OtherDtVal2},",
						"          {T3 Type},",
						"          {T3 OtherCharVal1},",
						"          {T3 OtherCharVal2},",
						"          {T3 OtherNumVal1},",
						"          {T3 OtherNumVal2},",
						"          {T3 OtherDtVal1},",
						"          {T3 OtherDtVal2},",
						"          {T4 Type},",
						"          {T4 OtherCharVal1},",
						"          {T4 OtherCharVal2},",
						"          {T4 OtherNumVal1},",
						"          {T4 OtherNumVal2},",
						"          {T4 OtherDtVal1},",
						"          {T4 OtherDtVal2},",
						"          {T5 Type},",
						"          {T5 OtherCharVal1},",
						"          {T5 OtherCharVal2},",
						"          {T5 OtherNumVal1},",
						"          {T5 OtherNumVal2},",
						"          {T5 OtherDtVal1},",
						"          {T5 OtherDtVal2},",
						"          {T6 Type},",
						"          {T6 OtherCharVal1},",
						"          {T6 OtherCharVal2},",
						"          {T6 OtherNumVal1},",
						"          {T6 OtherNumVal2},",
						"          {T6 OtherDtVal1},",
						"          {T6 OtherDtVal2},",
						"          {T7 Type},",
						"          {T7 OtherCharVal1},",
						"          {T7 OtherCharVal2},",
						"          {T7 OtherNumVal1},",
						"          {T7 OtherNumVal2},",
						"          {T7 OtherDtVal1},",
						"          {T7 OtherDtVal2},",
						"          {T8 Type},",
						"          {T8 OtherCharVal1},",
						"          {T8 OtherCharVal2},",
						"          {T8 OtherNumVal1},",
						"          {T8 OtherNumVal2},",
						"          {T8 OtherDtVal1},",
						"          {T8 OtherDtVal2},",
						"          {T9 Type},",
						"          {T9 OtherCharVal1},",
						"          {T9 OtherCharVal2},",
						"          {T9 OtherNumVal1},",
						"          {T9 OtherNumVal2},",
						"          {T9 OtherDtVal1},",
						"          {T9 OtherDtVal2},",
						"          {T10 Type},",
						"          {T10 OtherCharVal1},",
						"          {T10 OtherCharVal2},",
						"          {T10 OtherNumVal1},",
						"          {T10 OtherNumVal2},",
						"          {T10 OtherDtVal1},",
						"          {T10 OtherDtVal2},",
						"          {T11 Type},",
						"          {T11 OtherCharVal1},",
						"          {T11 OtherCharVal2},",
						"          {T11 OtherNumVal1},",
						"          {T11 OtherNumVal2},",
						"          {T11 OtherDtVal1},",
						"          {T11 OtherDtVal2},",
						"          {T12 Type},",
						"          {T12 OtherCharVal1},",
						"          {T12 OtherCharVal2},",
						"          {T12 OtherNumVal1},",
						"          {T12 OtherNumVal2},",
						"          {T12 OtherDtVal1},",
						"          {T12 OtherDtVal2},",
						"          {T13 Type},",
						"          {T13 OtherCharVal1},",
						"          {T13 OtherCharVal2},",
						"          {T13 OtherNumVal1},",
						"          {T13 OtherNumVal2},",
						"          {T13 OtherDtVal1},",
						"          {T13 OtherDtVal2},",
						"          {T14 Type},",
						"          {T14 OtherCharVal1},",
						"          {T14 OtherCharVal2},",
						"          {T14 OtherNumVal1},",
						"          {T14 OtherNumVal2},",
						"          {T14 OtherDtVal1},",
						"          {T14 OtherDtVal2},",
						"          {T15 Type},",
						"          {T15 OtherCharVal1},",
						"          {T15 OtherCharVal2},",
						"          {T15 OtherNumVal1},",
						"          {T15 OtherNumVal2},",
						"          {T15 OtherDtVal1},",
						"          {T15 OtherDtVal2},",
						"          {T16 Type},",
						"          {T16 OtherCharVal1},",
						"          {T16 OtherCharVal2},",
						"          {T16 OtherNumVal1},",
						"          {T16 OtherNumVal2},",
						"          {T16 OtherDtVal1},",
						"          {T16 OtherDtVal2},",
						"          {T17 Type},",
						"          {T17 OtherCharVal1},",
						"          {T17 OtherCharVal2},",
						"          {T17 OtherNumVal1},",
						"          {T17 OtherNumVal2},",
						"          {T17 OtherDtVal1},",
						"          {T17 OtherDtVal2},",
						"          {T18 Type},",
						"          {T18 OtherCharVal1},",
						"          {T18 OtherCharVal2},",
						"          {T18 OtherNumVal1},",
						"          {T18 OtherNumVal2},",
						"          {T18 OtherDtVal1},",
						"          {T18 OtherDtVal2},",
						"          {T19 Type},",
						"          {T19 OtherCharVal1},",
						"          {T19 OtherCharVal2},",
						"          {T19 OtherNumVal1},",
						"          {T19 OtherNumVal2},",
						"          {T19 OtherDtVal1},",
						"          {T19 OtherDtVal2},",
						"          {T20 Type},",
						"          {T20 OtherCharVal1},",
						"          {T20 OtherCharVal2},",
						"          {T20 OtherNumVal1},",
						"          {T20 OtherNumVal2},",
						"          {T20 OtherDtVal1},",
						"          {T20 OtherDtVal2},",
						"          {T21 Type},",
						"          {T21 OtherCharVal1},",
						"          {T21 OtherCharVal2},",
						"          {T21 OtherNumVal1},",
						"          {T21 OtherNumVal2},",
						"          {T21 OtherDtVal1},",
						"          {T21 OtherDtVal2},",
						"          {T22 Type},",
						"          {T22 OtherCharVal1},",
						"          {T22 OtherCharVal2},",
						"          {T22 OtherNumVal1},",
						"          {T22 OtherNumVal2},",
						"          {T22 OtherDtVal1},",
						"          {T22 OtherDtVal2},",
						"          {T23 Type},",
						"          {T23 OtherCharVal1},",
						"          {T23 OtherCharVal2},",
						"          {T23 OtherNumVal1},",
						"          {T23 OtherNumVal2},",
						"          {T23 OtherDtVal1},",
						"          {T23 OtherDtVal2},",
						"          {T24 Type},",
						"          {T24 OtherCharVal1},",
						"          {T24 OtherCharVal2},",
						"          {T24 OtherNumVal1},",
						"          {T24 OtherNumVal2},",
						"          {T24 OtherDtVal1},",
						"          {T24 OtherDtVal2},",
						"          {T25 Type},",
						"          {T25 OtherCharVal1},",
						"          {T25 OtherCharVal2},",
						"          {T25 OtherNumVal1},",
						"          {T25 OtherNumVal2},",
						"          {T25 OtherDtVal1},",
						"          {T25 OtherDtVal2},",
						"          {T26 Type},",
						"          {T26 OtherCharVal1},",
						"          {T26 OtherCharVal2},",
						"          {T26 OtherNumVal1},",
						"          {T26 OtherNumVal2},",
						"          {T26 OtherDtVal1},",
						"          {T26 OtherDtVal2},",
						"          {T27 Type},",
						"          {T27 OtherCharVal1},",
						"          {T27 OtherCharVal2},",
						"          {T27 OtherNumVal1},",
						"          {T27 OtherNumVal2},",
						"          {T27 OtherDtVal1},",
						"          {T27 OtherDtVal2},",
						"          {T28 Type},",
						"          {T28 OtherCharVal1},",
						"          {T28 OtherCharVal2},",
						"          {T28 OtherNumVal1},",
						"          {T28 OtherNumVal2},",
						"          {T28 OtherDtVal1},",
						"          {T28 OtherDtVal2},",
						"          {T29 Type},",
						"          {T29 OtherCharVal1},",
						"          {T29 OtherCharVal2},",
						"          {T29 OtherNumVal1},",
						"          {T29 OtherNumVal2},",
						"          {T29 OtherDtVal1},",
						"          {T29 OtherDtVal2},",
						"          {T30 Type},",
						"          {T30 OtherCharVal1},",
						"          {T30 OtherCharVal2},",
						"          {T30 OtherNumVal1},",
						"          {T30 OtherNumVal2},",
						"          {T30 OtherDtVal1},",
						"          {T30 OtherDtVal2},",
						"          {T31 Type},",
						"          {T31 OtherCharVal1},",
						"          {T31 OtherCharVal2},",
						"          {T31 OtherNumVal1},",
						"          {T31 OtherNumVal2},",
						"          {T31 OtherDtVal1},",
						"          {T31 OtherDtVal2},",
						"          {T32 Type},",
						"          {T32 OtherCharVal1},",
						"          {T32 OtherCharVal2},",
						"          {T32 OtherNumVal1},",
						"          {T32 OtherNumVal2},",
						"          {T32 OtherDtVal1},",
						"          {T32 OtherDtVal2},",
						"          {T33 Type},",
						"          {T33 OtherCharVal1},",
						"          {T33 OtherCharVal2},",
						"          {T33 OtherNumVal1},",
						"          {T33 OtherNumVal2},",
						"          {T33 OtherDtVal1},",
						"          {T33 OtherDtVal2},",
						"          {T34 Type},",
						"          {T34 OtherCharVal1},",
						"          {T34 OtherCharVal2},",
						"          {T34 OtherNumVal1},",
						"          {T34 OtherNumVal2},",
						"          {T34 OtherDtVal1},",
						"          {T34 OtherDtVal2},",
						"          {T35 Type},",
						"          {T35 OtherCharVal1},",
						"          {T35 OtherCharVal2},",
						"          {T35 OtherNumVal1},",
						"          {T35 OtherNumVal2},",
						"          {T35 OtherDtVal1},",
						"          {T35 OtherDtVal2},",
						"          {T36 Type},",
						"          {T36 OtherCharVal1},",
						"          {T36 OtherCharVal2},",
						"          {T36 OtherNumVal1},",
						"          {T36 OtherNumVal2},",
						"          {T36 OtherDtVal1},",
						"          {T36 OtherDtVal2},",
						"          {T37 Type},",
						"          {T37 OtherCharVal1},",
						"          {T37 OtherCharVal2},",
						"          {T37 OtherNumVal1},",
						"          {T37 OtherNumVal2},",
						"          {T37 OtherDtVal1},",
						"          {T37 OtherDtVal2},",
						"          {T38 Type},",
						"          {T38 OtherCharVal1},",
						"          {T38 OtherCharVal2},",
						"          {T38 OtherNumVal1},",
						"          {T38 OtherNumVal2},",
						"          {T38 OtherDtVal1},",
						"          {T38 OtherDtVal2},",
						"          {T39 Type},",
						"          {T39 OtherCharVal1},",
						"          {T39 OtherCharVal2},",
						"          {T39 OtherNumVal1},",
						"          {T39 OtherNumVal2},",
						"          {T39 OtherDtVal1},",
						"          {T39 OtherDtVal2},",
						"          {T40 Type},",
						"          {T40 OtherCharVal1},",
						"          {T40 OtherCharVal2},",
						"          {T40 OtherNumVal1},",
						"          {T40 OtherNumVal2},",
						"          {T40 OtherDtVal1},",
						"          {T40 OtherDtVal2},",
						"          {T41 Type},",
						"          {T41 OtherCharVal1},",
						"          {T41 OtherCharVal2},",
						"          {T41 OtherNumVal1},",
						"          {T41 OtherNumVal2},",
						"          {T41 OtherDtVal1},",
						"          {T41 OtherDtVal2},",
						"          {T42 Type},",
						"          {T42 OtherCharVal1},",
						"          {T42 OtherCharVal2},",
						"          {T42 OtherNumVal1},",
						"          {T42 OtherNumVal2},",
						"          {T42 OtherDtVal1},",
						"          {T42 OtherDtVal2},",
						"          {T43 Type},",
						"          {T43 OtherCharVal1},",
						"          {T43 OtherCharVal2},",
						"          {T43 OtherNumVal1},",
						"          {T43 OtherNumVal2},",
						"          {T43 OtherDtVal1},",
						"          {T43 OtherDtVal2},",
						"          {T44 Type},",
						"          {T44 OtherCharVal1},",
						"          {T44 OtherCharVal2},",
						"          {T44 OtherNumVal1},",
						"          {T44 OtherNumVal2},",
						"          {T44 OtherDtVal1},",
						"          {T44 OtherDtVal2},",
						"          {T45 Type},",
						"          {T45 OtherCharVal1},",
						"          {T45 OtherCharVal2},",
						"          {T45 OtherNumVal1},",
						"          {T45 OtherNumVal2},",
						"          {T45 OtherDtVal1},",
						"          {T45 OtherDtVal2},",
						"          {T46 Type},",
						"          {T46 OtherCharVal1},",
						"          {T46 OtherCharVal2},",
						"          {T46 OtherNumVal1},",
						"          {T46 OtherNumVal2},",
						"          {T46 OtherDtVal1},",
						"          {T46 OtherDtVal2},",
						"          {T47 Type},",
						"          {T47 OtherCharVal1},",
						"          {T47 OtherCharVal2},",
						"          {T47 OtherNumVal1},",
						"          {T47 OtherNumVal2},",
						"          {T47 OtherDtVal1},",
						"          {T47 OtherDtVal2},",
						"          {T48 Type},",
						"          {T48 OtherCharVal1},",
						"          {T48 OtherCharVal2},",
						"          {T48 OtherNumVal1},",
						"          {T48 OtherNumVal2},",
						"          {T48 OtherDtVal1},",
						"          {T48 OtherDtVal2},",
						"          {T49 Type},",
						"          {T49 OtherCharVal1},",
						"          {T49 OtherCharVal2},",
						"          {T49 OtherNumVal1},",
						"          {T49 OtherNumVal2},",
						"          {T49 OtherDtVal1},",
						"          {T49 OtherDtVal2},",
						"          {T50 Type},",
						"          {T50 OtherCharVal1},",
						"          {T50 OtherCharVal2},",
						"          {T50 OtherNumVal1},",
						"          {T50 OtherNumVal2},",
						"          {T50 OtherDtVal1},",
						"          {T50 OtherDtVal2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinCollumns",
						"joinT7, selectT8 join(WorkerId == {T8 WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"OtherCoreWorkers, OtherCoreAnalysisMaxYearOutput join(ClientId == {Client Id},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOtherAnalysisYear",
						"OtherCoreYear derive({Client Id} = $Flow_Client_Id) ~> OtherCoreAnalysisMaxYearOutput",
						"joinT50 derive({Data Collection Year} = $Flow_Folder_Year,",
						"          {Data Collection Quarter} = $Flow_Folder_Quarter,",
						"          {Included Record} = iif(isNull({T1 Type}) && \r",
						"isNull({T2 Type}) && \r",
						"isNull({T3 Type}) && \r",
						"isNull({T4 Type}) &&\r",
						"isNull({T5 Type}) &&\r",
						"isNull({T6 Type}) &&\r",
						"isNull({T7 Type}) &&\r",
						"isNull({T8 Type}) &&\r",
						"isNull({T9 Type}) &&\r",
						"isNull({T10 Type}) &&\r",
						"isNull({T11 Type}) &&\r",
						"isNull({T12 Type}) &&\r",
						"isNull({T13 Type}) &&\r",
						"isNull({T14 Type}) &&\r",
						"isNull({T15 Type}) &&\r",
						"isNull({T16 Type}) &&\r",
						"isNull({T17 Type}) &&\r",
						"isNull({T18 Type}) &&\r",
						"isNull({T19 Type}) &&\r",
						"isNull({T20 Type}) &&\r",
						"isNull({T21 Type}) &&\r",
						"isNull({T22 Type}) &&\r",
						"isNull({T23 Type}) &&\r",
						"isNull({T24 Type}) &&\r",
						"isNull({T25 Type}) &&\r",
						"isNull({T26 Type}) &&\r",
						"isNull({T27 Type}) &&\r",
						"isNull({T28 Type}) &&\r",
						"isNull({T29 Type}) &&\r",
						"isNull({T30 Type}) &&\r",
						"isNull({T31 Type}) &&\r",
						"isNull({T32 Type}) &&\r",
						"isNull({T33 Type}) &&\r",
						"isNull({T34 Type}) &&\r",
						"isNull({T35 Type}) &&\r",
						"isNull({T36 Type}) &&\r",
						"isNull({T37 Type}) &&\r",
						"isNull({T38 Type}) &&\r",
						"isNull({T39 Type}) &&\r",
						"isNull({T40 Type}) &&\r",
						"isNull({T41 Type}) &&\r",
						"isNull({T42 Type}) &&\r",
						"isNull({T43 Type}) &&\r",
						"isNull({T44 Type}) &&\r",
						"isNull({T45 Type}) &&\r",
						"isNull({T46 Type}) &&\r",
						"isNull({T47 Type}) &&\r",
						"isNull({T48 Type}) &&\r",
						"isNull({T49 Type}) &&\r",
						"isNull({T50 Type})\r",
						",'N','Y'\r",
						"),",
						"          {T1 Type} = iif(isNull({T1 Type}),'N/A',{T1 Type}),",
						"          {T2 Type} = iif(isNull({T2 Type}),'N/A',{T2 Type}),",
						"          {T3 Type} = iif(isNull({T3 Type}),'N/A',{T3 Type}),",
						"          {T4 Type} = iif(isNull({T4 Type}),'N/A',{T4 Type}),",
						"          {T5 Type} = iif(isNull({T5 Type}),'N/A',{T5 Type}),",
						"          {T6 Type} = iif(isNull({T6 Type}),'N/A',{T6 Type}),",
						"          {T7 Type} = iif(isNull({T7 Type}),'N/A',{T7 Type}),",
						"          {T8 Type} = iif(isNull({T8 Type}),'N/A',{T8 Type}),",
						"          {T9 Type} = iif(isNull({T9 Type}),'N/A',{T9 Type}),",
						"          {T10 Type} = iif(isNull({T10 Type}),'N/A',{T10 Type}),",
						"          {T11 Type} = iif(isNull({T11 Type}),'N/A',{T11 Type}),",
						"          {T12 Type} = iif(isNull({T12 Type}),'N/A',{T12 Type}),",
						"          {T13 Type} = iif(isNull({T13 Type}),'N/A',{T13 Type}),",
						"          {T14 Type} = iif(isNull({T14 Type}),'N/A',{T14 Type}),",
						"          {T15 Type} = iif(isNull({T15 Type}),'N/A',{T15 Type}),",
						"          {T16 Type} = iif(isNull({T16 Type}),'N/A',{T16 Type}),",
						"          {T17 Type} = iif(isNull({T17 Type}),'N/A',{T17 Type}),",
						"          {T18 Type} = iif(isNull({T18 Type}),'N/A',{T18 Type}),",
						"          {T19 Type} = iif(isNull({T19 Type}),'N/A',{T19 Type}),",
						"          {T20 Type} = iif(isNull({T20 Type}),'N/A',{T20 Type}),",
						"          {T21 Type} = iif(isNull({T21 Type}),'N/A',{T21 Type}),",
						"          {T22 Type} = iif(isNull({T22 Type}),'N/A',{T22 Type}),",
						"          {T23 Type} = iif(isNull({T23 Type}),'N/A',{T23 Type}),",
						"          {T24 Type} = iif(isNull({T24 Type}),'N/A',{T24 Type}),",
						"          {T25 Type} = iif(isNull({T25 Type}),'N/A',{T25 Type}),",
						"          {T26 Type} = iif(isNull({T26 Type}),'N/A',{T26 Type}),",
						"          {T27 Type} = iif(isNull({T27 Type}),'N/A',{T27 Type}),",
						"          {T28 Type} = iif(isNull({T28 Type}),'N/A',{T28 Type}),",
						"          {T29 Type} = iif(isNull({T29 Type}),'N/A',{T29 Type}),",
						"          {T30 Type} = iif(isNull({T30 Type}),'N/A',{T30 Type}),",
						"          {T31 Type} = iif(isNull({T31 Type}),'N/A',{T31 Type}),",
						"          {T32 Type} = iif(isNull({T32 Type}),'N/A',{T32 Type}),",
						"          {T33 Type} = iif(isNull({T33 Type}),'N/A',{T33 Type}),",
						"          {T34 Type} = iif(isNull({T34 Type}),'N/A',{T34 Type}),",
						"          {T35 Type} = iif(isNull({T35 Type}),'N/A',{T35 Type}),",
						"          {T36 Type} = iif(isNull({T36 Type}),'N/A',{T36 Type}),",
						"          {T37 Type} = iif(isNull({T37 Type}),'N/A',{T37 Type}),",
						"          {T38 Type} = iif(isNull({T38 Type}),'N/A',{T38 Type}),",
						"          {T39 Type} = iif(isNull({T39 Type}),'N/A',{T39 Type}),",
						"          {T40 Type} = iif(isNull({T40 Type}),'N/A',{T40 Type}),",
						"          {T41 Type} = iif(isNull({T41 Type}),'N/A',{T41 Type}),",
						"          {T42 Type} = iif(isNull({T42 Type}),'N/A',{T42 Type}),",
						"          {T43 Type} = iif(isNull({T43 Type}),'N/A',{T43 Type}),",
						"          {T44 Type} = iif(isNull({T44 Type}),'N/A',{T44 Type}),",
						"          {T45 Type} = iif(isNull({T45 Type}),'N/A',{T45 Type}),",
						"          {T46 Type} = iif(isNull({T46 Type}),'N/A',{T46 Type}),",
						"          {T47 Type} = iif(isNull({T47 Type}),'N/A',{T47 Type}),",
						"          {T48 Type} = iif(isNull({T48 Type}),'N/A',{T48 Type}),",
						"          {T49 Type} = iif(isNull({T49 Type}),'N/A',{T49 Type}),",
						"          {T50 Type} = iif(isNull({T50 Type}),'N/A',{T50 Type})) ~> UpdateNullandAddDateRelatedColumns",
						"UpdateNullandAddDateRelatedColumns filter({Included Record}=='Y') ~> RemoveRecordsWithNoActivity",
						"CleanupJoinCollumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OtherFactAnalysis_P3.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTmp_OtherAnalysisTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_AnalysisTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherFact_Evergreen')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Adhoc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreForSupplement"
						},
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutPutFactTable"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "FilterSurveyValuesCulture"
						},
						{
							"name": "SelectValuesCulture1P"
						},
						{
							"name": "FilterSurveyGoals"
						},
						{
							"name": "SelectGoalsCurr"
						},
						{
							"name": "FilterValues"
						},
						{
							"name": "SelectValuesCurr"
						},
						{
							"name": "HCTCurrent"
						},
						{
							"name": "HCT1P"
						},
						{
							"name": "HCT2P"
						},
						{
							"name": "WorkerID1P"
						},
						{
							"name": "WorkerID2P"
						},
						{
							"name": "HCTin1P"
						},
						{
							"name": "HCTin2P"
						},
						{
							"name": "JoinElloreeRace"
						},
						{
							"name": "JoinElloreeGender"
						},
						{
							"name": "SelectAllCore"
						},
						{
							"name": "HCTCurrMgr"
						},
						{
							"name": "HCT1PMgr"
						},
						{
							"name": "HCT2PMgr"
						},
						{
							"name": "unionAllWorkerMgr"
						},
						{
							"name": "GroupWorkerMgrCombo"
						},
						{
							"name": "SeleceWorkerMgrCombo"
						},
						{
							"name": "WorkerMgrCount"
						},
						{
							"name": "JoinMgrCount"
						},
						{
							"name": "SelectHCTCleanup"
						},
						{
							"name": "filter2"
						},
						{
							"name": "SelectGoalsImpactReach1P"
						},
						{
							"name": "filter3"
						},
						{
							"name": "SelectGoalsSeizeOpp1P"
						},
						{
							"name": "JoinGoalValCurr"
						},
						{
							"name": "JoinGoalImpactSeize1P"
						},
						{
							"name": "FilterSurveyGoalsSeize1P"
						},
						{
							"name": "FilterSurveyGoalsSeize2P"
						},
						{
							"name": "SelectGoalsSeizeOpp2P"
						},
						{
							"name": "FilterSurveyGoalsImpactReach1P"
						},
						{
							"name": "FilterSurveyGoalsSeize2PVal"
						},
						{
							"name": "SelectGoalsImpactReach2P"
						},
						{
							"name": "FilterSurveyGoalsCurr"
						},
						{
							"name": "FilterSurveyValuesCurr"
						},
						{
							"name": "JoinTalentTag"
						},
						{
							"name": "FilterSurveyValuesCulture1P"
						},
						{
							"name": "FilterSurveyValuesCulture2P"
						},
						{
							"name": "SelectValuesCulture2P"
						},
						{
							"name": "FilterValuesWorksCollab"
						},
						{
							"name": "FilterValuesWorksCollab1PYear"
						},
						{
							"name": "SelectValuesWorksCollab1PYear"
						},
						{
							"name": "FilterValuesWorksCollab2PYear"
						},
						{
							"name": "SelectValuesWorksCollab2PYear"
						},
						{
							"name": "FilterPotential"
						},
						{
							"name": "FilterPotentialCurr"
						},
						{
							"name": "SelectPotentialCurr"
						},
						{
							"name": "FilterPotentialBroaderResp"
						},
						{
							"name": "FilterPotentialBroadResp1P"
						},
						{
							"name": "SelectPotentialBroadResp1P"
						},
						{
							"name": "FilterPotentialBroadResp2P"
						},
						{
							"name": "SelectPotentialBroadResp2P"
						},
						{
							"name": "FilterPotentialLearningInnov"
						},
						{
							"name": "FilterPotentialLearnInnov2P"
						},
						{
							"name": "SelectPotentialLearnInnov2P"
						},
						{
							"name": "FilterPotentialLearnInnov1P"
						},
						{
							"name": "SelectPotentialLearnInnov1P"
						},
						{
							"name": "JoinGoalImpactSeize2P"
						},
						{
							"name": "JoinGoalImpactReach1P"
						},
						{
							"name": "JoinGoalImpactReach2P"
						},
						{
							"name": "JoinValuesCurr"
						},
						{
							"name": "JoinValuesCulture1P"
						},
						{
							"name": "JoinValuesCulture2P"
						},
						{
							"name": "JoinValuesWorksCollab1PYear"
						},
						{
							"name": "JoinValuesWorksCollab2PYear"
						},
						{
							"name": "JoinPotentialCurr"
						},
						{
							"name": "JoinPotentialBroadResp1P"
						},
						{
							"name": "JoinPotentialBroadResp2P"
						},
						{
							"name": "JoinPotentialLearnInnov1P"
						},
						{
							"name": "JoinPotentialLearnInnov2P"
						},
						{
							"name": "SelectFinalOutput"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> OtherCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT'\"),",
						"     format: 'query') ~> CoreForSupplement",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EthnicityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EthnicityMap",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[GenderMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> GenderMap",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
						"          {Emp Curr Elloree Perf Rating} = CurrElloreePerfRating,",
						"          {Emp P1 Elloree Perf Rating} = P1ElloreePerfRating,",
						"          {Emp P2 Elloree Perf Rating} = P2ElloreePerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"OtherCore filter(EventType=='Values - Culture and Values') ~> FilterSurveyValuesCulture",
						"FilterSurveyValuesCulture1P select(mapColumn(",
						"          WorkerId,",
						"          {Values 1P (Culture and Values)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesCulture1P",
						"OtherCore filter(EventType=='Goals') ~> FilterSurveyGoals",
						"FilterSurveyGoalsCurr select(mapColumn(",
						"          WorkerId,",
						"          {Goals Curr} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsCurr",
						"OtherCore filter(EventType=='Values') ~> FilterValues",
						"FilterSurveyValuesCurr select(mapColumn(",
						"          WorkerId,",
						"          {Values Curr} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesCurr",
						"SelectAllCore, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCTCurrent",
						"SelectAllCore, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCT1P",
						"SelectAllCore, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCT2P",
						"HCT1P select(mapColumn(",
						"          {WorkerId 1P} = WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WorkerID1P",
						"HCT2P select(mapColumn(",
						"          {WorkerId 2P} = WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WorkerID2P",
						"HCTCurrent, WorkerID1P join(WorkerId == {WorkerId 1P},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCTin1P",
						"HCTin1P, WorkerID2P join(WorkerId == {WorkerId 2P},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HCTin2P",
						"CoreForSupplement, EthnicityMap join(Race == ClientRace",
						"     && HispanicLatinoOrigin == ClientHispanicLatinoOrigin,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinElloreeRace",
						"JoinElloreeRace, GenderMap join(Gender == ClientGender,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinElloreeGender",
						"JoinTalentTag select(mapColumn(",
						"          ClientId = CoreForSupplement@ClientId,",
						"          ClientEngagementDt = CoreForSupplement@ClientEngagementDt,",
						"          WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventType,",
						"          EventReason,",
						"          WorkerStatus,",
						"          WorkerType,",
						"          JobTitle,",
						"          JobFunction,",
						"          YearsinJob,",
						"          PrevJobTitle,",
						"          PrevJobFunction,",
						"          LastPromoDt,",
						"          OrigHireDt,",
						"          CurrHireDt,",
						"          RehireInd,",
						"          YearsofSrvc,",
						"          YearsofSrvcBand,",
						"          YearsofSrvcBandSortId,",
						"          CorpTitle,",
						"          PrevCorpTitle,",
						"          ManagerInd,",
						"          DirectMgrWorkerId,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          LegacyOrg,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          Race,",
						"          HispanicLatinoOrigin,",
						"          Gender,",
						"          Veteran,",
						"          LGTBQ,",
						"          DisabilityInd,",
						"          BirthYear,",
						"          Generation,",
						"          GenerationSortId,",
						"          EmpCount,",
						"          ElloreeRace,",
						"          ElloreeHispanicLatinoOrigin,",
						"          ElloreeGender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllCore",
						"HCTCurrent select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HCTCurrMgr",
						"HCT1P select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HCT1PMgr",
						"HCT2P select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HCT2PMgr",
						"HCTCurrMgr, HCT1PMgr, HCT2PMgr union(byName: true)~> unionAllWorkerMgr",
						"unionAllWorkerMgr aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(DirectMgrWorkerId)) ~> GroupWorkerMgrCombo",
						"GroupWorkerMgrCombo select(mapColumn(",
						"          WorkerId,",
						"          DirectMgrWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SeleceWorkerMgrCombo",
						"SeleceWorkerMgrCombo aggregate(groupBy(WorkerId),",
						"     MgrCount = count(DirectMgrWorkerId)) ~> WorkerMgrCount",
						"HCTin2P, WorkerMgrCount join(SelectAllCore@WorkerId == WorkerMgrCount@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMgrCount",
						"JoinMgrCount select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId = SelectAllCore@WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventType,",
						"          EventReason,",
						"          WorkerStatus,",
						"          WorkerType,",
						"          JobTitle,",
						"          JobFunction,",
						"          YearsinJob,",
						"          PrevJobTitle,",
						"          PrevJobFunction,",
						"          LastPromoDt,",
						"          OrigHireDt,",
						"          CurrHireDt,",
						"          RehireInd,",
						"          YearsofSrvc,",
						"          YearsofSrvcBand,",
						"          YearsofSrvcBandSortId,",
						"          CorpTitle,",
						"          PrevCorpTitle,",
						"          ManagerInd,",
						"          DirectMgrWorkerId,",
						"          MgrCount,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          LegacyOrg,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          Race,",
						"          ElloreeRace,",
						"          HispanicLatinoOrigin,",
						"          Gender,",
						"          ElloreeGender,",
						"          Veteran,",
						"          LGTBQ,",
						"          DisabilityInd,",
						"          BirthYear,",
						"          Generation,",
						"          GenerationSortId,",
						"          EmpCount,",
						"          ElloreeHispanicLatinoOrigin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHCTCleanup",
						"OtherCore filter(EventType=='Impact - Reach Qtrly Goals') ~> filter2",
						"FilterSurveyGoalsImpactReach1P select(mapColumn(",
						"          WorkerId,",
						"          {Goals 1P (Impact Reach) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsImpactReach1P",
						"OtherCore filter(EventType=='Impact - Seize Opportunities') ~> filter3",
						"FilterSurveyGoalsSeize1P select(mapColumn(",
						"          WorkerId,",
						"          {Goals 1P (Seize Opp) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsSeizeOpp1P",
						"SelectHCTCleanup, SelectGoalsCurr join(SelectHCTCleanup@WorkerId == SelectGoalsCurr@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalValCurr",
						"JoinGoalValCurr, SelectGoalsSeizeOpp1P join(SelectHCTCleanup@WorkerId == SelectGoalsSeizeOpp1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactSeize1P",
						"filter3, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsSeize1P",
						"filter3, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsSeize2P",
						"FilterSurveyGoalsSeize2P select(mapColumn(",
						"          WorkerId,",
						"          {Goals 2P (Seize Opp) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsSeizeOpp2P",
						"filter2, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsImpactReach1P",
						"filter2, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsSeize2PVal",
						"FilterSurveyGoalsSeize2PVal select(mapColumn(",
						"          WorkerId,",
						"          {Goals 2P (Impact Reach) } = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGoalsImpactReach2P",
						"FilterSurveyGoals, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyGoalsCurr",
						"FilterValues, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyValuesCurr",
						"JoinElloreeGender, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentTag",
						"FilterSurveyValuesCulture, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyValuesCulture1P",
						"FilterSurveyValuesCulture, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterSurveyValuesCulture2P",
						"FilterSurveyValuesCulture2P select(mapColumn(",
						"          WorkerId,",
						"          {Values 2P (Culture and Values)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesCulture2P",
						"OtherCore filter(EventType=='Values - Works collaboratively') ~> FilterValuesWorksCollab",
						"FilterValuesWorksCollab, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterValuesWorksCollab1PYear",
						"FilterValuesWorksCollab1PYear select(mapColumn(",
						"          WorkerId,",
						"          {Values 1P (Works Collaboratively)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesWorksCollab1PYear",
						"FilterValuesWorksCollab, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterValuesWorksCollab2PYear",
						"FilterValuesWorksCollab2PYear select(mapColumn(",
						"          WorkerId,",
						"          {Values 2P (Works Collaboratively)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectValuesWorksCollab2PYear",
						"OtherCore filter(EventType=='Potential') ~> FilterPotential",
						"FilterPotential, SelectCurrYear join(EventYear == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialCurr",
						"FilterPotentialCurr select(mapColumn(",
						"          WorkerId,",
						"          {Potential Curr} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialCurr",
						"OtherCore filter(EventType=='G&P - Broader Responsibilities') ~> FilterPotentialBroaderResp",
						"FilterPotentialBroaderResp, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialBroadResp1P",
						"FilterPotentialBroadResp1P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 1P (G&P - Broader Responsibilities)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialBroadResp1P",
						"FilterPotentialBroaderResp, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialBroadResp2P",
						"FilterPotentialBroadResp2P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 2P (G&P - Broader Responsibilities)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialBroadResp2P",
						"OtherCore filter(EventType=='G&P - Learning and Innovation') ~> FilterPotentialLearningInnov",
						"FilterPotentialLearningInnov, Select2PYear join(EventYear == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialLearnInnov2P",
						"FilterPotentialLearnInnov2P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 2P (G&P - Learning and Innovation)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialLearnInnov2P",
						"FilterPotentialLearningInnov, Select1PYear join(EventYear == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FilterPotentialLearnInnov1P",
						"FilterPotentialLearnInnov1P select(mapColumn(",
						"          WorkerId,",
						"          {Potential 1P (G&P - Learning and Innovation)} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPotentialLearnInnov1P",
						"JoinGoalImpactSeize1P, SelectGoalsSeizeOpp2P join(SelectHCTCleanup@WorkerId == SelectGoalsSeizeOpp2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactSeize2P",
						"JoinGoalImpactSeize2P, SelectGoalsImpactReach1P join(SelectHCTCleanup@WorkerId == SelectGoalsImpactReach1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactReach1P",
						"JoinGoalImpactReach1P, SelectGoalsImpactReach2P join(SelectHCTCleanup@WorkerId == SelectGoalsImpactReach2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGoalImpactReach2P",
						"JoinGoalImpactReach2P, SelectValuesCurr join(SelectHCTCleanup@WorkerId == SelectValuesCurr@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesCurr",
						"JoinValuesCurr, SelectValuesCulture1P join(SelectHCTCleanup@WorkerId == SelectValuesCulture1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesCulture1P",
						"JoinValuesCulture1P, SelectValuesCulture2P join(SelectHCTCleanup@WorkerId == SelectValuesCulture2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesCulture2P",
						"JoinValuesCulture2P, SelectValuesWorksCollab1PYear join(SelectHCTCleanup@WorkerId == SelectValuesWorksCollab1PYear@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesWorksCollab1PYear",
						"JoinValuesWorksCollab1PYear, SelectValuesWorksCollab2PYear join(SelectHCTCleanup@WorkerId == SelectValuesWorksCollab2PYear@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinValuesWorksCollab2PYear",
						"JoinValuesWorksCollab2PYear, SelectPotentialCurr join(SelectHCTCleanup@WorkerId == SelectPotentialCurr@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialCurr",
						"JoinPotentialCurr, SelectPotentialBroadResp1P join(SelectHCTCleanup@WorkerId == SelectPotentialBroadResp1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialBroadResp1P",
						"JoinPotentialBroadResp1P, SelectPotentialBroadResp2P join(SelectHCTCleanup@WorkerId == SelectPotentialBroadResp2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialBroadResp2P",
						"JoinPotentialBroadResp2P, SelectPotentialLearnInnov1P join(SelectHCTCleanup@WorkerId == SelectPotentialLearnInnov1P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialLearnInnov1P",
						"JoinPotentialLearnInnov1P, SelectPotentialLearnInnov2P join(SelectHCTCleanup@WorkerId == SelectPotentialLearnInnov2P@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPotentialLearnInnov2P",
						"join1 select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId = SelectHCTCleanup@WorkerId,",
						"          EventDt,",
						"          EventMonth,",
						"          EventQuarter,",
						"          EventYear,",
						"          Event,",
						"          EventId,",
						"          EventType,",
						"          EventReason,",
						"          WorkerStatus,",
						"          WorkerType,",
						"          JobTitle,",
						"          JobFunction,",
						"          YearsinJob,",
						"          PrevJobTitle,",
						"          PrevJobFunction,",
						"          LastPromoDt,",
						"          OrigHireDt,",
						"          CurrHireDt,",
						"          RehireInd,",
						"          YearsofSrvc,",
						"          YearsofSrvcBand,",
						"          YearsofSrvcBandSortId,",
						"          CorpTitle,",
						"          PrevCorpTitle,",
						"          ManagerInd,",
						"          DirectMgrWorkerId,",
						"          MgrCount,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd,",
						"          LegacyOrg,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4,",
						"          Race,",
						"          ElloreeRace,",
						"          HispanicLatinoOrigin,",
						"          Gender,",
						"          ElloreeGender,",
						"          Veteran,",
						"          LGTBQ,",
						"          DisabilityInd,",
						"          BirthYear,",
						"          Generation,",
						"          GenerationSortId,",
						"          ElloreeHispanicLatinoOrigin,",
						"          {Goals Curr},",
						"          {Goals 1P (Seize Opp) },",
						"          {Goals 2P (Seize Opp) },",
						"          {Goals 1P (Impact Reach) },",
						"          {Goals 2P (Impact Reach) },",
						"          {Values Curr},",
						"          {Values 1P (Culture and Values)},",
						"          {Values 2P (Culture and Values)},",
						"          {Values 1P (Works Collaboratively)},",
						"          {Values 2P (Works Collaboratively)},",
						"          {Potential Curr},",
						"          {Potential 1P (G&P - Broader Responsibilities)},",
						"          {Potential 2P (G&P - Broader Responsibilities)},",
						"          {Potential 1P (G&P - Learning and Innovation)},",
						"          {Potential 2P (G&P - Learning and Innovation)},",
						"          {Emp Perf Rating Curr Talent Tag},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"JoinPotentialLearnInnov2P, SelectEmpTalentTag join(SelectHCTCleanup@WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectFinalOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['Evergreen_Adhoc1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutPutFactTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentEthnicityMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentGenderMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Adhoc_OtherFact_Evergreen_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Adhoc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T1OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T2OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T3OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T4OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T5OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T6OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T7OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T8OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T9OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T10OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T11OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T12OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T13OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T14OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T15OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T16OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T17OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T18OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T19OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T20OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T21OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T22OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T23OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T24OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T25OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T26OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T27OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T28OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T29OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T30OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T31OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T32OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T33OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T34OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T35OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T36OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T37OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T38OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T39OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T40OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T41OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T42OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T43OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T44OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T45OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T46OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T47OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T48OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T49OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "T50OtherCore"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFullPop"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinT1"
						},
						{
							"name": "joinT2"
						},
						{
							"name": "joinT3"
						},
						{
							"name": "joinT4"
						},
						{
							"name": "joinT5"
						},
						{
							"name": "join1"
						},
						{
							"name": "joinT7"
						},
						{
							"name": "joinT8"
						},
						{
							"name": "joinT9"
						},
						{
							"name": "joinT10"
						},
						{
							"name": "joinT11"
						},
						{
							"name": "joinT12"
						},
						{
							"name": "joinT13"
						},
						{
							"name": "joinT14"
						},
						{
							"name": "joinT15"
						},
						{
							"name": "joinT16"
						},
						{
							"name": "joinT17"
						},
						{
							"name": "joinT18"
						},
						{
							"name": "joinT19"
						},
						{
							"name": "joinT20"
						},
						{
							"name": "joinT21"
						},
						{
							"name": "joinT22"
						},
						{
							"name": "joinT23"
						},
						{
							"name": "joinT24"
						},
						{
							"name": "joinT25"
						},
						{
							"name": "joinT26"
						},
						{
							"name": "joinT27"
						},
						{
							"name": "joinT28"
						},
						{
							"name": "joinT29"
						},
						{
							"name": "joinT30"
						},
						{
							"name": "joinT31"
						},
						{
							"name": "joinT32"
						},
						{
							"name": "joinT33"
						},
						{
							"name": "joinT34"
						},
						{
							"name": "joinT35"
						},
						{
							"name": "joinT36"
						},
						{
							"name": "joinT37"
						},
						{
							"name": "joinT38"
						},
						{
							"name": "joinT39"
						},
						{
							"name": "join40"
						},
						{
							"name": "joinT41"
						},
						{
							"name": "joinT42"
						},
						{
							"name": "joinT43"
						},
						{
							"name": "joinT44"
						},
						{
							"name": "joinT45"
						},
						{
							"name": "joinT46"
						},
						{
							"name": "joinT47"
						},
						{
							"name": "joinT48"
						},
						{
							"name": "joinT49"
						},
						{
							"name": "joinT50"
						},
						{
							"name": "SelectCleanup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     T1_Event_Type as string,",
						"     T1_Event_Year as string,",
						"     T1_Event_Qtr as string,",
						"     T2_Event_Type as string,",
						"     T2_Event_Year as string,",
						"     T2_Event_Qtr as string,",
						"     T3_Event_Type as string,",
						"     T3_Event_Year as string,",
						"     T3_Event_Qtr as string,",
						"     T4_Event_Type as string,",
						"     T4_Event_Year as string,",
						"     T4_Event_Qtr as string,",
						"     T5_Event_Type as string,",
						"     T5_Event_Year as string,",
						"     T5_Event_Qtr as string,",
						"     T6_Event_Type as string,",
						"     T6_Event_Year as string,",
						"     T6_Event_Qtr as string,",
						"     T7_Event_Type as string,",
						"     T7_Event_Year as string,",
						"     T7_Event_Qtr as string,",
						"     T8_Event_Type as string,",
						"     T8_Event_Year as string,",
						"     T8_Event_Qtr as string,",
						"     T9_Event_Type as string,",
						"     T9_Event_Year as string,",
						"     T9_Event_Qtr as string,",
						"     T10_Event_Type as string,",
						"     T10_Event_Year as string,",
						"     T10_Event_Qtr as string,",
						"     T11_Event_Type as string,",
						"     T11_Event_Year as string,",
						"     T11_Event_Qtr as string,",
						"     T12_Event_Type as string,",
						"     T12_Event_Year as string,",
						"     T12_Event_Qtr as string,",
						"     T13_Event_Type as string,",
						"     T13_Event_Year as string,",
						"     T13_Event_Qtr as string,",
						"     T14_Event_Type as string,",
						"     T14_Event_Year as string,",
						"     T14_Event_Qtr as string,",
						"     T15_Event_Type as string,",
						"     T15_Event_Year as string,",
						"     T15_Event_Qtr as string,",
						"     T16_Event_Type as string,",
						"     T16_Event_Year as string,",
						"     T16_Event_Qtr as string,",
						"     T17_Event_Type as string,",
						"     T17_Event_Year as string,",
						"     T17_Event_Qtr as string,",
						"     T18_Event_Type as string,",
						"     T18_Event_Year as string,",
						"     T18_Event_Qtr as string,",
						"     T19_Event_Type as string,",
						"     T19_Event_Year as string,",
						"     T19_Event_Qtr as string,",
						"     T20_Event_Type as string,",
						"     T20_Event_Year as string,",
						"     T20_Event_Qtr as string,",
						"     T21_Event_Type as string,",
						"     T21_Event_Year as string,",
						"     T21_Event_Qtr as string,",
						"     T22_Event_Type as string,",
						"     T22_Event_Year as string,",
						"     T22_Event_Qtr as string,",
						"     T23_Event_Type as string,",
						"     T23_Event_Year as string,",
						"     T23_Event_Qtr as string,",
						"     T24_Event_Type as string,",
						"     T24_Event_Year as string,",
						"     T24_Event_Qtr as string,",
						"     T25_Event_Type as string,",
						"     T25_Event_Year as string,",
						"     T25_Event_Qtr as string,",
						"     T26_Event_Type as string,",
						"     T26_Event_Year as string,",
						"     T26_Event_Qtr as string,",
						"     T27_Event_Type as string,",
						"     T27_Event_Year as string,",
						"     T27_Event_Qtr as string,",
						"     T28_Event_Type as string,",
						"     T28_Event_Year as string,",
						"     T28_Event_Qtr as string,",
						"     T29_Event_Type as string,",
						"     T29_Event_Year as string,",
						"     T29_Event_Qtr as string,",
						"     T30_Event_Type as string,",
						"     T30_Event_Year as string,",
						"     T30_Event_Qtr as string,",
						"     T31_Event_Type as string,",
						"     T31_Event_Year as string,",
						"     T31_Event_Qtr as string,",
						"     T32_Event_Type as string,",
						"     T32_Event_Year as string,",
						"     T32_Event_Qtr as string,",
						"     T33_Event_Type as string,",
						"     T33_Event_Year as string,",
						"     T33_Event_Qtr as string,",
						"     T34_Event_Type as string,",
						"     T34_Event_Year as string,",
						"     T34_Event_Qtr as string,",
						"     T35_Event_Type as string,",
						"     T35_Event_Year as string,",
						"     T35_Event_Qtr as string,",
						"     T36_Event_Type as string,",
						"     T36_Event_Year as string,",
						"     T36_Event_Qtr as string,",
						"     T37_Event_Type as string,",
						"     T37_Event_Year as string,",
						"     T37_Event_Qtr as string,",
						"     T38_Event_Type as string,",
						"     T38_Event_Year as string,",
						"     T38_Event_Qtr as string,",
						"     T39_Event_Type as string,",
						"     T39_Event_Year as string,",
						"     T39_Event_Qtr as string,",
						"     T40_Event_Type as string,",
						"     T40_Event_Year as string,",
						"     T40_Event_Qtr as string,",
						"     T41_Event_Type as string,",
						"     T41_Event_Year as string,",
						"     T41_Event_Qtr as string,",
						"     T42_Event_Type as string,",
						"     T42_Event_Year as string,",
						"     T42_Event_Qtr as string,",
						"     T43_Event_Type as string,",
						"     T43_Event_Year as string,",
						"     T43_Event_Qtr as string,",
						"     T44_Event_Type as string,",
						"     T44_Event_Year as string,",
						"     T44_Event_Qtr as string,",
						"     T45_Event_Type as string,",
						"     T45_Event_Year as string,",
						"     T45_Event_Qtr as string,",
						"     T46_Event_Type as string,",
						"     T46_Event_Year as string,",
						"     T46_Event_Qtr as string,",
						"     T47_Event_Type as string,",
						"     T47_Event_Year as string,",
						"     T47_Event_Qtr as string,",
						"     T48_Event_Type as string,",
						"     T48_Event_Year as string,",
						"     T48_Event_Qtr as string,",
						"     T49_Event_Type as string,",
						"     T49_Event_Year as string,",
						"     T49_Event_Qtr as string,",
						"     T50_Event_Type as string,",
						"     T50_Event_Year as string,",
						"     T50_Event_Qtr as string",
						"}",
						"source(output(",
						"          T1_WorkerId as string,",
						"          T1_EventType as string,",
						"          T1_CharVal1 as string,",
						"          T1_CharVal2 as string,",
						"          T1_NumVal1 as double,",
						"          T1_NumVal2 as double,",
						"          T1_DtVal1 as date,",
						"          T1_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T1_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T1_EventType,OtherCharVal11 T1_CharVal1,OtherCharVal2 T1_CharVal2,OtherNumVal1 as T1_NumVal1,OtherNumVal2 as T1_NumVal2,OtherDtVal1 as T1_DtVal1,OtherDtVal2 as T1_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T1_Event_Type}' and EventYear = '{$T1_Event_Year}' and EventQuarter = '{$T1_Event_Qtr}'\"),",
						"     format: 'query') ~> T1OtherCore",
						"source(output(",
						"          T2_WorkerId as string,",
						"          T2_EventType as string,",
						"          T2_CharVal1 as string,",
						"          T2_CharVal2 as string,",
						"          T2_NumVal1 as double,",
						"          T2_NumVal2 as double,",
						"          T2_DtVal1 as date,",
						"          T2_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T2_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T2_EventType,OtherCharVal11 T2_CharVal1,OtherCharVal2 T2_CharVal2,OtherNumVal1 as T2_NumVal1,OtherNumVal2 as T2_NumVal2,OtherDtVal1 as T2_DtVal1,OtherDtVal2 as T2_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T2_Event_Type}' and EventYear = '{$T2_Event_Year}' and EventQuarter = '{$T2_Event_Qtr}'\"),",
						"     format: 'query') ~> T2OtherCore",
						"source(output(",
						"          T3_WorkerId as string,",
						"          T3_EventType as string,",
						"          T3_CharVal1 as string,",
						"          T3_CharVal2 as string,",
						"          T3_NumVal1 as double,",
						"          T3_NumVal2 as double,",
						"          T3_DtVal1 as date,",
						"          T3_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T3_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T3_EventType,OtherCharVal11 T3_CharVal1,OtherCharVal2 T3_CharVal2,OtherNumVal1 as T3_NumVal1,OtherNumVal2 as T3_NumVal2,OtherDtVal1 as T3_DtVal1,OtherDtVal2 as T3_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T3_Event_Type}' and EventYear = '{$T3_Event_Year}' and EventQuarter = '{$T3_Event_Qtr}'\"),",
						"     format: 'query') ~> T3OtherCore",
						"source(output(",
						"          T4_WorkerId as string,",
						"          T4_EventType as string,",
						"          T4_CharVal1 as string,",
						"          T4_CharVal2 as string,",
						"          T4_NumVal1 as double,",
						"          T4_NumVal2 as double,",
						"          T4_DtVal1 as date,",
						"          T4_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T4_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T4_EventType,OtherCharVal11 T4_CharVal1,OtherCharVal2 T4_CharVal2,OtherNumVal1 as T4_NumVal1,OtherNumVal2 as T4_NumVal2,OtherDtVal1 as T4_DtVal1,OtherDtVal2 as T4_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T4_Event_Type}' and EventYear = '{$T4_Event_Year}' and EventQuarter = '{$T4_Event_Qtr}'\"),",
						"     format: 'query') ~> T4OtherCore",
						"source(output(",
						"          T5_WorkerId as string,",
						"          T5_EventType as string,",
						"          T5_CharVal1 as string,",
						"          T5_CharVal2 as string,",
						"          T5_NumVal1 as double,",
						"          T5_NumVal2 as double,",
						"          T5_DtVal1 as date,",
						"          T5_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T5_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T5_EventType,OtherCharVal11 T5_CharVal1,OtherCharVal2 T5_CharVal2,OtherNumVal1 as T5_NumVal1,OtherNumVal2 as T5_NumVal2,OtherDtVal1 as T5_DtVal1,OtherDtVal2 as T5_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T5_Event_Type}' and EventYear = '{$T5_Event_Year}' and EventQuarter = '{$T5_Event_Qtr}'\"),",
						"     format: 'query') ~> T5OtherCore",
						"source(output(",
						"          T6_WorkerId as string,",
						"          T6_EventType as string,",
						"          T6_CharVal1 as string,",
						"          T6_CharVal2 as string,",
						"          T6_NumVal1 as double,",
						"          T6_NumVal2 as double,",
						"          T6_DtVal1 as date,",
						"          T6_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T6_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T6_EventType,OtherCharVal11 T6_CharVal1,OtherCharVal2 T6_CharVal2,OtherNumVal1 as T6_NumVal1,OtherNumVal2 as T6_NumVal2,OtherDtVal1 as T6_DtVal1,OtherDtVal2 as T6_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T6_Event_Type}' and EventYear = '{$T6_Event_Year}' and EventQuarter = '{$T6_Event_Qtr}'\"),",
						"     format: 'query') ~> T6OtherCore",
						"source(output(",
						"          T7_WorkerId as string,",
						"          T7_EventType as string,",
						"          T7_CharVal1 as string,",
						"          T7_CharVal2 as string,",
						"          T7_NumVal1 as double,",
						"          T7_NumVal2 as double,",
						"          T7_DtVal1 as date,",
						"          T7_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T7_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T7_EventType,OtherCharVal11 T7_CharVal1,OtherCharVal2 T7_CharVal2,OtherNumVal1 as T7_NumVal1,OtherNumVal2 as T7_NumVal2,OtherDtVal1 as T7_DtVal1,OtherDtVal2 as T7_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T7_Event_Type}' and EventYear = '{$T7_Event_Year}' and EventQuarter = '{$T7_Event_Qtr}'\"),",
						"     format: 'query') ~> T7OtherCore",
						"source(output(",
						"          T8_WorkerId as string,",
						"          T8_EventType as string,",
						"          T8_CharVal1 as string,",
						"          T8_CharVal2 as string,",
						"          T8_NumVal1 as double,",
						"          T8_NumVal2 as double,",
						"          T8_DtVal1 as date,",
						"          T8_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T8_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T8_EventType,OtherCharVal11 T8_CharVal1,OtherCharVal2 T8_CharVal2,OtherNumVal1 as T8_NumVal1,OtherNumVal2 as T8_NumVal2,OtherDtVal1 as T8_DtVal1,OtherDtVal2 as T8_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T8_Event_Type}' and EventYear = '{$T8_Event_Year}' and EventQuarter = '{$T8_Event_Qtr}'\"),",
						"     format: 'query') ~> T8OtherCore",
						"source(output(",
						"          T9_WorkerId as string,",
						"          T9_EventType as string,",
						"          T9_CharVal1 as string,",
						"          T9_CharVal2 as string,",
						"          T9_NumVal1 as double,",
						"          T9_NumVal2 as double,",
						"          T9_DtVal1 as date,",
						"          T9_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T9_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T9_EventType,OtherCharVal11 T9_CharVal1,OtherCharVal2 T9_CharVal2,OtherNumVal1 as T9_NumVal1,OtherNumVal2 as T9_NumVal2,OtherDtVal1 as T9_DtVal1,OtherDtVal2 as T9_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T9_Event_Type}' and EventYear = '{$T9_Event_Year}' and EventQuarter = '{$T9_Event_Qtr}'\"),",
						"     format: 'query') ~> T9OtherCore",
						"source(output(",
						"          T10_WorkerId as string,",
						"          T10_EventType as string,",
						"          T10_CharVal1 as string,",
						"          T10_CharVal2 as string,",
						"          T10_NumVal1 as double,",
						"          T10_NumVal2 as double,",
						"          T10_DtVal1 as date,",
						"          T10_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T10_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T10_EventType,OtherCharVal11 T10_CharVal1,OtherCharVal2 T10_CharVal2,OtherNumVal1 as T10_NumVal1,OtherNumVal2 as T10_NumVal2,OtherDtVal1 as T10_DtVal1,OtherDtVal2 as T10_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T10_Event_Type}' and EventYear = '{$T10_Event_Year}' and EventQuarter = '{$T10_Event_Qtr}'\"),",
						"     format: 'query') ~> T10OtherCore",
						"source(output(",
						"          T11_WorkerId as string,",
						"          T11_EventType as string,",
						"          T11_CharVal1 as string,",
						"          T11_CharVal2 as string,",
						"          T11_NumVal1 as double,",
						"          T11_NumVal2 as double,",
						"          T11_DtVal1 as date,",
						"          T11_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T11_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T11_EventType,OtherCharVal11 T11_CharVal1,OtherCharVal2 T11_CharVal2,OtherNumVal1 as T11_NumVal1,OtherNumVal2 as T11_NumVal2,OtherDtVal1 as T11_DtVal1,OtherDtVal2 as T11_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T11_Event_Type}' and EventYear = '{$T11_Event_Year}' and EventQuarter = '{$T11_Event_Qtr}'\"),",
						"     format: 'query') ~> T11OtherCore",
						"source(output(",
						"          T12_WorkerId as string,",
						"          T12_EventType as string,",
						"          T12_CharVal1 as string,",
						"          T12_CharVal2 as string,",
						"          T12_NumVal1 as double,",
						"          T12_NumVal2 as double,",
						"          T12_DtVal1 as date,",
						"          T12_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T12_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T12_EventType,OtherCharVal11 T12_CharVal1,OtherCharVal2 T12_CharVal2,OtherNumVal1 as T12_NumVal1,OtherNumVal2 as T12_NumVal2,OtherDtVal1 as T12_DtVal1,OtherDtVal2 as T12_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T12_Event_Type}' and EventYear = '{$T12_Event_Year}' and EventQuarter = '{$T12_Event_Qtr}'\"),",
						"     format: 'query') ~> T12OtherCore",
						"source(output(",
						"          T13_WorkerId as string,",
						"          T13_EventType as string,",
						"          T13_CharVal1 as string,",
						"          T13_CharVal2 as string,",
						"          T13_NumVal1 as double,",
						"          T13_NumVal2 as double,",
						"          T13_DtVal1 as date,",
						"          T13_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T13_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T13_EventType,OtherCharVal11 T13_CharVal1,OtherCharVal2 T13_CharVal2,OtherNumVal1 as T13_NumVal1,OtherNumVal2 as T13_NumVal2,OtherDtVal1 as T13_DtVal1,OtherDtVal2 as T13_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T13_Event_Type}' and EventYear = '{$T13_Event_Year}' and EventQuarter = '{$T13_Event_Qtr}'\"),",
						"     format: 'query') ~> T13OtherCore",
						"source(output(",
						"          T14_WorkerId as string,",
						"          T14_EventType as string,",
						"          T14_CharVal1 as string,",
						"          T14_CharVal2 as string,",
						"          T14_NumVal1 as double,",
						"          T14_NumVal2 as double,",
						"          T14_DtVal1 as date,",
						"          T14_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T14_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T14_EventType,OtherCharVal11 T14_CharVal1,OtherCharVal2 T14_CharVal2,OtherNumVal1 as T14_NumVal1,OtherNumVal2 as T14_NumVal2,OtherDtVal1 as T14_DtVal1,OtherDtVal2 as T14_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T14_Event_Type}' and EventYear = '{$T14_Event_Year}' and EventQuarter = '{$T14_Event_Qtr}'\"),",
						"     format: 'query') ~> T14OtherCore",
						"source(output(",
						"          T15_WorkerId as string,",
						"          T15_EventType as string,",
						"          T15_CharVal1 as string,",
						"          T15_CharVal2 as string,",
						"          T15_NumVal1 as double,",
						"          T15_NumVal2 as double,",
						"          T15_DtVal1 as date,",
						"          T15_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T15_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T15_EventType,OtherCharVal11 T15_CharVal1,OtherCharVal2 T15_CharVal2,OtherNumVal1 as T15_NumVal1,OtherNumVal2 as T15_NumVal2,OtherDtVal1 as T15_DtVal1,OtherDtVal2 as T15_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T15_Event_Type}' and EventYear = '{$T15_Event_Year}' and EventQuarter = '{$T15_Event_Qtr}'\"),",
						"     format: 'query') ~> T15OtherCore",
						"source(output(",
						"          T16_WorkerId as string,",
						"          T16_EventType as string,",
						"          T16_CharVal1 as string,",
						"          T16_CharVal2 as string,",
						"          T16_NumVal1 as double,",
						"          T16_NumVal2 as double,",
						"          T16_DtVal1 as date,",
						"          T16_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T16_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T16_EventType,OtherCharVal11 T16_CharVal1,OtherCharVal2 T16_CharVal2,OtherNumVal1 as T16_NumVal1,OtherNumVal2 as T16_NumVal2,OtherDtVal1 as T16_DtVal1,OtherDtVal2 as T16_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T16_Event_Type}' and EventYear = '{$T16_Event_Year}' and EventQuarter = '{$T16_Event_Qtr}'\"),",
						"     format: 'query') ~> T16OtherCore",
						"source(output(",
						"          T17_WorkerId as string,",
						"          T17_EventType as string,",
						"          T17_CharVal1 as string,",
						"          T17_CharVal2 as string,",
						"          T17_NumVal1 as double,",
						"          T17_NumVal2 as double,",
						"          T17_DtVal1 as date,",
						"          T17_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T17_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T17_EventType,OtherCharVal11 T17_CharVal1,OtherCharVal2 T17_CharVal2,OtherNumVal1 as T17_NumVal1,OtherNumVal2 as T17_NumVal2,OtherDtVal1 as T17_DtVal1,OtherDtVal2 as T17_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T17_Event_Type}' and EventYear = '{$T17_Event_Year}' and EventQuarter = '{$T17_Event_Qtr}'\"),",
						"     format: 'query') ~> T17OtherCore",
						"source(output(",
						"          T18_WorkerId as string,",
						"          T18_EventType as string,",
						"          T18_CharVal1 as string,",
						"          T18_CharVal2 as string,",
						"          T18_NumVal1 as double,",
						"          T18_NumVal2 as double,",
						"          T18_DtVal1 as date,",
						"          T18_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T18_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T18_EventType,OtherCharVal11 T18_CharVal1,OtherCharVal2 T18_CharVal2,OtherNumVal1 as T18_NumVal1,OtherNumVal2 as T18_NumVal2,OtherDtVal1 as T18_DtVal1,OtherDtVal2 as T18_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T18_Event_Type}' and EventYear = '{$T18_Event_Year}' and EventQuarter = '{$T18_Event_Qtr}'\"),",
						"     format: 'query') ~> T18OtherCore",
						"source(output(",
						"          T19_WorkerId as string,",
						"          T19_EventType as string,",
						"          T19_CharVal1 as string,",
						"          T19_CharVal2 as string,",
						"          T19_NumVal1 as double,",
						"          T19_NumVal2 as double,",
						"          T19_DtVal1 as date,",
						"          T19_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T19_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T19_EventType,OtherCharVal11 T19_CharVal1,OtherCharVal2 T19_CharVal2,OtherNumVal1 as T19_NumVal1,OtherNumVal2 as T19_NumVal2,OtherDtVal1 as T19_DtVal1,OtherDtVal2 as T19_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T19_Event_Type}' and EventYear = '{$T19_Event_Year}' and EventQuarter = '{$T19_Event_Qtr}'\"),",
						"     format: 'query') ~> T19OtherCore",
						"source(output(",
						"          T20_WorkerId as string,",
						"          T20_EventType as string,",
						"          T20_CharVal1 as string,",
						"          T20_CharVal2 as string,",
						"          T20_NumVal1 as double,",
						"          T20_NumVal2 as double,",
						"          T20_DtVal1 as date,",
						"          T20_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T20_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T20_EventType,OtherCharVal11 T20_CharVal1,OtherCharVal2 T20_CharVal2,OtherNumVal1 as T20_NumVal1,OtherNumVal2 as T20_NumVal2,OtherDtVal1 as T20_DtVal1,OtherDtVal2 as T20_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T20_Event_Type}' and EventYear = '{$T20_Event_Year}' and EventQuarter = '{$T20_Event_Qtr}'\"),",
						"     format: 'query') ~> T20OtherCore",
						"source(output(",
						"          T21_WorkerId as string,",
						"          T21_EventType as string,",
						"          T21_CharVal1 as string,",
						"          T21_CharVal2 as string,",
						"          T21_NumVal1 as double,",
						"          T21_NumVal2 as double,",
						"          T21_DtVal1 as date,",
						"          T21_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T21_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T21_EventType,OtherCharVal11 T21_CharVal1,OtherCharVal2 T21_CharVal2,OtherNumVal1 as T21_NumVal1,OtherNumVal2 as T21_NumVal2,OtherDtVal1 as T21_DtVal1,OtherDtVal2 as T21_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T21_Event_Type}' and EventYear = '{$T21_Event_Year}' and EventQuarter = '{$T21_Event_Qtr}'\"),",
						"     format: 'query') ~> T21OtherCore",
						"source(output(",
						"          T22_WorkerId as string,",
						"          T22_EventType as string,",
						"          T22_CharVal1 as string,",
						"          T22_CharVal2 as string,",
						"          T22_NumVal1 as double,",
						"          T22_NumVal2 as double,",
						"          T22_DtVal1 as date,",
						"          T22_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T22_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T22_EventType,OtherCharVal11 T22_CharVal1,OtherCharVal2 T22_CharVal2,OtherNumVal1 as T22_NumVal1,OtherNumVal2 as T22_NumVal2,OtherDtVal1 as T22_DtVal1,OtherDtVal2 as T22_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T22_Event_Type}' and EventYear = '{$T22_Event_Year}' and EventQuarter = '{$T22_Event_Qtr}'\"),",
						"     format: 'query') ~> T22OtherCore",
						"source(output(",
						"          T23_WorkerId as string,",
						"          T23_EventType as string,",
						"          T23_CharVal1 as string,",
						"          T23_CharVal2 as string,",
						"          T23_NumVal1 as double,",
						"          T23_NumVal2 as double,",
						"          T23_DtVal1 as date,",
						"          T23_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T23_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T23_EventType,OtherCharVal11 T23_CharVal1,OtherCharVal2 T23_CharVal2,OtherNumVal1 as T23_NumVal1,OtherNumVal2 as T23_NumVal2,OtherDtVal1 as T23_DtVal1,OtherDtVal2 as T23_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T23_Event_Type}' and EventYear = '{$T23_Event_Year}' and EventQuarter = '{$T23_Event_Qtr}'\"),",
						"     format: 'query') ~> T23OtherCore",
						"source(output(",
						"          T24_WorkerId as string,",
						"          T24_EventType as string,",
						"          T24_CharVal1 as string,",
						"          T24_CharVal2 as string,",
						"          T24_NumVal1 as double,",
						"          T24_NumVal2 as double,",
						"          T24_DtVal1 as date,",
						"          T24_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T24_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T24_EventType,OtherCharVal11 T24_CharVal1,OtherCharVal2 T24_CharVal2,OtherNumVal1 as T24_NumVal1,OtherNumVal2 as T24_NumVal2,OtherDtVal1 as T24_DtVal1,OtherDtVal2 as T24_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T24_Event_Type}' and EventYear = '{$T24_Event_Year}' and EventQuarter = '{$T24_Event_Qtr}'\"),",
						"     format: 'query') ~> T24OtherCore",
						"source(output(",
						"          T25_WorkerId as string,",
						"          T25_EventType as string,",
						"          T25_CharVal1 as string,",
						"          T25_CharVal2 as string,",
						"          T25_NumVal1 as double,",
						"          T25_NumVal2 as double,",
						"          T25_DtVal1 as date,",
						"          T25_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T25_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T25_EventType,OtherCharVal11 T25_CharVal1,OtherCharVal2 T25_CharVal2,OtherNumVal1 as T25_NumVal1,OtherNumVal2 as T25_NumVal2,OtherDtVal1 as T25_DtVal1,OtherDtVal2 as T25_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T25_Event_Type}' and EventYear = '{$T25_Event_Year}' and EventQuarter = '{$T25_Event_Qtr}'\"),",
						"     format: 'query') ~> T25OtherCore",
						"source(output(",
						"          T26_WorkerId as string,",
						"          T26_EventType as string,",
						"          T26_CharVal1 as string,",
						"          T26_CharVal2 as string,",
						"          T26_NumVal1 as double,",
						"          T26_NumVal2 as double,",
						"          T26_DtVal1 as date,",
						"          T26_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T26_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T26_EventType,OtherCharVal11 T26_CharVal1,OtherCharVal2 T26_CharVal2,OtherNumVal1 as T26_NumVal1,OtherNumVal2 as T26_NumVal2,OtherDtVal1 as T26_DtVal1,OtherDtVal2 as T26_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T26_Event_Type}' and EventYear = '{$T26_Event_Year}' and EventQuarter = '{$T26_Event_Qtr}'\"),",
						"     format: 'query') ~> T26OtherCore",
						"source(output(",
						"          T27_WorkerId as string,",
						"          T27_EventType as string,",
						"          T27_CharVal1 as string,",
						"          T27_CharVal2 as string,",
						"          T27_NumVal1 as double,",
						"          T27_NumVal2 as double,",
						"          T27_DtVal1 as date,",
						"          T27_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T27_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T27_EventType,OtherCharVal11 T27_CharVal1,OtherCharVal2 T27_CharVal2,OtherNumVal1 as T27_NumVal1,OtherNumVal2 as T27_NumVal2,OtherDtVal1 as T27_DtVal1,OtherDtVal2 as T27_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T27_Event_Type}' and EventYear = '{$T27_Event_Year}' and EventQuarter = '{$T27_Event_Qtr}'\"),",
						"     format: 'query') ~> T27OtherCore",
						"source(output(",
						"          T28_WorkerId as string,",
						"          T28_EventType as string,",
						"          T28_CharVal1 as string,",
						"          T28_CharVal2 as string,",
						"          T28_NumVal1 as double,",
						"          T28_NumVal2 as double,",
						"          T28_DtVal1 as date,",
						"          T28_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T28_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T28_EventType,OtherCharVal11 T28_CharVal1,OtherCharVal2 T28_CharVal2,OtherNumVal1 as T28_NumVal1,OtherNumVal2 as T28_NumVal2,OtherDtVal1 as T28_DtVal1,OtherDtVal2 as T28_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T28_Event_Type}' and EventYear = '{$T28_Event_Year}' and EventQuarter = '{$T28_Event_Qtr}'\"),",
						"     format: 'query') ~> T28OtherCore",
						"source(output(",
						"          T29_WorkerId as string,",
						"          T29_EventType as string,",
						"          T29_CharVal1 as string,",
						"          T29_CharVal2 as string,",
						"          T29_NumVal1 as double,",
						"          T29_NumVal2 as double,",
						"          T29_DtVal1 as date,",
						"          T29_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T29_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T29_EventType,OtherCharVal11 T29_CharVal1,OtherCharVal2 T29_CharVal2,OtherNumVal1 as T29_NumVal1,OtherNumVal2 as T29_NumVal2,OtherDtVal1 as T29_DtVal1,OtherDtVal2 as T29_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T29_Event_Type}' and EventYear = '{$T29_Event_Year}' and EventQuarter = '{$T29_Event_Qtr}'\"),",
						"     format: 'query') ~> T29OtherCore",
						"source(output(",
						"          T30_WorkerId as string,",
						"          T30_EventType as string,",
						"          T30_CharVal1 as string,",
						"          T30_CharVal2 as string,",
						"          T30_NumVal1 as double,",
						"          T30_NumVal2 as double,",
						"          T30_DtVal1 as date,",
						"          T30_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T30_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T30_EventType,OtherCharVal11 T30_CharVal1,OtherCharVal2 T30_CharVal2,OtherNumVal1 as T30_NumVal1,OtherNumVal2 as T30_NumVal2,OtherDtVal1 as T30_DtVal1,OtherDtVal2 as T30_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T30_Event_Type}' and EventYear = '{$T30_Event_Year}' and EventQuarter = '{$T30_Event_Qtr}'\"),",
						"     format: 'query') ~> T30OtherCore",
						"source(output(",
						"          T31_WorkerId as string,",
						"          T31_EventType as string,",
						"          T31_CharVal1 as string,",
						"          T31_CharVal2 as string,",
						"          T31_NumVal1 as double,",
						"          T31_NumVal2 as double,",
						"          T31_DtVal1 as date,",
						"          T31_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T31_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T31_EventType,OtherCharVal11 T31_CharVal1,OtherCharVal2 T31_CharVal2,OtherNumVal1 as T31_NumVal1,OtherNumVal2 as T31_NumVal2,OtherDtVal1 as T31_DtVal1,OtherDtVal2 as T31_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T31_Event_Type}' and EventYear = '{$T31_Event_Year}' and EventQuarter = '{$T31_Event_Qtr}'\"),",
						"     format: 'query') ~> T31OtherCore",
						"source(output(",
						"          T32_WorkerId as string,",
						"          T32_EventType as string,",
						"          T32_CharVal1 as string,",
						"          T32_CharVal2 as string,",
						"          T32_NumVal1 as double,",
						"          T32_NumVal2 as double,",
						"          T32_DtVal1 as date,",
						"          T32_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T32_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T32_EventType,OtherCharVal11 T32_CharVal1,OtherCharVal2 T32_CharVal2,OtherNumVal1 as T32_NumVal1,OtherNumVal2 as T32_NumVal2,OtherDtVal1 as T32_DtVal1,OtherDtVal2 as T32_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T32_Event_Type}' and EventYear = '{$T32_Event_Year}' and EventQuarter = '{$T32_Event_Qtr}'\"),",
						"     format: 'query') ~> T32OtherCore",
						"source(output(",
						"          T33_WorkerId as string,",
						"          T33_EventType as string,",
						"          T33_CharVal1 as string,",
						"          T33_CharVal2 as string,",
						"          T33_NumVal1 as double,",
						"          T33_NumVal2 as double,",
						"          T33_DtVal1 as date,",
						"          T33_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T33_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T33_EventType,OtherCharVal11 T33_CharVal1,OtherCharVal2 T33_CharVal2,OtherNumVal1 as T33_NumVal1,OtherNumVal2 as T33_NumVal2,OtherDtVal1 as T33_DtVal1,OtherDtVal2 as T33_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T33_Event_Type}' and EventYear = '{$T33_Event_Year}' and EventQuarter = '{$T33_Event_Qtr}'\"),",
						"     format: 'query') ~> T33OtherCore",
						"source(output(",
						"          T34_WorkerId as string,",
						"          T34_EventType as string,",
						"          T34_CharVal1 as string,",
						"          T34_CharVal2 as string,",
						"          T34_NumVal1 as double,",
						"          T34_NumVal2 as double,",
						"          T34_DtVal1 as date,",
						"          T34_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T34_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T34_EventType,OtherCharVal11 T34_CharVal1,OtherCharVal2 T34_CharVal2,OtherNumVal1 as T34_NumVal1,OtherNumVal2 as T34_NumVal2,OtherDtVal1 as T34_DtVal1,OtherDtVal2 as T34_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T34_Event_Type}' and EventYear = '{$T34_Event_Year}' and EventQuarter = '{$T34_Event_Qtr}'\"),",
						"     format: 'query') ~> T34OtherCore",
						"source(output(",
						"          T35_WorkerId as string,",
						"          T35_EventType as string,",
						"          T35_CharVal1 as string,",
						"          T35_CharVal2 as string,",
						"          T35_NumVal1 as double,",
						"          T35_NumVal2 as double,",
						"          T35_DtVal1 as date,",
						"          T35_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T35_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T35_EventType,OtherCharVal11 T35_CharVal1,OtherCharVal2 T35_CharVal2,OtherNumVal1 as T35_NumVal1,OtherNumVal2 as T35_NumVal2,OtherDtVal1 as T35_DtVal1,OtherDtVal2 as T35_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T35_Event_Type}' and EventYear = '{$T35_Event_Year}' and EventQuarter = '{$T35_Event_Qtr}'\"),",
						"     format: 'query') ~> T35OtherCore",
						"source(output(",
						"          T36_WorkerId as string,",
						"          T36_EventType as string,",
						"          T36_CharVal1 as string,",
						"          T36_CharVal2 as string,",
						"          T36_NumVal1 as double,",
						"          T36_NumVal2 as double,",
						"          T36_DtVal1 as date,",
						"          T36_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T36_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T36_EventType,OtherCharVal11 T36_CharVal1,OtherCharVal2 T36_CharVal2,OtherNumVal1 as T36_NumVal1,OtherNumVal2 as T36_NumVal2,OtherDtVal1 as T36_DtVal1,OtherDtVal2 as T36_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T36_Event_Type}' and EventYear = '{$T36_Event_Year}' and EventQuarter = '{$T36_Event_Qtr}'\"),",
						"     format: 'query') ~> T36OtherCore",
						"source(output(",
						"          T37_WorkerId as string,",
						"          T37_EventType as string,",
						"          T37_CharVal1 as string,",
						"          T37_CharVal2 as string,",
						"          T37_NumVal1 as double,",
						"          T37_NumVal2 as double,",
						"          T37_DtVal1 as date,",
						"          T37_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T37_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T37_EventType,OtherCharVal11 T37_CharVal1,OtherCharVal2 T37_CharVal2,OtherNumVal1 as T37_NumVal1,OtherNumVal2 as T37_NumVal2,OtherDtVal1 as T37_DtVal1,OtherDtVal2 as T37_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T37_Event_Type}' and EventYear = '{$T37_Event_Year}' and EventQuarter = '{$T37_Event_Qtr}'\"),",
						"     format: 'query') ~> T37OtherCore",
						"source(output(",
						"          T38_WorkerId as string,",
						"          T38_EventType as string,",
						"          T38_CharVal1 as string,",
						"          T38_CharVal2 as string,",
						"          T38_NumVal1 as double,",
						"          T38_NumVal2 as double,",
						"          T38_DtVal1 as date,",
						"          T38_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T38_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T38_EventType,OtherCharVal11 T38_CharVal1,OtherCharVal2 T38_CharVal2,OtherNumVal1 as T38_NumVal1,OtherNumVal2 as T38_NumVal2,OtherDtVal1 as T38_DtVal1,OtherDtVal2 as T38_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T38_Event_Type}' and EventYear = '{$T38_Event_Year}' and EventQuarter = '{$T38_Event_Qtr}'\"),",
						"     format: 'query') ~> T38OtherCore",
						"source(output(",
						"          T39_WorkerId as string,",
						"          T39_EventType as string,",
						"          T39_CharVal1 as string,",
						"          T39_CharVal2 as string,",
						"          T39_NumVal1 as double,",
						"          T39_NumVal2 as double,",
						"          T39_DtVal1 as date,",
						"          T39_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T39_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T39_EventType,OtherCharVal11 T39_CharVal1,OtherCharVal2 T39_CharVal2,OtherNumVal1 as T39_NumVal1,OtherNumVal2 as T39_NumVal2,OtherDtVal1 as T39_DtVal1,OtherDtVal2 as T39_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T39_Event_Type}' and EventYear = '{$T39_Event_Year}' and EventQuarter = '{$T39_Event_Qtr}'\"),",
						"     format: 'query') ~> T39OtherCore",
						"source(output(",
						"          T40_WorkerId as string,",
						"          T40_EventType as string,",
						"          T40_CharVal1 as string,",
						"          T40_CharVal2 as string,",
						"          T40_NumVal1 as double,",
						"          T40_NumVal2 as double,",
						"          T40_DtVal1 as date,",
						"          T40_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T40_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T40_EventType,OtherCharVal11 T40_CharVal1,OtherCharVal2 T40_CharVal2,OtherNumVal1 as T40_NumVal1,OtherNumVal2 as T40_NumVal2,OtherDtVal1 as T40_DtVal1,OtherDtVal2 as T40_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T40_Event_Type}' and EventYear = '{$T40_Event_Year}' and EventQuarter = '{$T40_Event_Qtr}'\"),",
						"     format: 'query') ~> T40OtherCore",
						"source(output(",
						"          T41_WorkerId as string,",
						"          T41_EventType as string,",
						"          T41_CharVal1 as string,",
						"          T41_CharVal2 as string,",
						"          T41_NumVal1 as double,",
						"          T41_NumVal2 as double,",
						"          T41_DtVal1 as date,",
						"          T41_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T41_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T41_EventType,OtherCharVal11 T41_CharVal1,OtherCharVal2 T41_CharVal2,OtherNumVal1 as T41_NumVal1,OtherNumVal2 as T41_NumVal2,OtherDtVal1 as T41_DtVal1,OtherDtVal2 as T41_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T41_Event_Type}' and EventYear = '{$T41_Event_Year}' and EventQuarter = '{$T41_Event_Qtr}'\"),",
						"     format: 'query') ~> T41OtherCore",
						"source(output(",
						"          T42_WorkerId as string,",
						"          T42_EventType as string,",
						"          T42_CharVal1 as string,",
						"          T42_CharVal2 as string,",
						"          T42_NumVal1 as double,",
						"          T42_NumVal2 as double,",
						"          T42_DtVal1 as date,",
						"          T42_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T42_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T42_EventType,OtherCharVal11 T42_CharVal1,OtherCharVal2 T42_CharVal2,OtherNumVal1 as T42_NumVal1,OtherNumVal2 as T42_NumVal2,OtherDtVal1 as T42_DtVal1,OtherDtVal2 as T42_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T42_Event_Type}' and EventYear = '{$T42_Event_Year}' and EventQuarter = '{$T42_Event_Qtr}'\"),",
						"     format: 'query') ~> T42OtherCore",
						"source(output(",
						"          T43_WorkerId as string,",
						"          T43_EventType as string,",
						"          T43_CharVal1 as string,",
						"          T43_CharVal2 as string,",
						"          T43_NumVal1 as double,",
						"          T43_NumVal2 as double,",
						"          T43_DtVal1 as date,",
						"          T43_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T43_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T43_EventType,OtherCharVal11 T43_CharVal1,OtherCharVal2 T43_CharVal2,OtherNumVal1 as T43_NumVal1,OtherNumVal2 as T43_NumVal2,OtherDtVal1 as T43_DtVal1,OtherDtVal2 as T43_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T43_Event_Type}' and EventYear = '{$T43_Event_Year}' and EventQuarter = '{$T43_Event_Qtr}'\"),",
						"     format: 'query') ~> T43OtherCore",
						"source(output(",
						"          T44_WorkerId as string,",
						"          T44_EventType as string,",
						"          T44_CharVal1 as string,",
						"          T44_CharVal2 as string,",
						"          T44_NumVal1 as double,",
						"          T44_NumVal2 as double,",
						"          T44_DtVal1 as date,",
						"          T44_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T44_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T44_EventType,OtherCharVal11 T44_CharVal1,OtherCharVal2 T44_CharVal2,OtherNumVal1 as T44_NumVal1,OtherNumVal2 as T44_NumVal2,OtherDtVal1 as T44_DtVal1,OtherDtVal2 as T44_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T44_Event_Type}' and EventYear = '{$T44_Event_Year}' and EventQuarter = '{$T44_Event_Qtr}'\"),",
						"     format: 'query') ~> T44OtherCore",
						"source(output(",
						"          T45_WorkerId as string,",
						"          T45_EventType as string,",
						"          T45_CharVal1 as string,",
						"          T45_CharVal2 as string,",
						"          T45_NumVal1 as double,",
						"          T45_NumVal2 as double,",
						"          T45_DtVal1 as date,",
						"          T45_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T45_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T45_EventType,OtherCharVal11 T45_CharVal1,OtherCharVal2 T45_CharVal2,OtherNumVal1 as T45_NumVal1,OtherNumVal2 as T45_NumVal2,OtherDtVal1 as T45_DtVal1,OtherDtVal2 as T45_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T45_Event_Type}' and EventYear = '{$T45_Event_Year}' and EventQuarter = '{$T45_Event_Qtr}'\"),",
						"     format: 'query') ~> T45OtherCore",
						"source(output(",
						"          T46_WorkerId as string,",
						"          T46_EventType as string,",
						"          T46_CharVal1 as string,",
						"          T46_CharVal2 as string,",
						"          T46_NumVal1 as double,",
						"          T46_NumVal2 as double,",
						"          T46_DtVal1 as date,",
						"          T46_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T46_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T46_EventType,OtherCharVal11 T46_CharVal1,OtherCharVal2 T46_CharVal2,OtherNumVal1 as T46_NumVal1,OtherNumVal2 as T46_NumVal2,OtherDtVal1 as T46_DtVal1,OtherDtVal2 as T46_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T46_Event_Type}' and EventYear = '{$T46_Event_Year}' and EventQuarter = '{$T46_Event_Qtr}'\"),",
						"     format: 'query') ~> T46OtherCore",
						"source(output(",
						"          T47_WorkerId as string,",
						"          T47_EventType as string,",
						"          T47_CharVal1 as string,",
						"          T47_CharVal2 as string,",
						"          T47_NumVal1 as double,",
						"          T47_NumVal2 as double,",
						"          T47_DtVal1 as date,",
						"          T47_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T47_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T47_EventType,OtherCharVal11 T47_CharVal1,OtherCharVal2 T47_CharVal2,OtherNumVal1 as T47_NumVal1,OtherNumVal2 as T47_NumVal2,OtherDtVal1 as T47_DtVal1,OtherDtVal2 as T47_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T47_Event_Type}' and EventYear = '{$T47_Event_Year}' and EventQuarter = '{$T47_Event_Qtr}'\"),",
						"     format: 'query') ~> T47OtherCore",
						"source(output(",
						"          T48_WorkerId as string,",
						"          T48_EventType as string,",
						"          T48_CharVal1 as string,",
						"          T48_CharVal2 as string,",
						"          T48_NumVal1 as double,",
						"          T48_NumVal2 as double,",
						"          T48_DtVal1 as date,",
						"          T48_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T48_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T48_EventType,OtherCharVal11 T48_CharVal1,OtherCharVal2 T48_CharVal2,OtherNumVal1 as T48_NumVal1,OtherNumVal2 as T48_NumVal2,OtherDtVal1 as T48_DtVal1,OtherDtVal2 as T48_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T48_Event_Type}' and EventYear = '{$T48_Event_Year}' and EventQuarter = '{$T48_Event_Qtr}'\"),",
						"     format: 'query') ~> T48OtherCore",
						"source(output(",
						"          T49_WorkerId as string,",
						"          T49_EventType as string,",
						"          T49_CharVal1 as string,",
						"          T49_CharVal2 as string,",
						"          T49_NumVal1 as double,",
						"          T49_NumVal2 as double,",
						"          T49_DtVal1 as date,",
						"          T49_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T49_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T49_EventType,OtherCharVal11 T49_CharVal1,OtherCharVal2 T49_CharVal2,OtherNumVal1 as T49_NumVal1,OtherNumVal2 as T49_NumVal2,OtherDtVal1 as T49_DtVal1,OtherDtVal2 as T49_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T49_Event_Type}' and EventYear = '{$T49_Event_Year}' and EventQuarter = '{$T49_Event_Qtr}'\"),",
						"     format: 'query') ~> T49OtherCore",
						"source(output(",
						"          T50_WorkerId as string,",
						"          T50_EventType as string,",
						"          T50_CharVal1 as string,",
						"          T50_CharVal2 as string,",
						"          T50_NumVal1 as double,",
						"          T50_NumVal2 as double,",
						"          T50_DtVal1 as date,",
						"          T50_DtVal2 as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId as T50_WorkerId,concat([EventYear],'-','Q',[EventQuarter],' ',[EventType]) as T50_EventType,OtherCharVal11 T50_CharVal1,OtherCharVal2 T50_CharVal2,OtherNumVal1 as T50_NumVal1,OtherNumVal2 as T50_NumVal2,OtherDtVal1 as T50_DtVal1,OtherDtVal2 as T50_DtVal2 from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventType = '{$T50_Event_Type}' and EventYear = '{$T50_Event_Year}' and EventQuarter = '{$T50_Event_Qtr}'\"),",
						"     format: 'query') ~> T50OtherCore",
						"source(output(",
						"          WorkerId as string,",
						"          ClientId as string,",
						"          ClientEngagementDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select WorkerId,ClientId,ClientEngagementDt from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFullPop",
						"OtherCoreFullPop, T1OtherCore join(WorkerId == T1_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT1",
						"joinT1, T2OtherCore join(WorkerId == T2_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT2",
						"joinT2, T3OtherCore join(WorkerId == T3_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT3",
						"joinT3, T4OtherCore join(WorkerId == T4_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT4",
						"joinT4, T5OtherCore join(WorkerId == T5_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT5",
						"joinT5, T6OtherCore join(WorkerId == T6_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, T7OtherCore join(WorkerId == T7_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT7",
						"joinT7, T8OtherCore join(WorkerId == T8_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT8",
						"joinT8, T9OtherCore join(WorkerId == T9_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT9",
						"joinT9, T10OtherCore join(WorkerId == T10_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT10",
						"joinT10, T11OtherCore join(WorkerId == T11_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT11",
						"joinT11, T12OtherCore join(WorkerId == T12_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT12",
						"joinT12, T13OtherCore join(WorkerId == T13_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT13",
						"joinT13, T14OtherCore join(WorkerId == T14_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT14",
						"joinT14, T15OtherCore join(WorkerId == T15_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT15",
						"joinT15, T16OtherCore join(WorkerId == T16_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT16",
						"joinT16, T17OtherCore join(WorkerId == T17_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT17",
						"joinT17, T18OtherCore join(WorkerId == T18_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT18",
						"joinT18, T19OtherCore join(WorkerId == T19_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT19",
						"joinT19, T20OtherCore join(WorkerId == T20_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT20",
						"joinT20, T21OtherCore join(WorkerId == T21_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT21",
						"joinT21, T22OtherCore join(WorkerId == T22_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT22",
						"joinT22, T23OtherCore join(WorkerId == T23_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT23",
						"joinT23, T24OtherCore join(WorkerId == T24_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT24",
						"joinT24, T25OtherCore join(WorkerId == T25_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT25",
						"joinT25, T26OtherCore join(WorkerId == T26_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT26",
						"joinT26, T27OtherCore join(WorkerId == T27_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT27",
						"joinT27, T28OtherCore join(WorkerId == T28_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT28",
						"joinT28, T29OtherCore join(WorkerId == T29_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT29",
						"joinT29, T30OtherCore join(WorkerId == T30_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT30",
						"joinT30, T31OtherCore join(WorkerId == T31_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT31",
						"joinT31, T32OtherCore join(WorkerId == T32_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT32",
						"joinT32, T33OtherCore join(WorkerId == T33_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT33",
						"joinT33, T34OtherCore join(WorkerId == T34_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT34",
						"joinT34, T35OtherCore join(WorkerId == T35_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT35",
						"joinT35, T36OtherCore join(WorkerId == T36_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT36",
						"joinT36, T37OtherCore join(WorkerId == T37_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT37",
						"joinT37, T38OtherCore join(WorkerId == T38_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT38",
						"joinT38, T39OtherCore join(WorkerId == T39_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT39",
						"joinT39, T40OtherCore join(WorkerId == T40_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join40",
						"join40, T41OtherCore join(WorkerId == T41_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT41",
						"joinT41, T42OtherCore join(WorkerId == T42_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT42",
						"joinT42, T43OtherCore join(WorkerId == T43_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT43",
						"joinT43, T44OtherCore join(WorkerId == T44_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT44",
						"joinT44, T45OtherCore join(WorkerId == T45_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT45",
						"joinT45, T46OtherCore join(WorkerId == T46_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT46",
						"joinT46, T47OtherCore join(WorkerId == T47_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT47",
						"joinT47, T48OtherCore join(WorkerId == T48_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT48",
						"joinT48, T49OtherCore join(WorkerId == T49_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT49",
						"joinT49, T50OtherCore join(WorkerId == T50_WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinT50",
						"joinT50 select(mapColumn(",
						"          WorkerId,",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          T1_EventType,",
						"          T1_CharVal1,",
						"          T1_CharVal2,",
						"          T1_NumVal1,",
						"          T1_NumVal2,",
						"          T1_DtVal1,",
						"          T1_DtVal2,",
						"          T2_EventType,",
						"          T2_CharVal1,",
						"          T2_CharVal2,",
						"          T2_NumVal1,",
						"          T2_NumVal2,",
						"          T2_DtVal1,",
						"          T2_DtVal2,",
						"          T3_EventType,",
						"          T3_CharVal1,",
						"          T3_CharVal2,",
						"          T3_NumVal1,",
						"          T3_NumVal2,",
						"          T3_DtVal1,",
						"          T3_DtVal2,",
						"          T4_EventType,",
						"          T4_CharVal1,",
						"          T4_CharVal2,",
						"          T4_NumVal1,",
						"          T4_NumVal2,",
						"          T4_DtVal1,",
						"          T4_DtVal2,",
						"          T5_EventType,",
						"          T5_CharVal1,",
						"          T5_CharVal2,",
						"          T5_NumVal1,",
						"          T5_NumVal2,",
						"          T5_DtVal1,",
						"          T5_DtVal2,",
						"          T6_EventType,",
						"          T6_CharVal1,",
						"          T6_CharVal2,",
						"          T6_NumVal1,",
						"          T6_NumVal2,",
						"          T6_DtVal1,",
						"          T6_DtVal2,",
						"          T7_EventType,",
						"          T7_CharVal1,",
						"          T7_CharVal2,",
						"          T7_NumVal1,",
						"          T7_NumVal2,",
						"          T7_DtVal1,",
						"          T7_DtVal2,",
						"          T8_EventType,",
						"          T8_CharVal1,",
						"          T8_CharVal2,",
						"          T8_NumVal1,",
						"          T8_NumVal2,",
						"          T8_DtVal1,",
						"          T8_DtVal2,",
						"          T9_EventType,",
						"          T9_CharVal1,",
						"          T9_CharVal2,",
						"          T9_NumVal1,",
						"          T9_NumVal2,",
						"          T9_DtVal1,",
						"          T9_DtVal2,",
						"          T10_EventType,",
						"          T10_CharVal1,",
						"          T10_CharVal2,",
						"          T10_NumVal1,",
						"          T10_NumVal2,",
						"          T10_DtVal1,",
						"          T10_DtVal2,",
						"          T11_EventType,",
						"          T11_CharVal1,",
						"          T11_CharVal2,",
						"          T11_NumVal1,",
						"          T11_NumVal2,",
						"          T11_DtVal1,",
						"          T11_DtVal2,",
						"          T12_EventType,",
						"          T12_CharVal1,",
						"          T12_CharVal2,",
						"          T12_NumVal1,",
						"          T12_NumVal2,",
						"          T12_DtVal1,",
						"          T12_DtVal2,",
						"          T13_EventType,",
						"          T13_CharVal1,",
						"          T13_CharVal2,",
						"          T13_NumVal1,",
						"          T13_NumVal2,",
						"          T13_DtVal1,",
						"          T13_DtVal2,",
						"          T14_EventType,",
						"          T14_CharVal1,",
						"          T14_CharVal2,",
						"          T14_NumVal1,",
						"          T14_NumVal2,",
						"          T14_DtVal1,",
						"          T14_DtVal2,",
						"          T15_EventType,",
						"          T15_CharVal1,",
						"          T15_CharVal2,",
						"          T15_NumVal1,",
						"          T15_NumVal2,",
						"          T15_DtVal1,",
						"          T15_DtVal2,",
						"          T16_EventType,",
						"          T16_CharVal1,",
						"          T16_CharVal2,",
						"          T16_NumVal1,",
						"          T16_NumVal2,",
						"          T16_DtVal1,",
						"          T16_DtVal2,",
						"          T17_EventType,",
						"          T17_CharVal1,",
						"          T17_CharVal2,",
						"          T17_NumVal1,",
						"          T17_NumVal2,",
						"          T17_DtVal1,",
						"          T17_DtVal2,",
						"          T18_EventType,",
						"          T18_CharVal1,",
						"          T18_CharVal2,",
						"          T18_NumVal1,",
						"          T18_NumVal2,",
						"          T18_DtVal1,",
						"          T18_DtVal2,",
						"          T19_EventType,",
						"          T19_CharVal1,",
						"          T19_CharVal2,",
						"          T19_NumVal1,",
						"          T19_NumVal2,",
						"          T19_DtVal1,",
						"          T19_DtVal2,",
						"          T20_EventType,",
						"          T20_CharVal1,",
						"          T20_CharVal2,",
						"          T20_NumVal1,",
						"          T20_NumVal2,",
						"          T20_DtVal1,",
						"          T20_DtVal2,",
						"          T21_EventType,",
						"          T21_CharVal1,",
						"          T21_CharVal2,",
						"          T21_NumVal1,",
						"          T21_NumVal2,",
						"          T21_DtVal1,",
						"          T21_DtVal2,",
						"          T22_EventType,",
						"          T22_CharVal1,",
						"          T22_CharVal2,",
						"          T22_NumVal1,",
						"          T22_NumVal2,",
						"          T22_DtVal1,",
						"          T22_DtVal2,",
						"          T23_EventType,",
						"          T23_CharVal1,",
						"          T23_CharVal2,",
						"          T23_NumVal1,",
						"          T23_NumVal2,",
						"          T23_DtVal1,",
						"          T23_DtVal2,",
						"          T24_EventType,",
						"          T24_CharVal1,",
						"          T24_CharVal2,",
						"          T24_NumVal1,",
						"          T24_NumVal2,",
						"          T24_DtVal1,",
						"          T24_DtVal2,",
						"          T25_EventType,",
						"          T25_CharVal1,",
						"          T25_CharVal2,",
						"          T25_NumVal1,",
						"          T25_NumVal2,",
						"          T25_DtVal1,",
						"          T25_DtVal2,",
						"          T26_EventType,",
						"          T26_CharVal1,",
						"          T26_CharVal2,",
						"          T26_NumVal1,",
						"          T26_NumVal2,",
						"          T26_DtVal1,",
						"          T26_DtVal2,",
						"          T27_EventType,",
						"          T27_CharVal1,",
						"          T27_CharVal2,",
						"          T27_NumVal1,",
						"          T27_NumVal2,",
						"          T27_DtVal1,",
						"          T27_DtVal2,",
						"          T28_EventType,",
						"          T28_CharVal1,",
						"          T28_CharVal2,",
						"          T28_NumVal1,",
						"          T28_NumVal2,",
						"          T28_DtVal1,",
						"          T28_DtVal2,",
						"          T29_EventType,",
						"          T29_CharVal1,",
						"          T29_CharVal2,",
						"          T29_NumVal1,",
						"          T29_NumVal2,",
						"          T29_DtVal1,",
						"          T29_DtVal2,",
						"          T30_EventType,",
						"          T30_CharVal1,",
						"          T30_CharVal2,",
						"          T30_NumVal1,",
						"          T30_NumVal2,",
						"          T30_DtVal1,",
						"          T30_DtVal2,",
						"          T31_EventType,",
						"          T31_CharVal1,",
						"          T31_CharVal2,",
						"          T31_NumVal1,",
						"          T31_NumVal2,",
						"          T31_DtVal1,",
						"          T31_DtVal2,",
						"          T32_EventType,",
						"          T32_CharVal1,",
						"          T32_CharVal2,",
						"          T32_NumVal1,",
						"          T32_NumVal2,",
						"          T32_DtVal1,",
						"          T32_DtVal2,",
						"          T33_EventType,",
						"          T33_CharVal1,",
						"          T33_CharVal2,",
						"          T33_NumVal1,",
						"          T33_NumVal2,",
						"          T33_DtVal1,",
						"          T33_DtVal2,",
						"          T34_EventType,",
						"          T34_CharVal1,",
						"          T34_CharVal2,",
						"          T34_NumVal1,",
						"          T34_NumVal2,",
						"          T34_DtVal1,",
						"          T34_DtVal2,",
						"          T35_EventType,",
						"          T35_CharVal1,",
						"          T35_CharVal2,",
						"          T35_NumVal1,",
						"          T35_NumVal2,",
						"          T35_DtVal1,",
						"          T35_DtVal2,",
						"          T36_EventType,",
						"          T36_CharVal1,",
						"          T36_CharVal2,",
						"          T36_NumVal1,",
						"          T36_NumVal2,",
						"          T36_DtVal1,",
						"          T36_DtVal2,",
						"          T37_EventType,",
						"          T37_CharVal1,",
						"          T37_CharVal2,",
						"          T37_NumVal1,",
						"          T37_NumVal2,",
						"          T37_DtVal1,",
						"          T37_DtVal2,",
						"          T38_EventType,",
						"          T38_CharVal1,",
						"          T38_CharVal2,",
						"          T38_NumVal1,",
						"          T38_NumVal2,",
						"          T38_DtVal1,",
						"          T38_DtVal2,",
						"          T39_EventType,",
						"          T39_CharVal1,",
						"          T39_CharVal2,",
						"          T39_NumVal1,",
						"          T39_NumVal2,",
						"          T39_DtVal1,",
						"          T39_DtVal2,",
						"          T40_EventType,",
						"          T40_CharVal1,",
						"          T40_CharVal2,",
						"          T40_NumVal1,",
						"          T40_NumVal2,",
						"          T40_DtVal1,",
						"          T40_DtVal2,",
						"          T41_EventType,",
						"          T41_CharVal1,",
						"          T41_CharVal2,",
						"          T41_NumVal1,",
						"          T41_NumVal2,",
						"          T41_DtVal1,",
						"          T41_DtVal2,",
						"          T42_EventType,",
						"          T42_CharVal1,",
						"          T42_CharVal2,",
						"          T42_NumVal1,",
						"          T42_NumVal2,",
						"          T42_DtVal1,",
						"          T42_DtVal2,",
						"          T43_EventType,",
						"          T43_CharVal1,",
						"          T43_CharVal2,",
						"          T43_NumVal1,",
						"          T43_NumVal2,",
						"          T43_DtVal1,",
						"          T43_DtVal2,",
						"          T44_EventType,",
						"          T44_CharVal1,",
						"          T44_CharVal2,",
						"          T44_NumVal1,",
						"          T44_NumVal2,",
						"          T44_DtVal1,",
						"          T44_DtVal2,",
						"          T45_EventType,",
						"          T45_CharVal1,",
						"          T45_CharVal2,",
						"          T45_NumVal1,",
						"          T45_NumVal2,",
						"          T45_DtVal1,",
						"          T45_DtVal2,",
						"          T46_EventType,",
						"          T46_CharVal1,",
						"          T46_CharVal2,",
						"          T46_NumVal1,",
						"          T46_NumVal2,",
						"          T46_DtVal1,",
						"          T46_DtVal2,",
						"          T47_EventType,",
						"          T47_CharVal1,",
						"          T47_CharVal2,",
						"          T47_NumVal1,",
						"          T47_NumVal2,",
						"          T47_DtVal1,",
						"          T47_DtVal2,",
						"          T48_EventType,",
						"          T48_CharVal1,",
						"          T48_CharVal2,",
						"          T48_NumVal1,",
						"          T48_NumVal2,",
						"          T48_DtVal1,",
						"          T48_DtVal2,",
						"          T49_EventType,",
						"          T49_CharVal1,",
						"          T49_CharVal2,",
						"          T49_NumVal1,",
						"          T49_NumVal2,",
						"          T49_DtVal1,",
						"          T49_DtVal2,",
						"          T50_EventType,",
						"          T50_CharVal1,",
						"          T50_CharVal2,",
						"          T50_NumVal1,",
						"          T50_NumVal2,",
						"          T50_DtVal1,",
						"          T50_DtVal2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCleanup",
						"SelectCleanup sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['trash.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_ApplStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "JoinEthMap"
						},
						{
							"name": "JoinGenderMap"
						},
						{
							"name": "SelectEthnicity"
						},
						{
							"name": "SelectGender"
						},
						{
							"name": "JoinApplicantMap"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectToRemoveJoinFields"
						},
						{
							"name": "CalcApplicantStatus"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"Applicant select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Requisition ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant Type},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectEthnicity join({Client ID} == {Ethnicity Client ID}",
						"     && {Client Engagement Date} == {Ethnicity Client Engagement Date}",
						"     && Race == {Ethnicity Client Race}",
						"     && {Hispanic or Latino Origin} == {Ethnicity Client Hispanic or Latino Origin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEthMap",
						"JoinEthMap, SelectGender join({Client ID} == {Gender Client ID}",
						"     && {Client Engagement Date} == {Gender Client Engagement Date}",
						"     && Gender == {Gender Client Gender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGenderMap",
						"EthnicityMap select(mapColumn(",
						"          {Ethnicity Client ID} = {Client ID},",
						"          {Ethnicity Client Engagement Date} = {Client Engagement Date},",
						"          {Ethnicity Client Race} = {Client Race},",
						"          {Ethnicity Client Hispanic or Latino Origin} = {Client Hispanic or Latino Origin},",
						"          {Ethnicity Elloree Race} = {Elloree Race},",
						"          {Ethnicity Elloree Hispanic or Latino Origin} = {Elloree Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEthnicity",
						"GenderMap select(mapColumn(",
						"          {Gender Client ID} = {Client ID},",
						"          {Gender Client Engagement Date} = {Client Engagement Date},",
						"          {Gender Client Gender} = {Client Gender},",
						"          {Gender Elloree Gender} = {Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGender",
						"JoinGenderMap, SelectApplicant join({Client ID} == {Applicant Client ID}",
						"     && {Client Engagement Date} == {Applicant Client Engagement Date}",
						"     && {Applicant Final Disposition} == {Applicant Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Applicant Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Applicant Client Applicant Rejected Reason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinApplicantMap",
						"ApplicantMap select(mapColumn(",
						"          {Applicant Client ID} = {Client ID},",
						"          {Applicant Client Engagement Date} = {Client Engagement Date},",
						"          {Applicant Client Applicant Final Disposition} = {Client Applicant Final Disposition},",
						"          {Applicant Client Applicant Step Before Final Disposition} = {Client Applicant Step Before Final Disposition},",
						"          {Applicant Client Applicant Rejected Reason} = {Client Applicant Rejected Reason},",
						"          {Applicant Elloree Applicant Final Disposition} = {Elloree Applicant Final Disposition},",
						"          {Applicant Elloree Applicant Category} = {Elloree Applicant Category},",
						"          {Applicant Elloree Submitted to Mgr Fl} = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"JoinApplicantMap select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Requisition ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Applicant Type},",
						"          {Elloree Applicant Final Disposition} = {Applicant Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category} = {Applicant Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl} = {Applicant Elloree Submitted to Mgr Fl},",
						"          {Elloree Race} = {Ethnicity Elloree Race},",
						"          {Elloree Hispanic or Latino Origin} = {Ethnicity Elloree Hispanic or Latino Origin},",
						"          {Elloree Gender} = {Gender Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectToRemoveJoinFields",
						"SelectToRemoveJoinFields derive(Applicant = 1,",
						"          {White Appl} = iif({Elloree Race}=='White',1,0),",
						"          {Black Appl} = iif({Elloree Race}=='Black',1,0),",
						"          {Latinx Appl} = iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),",
						"          {Asian Appl} = iif({Elloree Race}=='Asian',1,0),",
						"          {Two or More Appl} = iif({Elloree Race}=='2+ Races',1,0),",
						"          {Other Appl} = iif({Elloree Race}=='Other',1,0),",
						"          {DNSID Appl} = iif(and({Elloree Race}=='Did Not Self Identify',or({Elloree Hispanic or Latino Origin}=='Did Not Self Identify',{Elloree Hispanic or Latino Origin}=='N')),1,0),",
						"          {Female Appl} = iif({Elloree Gender}=='Female',1,0),",
						"          {PoC Appl} = iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),",
						"          {Male Appl} = iif({Elloree Gender}=='Male',1,0),",
						"          {Other Gender Appl} = iif({Elloree Gender}=='Other',1,0),",
						"          {DNSID Gender Appl} = iif({Elloree Gender}=='Did Not Self Identify',1,0),",
						"          {Diverse Applicant} = iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Elloree Gender}==\"Female\"),1,0),",
						"          {Applicant Rejected by HR} = iif(and({Elloree Applicant Category}=='Applicant',{Elloree Applicant Final Disposition}=='Not Selected - HR'),1,0),",
						"          {Applicant Withdrew} = iif(and({Elloree Applicant Category}=='Applicant',{Elloree Applicant Final Disposition}=='Withdrew'),1,0),",
						"          Candidate = iif({Elloree Applicant Category}=='Candidate',1,0),",
						"          {Candidate Rejected by HR} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Applicant Final Disposition}=='Not Selected - HR'),1,0),",
						"          {Candidate StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),1,0),",
						"          {Candidate Rejected by HM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Applicant Final Disposition}=='Not Selected - HM'),1,0),",
						"          {Candidate Interviewed} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or({Elloree Applicant Final Disposition}=='Interviewed',{Elloree Applicant Final Disposition}=='Hired'),1,0),0),",
						"          {Candidate Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",1,0),0),",
						"          {Candidate Withdrew} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Withdrew\",1,0),0)) ~> CalcApplicantStatus",
						"CalcApplicantStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TAApplStatusFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Applicant')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Applicant_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveNullRecords"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRecords derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Job Applicant') ~> AddDerived",
						"AddDerived derive(Event = iif(isNull(Event),'Job Applicant',Event),",
						"          Source = iif(isNull(Source),'N/A',Source),",
						"          {Applicant Type} = iif(isNull({Applicant Type}),'N/A',{Applicant Type}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGTBQ = iif(isNull(LGTBQ),'N/A',LGTBQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Applicant Step Before Final Disposition} = iif(isNull({Applicant Step Before Final Disposition}),'N/A',{Applicant Step Before Final Disposition}),",
						"          {Applicant Rejected Reason} = iif(isNull({Applicant Rejected Reason}),'N/A',{Applicant Rejected Reason})) ~> ConvertNullsForKeyFields",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date})) ~> derivedColumn1",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Applicant ID}))) ~> RemoveNullRecords",
						"SelectFinal aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     RowCount = count({Applicant ID})) ~> aggregate1",
						"aggregate1 aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RowCount = count({Requisition ID})) ~> aggregate2",
						"aggregate2 derive(WorkerIDValue = iif(length(trim({Internal Worker ID}))>0, 'Y','N')) ~> derivedColumn2",
						"derivedColumn2 filter(WorkerIDValue=='Y') ~> filter1",
						"filter1 select(mapColumn(",
						"          {Applicant ID},",
						"          {Internal Worker ID for Match} = {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)},",
						"          RowCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ApplicantTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_JobApplicants')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Applicant_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Applicant_Append",
								"type": "DatasetReference"
							},
							"name": "ApplicantAppendFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantAppendFile",
						"ApplicantAppendFile filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Job Applicant') ~> AddDerived",
						"AddDerived derive(Event = iif(isNull(Event),'Job Applicant',Event),",
						"          Source = iif(isNull(Source),'N/A',Source),",
						"          {Applicant Type} = iif(isNull({Applicant Type}),'N/A',{Applicant Type}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGTBQ = iif(isNull(LGTBQ),'N/A',LGTBQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Applicant Step Before Final Disposition} = iif(isNull({Applicant Step Before Final Disposition}),'N/A',{Applicant Step Before Final Disposition}),",
						"          {Applicant Rejected Reason} = iif(isNull({Applicant Rejected Reason}),'N/A',{Applicant Rejected Reason})) ~> ConvertNullsForKeyFields",
						"SelectFinal, Applicants union(byName: true)~> union1",
						"union1 aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOutput",
						"SelectOutput aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}),",
						"     RowCount = count({Applicant ID})) ~> aggregate1",
						"aggregate1 aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RowCount = count({Requisition ID})) ~> aggregate2",
						"aggregate2 derive(WorkerIDValue = iif(length(trim({Internal Worker ID}))>0, 'Y','N')) ~> derivedColumn1",
						"derivedColumn1 filter(WorkerIDValue=='Y') ~> filter1",
						"filter1 select(mapColumn(",
						"          {Applicant ID},",
						"          {Internal Worker ID for Match} = {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NOTUSEDSelectApplicantIdWithMatchingInternalWorkerId",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)},",
						"          RowCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ApplicantTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Applicant_Append')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Core_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MergeEvents"
						},
						{
							"name": "AddDerived",
							"description": "Add employee count column for aggregations."
						},
						{
							"name": "select1"
						},
						{
							"name": "TagHeadcountEvent"
						},
						{
							"name": "TagTerminationEvent"
						},
						{
							"name": "TagHireEvent"
						},
						{
							"name": "TagPromotionEvent"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "select3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "select4"
						},
						{
							"name": "filter4"
						},
						{
							"name": "select5"
						},
						{
							"name": "CalcNullDates"
						},
						{
							"name": "CalcServiceforNulls"
						},
						{
							"name": "RemoveNullWorkerIdRowsHCT"
						},
						{
							"name": "RemoveNullWorkerIdRowsTER"
						},
						{
							"name": "RemoveNullWorkerIdRowsHIR"
						},
						{
							"name": "RemoveNullWorkerIdRowsPRO"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "RemoveDuplicates"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years in Job} as double,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"TagHeadcountEvent, TagHireEvent, TagTerminationEvent, TagPromotionEvent union(byName: true)~> MergeEvents",
						"CalcServiceforNulls derive(EmpCount = 1,",
						"          {Generation Desc} = iif(not(isNull({Birth Year})), iif({Birth Year}<1946,'Pre-Boomer (<1946)', iif(between({Birth Year},1946,1964),'Boomer (1946-1964)', \r",
						"iif(between({Birth Year}, 1965, 1978),'Gen X (1965-1978)', \r",
						"iif(between({Birth Year},1979,1996),'Gen Y (1979-1996)', \r",
						"iif({Birth Year}>=1997,'Gen Z (>=1997)','Unknown'))))),{Generation Desc}),",
						"          {Generation Sort ID} = iif({Birth Year}<1946,1,  iif(between({Birth Year},1946,1964),2,  iif(between({Birth Year}, 1965, 1978),3,  iif(between({Birth Year},1979,1996),4,  iif({Birth Year}>=1997,5,6))))),",
						"          {Years of Service Band} = iif(between({Years of Service},0,0.25),'0-3 Months', \r",
						"iif(between({Years of Service},0.26,0.5),'4-6 Months', \r",
						"iif(between({Years of Service},0.51,0.99),'7-11 Months', \r",
						"iif(between({Years of Service},1,1.99),'1-2 Years', \r",
						"iif(between({Years of Service},2,4.99),'2-5 Years', \r",
						"iif(between({Years of Service},5,9.99),'5-10 Years', \r",
						"iif(between({Years of Service},10,14.99),'10-15 Years', \r",
						"iif(between({Years of Service},15,24.99),'15-25 Years', \r",
						"iif({Years of Service}>=25,'25+ Years', 'Unknown'))))))))),",
						"          {Years of Service Sort ID} = iif(between({Years of Service},0,0.25),9, \r",
						"iif(between({Years of Service},0.26,0.5),8, \r",
						"iif(between({Years of Service},0.51,0.99),7, \r",
						"iif(between({Years of Service},1,1.99),6, \r",
						"iif(between({Years of Service},2,4.99),5, \r",
						"iif(between({Years of Service},5,9.99),4, \r",
						"iif(between({Years of Service},10,14.99),3, \r",
						"iif(between({Years of Service},15,24.99),2, \r",
						"iif({Years of Service}>=25,1, 10))))))))),",
						"          {Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddDerived",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select2 derive(Event = 'Headcount',",
						"          {Event Code} = 'HCT') ~> TagHeadcountEvent",
						"select3 derive(Event = 'Termination',",
						"          {Event Code} = 'TER') ~> TagTerminationEvent",
						"select4 derive(Event = 'Hire',",
						"          {Event Code} = 'HIR') ~> TagHireEvent",
						"select5 derive(Event = 'Promotion',",
						"          {Event Code} = 'PRO') ~> TagPromotionEvent",
						"AddDerived derive({Event Type} = iif(isNull({Event Type}),'N/A',{Event Type}),",
						"          {Event Reason} = iif(isNull({Event Reason}),'N/A',{Event Reason}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Previous Corporate Title} = iif(isNull({Previous Corporate Title}),'N/A',{Previous Corporate Title}),",
						"          {Job Title} = iif(isNull({Job Title}),'N/A',{Job Title}),",
						"          {Job Family/Function} = iif(isNull({Job Family/Function}),'N/A',{Job Family/Function}),",
						"          {Previous Job Title} = iif(isNull({Previous Job Title}),'N/A',{Previous Job Family/Function}),",
						"          {Previous Job Family/Function} = iif(isNull({Previous Job Family/Function}),'N/A',{Previous Job Family/Function}),",
						"          {Rehire Indicator} = iif(isNull({Rehire Indicator}),'N/A',{Rehire Indicator}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work City} = iif(isNull({Work City}),'N/A',{Work City}),",
						"          {Work State} = iif(isNull({Work State}),'N/A',{Work State}),",
						"          {Work Country} = iif(isNull({Work Country}),'N/A',{Work Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Direct Manager Worker ID} = iif(isNull({Direct Manager Worker ID}),'N/A',{Direct Manager Worker ID}),",
						"          {Legacy Organization} = iif(isNull({Legacy Organization}),'N/A',{Legacy Organization}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4}),",
						"          Race = iif(isNull(Race),'N/A',Race),",
						"          {Hispanic or Latino Origin} = iif(isNull({Hispanic or Latino Origin}),'N/A',{Hispanic or Latino Origin}),",
						"          Gender = iif(isNull(Gender),'N/A',Gender),",
						"          {Veteran Ind} = iif(isNull({Veteran Ind}),'N/A',{Veteran Ind}),",
						"          LGTBQ = iif(isNull(LGTBQ),'N/A',LGTBQ),",
						"          {Disability Ind} = iif(isNull({Disability Ind}),'N/A',{Disability Ind}),",
						"          {Generation Desc} = iif(isNull({Generation Desc}),'N/A',{Generation Desc}),",
						"          {Manager Indicator} = iif(isNull({Manager Indicator}),'N/A',{Manager Indicator})) ~> ConvertNullsForKeyFields",
						"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
						"RemoveNullWorkerIdRowsHCT select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
						"RemoveNullWorkerIdRowsTER select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Last Promo Date},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
						"RemoveNullWorkerIdRowsHIR select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
						"RemoveNullWorkerIdRowsPRO select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"MergeEvents derive({Current Hire Date} = iif(isNull({Current Hire Date}),{Original Hire Date},{Current Hire Date})) ~> CalcNullDates",
						"CalcNullDates derive({Years of Service} = round({Years of Service},1),",
						"          {Years in Job} = round({Years in Job},1)) ~> CalcServiceforNulls",
						"filter1 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHCT",
						"filter2 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsTER",
						"filter3 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsHIR",
						"filter4 filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullWorkerIdRowsPRO",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date})) ~> derivedColumn1",
						"select1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Event Date},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Last Promo Date},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount),",
						"     RowCount = count({Worker ID})) ~> RemoveDuplicates",
						"RemoveDuplicates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['CoreFctTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_Headcount')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Terminations')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Hires')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Promotions')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_DivSlate_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMap"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "JoinEthMap"
						},
						{
							"name": "JoinGenderMap"
						},
						{
							"name": "SelectEthnicity"
						},
						{
							"name": "SelectGender"
						},
						{
							"name": "JoinApplicantMap"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectToRemoveJoinFields"
						},
						{
							"name": "CalcDivApplicantCount"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMap",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"Applicant select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectEthnicity join({Client ID} == {Ethnicity Client ID}",
						"     && {Client Engagement Date} == {Ethnicity Client Engagement Date}",
						"     && Race == {Ethnicity Client Race}",
						"     && {Hispanic or Latino Origin} == {Ethnicity Client Hispanic or Latino Origin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEthMap",
						"JoinEthMap, SelectGender join({Client ID} == {Gender Client ID}",
						"     && {Client Engagement Date} == {Gender Client Engagement Date}",
						"     && Gender == {Gender Client Gender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinGenderMap",
						"EthnicityMap select(mapColumn(",
						"          {Ethnicity Client ID} = {Client ID},",
						"          {Ethnicity Client Engagement Date} = {Client Engagement Date},",
						"          {Ethnicity Client Race} = {Client Race},",
						"          {Ethnicity Client Hispanic or Latino Origin} = {Client Hispanic or Latino Origin},",
						"          {Ethnicity Elloree Race} = {Elloree Race},",
						"          {Ethnicity Elloree Hispanic or Latino Origin} = {Elloree Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEthnicity",
						"GenderMap select(mapColumn(",
						"          {Gender Client ID} = {Client ID},",
						"          {Gender Client Engagement Date} = {Client Engagement Date},",
						"          {Gender Client Gender} = {Client Gender},",
						"          {Gender Elloree Gender} = {Elloree Gender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectGender",
						"JoinGenderMap, SelectApplicant join({Client ID} == {Applicant Client ID}",
						"     && {Client Engagement Date} == {Applicant Client Engagement Date}",
						"     && {Applicant Final Disposition} == {Applicant Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Applicant Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Applicant Client Applicant Rejected Reason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinApplicantMap",
						"ApplicantMap select(mapColumn(",
						"          {Applicant Client ID} = {Client ID},",
						"          {Applicant Client Engagement Date} = {Client Engagement Date},",
						"          {Applicant Client Applicant Final Disposition} = {Client Applicant Final Disposition},",
						"          {Applicant Client Applicant Step Before Final Disposition} = {Client Applicant Step Before Final Disposition},",
						"          {Applicant Client Applicant Rejected Reason} = {Client Applicant Rejected Reason},",
						"          {Applicant Elloree Applicant Final Disposition} = {Elloree Applicant Final Disposition},",
						"          {Applicant Elloree Applicant Category} = {Elloree Applicant Category},",
						"          {Applicant Elloree Submitted to Mgr Fl} = {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"JoinApplicantMap select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Applicant Type},",
						"          Race,",
						"          {Elloree Race} = {Ethnicity Elloree Race},",
						"          {Hispanic or Latino Origin},",
						"          {Elloree Hispanic or Latino Origin} = {Ethnicity Elloree Hispanic or Latino Origin},",
						"          Gender,",
						"          {Gender Elloree Gender},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition} = {Applicant Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category} = {Applicant Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl} = {Applicant Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectToRemoveJoinFields",
						"SelectToRemoveJoinFields derive({Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),1,0),",
						"          {Internal Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {External Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),1,0),",
						"          {Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",1,0),0),",
						"          {Internal Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {External Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),1,0),0),",
						"          {White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='White',1,0),0),",
						"          {Internal White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),",
						"          {External White Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),",
						"          {White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='White',1,0),0),0),",
						"          {Internal White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='White'),1,0),0),0),",
						"          {External White Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='White'),1,0),0),0),",
						"          {Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Black',1,0),0),",
						"          {Internal Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),",
						"          {External Black Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),",
						"          {Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Black',1,0),0),0),",
						"          {Internal Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Black'),1,0),0),0),",
						"          {External Black Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Black'),1,0),0),0),",
						"          {Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Asian',1,0),0),",
						"          {Internal Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),",
						"          {External Asian Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),",
						"          {Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Asian',1,0),0),0),",
						"          {Internal Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {External Asian Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Asian'),1,0),0),0),",
						"          {Latinx Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Internal Latinx Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {External Latinx Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),",
						"          {Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {Internal Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {External Latinx Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y'),1,0),0),0),",
						"          {2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),",
						"          {Internal 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {External 2+ Races Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='2+ Races'),1,0),0),",
						"          {2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Internal 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {External 2+ Races Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='2+ Races',1,0),0),0),",
						"          {Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Race}=='Other',1,0),0),",
						"          {Internal Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Race}=='Other'),1,0),0),",
						"          {External Other Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Race}=='Other'),1,0),0),",
						"          {Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {Internal Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {External Other Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Elloree Race}=='Other',1,0),0),0),",
						"          {PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {Internal PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {External PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),",
						"          {PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External PoC Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),",
						"          {Internal Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {External Male Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Male'),1,0),0),",
						"          {Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Internal Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {External Male Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Male',1,0),0),0),",
						"          {Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),",
						"          {Internal Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {External Female Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Female'),1,0),0),",
						"          {Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Internal Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {External Female Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',1,0),0),0),",
						"          {Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),",
						"          {Internal Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {External Other Gender Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Gender Elloree Gender}=='Other'),1,0),0),",
						"          {Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Internal Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {External Other Gender Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(and({Applicant Type}=='External',{Elloree Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Other',1,0),0),0),",
						"          {Diverse Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Internal Diverse Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {External Diverse Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),",
						"          {Diverse Candidates Hired} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Internal Diverse Candidates Hired} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {External Diverse Candidates Hired} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Elloree Applicant Final Disposition}==\"Hired\",\r",
						"iif(or(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),\r",
						"{Gender Elloree Gender}==\"Female\"),1,0),0),0),",
						"          {Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}=='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Elloree Applicant Final Disposition}=='Hired'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Internal Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {External Not Female PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Elloree Applicant Final Disposition}=='Hired')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(or(or(or({Elloree Race}=='Black',{Elloree Race}=='Asian'),\r",
						"or({Elloree Race}=='2+ Races',{Elloree Race}=='Other')),\r",
						"or({Elloree Race}=='Latinx',{Elloree Hispanic or Latino Origin}=='Y')),1,0),0),0),",
						"          {Not Female Not PoC Candidates StM} = iif(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='Internal',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates StM} = iif(and({Applicant Type}=='External',and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y')),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),{Applicant Final Disposition}==\"Hired\"),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {Internal Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='Internal',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0),",
						"          {External Not Female Not PoC Candidates Hired} = iif(and(and({Elloree Applicant Category}=='Candidate',{Elloree Submitted to Mgr Fl}=='Y'),and({Applicant Type}=='External',{Applicant Final Disposition}==\"Hired\")),\r",
						"iif({Gender Elloree Gender}!='Female',\r",
						"iif(and(or({Elloree Race}=='White',{Elloree Race}=='Did Not Self Identify'),\r",
						"{Elloree Hispanic or Latino Origin}!='Y'),1,0),0),0)) ~> CalcDivApplicantCount",
						"CalcDivApplicantCount aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Requisition ID},",
						"          {Event Year}),",
						"     {Candidates StM} = sum({Candidates StM}),",
						"          {Internal Candidates StM} = sum({Internal Candidates StM}),",
						"          {External Candidates StM} = sum({External Candidates StM}),",
						"          {Candidates Hired} = sum({Candidates Hired}),",
						"          {Internal Candidates Hired} = sum({Internal Candidates Hired}),",
						"          {External Candidates Hired} = sum({External Candidates Hired}),",
						"          {White Candidates StM} = sum({White Candidates StM}),",
						"          {Internal White Candidates StM} = sum({Internal White Candidates StM}),",
						"          {External White Candidates StM} = sum({External White Candidates StM}),",
						"          {White Candidates Hired} = sum({White Candidates Hired}),",
						"          {Internal White Candidates Hired} = sum({Internal White Candidates Hired}),",
						"          {External White Candidates Hired} = sum({External White Candidates Hired}),",
						"          {Black Candidates StM} = sum({Black Candidates StM}),",
						"          {Internal Black Candidates StM} = sum({Internal Black Candidates StM}),",
						"          {External Black Candidates StM} = sum({External Black Candidates StM}),",
						"          {Black Candidates Hired} = sum({Black Candidates Hired}),",
						"          {Internal Black Candidates Hired} = sum({Internal Black Candidates Hired}),",
						"          {External Black Candidates Hired} = sum({External Black Candidates Hired}),",
						"          {Latinx Candidates StM} = sum({Latinx Candidates StM}),",
						"          {Internal Latinx Candidates StM} = sum({Internal Latinx Candidates StM}),",
						"          {External Latinx Candidates StM} = sum({External Latinx Candidates StM}),",
						"          {Latinx Candidates Hired} = sum({Latinx Candidates Hired}),",
						"          {Internal Latinx Candidates Hired} = sum({Internal Latinx Candidates Hired}),",
						"          {External Latinx Candidates Hired} = sum({External Latinx Candidates Hired}),",
						"          {Asian Candidates StM} = sum({Asian Candidates StM}),",
						"          {Internal Asian Candidates StM} = sum({Internal Asian Candidates StM}),",
						"          {External Asian Candidates StM} = sum({External Asian Candidates StM}),",
						"          {Asian Candidates Hired} = sum({Asian Candidates Hired}),",
						"          {Internal Asian Candidates Hired} = sum({Internal Asian Candidates Hired}),",
						"          {External Asian Candidates Hired} = sum({External Asian Candidates Hired}),",
						"          {2+ Races Candidates StM} = sum({2+ Races Candidates StM}),",
						"          {Internal 2+ Races Candidates StM} = sum({Internal 2+ Races Candidates StM}),",
						"          {External 2+ Races Candidates StM} = sum({External 2+ Races Candidates StM}),",
						"          {2+ Races Candidates Hired} = sum({2+ Races Candidates Hired}),",
						"          {Internal 2+ Races Candidates Hired} = sum({Internal 2+ Races Candidates Hired}),",
						"          {External 2+ Races Candidates Hired} = sum({External 2+ Races Candidates Hired}),",
						"          {Other Candidates StM} = sum({Other Candidates StM}),",
						"          {Internal Other Candidates StM} = sum({Internal Other Candidates StM}),",
						"          {External Other Candidates StM} = sum({External Other Candidates StM}),",
						"          {Other Candidates Hired} = sum({Other Candidates Hired}),",
						"          {Internal Other Candidates Hired} = sum({Internal Other Candidates Hired}),",
						"          {External Other Candidates Hired} = sum({External Other Candidates Hired}),",
						"          {Male Candidates StM} = sum({Male Candidates StM}),",
						"          {Internal Male Candidates StM} = sum({Internal Male Candidates StM}),",
						"          {External Male Candidates StM} = sum({External Male Candidates StM}),",
						"          {Male Candidates Hired} = sum({Male Candidates Hired}),",
						"          {Internal Male Candidates Hired} = sum({Internal Male Candidates Hired}),",
						"          {External Male Candidates Hired} = sum({External Male Candidates Hired}),",
						"          {Female Candidates StM} = sum({Female Candidates StM}),",
						"          {Internal Female Candidates StM} = sum({Internal Female Candidates StM}),",
						"          {External Female Candidates StM} = sum({External Female Candidates StM}),",
						"          {Female Candidates Hired} = sum({Female Candidates Hired}),",
						"          {Internal Female Candidates Hired} = sum({Internal Female Candidates Hired}),",
						"          {External Female Candidates Hired} = sum({External Female Candidates Hired}),",
						"          {Other Gender Candidates StM} = sum({Other Gender Candidates StM}),",
						"          {Internal Other Gender Candidates StM} = sum({Internal Other Gender Candidates StM}),",
						"          {External Other Gender Candidates StM} = sum({External Other Gender Candidates StM}),",
						"          {Other Gender Candidates Hired} = sum({Other Gender Candidates Hired}),",
						"          {Internal Other Gender Candidates Hired} = sum({Internal Other Gender Candidates Hired}),",
						"          {External Other Gender Candidates Hired} = sum({External Other Gender Candidates Hired}),",
						"          {PoC Candidates StM} = sum({PoC Candidates StM}),",
						"          {Internal PoC Candidates StM} = sum({Internal PoC Candidates StM}),",
						"          {External PoC Candidates StM} = sum({External PoC Candidates StM}),",
						"          {PoC  Candidates Hired} = sum({PoC Candidates Hired}),",
						"          {Internal PoC  Candidates Hired} = sum({Internal PoC Candidates Hired}),",
						"          {External PoC  Candidates Hired} = sum({External PoC Candidates Hired}),",
						"          {Diverse Candidates StM} = sum({Diverse Candidates StM}),",
						"          {Internal Diverse Candidates StM} = sum({Internal Diverse Candidates StM}),",
						"          {External Diverse Candidates StM} = sum({External Diverse Candidates StM}),",
						"          {Diverse Candidates Hired} = sum({Diverse Candidates Hired}),",
						"          {Internal Diverse Candidates Hired} = sum({Internal Diverse Candidates Hired}),",
						"          {External Diverse Candidates Hired} = sum({External Diverse Candidates Hired}),",
						"          {Female Not PoC Candidates StM} = sum({Female Not PoC Candidates StM}),",
						"          {Internal Female Not PoC Candidates StM} = sum({Internal Female Not PoC Candidates StM}),",
						"          {External Female Not PoC Candidates StM} = sum({External Female Not PoC Candidates StM}),",
						"          {Female Not PoC Candidates Hired} = sum({Female Not PoC Candidates Hired}),",
						"          {Internal Female Not PoC Candidates Hired} = sum({Internal Female Not PoC Candidates Hired}),",
						"          {External Female Not PoC Candidates Hired} = sum({External Female Not PoC Candidates Hired}),",
						"          {Female PoC Candidates StM} = sum({Female PoC Candidates StM}),",
						"          {Internal Female PoC Candidates StM} = sum({Internal Female PoC Candidates StM}),",
						"          {External Female PoC Candidates StM} = sum({External Female PoC Candidates StM}),",
						"          {Female PoC Candidates Hired} = sum({Female PoC Candidates Hired}),",
						"          {Internal Female PoC Candidates Hired} = sum({Internal Female PoC Candidates Hired}),",
						"          {External Female PoC Candidates Hired} = sum({External Female PoC Candidates Hired}),",
						"          {Not Female PoC Candidates StM} = sum({Not Female PoC Candidates StM}),",
						"          {Internal Not Female PoC Candidates StM} = sum({Internal Not Female PoC Candidates StM}),",
						"          {External Not Female PoC Candidates StM} = sum({External Not Female PoC Candidates StM}),",
						"          {Not Female PoC Candidates Hired} = sum({Not Female PoC Candidates Hired}),",
						"          {Internal Not Female PoC Candidates Hired} = sum({Internal Not Female PoC Candidates Hired}),",
						"          {External Not Female PoC Candidates Hired} = sum({External Not Female PoC Candidates Hired}),",
						"          {Not Female Not PoC Candidates StM} = sum({Not Female Not PoC Candidates StM}),",
						"          {Internal Not Female Not PoC Candidates StM} = sum({Internal Not Female Not PoC Candidates StM}),",
						"          {External Not Female Not PoC Candidates StM} = sum({External Not Female Not PoC Candidates StM}),",
						"          {Not Female Not PoC Candidates Hired} = sum({Not Female Not PoC Candidates Hired}),",
						"          {Internal Not Female Not PoC Candidates Hired} = sum({Internal Not Female Not PoC Candidates Hired}),",
						"          {External Not Female Not PoC Candidates Hired} = sum({External Not Female Not PoC Candidates Hired})) ~> aggregate1",
						"aggregate1 derive({Diverse Slate} = iif((iif({Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {Internal Diverse Slate} = iif((iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {External Diverse Slate} = iif((iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0))>=2,'Y','N'),",
						"          {No Diverse Slate} = iif({Diverse Candidates StM}==0,'Y','N'),",
						"          {Internal No Diverse Slate} = iif({Internal Diverse Candidates StM}==0,'Y','N'),",
						"          {External No Diverse Slate} = iif({External Diverse Candidates StM}==0,'Y','N'),",
						"          {Diverse Hired Slate} = iif({Diverse Candidates Hired}>0,'Y','N'),",
						"          {Internal Diverse Hired Slate} = iif({Internal Diverse Candidates Hired}>0,'Y','N'),",
						"          {External Diverse Hired Slate} = iif({External Diverse Candidates Hired}>0,'Y','N'),",
						"          {PoC Slate} = iif({PoC Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal PoC Slate} = iif({Internal PoC Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External PoC Slate} = iif({External PoC Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No PoC Slate} = iif({PoC Candidates StM}==0,'Y','N'),",
						"          {Internal No PoC Slate} = iif({Internal PoC Candidates StM}==0,'Y','N'),",
						"          {External No PoC Slate} = iif({External PoC Candidates StM}==0,'Y','N'),",
						"          {PoC Hired Slate} = iif({PoC  Candidates Hired}>0,'Y','N'),",
						"          {Internal PoC Hired Slate} = iif({Internal PoC  Candidates Hired}>0,'Y','N'),",
						"          {External PoC Hired Slate} = iif({External PoC  Candidates Hired}>0,'Y','N'),",
						"          {White Slate} = iif({White Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal White Slate} = iif({Internal White Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External White Slate} = iif({External White Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No White Slate} = iif({White Candidates StM}==0,'Y','N'),",
						"          {Internal No White Slate} = iif({Internal White Candidates StM}==0,'Y','N'),",
						"          {External No White Slate} = iif({External White Candidates StM}==0,'Y','N'),",
						"          {White Hired Slate} = iif({White Candidates Hired}>0,'Y','N'),",
						"          {Internal White Hired Slate} = iif({Internal White Candidates Hired}>0,'Y','N'),",
						"          {External White Hired Slate} = iif({External White Candidates Hired}>0,'Y','N'),",
						"          {Black Slate} = iif({Black Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Black Slate} = iif({Internal Black Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Black Slate} = iif({External Black Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Black Slate} = iif({Black Candidates StM}==0,'Y','N'),",
						"          {Internal No Black Slate} = iif({Internal Black Candidates StM}==0,'Y','N'),",
						"          {External No Black Slate} = iif({External Black Candidates StM}==0,'Y','N'),",
						"          {Black Hired Slate} = iif({Black Candidates Hired}>0,'Y','N'),",
						"          {Internal Black Hired Slate} = iif({Internal Black Candidates Hired}>0,'Y','N'),",
						"          {External Black Hired Slate} = iif({External Black Candidates Hired}>0,'Y','N'),",
						"          {Latinx Slate} = iif({Latinx Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Latinx Slate} = iif({Internal Latinx Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Latinx Slate} = iif({External Latinx Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Latinx Slate} = iif({Latinx Candidates StM}==0,'Y','N'),",
						"          {Internal No Latinx Slate} = iif({Internal Latinx Candidates StM}==0,'Y','N'),",
						"          {External No Latinx Slate} = iif({External Latinx Candidates StM}==0,'Y','N'),",
						"          {Latinx Hired Slate} = iif({Latinx Candidates Hired}>0,'Y','N'),",
						"          {Internal Latinx Hired Slate} = iif({Internal Latinx Candidates Hired}>0,'Y','N'),",
						"          {External Latinx Hired Slate} = iif({External Latinx Candidates Hired}>0,'Y','N'),",
						"          {Asian Slate} = iif({Asian Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Asian Slate} = iif({Internal Asian Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Asian Slate} = iif({External Asian Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Asian Slate} = iif({Asian Candidates StM}==0,'Y','N'),",
						"          {Internal No Asian Slate} = iif({Internal Asian Candidates StM}==0,'Y','N'),",
						"          {External No Asian Slate} = iif({External Asian Candidates StM}==0,'Y','N'),",
						"          {Asian Hired Slate} = iif({Asian Candidates Hired}>0,'Y','N'),",
						"          {Internal Asian Hired Slate} = iif({Internal Asian Candidates Hired}>0,'Y','N'),",
						"          {External Asian Hired Slate} = iif({External Asian Candidates Hired}>0,'Y','N'),",
						"          {2+ Races Slate} = iif({2+ Races Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External 2+ Races Slate} = iif({External 2+ Races Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No 2+ Races Slate} = iif({2+ Races Candidates StM}==0,'Y','N'),",
						"          {Internal No 2+ Races Slate} = iif({Internal 2+ Races Candidates StM}==0,'Y','N'),",
						"          {External No 2+ Races Slate} = iif({External 2+ Races Candidates StM}==0,'Y','N'),",
						"          {2+ Races Hired Slate} = iif({2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Internal 2+ Races Hired Slate} = iif({Internal 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {External 2+ Races Hired Slate} = iif({External 2+ Races Candidates Hired}>0,'Y','N'),",
						"          {Other Race Slate} = iif({Other Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Other Race Slate} = iif({Internal Other Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Other Race Slate} = iif({External Other Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Other Race Slate} = iif({Other Candidates StM}==0,'Y','N'),",
						"          {Internal No Other Race Slate} = iif({Internal Other Candidates StM}==0,'Y','N'),",
						"          {External No Other Race Slate} = iif({External Other Candidates StM}==0,'Y','N'),",
						"          {Other Race Hired Slate} = iif({Other Candidates Hired}>0,'Y','N'),",
						"          {Internal Other Race Hired Slate} = iif({Internal Other Candidates Hired}>0,'Y','N'),",
						"          {External Other Race Hired Slate} = iif({External Other Candidates Hired}>0,'Y','N'),",
						"          {Female Slate} = iif({Female Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Female Slate} = iif({Internal Female Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Female Slate} = iif({External Female Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Female Slate} = iif({Female Candidates StM}==0,'Y','N'),",
						"          {Internal No Female Slate} = iif({Internal Female Candidates StM}==0,'Y','N'),",
						"          {External No Female Slate} = iif({External Female Candidates StM}==0,'Y','N'),",
						"          {Female Hired Slate} = iif({Female Candidates Hired}>0,'Y','N'),",
						"          {Internal Female Hired Slate} = iif({Internal Female Candidates Hired}>0,'Y','N'),",
						"          {External Female Hired Slate} = iif({External Female Candidates Hired}>0,'Y','N'),",
						"          {Male Slate} = iif({Male Candidates StM}>=2,\r",
						"iif(iif({Female PoC Candidates StM}>0,1,0)+iif({Female Not PoC Candidates StM}>0,1,0)+iif({Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {Internal Male Slate} = iif({Internal Male Candidates StM}>=2,\r",
						"iif(iif({Internal Female PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({Internal Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {External Male Slate} = iif({External Male Candidates StM}>=2,\r",
						"iif(iif({External Female PoC Candidates StM}>0,1,0)+\r",
						"iif({External Female Not PoC Candidates StM}>0,1,0)+\r",
						"iif({External Not Female PoC Candidates StM}>0,1,0)>=2,'Y','N'),'N'),",
						"          {No Male Slate} = iif({Male Candidates StM}==0,'Y','N'),",
						"          {Internal No Male Slate} = iif({Internal Male Candidates StM}==0,'Y','N'),",
						"          {External No Male Slate} = iif({External Male Candidates StM}==0,'Y','N'),",
						"          {Male Hired Slate} = iif({Male Candidates Hired}>0,'Y','N'),",
						"          {Internal Male Hired Slate} = iif({Internal Male Candidates Hired}>0,'Y','N'),",
						"          {External Male Hired Slate} = iif({External Male Candidates Hired}>0,'Y','N')) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TASlateFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Applicant')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_JobReq_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Req_Test",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "RemoveNullReqIDRows"
						},
						{
							"name": "tagEvent"
						},
						{
							"name": "AddEventMonth"
						},
						{
							"name": "RemoveDupRowsandAddRowCount"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"tagEvent derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddParameters",
						"AddEventMonth derive(Event = iif(isNull(Event),'N/A',Event),",
						"          {Requisition Type} = iif(isNull({Requisition Type}),'N/A',{Requisition Type}),",
						"          {Requisition Status} = iif(isNull({Requisition Status}),'N/A',{Requisition Status}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work Office City} = iif(isNull({Work Office City}),'N/A',{Work Office City}),",
						"          {Work Office State} = iif(isNull({Work Office State}),'N/A',{Work Office State}),",
						"          {Work Office Country} = iif(isNull({Work Office Country}),'N/A',{Work Office Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4})) ~> ConvertNullsForKeyFields",
						"FilterOutClientHeaderRowAndColumn filter(not(isNull({Event Date})) && not(isNull({Requisition ID}))) ~> RemoveNullReqIDRows",
						"RemoveNullReqIDRows derive(Event = 'Requisition',",
						"          EventId = 'REQ') ~> tagEvent",
						"AddParameters derive(EventMonth = month({Event Date})) ~> AddEventMonth",
						"SelectFinal aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}),",
						"     RowCount = count({Requisition ID})) ~> RemoveDupRowsandAddRowCount",
						"RemoveDupRowsandAddRowCount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ReqTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_Req_Test')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_JobReq_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "JobRegFactTableFile"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_JobReq_Append",
								"type": "DatasetReference"
							},
							"name": "JobReqAppendFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "AddEventMonth"
						},
						{
							"name": "RemoveNullReqID"
						},
						{
							"name": "tagEvent"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobRegFactTableFile",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as date,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as integer,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JobReqAppendFile",
						"JobReqAppendFile filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"AddEventMonth select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"tagEvent derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt) ~> AddParameters",
						"AddParameters derive(Event = iif(isNull(Event),'N/A',Event),",
						"          {Requisition Type} = iif(isNull({Requisition Type}),'N/A',{Requisition Type}),",
						"          {Requisition Status} = iif(isNull({Requisition Status}),'N/A',{Requisition Status}),",
						"          {Corporate Title} = iif(isNull({Corporate Title}),'N/A',{Corporate Title}),",
						"          {Work Office Location} = iif(isNull({Work Office Location}),'N/A',{Work Office Location}),",
						"          {Work Office City} = iif(isNull({Work Office City}),'N/A',{Work Office City}),",
						"          {Work Office Country} = iif(isNull({Work Office Country}),'N/A',{Work Office Country}),",
						"          {Strategic Work Location Ind} = iif(isNull({Strategic Work Location Ind}),'N/A',{Strategic Work Location Ind}),",
						"          {Business Group Level 1} = iif(isNull({Business Group Level 1}),'N/A',{Business Group Level 1}),",
						"          {Business Group Level 2} = iif(isNull({Business Group Level 2}),'N/A',{Business Group Level 2}),",
						"          {Business Group Level 3} = iif(isNull({Business Group Level 3}),'N/A',{Business Group Level 3}),",
						"          {Business Group Level 4} = iif(isNull({Business Group Level 4}),'N/A',{Business Group Level 4})) ~> ConvertNullsForKeyFields",
						"SelectFinal, JobRegFactTableFile union(byName: true)~> union1",
						"RemoveDuplicates aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}),",
						"     RowCount = count({Requisition ID})) ~> SelectOutput",
						"union1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Year},",
						"          EventId,",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveDuplicates",
						"ConvertNullsForKeyFields derive(EventMonth = month({Event Date})) ~> AddEventMonth",
						"FilterOutClientHeaderRowAndColumn filter(not(isNull({Event Date})) && not(isNull({Requisition ID}))) ~> RemoveNullReqID",
						"RemoveNullReqID derive(Event = 'Requisition',",
						"          EventId = 'REQ') ~> tagEvent",
						"SelectOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ReqTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_JobReq_Append')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherCore_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_OtherCore",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerivedColumns"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"Other filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRows derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Other',",
						"          {Event ID} = 'OTH',",
						"          EventMonth = month({Event Date})) ~> AddDerivedColumns",
						"AddDerivedColumns derive({Event (Type)} = iif(isNull({Event (Type)}),'N/A',{Event (Type)}),",
						"          {Event (Desc)} = iif(isNull({Event (Desc)}),'N/A',{Event (Desc)}),",
						"          {Other (Char Value 1)} = iif(isNull({Other (Char Value 1)}),'N/A',{Other (Char Value 1)}),",
						"          {Other (Char Value 2)} = iif(isNull({Other (Char Value 2)}),'N/A',{Other (Char Value 2)}),",
						"          {Other (Num Value 1)} = iif(isNull({Other (Num Value 1)}),'N/A',{Other (Num Value 1)}),",
						"          {Other (Num Value 2)} = iif(isNull({Other (Num Value 2)}),'N/A',{Other (Num Value 2)}),",
						"          {Other (Date Value 1)} = iif(isNull({Other (Date Value 1)}),'N/A',{Other (Date Value 1)}),",
						"          {Other (Date Value 2)} = iif(isNull({Other (Date Value 2)}),'N/A',{Other (Date Value 2)})) ~> ConvertNullsForKeyFields",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"SelectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OthrCoreFlexTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_OtherCore')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_OtherCore_File_Append')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_OtherCore_Append",
								"type": "DatasetReference"
							},
							"name": "OtherAppend"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddDerived"
						},
						{
							"name": "ConvertNullsForKeyFields"
						},
						{
							"name": "union1"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "SelectOutput"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date,",
						"          {Worker ID} as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherAppend",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"OtherAppend filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"ConvertNullsForKeyFields select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"RemoveNullRows derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'Other',",
						"          {Event ID} = 'OTH',",
						"          EventMonth = month({Event Date})) ~> AddDerived",
						"AddDerived derive({Event (Type)} = iif(isNull({Event (Type)}),'N/A',{Event (Type)}),",
						"          {Event (Desc)} = iif(isNull({Event (Desc)}),'N/A',{Event (Desc)}),",
						"          {Other (Char Value 1)} = iif(isNull({Other (Char Value 1)}),'N/A',{Other (Char Value 1)}),",
						"          {Other (Char Value 2)} = iif(isNull({Other (Char Value 2)}),'N/A',{Other (Char Value 2)}),",
						"          {Other (Num Value 1)} = iif(isNull({Other (Num Value 1)}),'N/A',{Other (Num Value 1)}),",
						"          {Other (Num Value 2)} = iif(isNull({Other (Num Value 2)}),'N/A',{Other (Num Value 2)}),",
						"          {Other (Date Value 1)} = iif(isNull({Other (Date Value 1)}),'N/A',{Other (Date Value 1)}),",
						"          {Other (Date Value 2)} = iif(isNull({Other (Date Value 2)}),'N/A',{Other (Date Value 2)})) ~> ConvertNullsForKeyFields",
						"SelectFinal, Other union(byName: true)~> union1",
						"union1 aggregate(groupBy({Client Engagement Date},",
						"          {Event Quarter},",
						"          {Worker ID},",
						"          {Event Year},",
						"          EventMonth,",
						"          {Event Date},",
						"          Event,",
						"          {Event ID},",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          EventMonth,",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Event ID},",
						"          Event,",
						"          {Event (Type)},",
						"          {Event (Desc)},",
						"          {Other (Char Value 1)},",
						"          {Other (Char Value 2)},",
						"          {Other (Num Value 1)},",
						"          {Other (Num Value 2)},",
						"          {Other (Date Value 1)},",
						"          {Other (Date Value 2)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOutput",
						"FilterOutClientHeaderRowAndColumn filter(!(isNull({Event Date}))||!(isNull({Worker ID}))) ~> RemoveNullRows",
						"SelectOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['OthrCoreFlexTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_OtherCore_Append')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_OtherCore_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Final_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_PerRatingHistory_File",
								"type": "DatasetReference"
							},
							"name": "PerformanceHistory"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCTEventYears"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistFactTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDBHist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "CreateTalentTagScore"
						},
						{
							"name": "CreateCurTalentTag"
						},
						{
							"name": "select1"
						},
						{
							"name": "SelectCoreValues"
						},
						{
							"name": "HCTFilter"
						},
						{
							"name": "MaxYearMinus2"
						},
						{
							"name": "JoinEventYrMinus2"
						},
						{
							"name": "SumEmpCountFor3Yr"
						},
						{
							"name": "join1"
						},
						{
							"name": "RemoveNullWorkerIDRows"
						},
						{
							"name": "SelectLastTalentTag"
						},
						{
							"name": "join2"
						},
						{
							"name": "union1"
						},
						{
							"name": "SelectHistoricalCoreDB"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "FilterHCTOnly"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'yyyy-MM-dd',",
						"          {Worker ID} as string,",
						"          {Event Year} as short,",
						"          {Last Performance Year} as short,",
						"          {Last Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Last Client Performance Rating} as string,",
						"          {Last Elloree Performance Rating} as string,",
						"          {Last Elloree Performance Rating Sort Id} as integer,",
						"          {Last Top Talent Ind} as string,",
						"          {Curr Performance Year} as short,",
						"          {Curr Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {Curr Talent Tag} as string,",
						"          {Curr Client Performance Rating} as string,",
						"          {Curr Elloree Performance Rating} as string,",
						"          {Curr Elloree Performance Rating Sort Id} as integer,",
						"          {Curr Top Talent Ind} as string,",
						"          {P1 Performance Year} as short,",
						"          {P1 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P1 Client Performance Rating} as string,",
						"          {P1 Elloree Performance Rating} as string,",
						"          {P1 Elloree Performance Rating Sort Id} as integer,",
						"          {P1 Top Talent Ind} as string,",
						"          {P2 Performance Year} as short,",
						"          {P2 Client Performance Rating} as string,",
						"          {P2 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P2 Elloree Performance Rating} as string,",
						"          {P2 Elloree Performance Rating Sort Id} as integer,",
						"          {P2 Top Talent Ind} as string,",
						"          {P3 Performance Year} as short,",
						"          {P3 Client Performance Rating} as string,",
						"          {P3 Performance Rating Date} as date 'yyyy-MM-dd',",
						"          {P3 Elloree Performance Rating} as string,",
						"          {P3 Elloree Performance Rating Sort Id} as integer,",
						"          {P3 Top Talent Ind} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerformanceHistory",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as double,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date,",
						"          {Current Hire Date} as date,",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCTEventYears",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingHistFactTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventID = 'HCT'\"),",
						"     format: 'query') ~> CoreDBHist",
						"join2 derive({Group 1-3 Scoring} = iif({Curr Elloree Performance Rating}=='Outstanding',1,0)\r",
						"+iif({P1 Elloree Performance Rating}=='Outstanding',1,0)\r",
						"+iif({P2 Elloree Performance Rating}=='Outstanding',1,0),",
						"          {Group 4-6 Scoring} = iif({Curr Elloree Performance Rating}=='Exceeds',1,0)\r",
						"+iif({P1 Elloree Performance Rating}=='Exceeds',1,0)\r",
						"+iif({P2 Elloree Performance Rating}=='Exceeds',1,0),",
						"          {Group 3 Flag} = iif({Curr Elloree Performance Rating}=='Outstanding', 'Y','N'),",
						"          {Group 6 Flag} = iif({Curr Elloree Performance Rating}=='Exceeds', 'Y','N')) ~> CreateTalentTagScore",
						"CreateTalentTagScore derive({Talent Tag} = iif({3 Yr TotalEmpCount}==3, iif({Group 1-3 Scoring}==3,'Group 1', \r",
						"iif({Group 1-3 Scoring}==2,'Group 2',\r",
						"iif({Group 3 Flag}=='Y','Group 3',\r",
						"iif({Group 4-6 Scoring}==3,'Group 4',\r",
						"iif({Group 4-6 Scoring}==2,'Group 5',\r",
						"iif({Group 6 Flag}=='Y','Group 6', 'N/A')))))),'N/A')) ~> CreateCurTalentTag",
						"CreateCurTalentTag select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Last Top Talent Ind},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Talent Tag} = {Talent Tag},",
						"          {Last Talent Tag},",
						"          {Last Talent Tag Year} = {Last Talent Tag PerfYear},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P1 Top Talent Ind},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P2 Top Talent Ind},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P3 Top Talent Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"RemoveDups select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreValues",
						"CoreForHCTEventYears filter({Event Code}=='HCT') ~> HCTFilter",
						"HCTFilter aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
						"SelectCoreValues, MaxYearMinus2 join({Event Year} >= {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinEventYrMinus2",
						"JoinEventYrMinus2 aggregate(groupBy({Worker ID 3Yr Count} = {Worker ID}),",
						"     {3 Yr TotalEmpCount} = sum(EmpCount)) ~> SumEmpCountFor3Yr",
						"PerformanceHistory, SumEmpCountFor3Yr join({Worker ID} == {Worker ID 3Yr Count},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"select1 filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
						"PerfRatingHistFactTbl select(mapColumn(",
						"          {Last Talent Tag WorkerId} = WorkerId,",
						"          {Last Talent Tag PerfYear} = CurrPerfYear,",
						"          {Last Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLastTalentTag",
						"join1, SelectLastTalentTag join({Worker ID} == {Last Talent Tag WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectColumns, SelectHistoricalCoreDB union(byName: true)~> union1",
						"CoreDBHist select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHistoricalCoreDB",
						"FilterHCTOnly select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code},",
						"          EmpCount),",
						"     RowCount = count({Worker ID})) ~> RemoveDups",
						"Core filter({Event Code}=='HCT') ~> FilterHCTOnly",
						"RemoveNullWorkerIDRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_PerRatingHistory_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_PerfRatingHist_Init_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Performance"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerformanceMapping"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalCoreDB"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "HistoricalTalentDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinToPerfMapping"
						},
						{
							"name": "PerformanceWithMapping"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "CurrJoin"
						},
						{
							"name": "CurrSelect"
						},
						{
							"name": "P1Join"
						},
						{
							"name": "P1Select"
						},
						{
							"name": "P2Join"
						},
						{
							"name": "P2Select"
						},
						{
							"name": "P3Join"
						},
						{
							"name": "P3Select"
						},
						{
							"name": "SelectPrep"
						},
						{
							"name": "TransformNulls"
						},
						{
							"name": "CalcLast"
						},
						{
							"name": "AddTopTalent"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "RemoveNullWorkerId"
						},
						{
							"name": "union1"
						},
						{
							"name": "union2"
						},
						{
							"name": "selectHistoricalCoreDB"
						},
						{
							"name": "select2"
						},
						{
							"name": "selectHistoricalTalentDB"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as date,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Performance",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerformanceMapping",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalCoreDB",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> HistoricalTalentDB",
						"aggregate1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}),",
						"     EmpCount = count({Worker ID})) ~> aggregate1",
						"union2, PerformanceMapping join({Client ID} == ClientId",
						"     && {Client Engagement Date} == ClientEngagementDt",
						"     && {Performance Rating} == ClientPerfRating,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinToPerfMapping",
						"JoinToPerfMapping select(mapColumn(",
						"          {Perf Client ID} = {Client ID},",
						"          {Perf Client Engagement Date} = {Client Engagement Date},",
						"          {Perf Event Year} = {Event Year},",
						"          {Perf Worker ID} = {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          ElloreePerfRating,",
						"          ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PerformanceWithMapping",
						"select1 derive({Curr Performance Year} = toShort({Event Year}),",
						"          {P1 Performance Year} = toShort({Event Year} - 1),",
						"          {P2 Performance Year} = toShort({Event Year} - 2),",
						"          {P3 Performance Year} = toShort({Event Year} - 3)) ~> derivedColumn1",
						"derivedColumn1, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {Curr Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrJoin",
						"CurrJoin select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P1 Performance Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Client Performance Rating} = {Performance Rating},",
						"          {Curr Performance Rating Date} = {Performance Rating Date},",
						"          {Curr ElloreePerfRating} = ElloreePerfRating,",
						"          {Curr ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CurrSelect",
						"CurrSelect, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P1 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1Join",
						"P1Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P2 Performance Year},",
						"          {P3 Performance Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date} = {Performance Rating Date},",
						"          {P1 Client Performance Rating} = {Performance Rating},",
						"          {P1 ElloreePerfRating} = ElloreePerfRating,",
						"          {P1 ElloreePerfRatingSortId} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P1Select",
						"P1Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P2 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2Join",
						"P2Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr ElloreePerfRating},",
						"          {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 ElloreePerfRating},",
						"          {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating} = {Performance Rating},",
						"          {P2 Performance Rating Date} = {Performance Rating Date},",
						"          {P2 ElloreePerfRating} = ElloreePerfRating,",
						"          {P2 ElloreePerfRatingSortId} = ElloreePerfRatingSortId,",
						"          {P3 Performance Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P2Select",
						"P2Select, PerformanceWithMapping join({Client ID} == {Perf Client ID}",
						"     && {Client Engagement Date} == {Perf Client Engagement Date}",
						"     && {Worker ID} == {Perf Worker ID}",
						"     && {P3 Performance Year} == {Perf Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P3Join",
						"P3Join select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating} = {Curr ElloreePerfRating},",
						"          {Curr Elloree Performance Rating Sort Id} = {Curr ElloreePerfRatingSortId},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating} = {P1 ElloreePerfRating},",
						"          {P1 Elloree Performance Rating Sort Id} = {P1 ElloreePerfRatingSortId},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating} = {P2 ElloreePerfRating},",
						"          {P2 Elloree Performance Rating Sort Id} = {P2 ElloreePerfRatingSortId},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating} = {Performance Rating},",
						"          {P3 Performance Rating Date} = {Performance Rating Date},",
						"          {P3 Elloree Performance Rating} = ElloreePerfRating,",
						"          {P3 Elloree Performance Rating Sort Id} = ElloreePerfRatingSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> P3Select",
						"CalcLast select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPrep",
						"SelectPrep derive({Last Client Performance Rating} = iif(isNull({Last Client Performance Rating}),'N/A',{Last Client Performance Rating}),",
						"          {Last Elloree Performance Rating} = iif(isNull({Last Elloree Performance Rating}),'N/A',{Last Elloree Performance Rating}),",
						"          {Last Elloree Performance Rating Sort Id} = iif(isNull({Last Elloree Performance Rating Sort Id}),99,{Last Elloree Performance Rating Sort Id}),",
						"          {Last Performance Rating Date} = iif(isNull({Last Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Last Performance Rating Date})),",
						"          {Curr Client Performance Rating} = iif(isNull({Curr Client Performance Rating}),'N/A',{Curr Client Performance Rating}),",
						"          {Curr Elloree Performance Rating} = iif(isNull({Curr Elloree Performance Rating}),'N/A',{Curr Elloree Performance Rating}),",
						"          {Curr Elloree Performance Rating Sort Id} = iif(isNull({Curr Elloree Performance Rating Sort Id}),99,{Curr Elloree Performance Rating Sort Id}),",
						"          {Curr Performance Rating Date} = iif(isNull({Curr Performance Rating Date}),concat('12/31/',toString({Curr Performance Year})),toString({Curr Performance Rating Date})),",
						"          {P1 Performance Rating Date} = iif(isNull({P1 Performance Rating Date}),concat('12/31/',toString({P1 Performance Year})),toString({P1 Performance Rating Date})),",
						"          {P1 Client Performance Rating} = iif(isNull({P1 Client Performance Rating}),'N/A',{P1 Client Performance Rating}),",
						"          {P1 Elloree Performance Rating} = iif(isNull({P1 Elloree Performance Rating}),'N/A',{P1 Elloree Performance Rating}),",
						"          {P1 Elloree Performance Rating Sort Id} = iif(isNull({P1 Elloree Performance Rating Sort Id}),99,{P1 Elloree Performance Rating Sort Id}),",
						"          {P2 Client Performance Rating} = iif(isNull({P2 Client Performance Rating}),'N/A',{P2 Client Performance Rating}),",
						"          {P2 Elloree Performance Rating} = iif(isNull({P2 Elloree Performance Rating}),'N/A',{P2 Elloree Performance Rating}),",
						"          {P2 Elloree Performance Rating Sort Id} = iif(isNull({P2 Elloree Performance Rating Sort Id}),99,{P2 Elloree Performance Rating Sort Id}),",
						"          {P2 Performance Rating Date} = iif(isNull({P2 Performance Rating Date}),concat('12/31/',toString({P2 Performance Year})),toString({P2 Performance Rating Date})),",
						"          {P3 Client Performance Rating} = iif(isNull({P3 Client Performance Rating}),'N/A',{P3 Client Performance Rating}),",
						"          {P3 Elloree Performance Rating} = iif(isNull({P3 Elloree Performance Rating}),'N/A',{P3 Elloree Performance Rating}),",
						"          {P3 Elloree Performance Rating Sort Id} = iif(isNull({P3 Elloree Performance Rating Sort Id}),99,{P3 Elloree Performance Rating Sort Id}),",
						"          {P3 Performance Rating Date} = iif(isNull({P3 Performance Rating Date}),concat('12/31/',toString({P3 Performance Year})),toString({P3 Performance Rating Date}))) ~> TransformNulls",
						"P3Select derive({Last Performance Year} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Year},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Year},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Year},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Year},{Curr Performance Year})))),",
						"          {Last Performance Rating Date} = iif(not(isNull({Curr Client Performance Rating})),{Curr Performance Rating Date},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Performance Rating Date},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Performance Rating Date},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Performance Rating Date},{Curr Performance Rating Date})))),",
						"          {Last Client Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Client Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Client Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Client Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Client Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating},'N/A')))),",
						"          {Last Elloree Performance Rating Sort Id} = iif(not(isNull({Curr Client Performance Rating})),{Curr Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P1 Client Performance Rating})),{P1 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P2 Client Performance Rating})),{P2 Elloree Performance Rating Sort Id},\r",
						"iif(not(isNull({P3 Client Performance Rating})),{P3 Elloree Performance Rating Sort Id},99))))) ~> CalcLast",
						"TransformNulls derive({Last Top Talent Ind} = iif({Last Elloree Performance Rating}=='Outstanding','Y',iif({Last Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {Curr Top Talent Ind} = iif({Curr Elloree Performance Rating}=='Outstanding','Y',iif({Curr Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P1 Top Talent Ind} = iif({P1 Elloree Performance Rating}=='Outstanding','Y',iif({P1 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P2 Top Talent Ind} = iif({P2 Elloree Performance Rating}=='Outstanding','Y',iif({P2 Elloree Performance Rating}=='Exceeds','Y','N')),",
						"          {P3 Top Talent Ind} = iif({P3 Elloree Performance Rating}=='Outstanding','Y',iif({P3 Elloree Performance Rating}=='Exceeds','Y','N'))) ~> AddTopTalent",
						"aggregate2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Last Top Talent Ind},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {P1 Top Talent Ind},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P2 Top Talent Ind},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P3 Top Talent Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"AddTopTalent aggregate(groupBy({Client ID},",
						"          {P2 Top Talent Ind},",
						"          {Last Elloree Performance Rating},",
						"          {P2 Performance Rating Date},",
						"          {P3 Top Talent Ind},",
						"          {P1 Elloree Performance Rating},",
						"          {P1 Top Talent Ind},",
						"          {Last Top Talent Ind},",
						"          {Last Performance Year},",
						"          {Last Performance Rating Date},",
						"          {Last Client Performance Rating},",
						"          {Last Elloree Performance Rating Sort Id},",
						"          {Curr Top Talent Ind},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {P3 Performance Year},",
						"          {P3 Client Performance Rating},",
						"          {P3 Performance Rating Date},",
						"          {P3 Elloree Performance Rating},",
						"          {P3 Elloree Performance Rating Sort Id},",
						"          {P2 Performance Year},",
						"          {P2 Client Performance Rating},",
						"          {P2 Elloree Performance Rating},",
						"          {P2 Elloree Performance Rating Sort Id},",
						"          {P1 Performance Year},",
						"          {P1 Performance Rating Date},",
						"          {P1 Client Performance Rating},",
						"          {P1 Elloree Performance Rating Sort Id},",
						"          {Curr Performance Year},",
						"          {Curr Performance Rating Date},",
						"          {Curr Client Performance Rating},",
						"          {Curr Elloree Performance Rating},",
						"          {Curr Elloree Performance Rating Sort Id}),",
						"     EmpCount = count({Worker ID})) ~> aggregate2",
						"FinalSelect filter(!(isNull({Worker ID}))) ~> RemoveNullWorkerId",
						"select2, selectHistoricalCoreDB union(byName: true)~> union1",
						"select3, selectHistoricalTalentDB union(byName: true)~> union2",
						"HistoricalCoreDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalCoreDB",
						"Core select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"HistoricalTalentDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Performance Rating} = PerfRating,",
						"          {Performance Rating Date} = PerfRatingDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectHistoricalTalentDB",
						"Performance select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"RemoveNullWorkerId sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['PerformanceHistoryFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_TalentData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_SilverMedalApplicant_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicantMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "HiredApplicants"
						},
						{
							"name": "JointoApplicantMap"
						},
						{
							"name": "GroupHiredApplicantsByYear"
						},
						{
							"name": "Interviewed"
						},
						{
							"name": "GroupInterviewedApplicantsandYear"
						},
						{
							"name": "selectApplicants"
						},
						{
							"name": "JoinHires"
						},
						{
							"name": "CalcSilverMedalist"
						},
						{
							"name": "selectColumnsForFactTbl"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Applicant Final Disposition} as string,",
						"          {Client Applicant Step Before Final Disposition} as string,",
						"          {Client Applicant Rejected Reason} as string,",
						"          {Elloree Applicant Final Disposition} as string,",
						"          {Elloree Applicant Category} as string,",
						"          {Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Elloree Applicant Final Disposition} as string,",
						"          {Suggested Elloree Applicant Category} as string,",
						"          {Suggested Elloree Submitted to Mgr Fl} as string,",
						"          {Suggested Source} as string,",
						"          {2021 Job Applicant} as string,",
						"          {2022 Job Applicant} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantMap",
						"JointoApplicantMap filter({Elloree Applicant Final Disposition}=='Hired') ~> HiredApplicants",
						"Applicant, ApplicantMap join({Applicant Final Disposition} == {Client Applicant Final Disposition}",
						"     && {Applicant Step Before Final Disposition} == {Client Applicant Step Before Final Disposition}",
						"     && {Applicant Rejected Reason} == {Client Applicant Rejected Reason}",
						"     && Applicant@{Client ID} == ApplicantMap@{Client ID}",
						"     && Applicant@{Client Engagement Date} == ApplicantMap@{Client Engagement Date},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JointoApplicantMap",
						"HiredApplicants aggregate(groupBy({Hired Client ID} = Applicant@{Client ID},",
						"          {Hired Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Hired  Applicant ID} = {Applicant ID},",
						"          {Hired  Event Year} = {Event Year}),",
						"     HiredReqCount = count({Requisition ID})) ~> GroupHiredApplicantsByYear",
						"selectApplicants filter({Elloree Applicant Final Disposition}=='Interviewed') ~> Interviewed",
						"Interviewed aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Event Year},",
						"          {Requisition ID}),",
						"     InterviewedReqCount = count({Requisition ID})) ~> GroupInterviewedApplicantsandYear",
						"JointoApplicantMap select(mapColumn(",
						"          {Client ID} = Applicant@{Client ID},",
						"          {Client Engagement Date} = Applicant@{Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicants",
						"GroupInterviewedApplicantsandYear, GroupHiredApplicantsByYear join({Client ID} == {Hired Client ID}",
						"     && {Client Engagement Date} == {Hired Client Engagement Date}",
						"     && {Applicant ID} == {Hired  Applicant ID}",
						"     && {Event Year} == {Hired  Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinHires",
						"JoinHires derive({Silver Medalist Ind} = iif((HiredReqCount)>=1,'N','Y')) ~> CalcSilverMedalist",
						"CalcSilverMedalist select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Applicant ID},",
						"          {Internal Worker ID},",
						"          {Requisition ID},",
						"          {Silver Medalist Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectColumnsForFactTbl",
						"selectColumnsForFactTbl sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SilverMedalistFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Applicant')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId}",
						"     && EventYear == {Talent EventYear},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y',\r",
						"iif(TalentIdentifier1=='Group 1 (O-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 2 (O-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 3 (O-1)','Y',\r",
						"iif(TalentIdentifier1=='Group 4 (E-3)','Y',\r",
						"iif(TalentIdentifier1=='Group 5 (E-2)','Y',\r",
						"iif(TalentIdentifier1=='Group 6 (E-1)','Y','N'))))))),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_BL_wParam_Evergreen')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						},
						{
							"name": "FilterEngagementSurveyeSat"
						},
						{
							"name": "CalceSatSurveyAvg"
						},
						{
							"name": "derivedSpeedBump8eSat"
						},
						{
							"name": "SelectSpeedbump8"
						},
						{
							"name": "FilterEngagementSurveySafeBelongMatter"
						},
						{
							"name": "CalcBelongSurveyAvg"
						},
						{
							"name": "derivedSpeedBump9Belong"
						},
						{
							"name": "SelectSpeedbump9"
						},
						{
							"name": "FilterEngagementSurveyGrowth"
						},
						{
							"name": "CalcGrowthSurveyAvg"
						},
						{
							"name": "derivedSpeedBump10Growth"
						},
						{
							"name": "SelectSpeedbump10"
						},
						{
							"name": "FilterEngagementSurveyMgrFBkConvo"
						},
						{
							"name": "CalcMgrFBkConvoSurveyAvg"
						},
						{
							"name": "derivedSpeedBump11MgrFBkConvo"
						},
						{
							"name": "SelectSpeedbump11"
						},
						{
							"name": "FilterEngagementSurveyPotential"
						},
						{
							"name": "derivedSpeedBump12Potential"
						},
						{
							"name": "SelectSpeedbump12"
						},
						{
							"name": "joinSurveySpeedbump8"
						},
						{
							"name": "joinSpeedbump9"
						},
						{
							"name": "joinSpeedbump10"
						},
						{
							"name": "joinSpeedbump11"
						},
						{
							"name": "joinSpeedbump12"
						},
						{
							"name": "CleanupJoinFields"
						},
						{
							"name": "FilterEngagementSurveyGoals"
						},
						{
							"name": "SelectSurveyGoals"
						},
						{
							"name": "filter1"
						},
						{
							"name": "SelectSurveyValues"
						},
						{
							"name": "joinSurveyGoals"
						},
						{
							"name": "joinSurveyValues"
						},
						{
							"name": "SpecialCalcForFlightRisk"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> OtherCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          ManagerInd,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag,",
						"          {Emp Curr Elloree Perf Rating} = CurrElloreePerfRating,",
						"          {Emp P1 Elloree Perf Rating} = P1ElloreePerfRating,",
						"          {Emp P2 Elloree Perf Rating} = P2ElloreePerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"CleanupJoinFields derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',iif({Years of Service}>=5,iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Employee Satisfaction',",
						"          {Speedbump 8 Desc} = 'Employees with an average score below 82.8 when asked about satisfaction with working at the company',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif(not(isNull(eSatSpeedbump8)),eSatSpeedbump8,'N'),'N'),",
						"          {Speedbump 9 Name} = 'Employee Belonging',",
						"          {Speedbump 9 Desc} = 'Employees with an average score below 84.7 when asked about being themselves and belomging at the company',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(not(isNull(BelongSpeedbump9)),BelongSpeedbump9,'N'),'N'),",
						"          {Speedbump 10 Name} = 'Employee Growth',",
						"          {Speedbump 10 Desc} = 'Employees with an average score below 81.2 when asked about opportunities to learn and develop their skillset at the company',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(not(isNull(GrowthSpeedbump10)),GrowthSpeedbump10,'N'),'N'),",
						"          {Speedbump 11 Name} = 'Mgr Supp., Fdbck, Conv',",
						"          {Speedbump 11 Desc} = 'Employees with an avg. score below 82.5 when asked about their Manager prioritizing their wellbeing, providing feedback and having quarterly conversations.',",
						"          {Speedbump 11 Flag} = iif($SB11_Placeholder=='Y',iif(not(isNull(MgrFBkConvoSpeedbump11)),MgrFBkConvoSpeedbump11,'N'),'N'),",
						"          {Speedbump 12 Name} = 'Employee Potential',",
						"          {Speedbump 12 Desc} = 'Perf Review - Final Calibrated Potential Value',",
						"          {Speedbump 12 Flag} = iif($SB12_Placeholder=='Y',iif(not(isNull(PotentialSpeedbump12)),PotentialSpeedbump12,'N'),'N'),",
						"          {Speedbump 13 Name} = 'Left Behind',",
						"          {Speedbump 13 Desc} = 'Employees rated as Meets or lower that were top performers in prior 2 years.',",
						"          {Speedbump 13 Flag} = iif($SB13_Placeholder=='Y',\r",
						"iif({Emp Curr Elloree Perf Rating}=='Meets' || {Emp Curr Elloree Perf Rating}=='Does Not Meet',\r",
						"iif({Emp P1 Elloree Perf Rating}=='Exceeds' || {Emp P1 Elloree Perf Rating}=='Outstanding', \r",
						"iif({Emp P2 Elloree Perf Rating}=='Exceeds' ||{Emp P2 Elloree Perf Rating}=='Outstanding', \r",
						"iif({Potential Survey Val}=='High' || {Potential Survey Val}=='Medium',\r",
						"iif({Goals Survey Val}=='Accomplished' || {Goals Survey Val}=='Exceeded', \r",
						"iif({Values Survey Val}=='Always' ||{Values Survey Val}=='Often','Y','N'),'N'),'N'),'N'),'N'),'N'),'N'),",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"SpecialCalcForFlightRisk select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"Talent select(mapColumn(",
						"          {Talent WorkerId} = WorkerId,",
						"          {Talent EventYear} = EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(WorkerId == {Talent WorkerId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"OtherCore filter(EventType=='Engagement Survey - eSat') ~> FilterEngagementSurveyeSat",
						"FilterEngagementSurveyeSat aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveryValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalceSatSurveyAvg",
						"CalceSatSurveyAvg derive(eSatSpeedbump8 = iif(SurveryAvg<82.8, 'Y','N')) ~> derivedSpeedBump8eSat",
						"derivedSpeedBump8eSat select(mapColumn(",
						"          WorkerId,",
						"          eSatSpeedbump8",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump8",
						"OtherCore filter(EventType=='Engagement Survey - Safe_Belong_Matter' && EventDesc=='I can be myself and belong at Equinix.') ~> FilterEngagementSurveySafeBelongMatter",
						"FilterEngagementSurveySafeBelongMatter aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcBelongSurveyAvg",
						"CalcBelongSurveyAvg derive(BelongSpeedbump9 = iif(SurveryAvg<84.7, 'Y','N')) ~> derivedSpeedBump9Belong",
						"derivedSpeedBump9Belong select(mapColumn(",
						"          WorkerId,",
						"          BelongSpeedbump9",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump9",
						"OtherCore filter(EventType=='Engagement Survey - Growth_Devt') ~> FilterEngagementSurveyGrowth",
						"FilterEngagementSurveyGrowth aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcGrowthSurveyAvg",
						"CalcGrowthSurveyAvg derive(GrowthSpeedbump10 = iif(SurveryAvg<81.2, 'Y','N')) ~> derivedSpeedBump10Growth",
						"derivedSpeedBump10Growth select(mapColumn(",
						"          WorkerId,",
						"          GrowthSpeedbump10",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump10",
						"OtherCore filter(EventType=='Engagement Survey - Well_Being_Mgr' || EventType=='Engagement Survey - Feedback' || EventType=='Engagement Survey - Quarter_Convo') ~> FilterEngagementSurveyMgrFBkConvo",
						"FilterEngagementSurveyMgrFBkConvo aggregate(groupBy(WorkerId),",
						"     EventQuarterCount = countAll(WorkerId,EventQuarter),",
						"          SumSurveyValues = sum(OtherNumVal1),",
						"          SurveryAvg = sum(OtherNumVal1)/countAll(WorkerId,EventQuarter)) ~> CalcMgrFBkConvoSurveyAvg",
						"CalcMgrFBkConvoSurveyAvg derive(MgrFBkConvoSpeedbump11 = iif(SurveryAvg<82.5, 'Y','N')) ~> derivedSpeedBump11MgrFBkConvo",
						"derivedSpeedBump11MgrFBkConvo select(mapColumn(",
						"          WorkerId,",
						"          MgrFBkConvoSpeedbump11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump11",
						"OtherCore filter(EventType=='Potential') ~> FilterEngagementSurveyPotential",
						"FilterEngagementSurveyPotential derive(PotentialSpeedbump12 = iif(OtherCharVal11=='At Potential / Well Placed', 'Y','N')) ~> derivedSpeedBump12Potential",
						"derivedSpeedBump12Potential select(mapColumn(",
						"          WorkerId,",
						"          PotentialSpeedbump12,",
						"          {Potential Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSpeedbump12",
						"joinSurveyValues, SelectSpeedbump8 join({Worker ID} == SelectSpeedbump8@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveySpeedbump8",
						"joinSurveySpeedbump8, SelectSpeedbump9 join({Worker ID} == SelectSpeedbump9@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump9",
						"joinSpeedbump9, SelectSpeedbump10 join({Worker ID} == SelectSpeedbump10@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump10",
						"joinSpeedbump10, SelectSpeedbump11 join({Worker ID} == SelectSpeedbump11@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump11",
						"joinSpeedbump11, SelectSpeedbump12 join({Worker ID} == SelectSpeedbump12@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSpeedbump12",
						"joinSpeedbump12 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          ManagerInd,",
						"          {Core Event Id},",
						"          {Core Event Date},",
						"          EventQuarter,",
						"          {Event Year},",
						"          {Years of Service},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Curr Talent Tag},",
						"          {Emp Curr Elloree Perf Rating},",
						"          {Emp P1 Elloree Perf Rating},",
						"          {Emp P2 Elloree Perf Rating},",
						"          {Direct Manager Worker ID},",
						"          CoreLastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo},",
						"          {P1 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5,",
						"          {Mgr Worker ID},",
						"          {Mgr Years of Service},",
						"          {Mgr Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag},",
						"          WorkerIdForMgrCount,",
						"          ManagerCount,",
						"          eSatSpeedbump8,",
						"          BelongSpeedbump9,",
						"          GrowthSpeedbump10,",
						"          MgrFBkConvoSpeedbump11,",
						"          PotentialSpeedbump12,",
						"          {Goals Survey Val},",
						"          {Potential Survey Val},",
						"          {Values Survey Val}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupJoinFields",
						"OtherCore filter(EventType=='Goals') ~> FilterEngagementSurveyGoals",
						"FilterEngagementSurveyGoals select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Goals Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyGoals",
						"OtherCore filter(EventType=='Values') ~> filter1",
						"filter1 select(mapColumn(",
						"          WorkerId,",
						"          EventDesc,",
						"          EventType,",
						"          {Values Survey Val} = OtherCharVal11",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSurveyValues",
						"Join3YrWorkerMgrCount, SelectSurveyGoals join({Worker ID} == WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveyGoals",
						"joinSurveyGoals, SelectSurveyValues join({Worker ID} == SelectSurveyValues@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSurveyValues",
						"CalcSpeedBumps derive({Speedbump 14 Name} = 'Flight Risk',",
						"          {Speedbump 14 Desc} = 'Flight Risk based on Level, Tenure, Promo, Emp. Satisfaction and Belonging.',",
						"          {Speedbump 14 Flag} = iif($SB14_Placeholder=='Y',iif((iif(({Elloree Corporate Title Sort}==1 && {Years of Service}<=5.9) \r",
						"|| ({Elloree Corporate Title Sort}==2 && {Years of Service}<=6.2)\r",
						"|| ({Elloree Corporate Title Sort}==3 && {Years of Service}<=4.4)\r",
						"|| ({Elloree Corporate Title Sort}==4 && {Years of Service}<=3.7)\r",
						"|| ({Elloree Corporate Title Sort}==5 && {Years of Service}<=3.6),1,0)+\r",
						"iif({Speedbump 4 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 8 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 9 Flag}=='Y',1,0)+\r",
						"iif({Speedbump 13 Flag}=='Y',1,0))>=3,'Y','N'),'N')) ~> SpecialCalcForFlightRisk",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Baseline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreFact"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "JoinPerformance"
						},
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "select4"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "FilterOnlySpeedbumpPop"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreFact",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear <= '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> AllCore",
						"CoreFact, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID}",
						"     && EventYear == {Emp Perf Rating Event Year},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreFact@ClientId,",
						"          {Client Engagement Date} = CoreFact@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif({Elloree Corporate Title Sort}==1, 'N',iif({Curr Promo}=='Y','N',iif({P1 Promo}=='Y','N',iif({P2 Promo}=='Y','N',iif(isNull(CoreLastPromoDt),'Y',iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif({Applicant Five or More}=='Y','Y','N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif({Silver Medalist Ind}=='Y','Y','N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif(ManagerCount>=3,'Y','N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter} = EventQuarter,",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select4",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"select4 filter({Speedbump Population Ind}=='Y') ~> FilterOnlySpeedbumpPop",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = sum(RowCount)) ~> CountMgrByWorker",
						"AllCore, Select3PYear join(EventYear == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"FilterOnlySpeedbumpPop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"join1, CurrPromo join(WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(WorkerId == {Applicant ID Calculated}",
						"     && EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSpeedbumpsFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Speedbumps_Quarter_wParam_Bamboo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables/Speedbumps Fact Table Files"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreHCT"
						},
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalist"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreYear"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "LevelMapForEmp"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CorePromo"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsDBBaseline"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistory"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllCore"
						},
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "AllSpeedbumpsForInactiveWorkerSet"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputSpeedbumpsFactTbl"
						}
					],
					"transformations": [
						{
							"name": "SelectCurrYear"
						},
						{
							"name": "RemoveYearNullRows"
						},
						{
							"name": "SelectCoreForMgrPopulation"
						},
						{
							"name": "SelectEmpLvlMap"
						},
						{
							"name": "JoinLevel"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectMgrData"
						},
						{
							"name": "CurrYearPromoFilter"
						},
						{
							"name": "Select1PYear"
						},
						{
							"name": "Select2PYear"
						},
						{
							"name": "SelectPromoWorkerID"
						},
						{
							"name": "P1YearPromoFilter"
						},
						{
							"name": "P2YearPromoFilter"
						},
						{
							"name": "selectP2Promo"
						},
						{
							"name": "selectP1Promo"
						},
						{
							"name": "selectCurrPromo"
						},
						{
							"name": "P2Promo"
						},
						{
							"name": "P1Promo"
						},
						{
							"name": "CurrPromo"
						},
						{
							"name": "JoinCurrPromo"
						},
						{
							"name": "JoinP2Promo"
						},
						{
							"name": "JoinP1Promo"
						},
						{
							"name": "CalcSpeedBumps"
						},
						{
							"name": "AggregateSilverMedalists"
						},
						{
							"name": "JoinApplicant"
						},
						{
							"name": "SelectSilverMedalists"
						},
						{
							"name": "AggApplicantData"
						},
						{
							"name": "CalcApplicantId"
						},
						{
							"name": "Join5OrMoreApplied"
						},
						{
							"name": "Select5orMoreAppliedApplicant"
						},
						{
							"name": "SelectTargetCoreActiveHCT"
						},
						{
							"name": "DerivedApplIntWorkerID"
						},
						{
							"name": "Select3PYear"
						},
						{
							"name": "P3YearPromoFilter"
						},
						{
							"name": "selectP3Promo"
						},
						{
							"name": "P3Promo"
						},
						{
							"name": "JoinP3Promo"
						},
						{
							"name": "select6"
						},
						{
							"name": "SelectApplColumns"
						},
						{
							"name": "select7"
						},
						{
							"name": "SelectTermRecords"
						},
						{
							"name": "SelectBaselineSpeedbumpWorkerID"
						},
						{
							"name": "SelectEmpTalentTag"
						},
						{
							"name": "JoinPerformance"
						},
						{
							"name": "ExistsInBaseline"
						},
						{
							"name": "TermsInSpeedbumpBaseline"
						},
						{
							"name": "SeelectOnyTermsNotInTargetHCT"
						},
						{
							"name": "TermDerivedSpeedbumpColumns"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "exists1"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "InactiveDerivedSpeedbumpColumns"
						},
						{
							"name": "SelectInactiveSpeedbumpRows"
						},
						{
							"name": "UnionInInactiveAndTermRecords"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "SelectFinalQtrOutput"
						},
						{
							"name": "SelectPrior3Years"
						},
						{
							"name": "RemoveNullsMgrIds"
						},
						{
							"name": "GroupWorkerAndMgr"
						},
						{
							"name": "CountMgrByWorker"
						},
						{
							"name": "Join3YrWorkerMgrCount"
						},
						{
							"name": "select8"
						},
						{
							"name": "select9"
						},
						{
							"name": "select10"
						},
						{
							"name": "select11"
						},
						{
							"name": "filter1"
						},
						{
							"name": "JoinInactiveAndTerminatedToLastSpeedbumps"
						},
						{
							"name": "SelectTerminatedWorkerId"
						},
						{
							"name": "SelectInactiveWorkerId"
						},
						{
							"name": "JoinTermAndInactive"
						},
						{
							"name": "SelectFinalInactiveAndTermOutput1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectInactTermPriorSpeedbumpRecord"
						},
						{
							"name": "RemoveTerms"
						},
						{
							"name": "SelectTalentColumns"
						},
						{
							"name": "JoinTalentIdentifiers"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SB_BL_Year as string,",
						"     SB_BL_Quarter as string,",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     SB_Target_Year as string,",
						"     SB_Target_Quarter as string,",
						"     SB1_MgrLvl as string,",
						"     SB2_MgrTalent as string,",
						"     SB3_MgrExp as string,",
						"     SB4_Promotion as string,",
						"     SB5_Applied5 as string,",
						"     SB6_SilvMedal as string,",
						"     SB7_Mgr3Plus as string,",
						"     SB8_Placeholder as string,",
						"     SB9_Placeholder as string,",
						"     SB10_Placeholder as string,",
						"     SB11_Placeholder as string,",
						"     SB12_Placeholder as string,",
						"     SB13_Placeholder as string,",
						"     SB14_Placeholder as string,",
						"     SB15_Placeholder as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreHCT",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> SilverMedalist",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'HCT' and EventYear = '{$SB_Target_Year}' and EventQuarter = '{$SB_Target_Quarter}'\"),",
						"     format: 'query') ~> CoreYear",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LevelMapForEmp",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'PRO' and EventYear <= '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CorePromo",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}' and EventQuarter = '{$SB_BL_Quarter}'\"),",
						"     format: 'query') ~> SpeedbumpsDBBaseline",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventId = 'TER' and EventYear = '{$SB_Target_Year}'\"),",
						"     format: 'query') ~> CoreTerminations",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> PerfRatingHistory",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllCore",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> AllSpeedbumpsForInactiveWorkerSet",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$SB_BL_Year}'\"),",
						"     format: 'query') ~> Talent",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     MaxCurrYear = max({Event Year})) ~> SelectCurrYear",
						"select6 filter(!(isNull({Event Year}))) ~> RemoveYearNullRows",
						"Join5OrMoreApplied select(mapColumn(",
						"          {Client ID} = CoreHCT@ClientId,",
						"          {Client Engagement Date} = CoreHCT@ClientEngagementDt,",
						"          {Worker ID} = CoreHCT@WorkerId,",
						"          ManagerInd,",
						"          {Core EventId} = EventId,",
						"          {Core Event Date} = EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = CoreHCT@EventYear,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Elloree Corporate Title Sort} = ElloreeCorpTitleSortId,",
						"          {Curr Talent Tag} = {Emp Perf Rating Curr Talent Tag},",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          CoreLastPromoDt = LastPromoDt,",
						"          {Curr Promo},",
						"          {P2 Promo} = {P1 Promo},",
						"          {P1 Promo} = {P2 Promo},",
						"          {P3 Promo},",
						"          {Silver Medalist Ind},",
						"          {Applicant Five or More},",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreForMgrPopulation",
						"LevelMapForEmp select(mapColumn(",
						"          {Emp Lvl Map Client Corporate Title} = ClientCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title} = ElloreeCorpTitle,",
						"          {Emp Lvl Map Elloree Corporate Title Sort} = ElloreeCorpTitleSortId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpLvlMap",
						"JoinPerformance, LevelMapForEmp join(CorpTitle == ClientCorpTitle,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLevel",
						"SelectCoreForMgrPopulation, selectMgrData join({Direct Manager Worker ID} == {Mgr Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"SelectCoreForMgrPopulation select(mapColumn(",
						"          {Mgr Worker ID} = {Worker ID},",
						"          {Mgr Years of Service} = {Years of Service},",
						"          {Mgr Elloree Corporate Title} = {Elloree Corporate Title},",
						"          {Mgr Elloree Corporate Title Sort} = {Elloree Corporate Title Sort},",
						"          {Mgr Curr Talent Tag} = {Curr Talent Tag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMgrData",
						"SelectPromoWorkerID, SelectCurrYear join({Event Year} == MaxCurrYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrYearPromoFilter",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max1PYear = max({Event Year})-1) ~> Select1PYear",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max2PYear = max({Event Year})-2) ~> Select2PYear",
						"CorePromo select(mapColumn(",
						"          {PRO Worker ID} = WorkerId,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromoWorkerID",
						"SelectPromoWorkerID, Select1PYear join({Event Year} == Max1PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P1YearPromoFilter",
						"SelectPromoWorkerID, Select2PYear join({Event Year} == Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> P2YearPromoFilter",
						"P2YearPromoFilter select(mapColumn(",
						"          {P2 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP2Promo",
						"P1YearPromoFilter select(mapColumn(",
						"          {P1 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP1Promo",
						"CurrYearPromoFilter select(mapColumn(",
						"          {Curr YR Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCurrPromo",
						"select9 derive({P2 Promo} = 'Y') ~> P2Promo",
						"select10 derive({P1 Promo} = 'Y') ~> P1Promo",
						"select11 derive({Curr Promo} = 'Y') ~> CurrPromo",
						"JoinTalentIdentifiers, CurrPromo join(CoreHCT@WorkerId == {Curr YR Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrPromo",
						"JoinP3Promo, P2Promo join(CoreHCT@WorkerId == {P2 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP2Promo",
						"JoinP2Promo, P1Promo join(CoreHCT@WorkerId == {P1 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP1Promo",
						"Join3YrWorkerMgrCount derive({Speedbump Population Ind} = iif({Curr Talent Tag}!='N/A','Y','N'),",
						"          {Speedbump Worker Status} = 'Active',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = iif($SB1_MgrLvl=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Elloree Corporate Title}=='Executive','N',iif({Mgr Elloree Corporate Title Sort}>={Elloree Corporate Title Sort},'Y','N'))),'N'),",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = iif($SB2_MgrTalent=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Mgr Curr Talent Tag}=='N/A','Y','N')),'N'),",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = iif($SB3_MgrExp=='Y',iif(isNull({Mgr Worker ID}),'N',iif({Years of Service}>={Mgr Years of Service},'Y','N')),'N'),",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = iif($SB4_Promotion=='Y',\r",
						"iif({Years of Service}>=5,\r",
						"iif({Elloree Corporate Title Sort}==1, 'N',\r",
						"iif({Curr Promo}=='Y','N',\r",
						"iif({P1 Promo}=='Y','N',\r",
						"iif({P2 Promo}=='Y','N',\r",
						"iif(isNull(CoreLastPromoDt),'Y',\r",
						"iif(year(CoreLastPromoDt)>=toInteger($SB_BL_Year)-2,'N','Y')))))),'N'),'N'),",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = iif($SB5_Applied5=='Y',iif({Applicant Five or More}=='Y','Y','N'),'N'),",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = iif($SB6_SilvMedal=='Y',iif({Silver Medalist Ind}=='Y','Y','N'),'N'),",
						"          {Speedbump 7 Name} = '3+ Managers',",
						"          {Speedbump 7 Desc} = 'Employee has had 3 or more managers in the past 3 years',",
						"          {Speedbump 7 Flag} = iif($SB7_Mgr3Plus=='Y',iif(ManagerCount>=3,'Y','N'),'N'),",
						"          {Speedbump 8 Name} = 'Individual Contributors',",
						"          {Speedbump 8 Desc} = 'Individual contributors, with no management accountability (for senior talent)',",
						"          {Speedbump 8 Flag} = iif($SB8_Placeholder=='Y',iif({Elloree Corporate Title Sort}<=2,iif(ManagerInd=='N','Y','N'),'N'),'N'),",
						"          {Speedbump 9 Name} = 'Loss Risk',",
						"          {Speedbump 9 Desc} = 'Risk of Loss is High',",
						"          {Speedbump 9 Flag} = iif($SB9_Placeholder=='Y',iif(TalentIdentifier2=='High','Y','N'),'N'),",
						"          {Speedbump 10 Name} = 'Loss Impact',",
						"          {Speedbump 10 Desc} = 'Impact of Loss is High',",
						"          {Speedbump 10 Flag} = iif($SB10_Placeholder=='Y',iif(TalentIdentifier3=='High','Y','N'),'N'),",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> CalcSpeedBumps",
						"DerivedApplIntWorkerID aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year},",
						"          {Silver Medalist Ind}),",
						"     {Silver Medal Count} = count({Requisition ID})) ~> AggregateSilverMedalists",
						"JoinP1Promo, SelectSilverMedalists join(CoreHCT@WorkerId == {Applicant ID Calculated}",
						"     && CoreHCT@EventYear <= {Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinApplicant",
						"AggregateSilverMedalists filter({Silver Medalist Ind}=='Y') ~> SelectSilverMedalists",
						"CalcApplicantId aggregate(groupBy({Applicant ID Calculated},",
						"          {Event Year}),",
						"     {Count Req} = count({Requisition ID})) ~> AggApplicantData",
						"SelectApplColumns derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> CalcApplicantId",
						"JoinApplicant, Select5orMoreAppliedApplicant join(CoreHCT@WorkerId == AggApplicantData@{Applicant ID Calculated}",
						"     && CoreHCT@EventYear == AggApplicantData@{Event Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join5OrMoreApplied",
						"AggApplicantData derive({Applicant Five or More} = iif({Count Req}>=5,'Y','N')) ~> Select5orMoreAppliedApplicant",
						"CalcSpeedBumps select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id} = {Core EventId},",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag} = {Speedbump 1 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectTargetCoreActiveHCT",
						"select7 derive({Applicant ID Calculated} = iif(not(isNull({Internal Worker ID})),{Internal Worker ID},{Applicant ID})) ~> DerivedApplIntWorkerID",
						"RemoveYearNullRows aggregate(groupBy({Client ID}),",
						"     Max3PYear = max({Event Year})-3) ~> Select3PYear",
						"SelectPromoWorkerID, Select3PYear join({Event Year} == Max3PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> P3YearPromoFilter",
						"P3YearPromoFilter select(mapColumn(",
						"          {P3 YR PRO Worker ID} = {PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectP3Promo",
						"select8 derive({P3 Promo} = 'Y') ~> P3Promo",
						"JoinCurrPromo, P3Promo join(CoreHCT@WorkerId == {P3 YR PRO Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinP3Promo",
						"CoreYear select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Date} = EventDt,",
						"          EventMonth,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId,",
						"          {Years of Service} = YearsofSrvc,",
						"          {Last Promo Date} = LastPromoDt,",
						"          {Corporate Title} = CorpTitle,",
						"          {Direct Manager Worker ID} = DirectMgrWorkerId,",
						"          EmpCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"Applicant select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplicantId,",
						"          {Internal Worker ID} = InternalWorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplColumns",
						"SilverMedalist select(mapColumn(",
						"          ClientId,",
						"          ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          {Requisition ID} = ReqId,",
						"          {Applicant ID} = ApplId,",
						"          {Internal Worker ID} = IntWorkerId,",
						"          {Silver Medalist Ind} = SilverMedalistInd,",
						"          LoadDt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"SeelectOnyTermsNotInTargetHCT select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          EventId,",
						"          {Worker ID} = WorkerId,",
						"          EventDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTermRecords",
						"SpeedbumpsDBBaseline select(mapColumn(",
						"          WorkerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBaselineSpeedbumpWorkerID",
						"PerfRatingHistory select(mapColumn(",
						"          {Emp Perf Rating Worker ID} = WorkerId,",
						"          {Emp Perf Rating Event Year} = EventYear,",
						"          {Emp Perf Rating Curr Talent Tag} = CurrTalentTag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEmpTalentTag",
						"CoreHCT, SelectEmpTalentTag join(WorkerId == {Emp Perf Rating Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPerformance",
						"SelectTargetCoreActiveHCT, SelectBaselineSpeedbumpWorkerID exists({Worker ID} == WorkerId,",
						"     negate:false,",
						"     broadcast: 'both')~> ExistsInBaseline",
						"CoreTerminations, SelectBaselineSpeedbumpWorkerID exists(CoreTerminations@WorkerId == SelectBaselineSpeedbumpWorkerID@WorkerId,",
						"     negate:false,",
						"     broadcast: 'auto')~> TermsInSpeedbumpBaseline",
						"TermsInSpeedbumpBaseline, SelectTargetCoreActiveHCT exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SeelectOnyTermsNotInTargetHCT",
						"aggregate6 derive({Event Quarter} = toInteger($SB_Target_Quarter),",
						"          {Core Event Quarter} = {Event Quarter},",
						"          {Core Event Date} = EventDt,",
						"          {Core Event Id} = EventId,",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Terminated',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> TermDerivedSpeedbumpColumns",
						"selectP3Promo aggregate(groupBy({P3 YR PRO Worker ID}),",
						"     P3ProCount = count({P3 YR PRO Worker ID})) ~> aggregate1",
						"selectP2Promo aggregate(groupBy({P2 YR PRO Worker ID}),",
						"     P2ProCount = count({P2 YR PRO Worker ID})) ~> aggregate2",
						"selectP1Promo aggregate(groupBy({P1 YR PRO Worker ID}),",
						"     P1ProCount = count({P1 YR PRO Worker ID})) ~> aggregate3",
						"selectCurrPromo aggregate(groupBy({Curr YR Worker ID}),",
						"     CurrProCount = count({Curr YR Worker ID})) ~> aggregate4",
						"SpeedbumpsDBBaseline, ExistsInBaseline exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'both')~> exists1",
						"RemoveTerms aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          CoreEventId,",
						"          CoreEventQuarter,",
						"          CoreEventDate),",
						"     EventYear = max(EventYear),",
						"          EventQuarter = max(EventQuarter)) ~> aggregate5",
						"aggregate5 derive(EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year),",
						"          {Speedbump Population Ind} = 'Y',",
						"          {Speedbump Worker Status} = 'Inactive',",
						"          {Speedbump 1 Name} = 'Mgr Level',",
						"          {Speedbump 1 Desc} = 'Assigned to a manager at their same level (non Exec)',",
						"          {Speedbump 1 Flag} = 'N/A',",
						"          {Speedbump 2 Name} = 'Mgr Top Talent',",
						"          {Speedbump 2 Desc} = 'Assigned to a manager who is not considered top talent (does not have a talent tag)',",
						"          {Speedbump 2 Flag} = 'N/A',",
						"          {Speedbump 3 Name} = 'Mgr Experience',",
						"          {Speedbump 3 Desc} = 'Employee is assigned to a manager who has the same or less experience in the firm ',",
						"          {Speedbump 3 Flag} = 'N/A',",
						"          {Speedbump 4 Name} = 'Promotion History',",
						"          {Speedbump 4 Desc} = 'Have not been promoted (normally this is in the last 3 years to coincide with the promo data we are provided)',",
						"          {Speedbump 4 Flag} = 'N/A',",
						"          {Speedbump 5 Name} = 'Applied Roles',",
						"          {Speedbump 5 Desc} = 'Employee applied for 5 or more roles in the current year',",
						"          {Speedbump 5 Flag} = 'N/A',",
						"          {Speedbump 6 Name} = 'Silver Medalist',",
						"          {Speedbump 6 Desc} = 'Employee is a \"Silver Medalist\" for at least 1 role in the current year ',",
						"          {Speedbump 6 Flag} = 'N/A',",
						"          {Speedbump 7 Name} = 'Speedbump 7',",
						"          {Speedbump 7 Desc} = 'N/A',",
						"          {Speedbump 7 Flag} = 'N/A',",
						"          {Speedbump 8 Name} = 'Speedbump 8',",
						"          {Speedbump 8 Desc} = 'N/A',",
						"          {Speedbump 8 Flag} = 'N/A',",
						"          {Speedbump 9 Name} = 'Speedbump 9',",
						"          {Speedbump 9 Desc} = 'N/A',",
						"          {Speedbump 9 Flag} = 'N/A',",
						"          {Speedbump 10 Name} = 'Speedbump 10',",
						"          {Speedbump 10 Desc} = 'N/A',",
						"          {Speedbump 10 Flag} = 'N/A',",
						"          {Speedbump 11 Name} = 'Speedbump 11',",
						"          {Speedbump 11 Desc} = 'N/A',",
						"          {Speedbump 11 Flag} = 'N/A',",
						"          {Speedbump 12 Name} = 'Speedbump 12',",
						"          {Speedbump 12 Desc} = 'N/A',",
						"          {Speedbump 12 Flag} = 'N/A',",
						"          {Speedbump 13 Name} = 'Speedbump 13',",
						"          {Speedbump 13 Desc} = 'N/A',",
						"          {Speedbump 13 Flag} = 'N/A',",
						"          {Speedbump 14 Name} = 'Speedbump 14',",
						"          {Speedbump 14 Desc} = 'N/A',",
						"          {Speedbump 14 Flag} = 'N/A',",
						"          {Speedbump 15 Name} = 'Speedbump 15',",
						"          {Speedbump 15 Desc} = 'N/A',",
						"          {Speedbump 15 Flag} = 'N/A') ~> InactiveDerivedSpeedbumpColumns",
						"InactiveDerivedSpeedbumpColumns select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Event Year} = EventYear,",
						"          {Event Quarter} = EventQuarter,",
						"          {Speedbump Population Ind},",
						"          {Speedbump Worker Status},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveSpeedbumpRows",
						"ExistsInBaseline, SelectInactTermPriorSpeedbumpRecord union(byName: true)~> UnionInInactiveAndTermRecords",
						"SelectTermRecords aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          EventId,",
						"          {Worker ID}),",
						"     EventDt = max(EventDt),",
						"          {Event Quarter} = max({Event Quarter}),",
						"          {Event Year} = max({Event Year})) ~> aggregate6",
						"UnionInInactiveAndTermRecords select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Quarter},",
						"          {Event Year},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Worker ID},",
						"          {Speedbump Worker Status},",
						"          {Speedbump Population Ind},",
						"          {Speedbump 1 Name},",
						"          {Speedbump 1 Desc},",
						"          {Speedbump 1 Flag},",
						"          {Speedbump 2 Name},",
						"          {Speedbump 2 Desc},",
						"          {Speedbump 2 Flag},",
						"          {Speedbump 3 Name},",
						"          {Speedbump 3 Desc},",
						"          {Speedbump 3 Flag},",
						"          {Speedbump 4 Name},",
						"          {Speedbump 4 Desc},",
						"          {Speedbump 4 Flag},",
						"          {Speedbump 5 Name},",
						"          {Speedbump 5 Desc},",
						"          {Speedbump 5 Flag},",
						"          {Speedbump 6 Name},",
						"          {Speedbump 6 Desc},",
						"          {Speedbump 6 Flag},",
						"          {Speedbump 7 Name},",
						"          {Speedbump 7 Desc},",
						"          {Speedbump 7 Flag},",
						"          {Speedbump 8 Name},",
						"          {Speedbump 8 Desc},",
						"          {Speedbump 8 Flag},",
						"          {Speedbump 9 Name},",
						"          {Speedbump 9 Desc},",
						"          {Speedbump 9 Flag},",
						"          {Speedbump 10 Name},",
						"          {Speedbump 10 Desc},",
						"          {Speedbump 10 Flag},",
						"          {Speedbump 11 Name},",
						"          {Speedbump 11 Desc},",
						"          {Speedbump 11 Flag},",
						"          {Speedbump 12 Name},",
						"          {Speedbump 12 Desc},",
						"          {Speedbump 12 Flag},",
						"          {Speedbump 13 Name},",
						"          {Speedbump 13 Desc},",
						"          {Speedbump 13 Flag},",
						"          {Speedbump 14 Name},",
						"          {Speedbump 14 Desc},",
						"          {Speedbump 14 Flag},",
						"          {Speedbump 15 Name},",
						"          {Speedbump 15 Desc},",
						"          {Speedbump 15 Flag}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalQtrOutput",
						"AllCore, Select2PYear join(EventYear >= Max2PYear,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> SelectPrior3Years",
						"SelectPrior3Years filter(DirectMgrWorkerId!='N/A') ~> RemoveNullsMgrIds",
						"RemoveNullsMgrIds aggregate(groupBy(WorkerId,",
						"          DirectMgrWorkerId),",
						"     RowCount = count(WorkerId)) ~> GroupWorkerAndMgr",
						"GroupWorkerAndMgr aggregate(groupBy(WorkerIdForMgrCount = WorkerId),",
						"     ManagerCount = count(DirectMgrWorkerId)) ~> CountMgrByWorker",
						"join2, CountMgrByWorker join({Worker ID} == WorkerIdForMgrCount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join3YrWorkerMgrCount",
						"aggregate1 select(mapColumn(",
						"          {P3 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"aggregate2 select(mapColumn(",
						"          {P2 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"aggregate3 select(mapColumn(",
						"          {P1 YR PRO Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"aggregate4 select(mapColumn(",
						"          {Curr YR Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"AllSpeedbumpsForInactiveWorkerSet filter(iif($SB_Target_Quarter=='1', EventQuarter==4, EventQuarter==toInteger($SB_Target_Quarter)-1)) ~> filter1",
						"filter1, SelectFinalInactiveAndTermOutput1 join(WorkerId == {InactTerm Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinInactiveAndTerminatedToLastSpeedbumps",
						"TermDerivedSpeedbumpColumns select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Core Event Id},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminatedWorkerId",
						"SelectInactiveSpeedbumpRows select(mapColumn(",
						"          {Worker ID},",
						"          {Core Event Id},",
						"          {Core Event Quarter},",
						"          {Core Event Date},",
						"          {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactiveWorkerId",
						"SelectInactiveWorkerId, SelectTerminatedWorkerId union(byName: true)~> JoinTermAndInactive",
						"JoinTermAndInactive select(mapColumn(",
						"          {InactTerm Worker ID} = {Worker ID},",
						"          {InactTerm Core Event Id} = {Core Event Id},",
						"          {InactTerm Core Event Quarter} = {Core Event Quarter},",
						"          {InactTerm Core Event Date} = {Core Event Date},",
						"          {InactTerm Speedbump Worker Status} = {Speedbump Worker Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalInactiveAndTermOutput1",
						"JoinInactiveAndTerminatedToLastSpeedbumps derive(CoreEventId = {InactTerm Core Event Id},",
						"          CoreEventQuarter = {InactTerm Core Event Quarter},",
						"          CoreEventDate = {InactTerm Core Event Date},",
						"          SpeedbumnpWorkerStatus = {InactTerm Speedbump Worker Status},",
						"          EventQuarter = toInteger($SB_Target_Quarter),",
						"          EventYear = toInteger($SB_Target_Year)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Quarter} = EventQuarter,",
						"          {Event Year} = EventYear,",
						"          {Core Event Id} = CoreEventId,",
						"          {Core Event Quarter} = CoreEventQuarter,",
						"          {Core Event Date} = CoreEventDate,",
						"          {Worker ID} = WorkerId,",
						"          {Speedbump Worker Status} = SpeedbumnpWorkerStatus,",
						"          {Speedbump Population Ind} = SpeedbumpPopulationInd,",
						"          {Speedbump 1 Name} = Speedbump1Name,",
						"          {Speedbump 1 Desc} = Speedbump1Desc,",
						"          {Speedbump 1 Flag} = Speedbump1Flag,",
						"          {Speedbump 2 Name} = Speedbump2Name,",
						"          {Speedbump 2 Desc} = Speedbump2Desc,",
						"          {Speedbump 2 Flag} = Speedbump2Flag,",
						"          {Speedbump 3 Name} = Speedbump3Name,",
						"          {Speedbump 3 Desc} = Speedbump3Desc,",
						"          {Speedbump 3 Flag} = Speedbump3Flag,",
						"          {Speedbump 4 Name} = Speedbump4Name,",
						"          {Speedbump 4 Desc} = Speedbump4Desc,",
						"          {Speedbump 4 Flag} = Speedbump4Flag,",
						"          {Speedbump 5 Name} = Speedbump5Name,",
						"          {Speedbump 5 Desc} = Speedbump5Desc,",
						"          {Speedbump 5 Flag} = Speedbump5Flag,",
						"          {Speedbump 6 Name} = Speedbump6Name,",
						"          {Speedbump 6 Desc} = Speedbump6Desc,",
						"          {Speedbump 6 Flag} = Speedbump6Flag,",
						"          {Speedbump 7 Name} = Speedbump7Name,",
						"          {Speedbump 7 Desc} = Speedbump7Desc,",
						"          {Speedbump 7 Flag} = Speedbump7Flag,",
						"          {Speedbump 8 Name} = Speedbump8Name,",
						"          {Speedbump 8 Desc} = Speedbump8Desc,",
						"          {Speedbump 8 Flag} = Speedbump8Flag,",
						"          {Speedbump 9 Name} = Speedbump9Name,",
						"          {Speedbump 9 Desc} = Speedbump9Desc,",
						"          {Speedbump 9 Flag} = Speedbump9Flag,",
						"          {Speedbump 10 Name} = Speedbump10Name,",
						"          {Speedbump 10 Desc} = Speedbump10Desc,",
						"          {Speedbump 10 Flag} = Speedbump10Flag,",
						"          {Speedbump 11 Name} = Speedbump11Name,",
						"          {Speedbump 11 Desc} = Speedbump11Desc,",
						"          {Speedbump 11 Flag} = Speedbump11Flag,",
						"          {Speedbump 12 Name} = Speedbump12Name,",
						"          {Speedbump 12 Desc} = Speedbump12Desc,",
						"          {Speedbump 12 Flag} = Speedbump12Flag,",
						"          {Speedbump 13 Name} = Speedbump13Name,",
						"          {Speedbump 13 Desc} = Speedbump13Desc,",
						"          {Speedbump 13 Flag} = Speedbump13Flag,",
						"          {Speedbump 14 Name} = Speedbump14Name,",
						"          {Speedbump 14 Desc} = Speedbump14Desc,",
						"          {Speedbump 14 Flag} = Speedbump14Flag,",
						"          {Speedbump 15 Name} = Speedbump15Name,",
						"          {Speedbump 15 Desc} = Speedbump15Desc,",
						"          {Speedbump 15 Flag} = Speedbump15Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInactTermPriorSpeedbumpRecord",
						"exists1, SelectTerminatedWorkerId exists(WorkerId == {Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> RemoveTerms",
						"Talent select(mapColumn(",
						"          WorkerId,",
						"          EventYear,",
						"          TalentIdentifier1,",
						"          TalentIdentifier2,",
						"          TalentIdentifier3,",
						"          TalentIdentifier4,",
						"          TalentIdentifier5",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentColumns",
						"JoinLevel, SelectTalentColumns join(CoreHCT@WorkerId == SelectTalentColumns@WorkerId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTalentIdentifiers",
						"SelectFinalQtrOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['SpeedbumpsFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputSpeedbumpsFactTbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentSpeedbumpsFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_Talent_File')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "Talent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterOutClientHeaderRowAndColumn"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "AddParameters"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "RemoveNullWorkerIDRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> FilterOutClientHeaderRowAndColumn",
						"RemoveNullWorkerIDRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutClientHeaderRowAndColumn derive({Client ID} = $Flow_Client_Id,",
						"          {Client Engagement Date} = $Flow_Client_Dt,",
						"          Event = 'PER',",
						"          {Performance Rating} = iif(isNull({Performance Rating}), 'N/A',{Performance Rating})) ~> AddParameters",
						"AddParameters aggregate(groupBy({Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)},",
						"          {Client ID}),",
						"     {Client Engagement Date} = max({Client Engagement Date})) ~> RemoveDuplicates",
						"RemoveDuplicates filter(not(isNull({Worker ID}))) ~> RemoveNullWorkerIDRows",
						"SelectFinal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['TalentFactTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_TalentAssessment')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_FactTbl_YearRefTable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Fact Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_FactTblFldr",
								"type": "DatasetReference"
							},
							"name": "OutputYearRefTable"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "RemoveNullRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"Core aggregate(groupBy({Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year} = max({Event Year})) ~> aggregate1",
						"aggregate1 derive(CurrEventYear = toShort({Event Year}),",
						"          P1EventYear = toShort({Event Year} - 1),",
						"          P2EventYear = toShort({Event Year} - 2),",
						"          P3EventYear = toShort({Event Year} - 3),",
						"          P4EventYear = toShort({Event Year} - 4),",
						"          P5EventYear = toShort({Event Year} - 5),",
						"          {Client Engagement Date} = toDate({Client Engagement Date},'MM/dd/yyyy')) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          CurrEventYear,",
						"          P1EventYear,",
						"          P2EventYear,",
						"          P3EventYear,",
						"          P4EventYear,",
						"          P5EventYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(!(isNull({Client ID}))) ~> RemoveNullRows",
						"RemoveNullRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['YearRefTbl.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputYearRefTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTblFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_HierarchyCheck')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData1",
							"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData2",
							"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputOrphanHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OuputOrphanAndCurrHrchyCounts"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputWorkerHierarchyDetail"
						}
					],
					"transformations": [
						{
							"name": "MaxEventDt"
						},
						{
							"name": "CurrentHCTEvent",
							"description": "Join on max HCT event date in order to pull only the Current headcount records"
						},
						{
							"name": "UniqueHierarchyRecords",
							"description": "Select unique hierarchy for current headcount records."
						},
						{
							"name": "SelectUniqueHierarchyCurrHCT",
							"description": "Select key and hierarchy fields."
						},
						{
							"name": "UniqueHierarchyAllEvents"
						},
						{
							"name": "SelectUniqueHierarchyFields"
						},
						{
							"name": "SelectCoreWithNoCurrentHierarchy"
						},
						{
							"name": "PullRecordsWithOrphans",
							"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
						},
						{
							"name": "UniqueWorkerWithOrphanHrchy",
							"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
						},
						{
							"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
						},
						{
							"name": "PullCurrentHierarchyIfExists",
							"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
						},
						{
							"name": "SelectWorkerIDandHierarcy",
							"description": "Select worker ID and hierarchy fields"
						},
						{
							"name": "CreateWorkerCountsbyHierarchy",
							"description": "Create counts for unique orphan and current hierarchy records"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HCTFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData1",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData2",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"HCTFilter aggregate(groupBy(EventUnique = Event),",
						"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
						"select1, MaxEventDt join({Event Date} == MaxEventDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrentHCTEvent",
						"derivedColumn3 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
						"UniqueHierarchyRecords select(mapColumn(",
						"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
						"          {Business Group Level 1 HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
						"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
						"UniqueHierarchyAllEvents select(mapColumn(",
						"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
						"          {Business Group Level 1 ALL} = {Business Group Level 1},",
						"          {Business Group Level 2 ALL} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
						"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
						"     negate:true,",
						"     broadcast: 'both')~> SelectCoreWithNoCurrentHierarchy",
						"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullRecordsWithOrphans",
						"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
						"          {Business Group Level 1 Unique} = {Business Group Level 1},",
						"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
						"UniqueWorkerWithOrphanHrchy select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Unique}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
						"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
						"PullCurrentHierarchyIfExists select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
						"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
						"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
						"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
						"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
						"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
						"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
						"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
						"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn2",
						"HCTFilter select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CurrentHCTEvent derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
						"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
						"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
						"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
						"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "AllApplicantData"
						},
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplFlowMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantDatabaseRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingApplFlowMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepApplFlowMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotApplFlowAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnApplFlow"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectExistingApplFlowMapping"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "SelectDBApplicantData"
						},
						{
							"name": "union1"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "CollapsePossibleDuplicates"
						},
						{
							"name": "selectApplDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllApplicantData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ApplFlowMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantDatabaseRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Applicant ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotApplFlowAndEventTime",
						"derivedColumn2 sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotApplFlowAndEventTime sort(asc({Client Applicant Final Disposition}, true),",
						"     asc({Client Applicant Step Before Final Disposition}, true),",
						"     asc({Client Applicant Rejected Reason}, true)) ~> SortOnApplFlow",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingApplFlowMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Applicant Rejected Reason} == {Unique ClientApplRejectedReason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Applicant Final Disposition} = {Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason} = {Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Applicant Final Disposition} = {Unique ElloreeApplFinalDisp},",
						"          {Suggested Elloree Applicant Category} = {Unique ElloreeApplCategory},",
						"          {Suggested Elloree Submitted to Manager Fl} = {Unique ElloreeSubmittedtoMgrFl},",
						"          {Applicant ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectExistingApplFlowMapping join({Client Applicant Final Disposition} == {Unique ClientApplFinalDisp}",
						"     && {Client Applicant Step Before Final Disposition} == {Unique ClientApplStepBeforeFinalDisp}",
						"     && {Client Applicant Rejected Reason} == {Unique ClientApplRejectedReason}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Applicant Final Disposition} = iif(isNull({Suggested Source}),{Unique ClientApplFinalDisp},{Suggested Elloree Applicant Final Disposition}),",
						"          {Suggested Elloree Applicant Category} = iif(isNull({Suggested Source}),{Unique ElloreeApplCategory},{Suggested Elloree Applicant Category}),",
						"          {Suggested Elloree Submitted to Mgr Fl} = iif(isNull({Suggested Source}),{Unique ElloreeSubmittedtoMgrFl},{Suggested Elloree Submitted to Mgr Fl})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Applicant Final Disposition},",
						"          {Client Applicant Step Before Final Disposition},",
						"          {Client Applicant Rejected Reason},",
						"          {Elloree Applicant Final Disposition},",
						"          {Elloree Applicant Category},",
						"          {Elloree Submitted to Mgr Fl},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Applicant Final Disposition},",
						"          {Suggested Elloree Applicant Category},",
						"          {Suggested Elloree Submitted to Mgr Fl} = {Suggested Elloree Submitted to Manager Fl},",
						"          {Applicant ID},",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectApplDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Applicant ID} = ApplicantId,",
						"          {Applicant Final Disposition} = ApplFinalDisp,",
						"          {Applicant Step Before Final Disposition} = ApplStepBeforeFinalDisp,",
						"          {Applicant Rejected Reason} = ApplRejectedReason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDBApplicantData",
						"select4, SelectDBApplicantData union(byName: true)~> union1",
						"AllApplicantData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"CollapsePossibleDuplicates derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Applicant Final Disposition} = '',",
						"          {Elloree Applicant Category} = '',",
						"          {Elloree Submitted to Mgr Fl} = '') ~> derivedColumn2",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Applicant Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Step Before Final Disposition}),",
						"     TotApplCount = count({Applicant ID})) ~> CollapsePossibleDuplicates",
						"ApplicantDatabaseRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ApplicantId,",
						"          ApplType,",
						"          ApplFinalDisp,",
						"          ApplStepBeforeFinalDisp,",
						"          ApplRejectedReason),",
						"     TotRecCount = count(ApplicantId)) ~> selectApplDBRecsInit",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Count Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Count Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason},",
						"          {Count Unique ElloreeApplFinalDisp} = {Unique ElloreeApplFinalDisp},",
						"          {Count Unique ElloreeApplCategory} = {Unique ElloreeApplCategory},",
						"          {Count Unique ElloreeSubmittedtoMgrFl} = {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientApplFinalDisp} == {Count Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Count Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Count Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Count Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Count Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Count Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientApplFinalDisp} = {Unique ClientApplFinalDisp},",
						"          {Agg Unique ClientApplStepBeforeFinalDisp} = {Unique ClientApplStepBeforeFinalDisp},",
						"          {Agg Unique ClientApplRejectedReason} = {Unique ClientApplRejectedReason}),",
						"     {Agg Unique ElloreeApplFinalDisp} = first({Unique ElloreeApplFinalDisp}),",
						"          {Agg Unique ElloreeApplCategory} = first({Unique ElloreeApplCategory}),",
						"          {Agg Unique ElloreeSubmittedtoMgrFl} = first({Unique ElloreeSubmittedtoMgrFl})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientApplFinalDisp} == {Agg Unique ClientApplFinalDisp}",
						"     && {Unique ClientApplStepBeforeFinalDisp} == {Agg Unique ClientApplStepBeforeFinalDisp}",
						"     && {Unique ClientApplRejectedReason} == {Agg Unique ClientApplRejectedReason}",
						"     && {Unique ElloreeApplFinalDisp} == {Agg Unique ElloreeApplFinalDisp}",
						"     && {Unique ElloreeApplCategory} == {Agg Unique ElloreeApplCategory}",
						"     && {Unique ElloreeSubmittedtoMgrFl} == {Agg Unique ElloreeSubmittedtoMgrFl},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ApplFlowMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ApplFlowMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientApplFinalDisp} = ClientApplFinalDisp,",
						"          {Unique ClientApplStepBeforeFinalDisp} = ClientApplStepBeforeFinalDisp,",
						"          {Unique ClientApplRejectedReason} = ClientApplRejectedReason,",
						"          {Unique ElloreeApplFinalDisp} = ElloreeApplFinalDisp,",
						"          {Unique ElloreeApplCategory} = ElloreeApplCategory,",
						"          {Unique ElloreeSubmittedtoMgrFl} = ElloreeSubmittedtoMgrFl),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientApplFinalDisp},",
						"          {Unique ClientApplStepBeforeFinalDisp},",
						"          {Unique ClientApplRejectedReason},",
						"          {Unique ElloreeApplFinalDisp},",
						"          {Unique ElloreeApplCategory},",
						"          {Unique ElloreeSubmittedtoMgrFl}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingApplFlowMapping",
						"SortOnApplFlow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_applflow_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepApplFlowMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplFlowMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "HierarchyMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingHierarchyMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepHierarchyMapping"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort4"
						},
						{
							"name": "sort5"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "SelectFinal1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectReqRecords"
						},
						{
							"name": "SelectCoreRecords"
						},
						{
							"name": "union1"
						},
						{
							"name": "SetEvent"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "CollapsePossibleDuplicateRows"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HierarchyMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as date,",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn2 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"CollapsePossibleDuplicateRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Business Group Level 1} = '',",
						"          {Elloree Business Group Level 2} = '',",
						"          {Elloree Business Group Level 3} = '',",
						"          {Elloree Business Group Level 4} = '',",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(asc({Event and Year}, true)) ~> sort4",
						"pivot1 sort(asc({Client Business Group Level 1}, true),",
						"     asc({Client Business Group Level 2}, true),",
						"     asc({Client Business Group Level 3}, true),",
						"     asc({Client Business Group Level 4}, true)) ~> sort5",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"sort4, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Business Group Level 1} = {Business Group Level 1},",
						"          {Client Business Group Level 2} = {Business Group Level 2},",
						"          {Client Business Group Level 3} = {Business Group Level 3},",
						"          {Client Business Group Level 4} = {Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Business Group Level 1} = {Unique ElloreeBusGrpLvl1},",
						"          {Suggested Elloree Business Group Level 2} = {Unique ElloreeBusGrpLvl2},",
						"          {Suggested Elloree Business Group Level 3} = {Unique ElloreeBusGrpLvl3},",
						"          {Suggested Elloree Business Group Level 4} = {Unique ElloreeBusGrpLvl4},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Business Group Level 1} == {Unique ClientBusGrpLvl1}",
						"     && {Client Business Group Level 2} == {Unique ClientBusGrpLvl2}",
						"     && {Client Business Group Level 3} == {Unique ClientBusGrpLvl3}",
						"     && {Client Business Group Level 4} == {Unique ClientBusGrpLvl4},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"join2 select(mapColumn(",
						"          {Client Business Group Level 1},",
						"          {Client Business Group Level 2},",
						"          {Client Business Group Level 3},",
						"          {Client Business Group Level 4},",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2},",
						"          {Elloree Business Group Level 3},",
						"          {Elloree Business Group Level 4},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Business Group Level 1},",
						"          {Suggested Elloree Business Group Level 2},",
						"          {Suggested Elloree Business Group Level 3},",
						"          {Suggested Elloree Business Group Level 4},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal1",
						"SelectFinal1 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Business Group Level 1} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl1},{Suggested Elloree Business Group Level 1}),",
						"          {Suggested Elloree Business Group Level 2} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl2},{Suggested Elloree Business Group Level 2}),",
						"          {Suggested Elloree Business Group Level 3} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl3},{Suggested Elloree Business Group Level 3}),",
						"          {Suggested Elloree Business Group Level 4} = iif(isNull({Suggested Source}),{Unique ClientBusGrpLvl4},{Suggested Elloree Business Group Level 4})) ~> derivedColumn2",
						"SetEvent select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Requisition ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqRecords",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreRecords",
						"SelectCoreRecords, SelectReqRecords, selectReqDBRecs, selectCoreDBRecs union(byName: true)~> union1",
						"Requisitions derive(Event = 'Requisition') ~> SetEvent",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Business Group Level 1} = BusinessGrpLvl1,",
						"          {Business Group Level 2} = BusinessGrpLvl2,",
						"          {Business Group Level 3} = BusinessGrpLvl3,",
						"          {Business Group Level 4} = BusinessGrpLvl4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4}),",
						"     TotalRecCount = count({Record Id})) ~> CollapsePossibleDuplicateRows",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl4),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          BusinessGrpLvl1,",
						"          BusinessGrpLvl3,",
						"          BusinessGrpLvl2,",
						"          BusinessGrpLvl4),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Count Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Count Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Count Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4},",
						"          {Count Unique ElloreeBusGrpLvl1} = {Unique ElloreeBusGrpLvl1},",
						"          {Count Unique ElloreeBusGrpLvl2} = {Unique ElloreeBusGrpLvl2},",
						"          {Count Unique ElloreeBusGrpLvl3} = {Unique ElloreeBusGrpLvl3},",
						"          {Count Unique ElloreeBusGrpLvl4} = {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientBusGrpLvl1} == {Count Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Count Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Count Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Count Unique ClientBusGrpLvl4}",
						"     && {Unique ElloreeBusGrpLvl1} == {Count Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Count Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Count Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Count Unique ElloreeBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientBusGrpLvl1} = {Unique ClientBusGrpLvl1},",
						"          {Agg Unique ClientBusGrpLvl2} = {Unique ClientBusGrpLvl2},",
						"          {Agg Unique ClientBusGrpLvl3} = {Unique ClientBusGrpLvl3},",
						"          {Agg Unique ClientBusGrpLvl4} = {Unique ClientBusGrpLvl4}),",
						"     {Agg Unique ElloreeBusGrpLvl1} = first({Unique ElloreeBusGrpLvl1}),",
						"          {Agg Unique ElloreeBusGrpLvl2} = first({Unique ElloreeBusGrpLvl2}),",
						"          {Agg Unique ElloreeBusGrpLvl3} = first({Unique ElloreeBusGrpLvl3}),",
						"          {Agg Unique ElloreeBusGrpLvl4} = first({Unique ElloreeBusGrpLvl4})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeBusGrpLvl1} == {Agg Unique ElloreeBusGrpLvl1}",
						"     && {Unique ElloreeBusGrpLvl2} == {Agg Unique ElloreeBusGrpLvl2}",
						"     && {Unique ElloreeBusGrpLvl3} == {Agg Unique ElloreeBusGrpLvl3}",
						"     && {Unique ElloreeBusGrpLvl4} == {Agg Unique ElloreeBusGrpLvl4}",
						"     && {Unique ClientBusGrpLvl1} == {Agg Unique ClientBusGrpLvl1}",
						"     && {Unique ClientBusGrpLvl2} == {Agg Unique ClientBusGrpLvl2}",
						"     && {Unique ClientBusGrpLvl3} == {Agg Unique ClientBusGrpLvl3}",
						"     && {Unique ClientBusGrpLvl4} == {Agg Unique ClientBusGrpLvl4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientBusGrpLvl1} = ClientBusGrpLvl1,",
						"          {Unique ClientBusGrpLvl2} = ClientBusGrpLvl2,",
						"          {Unique ClientBusGrpLvl3} = ClientBusGrpLvl3,",
						"          {Unique ClientBusGrpLvl4} = ClientBusGrpLvl4,",
						"          {Unique ElloreeBusGrpLvl1} = ElloreeBusGrpLvl1,",
						"          {Unique ElloreeBusGrpLvl2} = ElloreeBusGrpLvl2,",
						"          {Unique ElloreeBusGrpLvl3} = ElloreeBusGrpLvl3,",
						"          {Unique ElloreeBusGrpLvl4} = ElloreeBusGrpLvl4,",
						"          ClientEngagementDt),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"HierarchyMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"HierarchyMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientBusGrpLvl1},",
						"          {Unique ClientBusGrpLvl2},",
						"          {Unique ClientBusGrpLvl3},",
						"          {Unique ClientBusGrpLvl4},",
						"          {Unique ElloreeBusGrpLvl1},",
						"          {Unique ElloreeBusGrpLvl2},",
						"          {Unique ElloreeBusGrpLvl3},",
						"          {Unique ElloreeBusGrpLvl4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingHierarchyMapping",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_business_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepHierarchyMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentBusHierarchyMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMappingTableClient"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputMappingToPrepFldr"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputMappingToWorkingFldr"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotCorpTitleEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnCorpTitle"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectExistingCorpTitleMapping"
						},
						{
							"name": "JoinCurrCorpTitle"
						},
						{
							"name": "select5"
						},
						{
							"name": "join5"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select6"
						},
						{
							"name": "JoinPrevCorpTitle"
						},
						{
							"name": "select7"
						},
						{
							"name": "join6"
						},
						{
							"name": "select8"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "PullCorpTitleValuesNotInCurrTitleField"
						},
						{
							"name": "UnionCurrAndPrevCorpTitleRows"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectCorpTitleColumns"
						},
						{
							"name": "select10"
						},
						{
							"name": "AddReqDerivedForUnion"
						},
						{
							"name": "JoinCoreAndReqRecords"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "RemoveDups"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "AddReqDBDerivedForUnion"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "select11"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CorpTitleMappingTableClient",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn4 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotCorpTitleEventTime",
						"derivedColumn5 sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotCorpTitleEventTime sort(asc({Client Corporate Title}, true)) ~> SortOnCorpTitle",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientCorpTitle} = ClientCorpTitle,",
						"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId,",
						"          ClientEngagementDt),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle} = {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorporateTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorporateTitle} = {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorporateTitleSort} = {Unique ElloreeCorpTitleSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingCorpTitleMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Corporate Title} == {Unique ClientCorpTitle},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCurrCorpTitle",
						"JoinCurrCorpTitle select(mapColumn(",
						"          {Client Corporate Title} = {Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Client Elloree Corporate Title} = {Unique ClientElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title} = {Unique ElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title Sort} = {Unique ElloreeCorpTitleSortId},",
						"          {Worker ID} = RecordID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join5",
						"select6 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
						"          {Corporate Title (Current or Previous)} = 'Curr Title') ~> derivedColumn2",
						"join5 select(mapColumn(",
						"          {Client Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle},",
						"          {Unique ClientElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitleSort}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Previous Corporate Title} == {Unique ClientCorpTitle},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinPrevCorpTitle",
						"JoinPrevCorpTitle select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title} = {Previous Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
						"          {Suggested ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId},",
						"          {Suggested ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Worker ID} = RecordID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"select7, SelectExistingCorpTitleMapping join({Client Corporate Title} == {Unique ClientCorporateTitle}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join6",
						"join6 select(mapColumn(",
						"          {Client Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title} = {Suggested ClientElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title} = {Suggested ElloreeCorpTitle},",
						"          {Suggested Elloree Corporate Title Sort} = {Suggested ElloreeCorpTitleSortId},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientCorporateTitle},",
						"          {Unique ClientElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitle},",
						"          {Unique ElloreeCorporateTitleSort}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select8",
						"select8 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Client Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ClientElloreeCorporateTitle},{Suggested Client Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitle},{Suggested Elloree Corporate Title}),",
						"          {Suggested Elloree Corporate Title Sort} = iif(isNull({Suggested Source}),{Unique ElloreeCorporateTitleSort},{Suggested Elloree Corporate Title Sort}),",
						"          {Corporate Title (Current or Previous)} = 'Prev Title') ~> derivedColumn3",
						"select11, derivedColumn2 exists(select11@{Client Corporate Title} == select6@{Client Corporate Title},",
						"     negate:true,",
						"     broadcast: 'both')~> PullCorpTitleValuesNotInCurrTitleField",
						"derivedColumn2, PullCorpTitleValuesNotInCurrTitleField union(byName: true)~> UnionCurrAndPrevCorpTitleRows",
						"UnionCurrAndPrevCorpTitleRows derive({Event and Year} = concat({Event and Year},concat(' ',{Corporate Title (Current or Previous)}))) ~> derivedColumn4",
						"Requisitions select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Corporate Title},",
						"          {Event Year},",
						"          Event,",
						"          RecordID = {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCorpTitleColumns",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          RecordID = {Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"SelectCorpTitleColumns derive({Previous Corporate Title} = 'N/A') ~> AddReqDerivedForUnion",
						"select10, AddReqDerivedForUnion, AddReqDBDerivedForUnion, selectCoreDBRecs union(byName: true)~> JoinCoreAndReqRecords",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          RecordID = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Corporate Title} = CorpTitle,",
						"          {Previous Corporate Title} = PrevCorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          RecordID = ReqId,",
						"          {Corporate Title} = CorpTitle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"JoinCoreAndReqRecords aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          RecordID),",
						"     {Client ID} = max({Client ID})) ~> RemoveDups",
						"RemoveDups derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Corporate Title} = '',",
						"          {Elloree Corporate Title Sort} = '',",
						"          {Client Elloree Corporate Title} = '') ~> derivedColumn5",
						"selectReqDBRecs derive({Previous Corporate Title} = 'N/A') ~> AddReqDBDerivedForUnion",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          CorpTitle),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          CorpTitle,",
						"          PrevCorpTitle),",
						"     TotWorkers = count(WorkerId)) ~> aggregate2",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientCorpTitle} = {Unique ClientCorpTitle},",
						"          {Count Unique ClientElloreeCorpTitle} = {Unique ClientElloreeCorpTitle},",
						"          {Count Unique ElloreeCorpTitle} = {Unique ElloreeCorpTitle},",
						"          {Count Unique ElloreeCorpTitleSortId} = {Unique ElloreeCorpTitleSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientCorpTitle} == {Count Unique ClientCorpTitle}",
						"     && {Unique ClientElloreeCorpTitle} == {Count Unique ClientElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitle} == {Count Unique ElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitleSortId} == {Count Unique ElloreeCorpTitleSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          ClientEngagementDt,",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}),",
						"     ClientIDCount = max(ClientIDCount),",
						"          ClientEngagementDt = max(ClientEngagementDt)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientCorpTitle} = {Unique ClientCorpTitle}),",
						"     {Agg Unique ClientElloreeCorpTitle} = first({Unique ClientElloreeCorpTitle}),",
						"          {Agg Unique ElloreeCorpTitle} = first({Unique ElloreeCorpTitle}),",
						"          {Agg Unique ElloreeCorpTitleSortId} = first({Unique ElloreeCorpTitleSortId})) ~> aggregate3",
						"SelectMappingWithMostClients, aggregate3 join({Unique ClientCorpTitle} == {Agg Unique ClientCorpTitle}",
						"     && {Unique ClientElloreeCorpTitle} == {Agg Unique ClientElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitle} == {Agg Unique ElloreeCorpTitle}",
						"     && {Unique ElloreeCorpTitleSortId} == {Agg Unique ElloreeCorpTitleSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"CorpTitleMappingTableClient filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"CorpTitleMappingTableClient filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientCorpTitle} = ClientCorpTitle,",
						"          {Unique ClientElloreeCorpTitle} = ClientElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitle} = ElloreeCorpTitle,",
						"          {Unique ElloreeCorpTitleSortId} = ElloreeCorpTitleSortId,",
						"          ClientEngagementDt),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientCorpTitle},",
						"          {Unique ClientElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitle},",
						"          {Unique ElloreeCorpTitleSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"derivedColumn3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Client Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title},",
						"          {Suggested Elloree Corporate Title Sort},",
						"          {Worker ID},",
						"          {Corporate Title (Current or Previous)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select11",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_corp_title_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMappingToPrepFldr",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['corp_title_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMappingToWorkingFldr"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DisabilityMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingDisabilityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepDisabilityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotDisabilityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnDisability"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectCandidate"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "exists1"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DisabilityMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Disability Ind},",
						"          {Elloree Disability Ind},",
						"          {Suggested Elloree Disability Ind},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotDisabilityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotDisabilityAndEventTime sort(asc({Client Disability Ind}, true)) ~> SortOnDisability",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Disability Ind} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientDisabilityInd} = ClientDisabilityInd,",
						"          {Unique ElloreeDisabilityInd} = ElloreeDisabilityInd),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd},",
						"          {Unique ClientId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Disability Ind} == {Unique ClientDisabilityInd},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Disability Ind} = {Disability Ind},",
						"          {Elloree Disability Ind},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Disability Ind} = {Unique ElloreeDisabilityInd},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Disability Ind} == {Unique ClientDisabilityInd},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Disability Ind} = iif(isNull({Suggested Source}),{Unique ClientDisabilityInd},{Suggested Elloree Disability Ind})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Disability Ind},",
						"          {Elloree Disability Ind},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Disability Ind},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          {Disability Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCandidate",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Disability Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectCandidate, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          DisabilityInd),",
						"     TotalFinalCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Disability Ind} = DisabilityInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Disability Ind} = DisabilityInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          WorkerId,",
						"          DisabilityInd,",
						"          Event),",
						"     MaxWorkerId = max(WorkerId)) ~> aggregate2",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Disability Ind}),",
						"     MaxAppl = max({Applicant ID})) ~> aggregate3",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientDisabilityInd} = {Unique ClientDisabilityInd},",
						"          {Count Unique ElloreeDisabilityInd} = {Unique ElloreeDisabilityInd}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientDisabilityInd} == {Count Unique ClientDisabilityInd}",
						"     && {Unique ElloreeDisabilityInd} == {Count Unique ElloreeDisabilityInd},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientDisabilityInd} = {Unique ClientDisabilityInd}),",
						"     {Agg Unique ElloreeDisabilityInd} = first({Unique ElloreeDisabilityInd})) ~> aggregate4",
						"SelectMappingWithMostClients, aggregate4 join({Unique ClientDisabilityInd} == {Agg Unique ClientDisabilityInd}",
						"     && {Unique ElloreeDisabilityInd} == {Agg Unique ElloreeDisabilityInd},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"DisabilityMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"DisabilityMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientDisabilityInd} = ClientDisabilityInd,",
						"          {Unique ElloreeDisabilityInd} = ElloreeDisabilityInd),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> exists1",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"exists1 select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientDisabilityInd},",
						"          {Unique ElloreeDisabilityInd}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Disability Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnDisability sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['disability_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingDisabilityMapping",
						"SortOnDisability sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_disability_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepDisabilityMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentDisabilityMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "EthnicityMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEthnicityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnEthnicity"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate6"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EthnicityMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Race},",
						"          {Client Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Suggested Elloree Race},",
						"          {Suggested Elloree Hispanic or Latino Origin},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotEthnicityAndEventTime sort(asc({Client Race}, true),",
						"     asc({Client Hispanic or Latino Origin}, true)) ~> SortOnEthnicity",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Race} = '',",
						"          {Elloree Hispanic or Latino Origin} = '',",
						"          {Elloree Ethnic Group} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientRace} = ClientRace,",
						"          {Unique ClientHispanicLatinoOrigin} = ClientHispanicLatinoOrigin,",
						"          {Unique ElloreeRace} = ElloreeRace,",
						"          {Unique ElloreeHispanicLatinoOrigin} = ElloreeHispanicLatinoOrigin),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && Race == {Unique ClientRace}",
						"     && {Hispanic or Latino Origin} == {Unique ClientHispanicLatinoOrigin},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Race} = Race,",
						"          {Client Hispanic or Latino Origin} = {Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Elloree Ethnic Group},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Race} = {Unique ElloreeRace},",
						"          {Suggested Elloree Hispanic or Latino Origin} = {Unique ElloreeHispanicLatinoOrigin},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectWithoutEngagementDt join({Client Race} == {Unique ClientRace}",
						"     && {Client Hispanic or Latino Origin} == {Unique ClientHispanicLatinoOrigin}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Race} = iif(isNull({Suggested Source}),{Unique ClientRace},{Suggested Elloree Race}),",
						"          {Suggested Elloree Hispanic or Latino Origin} = iif(isNull({Suggested Source}),{Unique ClientHispanicLatinoOrigin},{Suggested Elloree Hispanic or Latino Origin})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Race},",
						"          {Client Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Elloree Ethnic Group},",
						"          {Suggested Source},",
						"          {Suggested Elloree Race},",
						"          {Suggested Elloree Hispanic or Latino Origin},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          Race,",
						"          {Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          Race,",
						"          {Hispanic or Latino Origin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"aggregate4 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          Race,",
						"          {Hispanic or Latino Origin} = HispanicLatinoOrigin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"aggregate5 aggregate(groupBy({Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ApplicantId,",
						"          Race,",
						"          {Hispanic or Latino Origin} = HispanicLatinoOrigin),",
						"     {Client ID} = max({Client ID})) ~> selectApplicantDBRecs",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          Race,",
						"          {Hispanic or Latino Origin}),",
						"     MaxClient = max({Client ID})) ~> aggregate3",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          WorkerId,",
						"          Race,",
						"          HispanicLatinoOrigin),",
						"     MaxId = max(WorkerId)) ~> aggregate4",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ApplicantId,",
						"          Race,",
						"          HispanicLatinoOrigin),",
						"     maxid = max(ApplicantId)) ~> aggregate5",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientRace} = {Unique ClientRace},",
						"          {Count Unique ClientHispanicLatinoOrigin} = {Unique ClientHispanicLatinoOrigin},",
						"          {Count Unique ElloreeRace} = {Unique ElloreeRace},",
						"          {Count Unique ElloreeHispanicLatinoOrigin} = {Unique ElloreeHispanicLatinoOrigin}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientRace} == {Count Unique ClientRace}",
						"     && {Unique ClientHispanicLatinoOrigin} == {Count Unique ClientHispanicLatinoOrigin}",
						"     && {Unique ElloreeRace} == {Count Unique ElloreeRace}",
						"     && {Unique ElloreeHispanicLatinoOrigin} == {Count Unique ElloreeHispanicLatinoOrigin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientRace} = {Unique ClientRace},",
						"          {Agg Unique ClientHispanicLatinoOrigin} = {Unique ClientHispanicLatinoOrigin}),",
						"     {Agg Unique ElloreeRace} = first({Unique ElloreeRace}),",
						"          {Agg Unique ElloreeHispanicLatinoOrigin} = first({Unique ElloreeHispanicLatinoOrigin})) ~> aggregate6",
						"SelectMappingWithMostClients, aggregate6 join({Unique ClientRace} == {Agg Unique ClientRace}",
						"     && {Unique ClientHispanicLatinoOrigin} == {Agg Unique ClientHispanicLatinoOrigin}",
						"     && {Unique ElloreeRace} == {Agg Unique ElloreeRace}",
						"     && {Unique ElloreeHispanicLatinoOrigin} == {Agg Unique ElloreeHispanicLatinoOrigin},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"EthnicityMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"EthnicityMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientRace} = ClientRace,",
						"          {Unique ClientHispanicLatinoOrigin} = ClientHispanicLatinoOrigin,",
						"          {Unique ElloreeRace} = ElloreeRace,",
						"          {Unique ElloreeHispanicLatinoOrigin} = ElloreeHispanicLatinoOrigin),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientRace},",
						"          {Unique ClientHispanicLatinoOrigin},",
						"          {Unique ElloreeRace},",
						"          {Unique ElloreeHispanicLatinoOrigin}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          Race,",
						"          {Hispanic or Latino Origin}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnEthnicity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['ethnicity_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
						"SortOnEthnicity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_ethnicity_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentEthnicityMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "EventMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEventMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEventMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEventAndEventTime"
						},
						{
							"name": "SortOnEventAndYear"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "UniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRow"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EventMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Event},",
						"          {Client Event Type},",
						"          {Client Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Suggested Elloree Event},",
						"          {Suggested Elloree Event Type},",
						"          {Suggested Elloree Event Reason},",
						"          {Suggested Elloree Termination Reason},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEventAndEventTime",
						"RemoveDupRow sort(asc({Event Year}, true)) ~> SortOnEventAndYear",
						"CreatePivotEventAndEventTime sort(asc({Client Event}, true),",
						"     asc({Client Event Type}, true),",
						"     asc({Client Event Reason}, true)) ~> SortOnEvent",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientEvent} = ClientEvent,",
						"          {Unique ClientEventType} = ClientEventType,",
						"          {Unique ClientEventReason} = ClientEventReason,",
						"          {Unique ElloreeEvent} = ElloreeEvent,",
						"          {Unique ElloreeEventType} = ElloreeEventType,",
						"          {Unique ElloreeEventReason} = ElloreeEventReason,",
						"          {Unique ElloreeTermReason} = ElloreeTermReason),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> UniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEventAndYear, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && Event == {Unique ClientEvent}",
						"     && {Event Type} == {Unique ClientEventType}",
						"     && {Event Reason} == {Unique ClientEventReason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"derivedColumn2 select(mapColumn(",
						"          {Client Event} = Event,",
						"          {Client Event Type} = {Event Type},",
						"          {Client Event Reason} = {Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Event} = {Unique ElloreeEvent},",
						"          {Suggested Elloree Event Type} = {Unique ElloreeEventType},",
						"          {Suggested Elloree Event Reason} = {Unique ElloreeEventReason},",
						"          {Suggested Elloree Termination Reason} = {Unique ElloreeTermReason},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Event} == {Unique ClientEvent}",
						"     && {Client Event Type} == {Unique ClientEventType}",
						"     && {Client Event Reason} == {Unique ClientEventReason}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"SelectFinal derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Event} = iif(isNull({Suggested Source}),{Unique ElloreeEvent},{Suggested Elloree Event}),",
						"          {Suggested Elloree Event Type} = iif(isNull({Suggested Source}),{Unique ClientEventType},{Suggested Elloree Event Type}),",
						"          {Suggested Elloree Event Reason} = iif(isNull({Suggested Source}),{Unique ClientEventReason},{Suggested Elloree Event Reason}),",
						"          {Suggested Elloree Termination Reason} = iif(isNull({Suggested Source}),{Unique ElloreeTermReason},{Suggested Elloree Termination Reason})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Event},",
						"          {Client Event Type},",
						"          {Client Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Event},",
						"          {Suggested Elloree Event Type},",
						"          {Suggested Elloree Event Reason},",
						"          {Suggested Elloree Termination Reason},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Event Type} = EventType,",
						"          {Event Reason} = EventReason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"join1 derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Event} = '',",
						"          {Elloree Event Type} = '',",
						"          {Elloree Event Reason} = '',",
						"          {Elloree Termination Reason} = '') ~> derivedColumn2",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, selectCoreDBRecs union(byName: true)~> union1",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          EventType,",
						"          EventReason,",
						"          Event),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"UniqueRows aggregate(groupBy({Count Unique ClientEvent} = {Unique ClientEvent},",
						"          {Count Unique ClientEventType} = {Unique ClientEventType},",
						"          {Count Unique ClientEventReason} = {Unique ClientEventReason},",
						"          {Count Unique ElloreeEvent} = {Unique ElloreeEvent},",
						"          {Count Unique ElloreeEventType} = {Unique ElloreeEventType},",
						"          {Count Unique ElloreeEventReason} = {Unique ElloreeEventReason},",
						"          {Count Unique ElloreeTermReason} = {Unique ElloreeTermReason}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"UniqueRows, GetCountOfClientForUniqueValues join({Unique ClientEvent} == {Count Unique ClientEvent}",
						"     && {Unique ClientEventType} == {Count Unique ClientEventType}",
						"     && {Unique ClientEventReason} == {Count Unique ClientEventReason}",
						"     && {Unique ElloreeEvent} == {Count Unique ElloreeEvent}",
						"     && {Unique ElloreeEventType} == {Count Unique ElloreeEventType}",
						"     && {Unique ElloreeEventReason} == {Count Unique ElloreeEventReason}",
						"     && {Unique ElloreeTermReason} == {Count Unique ElloreeTermReason},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientEvent} = {Unique ClientEvent},",
						"          {Agg Unique ClientEventType} = {Unique ClientEventType},",
						"          {Agg Unique ClientEventReason} = {Unique ClientEventReason}),",
						"     {Agg Unique ElloreeEvent} = first({Unique ElloreeEvent}),",
						"          {Agg Unique ElloreeEventType} = first({Unique ElloreeEventType}),",
						"          {Agg Unique ElloreeEventReason} = first({Unique ElloreeEventReason}),",
						"          {Agg Unique ElloreeTermReason} = first({Unique ElloreeTermReason})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeEvent} == {Agg Unique ElloreeEvent}",
						"     && {Unique ElloreeEventType} == {Agg Unique ElloreeEventType}",
						"     && {Unique ElloreeEventReason} == {Agg Unique ElloreeEventReason}",
						"     && {Unique ElloreeTermReason} == {Agg Unique ElloreeTermReason}",
						"     && {Unique ClientEvent} == {Agg Unique ClientEvent}",
						"     && {Unique ClientEventType} == {Agg Unique ClientEventType}",
						"     && {Unique ClientEventReason} == {Agg Unique ClientEventReason}",
						"     && {Unique ElloreeEvent} == {Agg Unique ElloreeEvent},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"EventMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"EventMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientEvent} = ClientEvent,",
						"          {Unique ClientEventType} = ClientEventType,",
						"          {Unique ClientEventReason} = ClientEventReason,",
						"          {Unique ElloreeEvent} = ElloreeEvent,",
						"          {Unique ElloreeEventType} = ElloreeEventType,",
						"          {Unique ElloreeEventReason} = ElloreeEventReason,",
						"          {Unique ElloreeTermReason} = ElloreeTermReason),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientEvent},",
						"          {Unique ClientEventType},",
						"          {Unique ClientEventReason},",
						"          {Unique ElloreeEvent},",
						"          {Unique ElloreeEventType},",
						"          {Unique ElloreeEventReason},",
						"          {Unique ElloreeTermReason}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRow",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['event_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEventMapping",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_event_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEventMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentEventMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "GenderMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEthnicityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotGenderAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "aggregate6"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> GenderMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Gender},",
						"          {Elloree Gender},",
						"          {Suggested Elloree Gender},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotGenderAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotGenderAndEventTime sort(asc({Client Gender}, true)) ~> SortOnGender",
						"aggregate6 derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Gender} = '') ~> AddDerivedEventYearColumn",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && Gender == {Unique ClientGender},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Gender} = Gender,",
						"          {Elloree Gender},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Gender} = {Unique ElloreeGender},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Gender} == {Unique ClientGender},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Gender} = iif(isNull({Suggested Source}),{Unique ClientGender},{Suggested Elloree Gender})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Gender},",
						"          {Elloree Gender},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Gender},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate2 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"aggregate3 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          Gender),",
						"     TotalRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          Gender),",
						"     MaxAppl = max({Applicant ID})) ~> aggregate2",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          WorkerId,",
						"          Gender),",
						"     MaxWorkerId = max(WorkerId)) ~> aggregate3",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientGender} = ClientGender,",
						"          {Unique ElloreeGender} = ElloreeGender),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientGender} = {Unique ClientGender},",
						"          {Count Unique ElloreeGender} = {Unique ElloreeGender}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientGender} == {Count Unique ClientGender}",
						"     && {Unique ElloreeGender} == {Count Unique ElloreeGender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientGender} = {Unique ClientGender}),",
						"     {Agg Unique ElloreeGender} = first({Unique ElloreeGender})) ~> aggregate5",
						"SelectMappingWithMostClients, aggregate5 join({Unique ClientGender} == {Agg Unique ClientGender}",
						"     && {Unique ElloreeGender} == {Agg Unique ElloreeGender},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientGender},",
						"          {Unique ElloreeGender}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"GenderMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"GenderMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientGender} = ClientGender,",
						"          {Unique ElloreeGender} = ElloreeGender),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'auto')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientGender},",
						"          {Unique ElloreeGender}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          Gender),",
						"     RowCount = count({Client ID})) ~> aggregate6",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['gender_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_gender_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentGenderMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "LGTBQMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkinglgtbqMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepLGTBQMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotGenderAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnLGTBQ"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LGTBQMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client LGTBQ},",
						"          {Elloree LGTBQ},",
						"          {Suggested Elloree LGTBQ},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotGenderAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotGenderAndEventTime sort(asc({Client LGTBQ}, true)) ~> SortOnLGTBQ",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree LGTBQ} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientLGTBQ} = ClientLGTBQ,",
						"          {Unique ElloreeLGTBQ} = ElloreeLGTBQ),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && LGTBQ == {Unique ClientLGTBQ},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client LGTBQ} = LGTBQ,",
						"          {Elloree LGTBQ},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree LGTBQ} = {Unique ElloreeLGTBQ},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client LGTBQ} == {Unique ClientLGTBQ},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree LGTBQ} = iif(isNull({Suggested Source}),{Unique ClientLGTBQ},{Suggested Elloree LGTBQ})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client LGTBQ},",
						"          {Elloree LGTBQ},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree LGTBQ},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectApplicantDBRecs, selectCoreDBRecs union(byName: true)~> union1",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          LGTBQ),",
						"     TotalRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          LGTBQ",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          LGTBQ),",
						"     MaxWorkerId = max(WorkerId)) ~> aggregate2",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          LGTBQ),",
						"     MaxAppl = max({Applicant ID})) ~> aggregate3",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientLGTBQ} = {Unique ClientLGTBQ},",
						"          {Count Unique ElloreeLGTBQ} = {Unique ElloreeLGTBQ}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientLGTBQ} == {Count Unique ClientLGTBQ}",
						"     && {Unique ElloreeLGTBQ} == {Count Unique ElloreeLGTBQ},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientLGTBQ} = {Unique ClientLGTBQ}),",
						"     {Agg Unique ElloreeLGTBQ} = first({Unique ElloreeLGTBQ})) ~> aggregate4",
						"SelectMappingWithMostClients, aggregate4 join({Unique ClientLGTBQ} == {Agg Unique ClientLGTBQ}",
						"     && {Unique ElloreeLGTBQ} == {Agg Unique ElloreeLGTBQ},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"LGTBQMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"LGTBQMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientLGTBQ} = ClientLGTBQ,",
						"          {Unique ElloreeLGTBQ} = ElloreeLGTBQ),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientLGTBQ},",
						"          {Unique ElloreeLGTBQ}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          LGTBQ),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnLGTBQ sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['lgtbq_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkinglgtbqMapping",
						"SortOnLGTBQ sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_lgtbq_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepLGTBQMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentLGBTQMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "LocationMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingEthnicityMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepEthnicityMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotLocationAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnLocation"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectFinal"
						},
						{
							"name": "SelectReq"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "FilterOutNullHCTEventRows"
						},
						{
							"name": "FilterOutNullReqEventRows"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "selectCoreDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> LocationMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Work Office Location},",
						"          {Client Work City},",
						"          {Client Work State},",
						"          {Client Work Country},",
						"          {Client Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Work Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort Id},",
						"          {Suggested Elloree Work Office},",
						"          {Suggested Elloree Work City},",
						"          {Suggested Elloree Work State},",
						"          {Suggested Elloree Work Country},",
						"          {Suggested Elloree Work Region},",
						"          {Suggested Elloree Strategic Location},",
						"          {Suggested Elloree Location Sort Id},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotLocationAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotLocationAndEventTime sort(asc({Client Work Office Location}, true),",
						"     asc({Client Work City}, true),",
						"     asc({Client Work State}, true),",
						"     asc({Client Work Country}, true),",
						"     asc({Client Strategic Work Location Ind}, true)) ~> SortOnLocation",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Region} = '',",
						"          {Elloree Work Country} = '',",
						"          {Elloree Work State} = '',",
						"          {Elloree Work City} = '',",
						"          {Elloree Work Ofiice} = '',",
						"          {Elloree Location Sort} = '',",
						"          {Elloree Strategic Location} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientWorkOffice} = ClientWorkOffice,",
						"          {Unique ClientWorkCity} = ClientWorkCity,",
						"          {Unique ClientWorkState} = ClientWorkState,",
						"          {Unique ClientWorkCountry} = ClientWorkCountry,",
						"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
						"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
						"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
						"          {Unique ElloreeWorkState} = ElloreeWorkState,",
						"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
						"          {Unique  ElloreeWorkRegion} = ElloreeWorkRegion,",
						"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
						"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeRegion} = {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Work Office Location} == {Unique ClientWorkOffice}",
						"     && {Work City} == {Unique ClientWorkCity}",
						"     && {Work State} == {Unique ClientWorkState}",
						"     && {Work Country} == {Unique ClientWorkCountry}",
						"     && {Strategic Work Location Ind} == {Unique ClientStrategicLoc},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"join1 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Client Work Office Location} = {Work Office Location},",
						"          {Client Work City} = {Work City},",
						"          {Client Work State} = {Work State},",
						"          {Client Work Country} = {Work Country},",
						"          {Client Strategic Work Location Ind} = {Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Work City} = {Unique ElloreeWorkCity},",
						"          {Suggested Elloree Work Office} = {Unique ElloreeWorkOffice},",
						"          {Suggested Elloree Work State} = {Unique ElloreeWorkState},",
						"          {Suggested Elloree Work Country} = {Unique ElloreeWorkCountry},",
						"          {Suggested Elloree Region} = {Unique ElloreeWorkRegion},",
						"          {Suggested Elloree Strategic Location} = {Unique ElloreeStrategicLoc},",
						"          {Suggested Elloree Location Sort Id} = {Unique ElloreeLocSortId},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Work Office Location} == {Unique ClientWorkOffice}",
						"     && {Client Work City} == {Unique ClientWorkCity}",
						"     && {Client Work State} == {Unique ClientWorkState}",
						"     && {Client Work Country} == {Unique ClientWorkCountry}",
						"     && {Client Strategic Work Location Ind} == {Unique ClientStrategicLoc}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"SelectFinal derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Work Office} = iif(isNull({Suggested Source}),{Unique ElloreeWorkOffice},{Suggested Elloree Work Office}),",
						"          {Suggested Elloree Work City} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCity},{Suggested Elloree Work City}),",
						"          {Suggested Elloree Work State} = iif(isNull({Suggested Source}),{Unique ElloreeWorkState},{Suggested Elloree Work State}),",
						"          {Suggested Elloree Work Country} = iif(isNull({Suggested Source}),{Unique ElloreeWorkCountry},{Suggested Elloree Work Country}),",
						"          {Suggested Elloree Work Region} = iif(isNull({Suggested Source}),{Unique ElloreeRegion},{Suggested Elloree Work Region}),",
						"          {Suggested Elloree Strategic Location} = iif(isNull({Suggested Source}),{Unique ElloreeStrategicLoc},{Suggested Elloree Strategic Location}),",
						"          {Suggested Elloree Location Sort Id} = iif(isNull({Suggested Source}),{Unique ElloreeLocSortId},{Suggested Elloree Location Sort Id})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Work Office Location},",
						"          {Client Work City},",
						"          {Client Work State},",
						"          {Client Work Country},",
						"          {Client Strategic Work Location Ind},",
						"          {Elloree Work Ofiice},",
						"          {Elloree Work City},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Elloree Work Region} = {Elloree Region},",
						"          {Elloree Strategic Location},",
						"          {Elloree Location Sort Id} = {Elloree Location Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Work Office},",
						"          {Suggested Elloree Work City},",
						"          {Suggested Elloree Work State},",
						"          {Suggested Elloree Work Country},",
						"          {Suggested Elloree Work Region} = {Suggested Elloree Region},",
						"          {Suggested Elloree Strategic Location},",
						"          {Suggested Elloree Location Sort Id},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinal",
						"FilterOutNullReqEventRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Requisition ID},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City} = {Work Office City},",
						"          {Work State} = {Work Office State},",
						"          {Work Country} = {Work Office Country},",
						"          {Strategic Work Location Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReq",
						"FilterOutNullHCTEventRows select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectReq, selectCoreDBRecs, selectReqDBRecs union(byName: true)~> union1",
						"AllCoreData filter(not(isNull({Event Code}))) ~> FilterOutNullHCTEventRows",
						"Requisitions filter(not(isNull(Event))) ~> FilterOutNullReqEventRows",
						"selectCoreDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Work Office Location} = WorkOfficeLoc,",
						"          {Work City} = WorkOfficeCity,",
						"          {Work State} = WorkOfficeState,",
						"          {Work Country} = WorkOfficeCountry,",
						"          {Strategic Work Location Ind} = WorkStrategicLocInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Work Office Location} = WorkOfficeLoc,",
						"          {Work City} = WorkOfficeCity,",
						"          {Work State} = WorkOfficeState,",
						"          {Work Country} = WorkOfficeCountry,",
						"          {Strategic Work Location Ind} = WorkStrategicLocInd",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          WorkOfficeLoc,",
						"          WorkOfficeCity,",
						"          WorkOfficeState,",
						"          WorkOfficeCountry,",
						"          WorkStrategicLocInd),",
						"     MaxId = max(WorkerId)) ~> selectCoreDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
						"          {Count Unique ClientWorkCity} = {Unique ClientWorkCity},",
						"          {Count Unique ClientWorkState} = {Unique ClientWorkState},",
						"          {Count Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
						"          {Count Unique ClientStrategicLoc} = {Unique ClientStrategicLoc},",
						"          {Count Unique ElloreeWorkOffice} = {Unique ElloreeWorkOffice},",
						"          {Count Unique ElloreeWorkCity} = {Unique ElloreeWorkCity},",
						"          {Count Unique ElloreeWorkState} = {Unique ElloreeWorkState},",
						"          {Count Unique ElloreeWorkCountry} = {Unique ElloreeWorkCountry},",
						"          {Count Unique  ElloreeWorkRegion} = {Unique  ElloreeWorkRegion},",
						"          {Count Unique ElloreeStrategicLoc} = {Unique ElloreeStrategicLoc},",
						"          {Count Unique ElloreeLocSortId} = {Unique ElloreeLocSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ElloreeWorkOffice} == {Count Unique ElloreeWorkOffice}",
						"     && {Unique ElloreeWorkCity} == {Count Unique ElloreeWorkCity}",
						"     && {Unique ElloreeWorkState} == {Count Unique ElloreeWorkState}",
						"     && {Unique ElloreeWorkCountry} == {Count Unique ElloreeWorkCountry}",
						"     && {Unique  ElloreeWorkRegion} == {Count Unique  ElloreeWorkRegion}",
						"     && {Unique ElloreeStrategicLoc} == {Count Unique ElloreeStrategicLoc}",
						"     && {Unique ElloreeLocSortId} == {Count Unique ElloreeLocSortId}",
						"     && {Unique ClientWorkOffice} == {Count Unique ClientWorkOffice}",
						"     && {Unique ClientWorkCity} == {Count Unique ClientWorkCity}",
						"     && {Unique ClientWorkState} == {Count Unique ClientWorkState}",
						"     && {Unique ClientWorkCountry} == {Count Unique ClientWorkCountry}",
						"     && {Unique ClientStrategicLoc} == {Count Unique ClientStrategicLoc},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientWorkOffice} = {Unique ClientWorkOffice},",
						"          {Agg Unique ClientWorkCity} = {Unique ClientWorkCity},",
						"          {Agg Unique ClientWorkState} = {Unique ClientWorkState},",
						"          {Agg Unique ClientWorkCountry} = {Unique ClientWorkCountry},",
						"          {Agg Unique ClientStrategicLoc} = {Unique ClientStrategicLoc}),",
						"     {Agg Unique ElloreeWorkOffice} = first({Unique ElloreeWorkOffice}),",
						"          {Agg Unique ElloreeWorkCity} = first({Unique ElloreeWorkCity}),",
						"          {Agg Unique ElloreeWorkState} = first({Unique ElloreeWorkState}),",
						"          {Agg Unique ElloreeWorkCountry} = first({Unique ElloreeWorkCountry}),",
						"          {Agg Unique ElloreeWorkRegion} = first({Unique  ElloreeWorkRegion}),",
						"          {Agg Unique ElloreeStrategicLoc} = first({Unique ElloreeStrategicLoc}),",
						"          {Agg Unique ElloreeLocSortId} = first({Unique ElloreeLocSortId})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ElloreeWorkOffice} == {Agg Unique ElloreeWorkOffice}",
						"     && {Unique ElloreeWorkCity} == {Agg Unique ElloreeWorkCity}",
						"     && {Unique ElloreeWorkState} == {Agg Unique ElloreeWorkState}",
						"     && {Unique ElloreeWorkCountry} == {Agg Unique ElloreeWorkCountry}",
						"     && {Unique  ElloreeWorkRegion} == {Agg Unique ElloreeWorkRegion}",
						"     && {Unique ElloreeStrategicLoc} == {Agg Unique ElloreeStrategicLoc}",
						"     && {Unique ElloreeLocSortId} == {Agg Unique ElloreeLocSortId}",
						"     && {Unique ClientWorkOffice} == {Agg Unique ClientWorkOffice}",
						"     && {Unique ClientWorkCity} == {Agg Unique ClientWorkCity}",
						"     && {Unique ClientWorkState} == {Agg Unique ClientWorkState}",
						"     && {Unique ClientWorkCountry} == {Agg Unique ClientWorkCountry}",
						"     && {Unique ClientStrategicLoc} == {Agg Unique ClientStrategicLoc},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique  ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"LocationMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"LocationMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientWorkOffice} = ClientWorkOffice,",
						"          {Unique ClientWorkCity} = ClientWorkCity,",
						"          {Unique ClientWorkState} = ClientWorkState,",
						"          {Unique ClientWorkCountry} = ClientWorkCountry,",
						"          {Unique ClientStrategicLoc} = ClientStrategicLoc,",
						"          {Unique ElloreeWorkOffice} = ElloreeWorkOffice,",
						"          {Unique ElloreeWorkCity} = ElloreeWorkCity,",
						"          {Unique ElloreeWorkState} = ElloreeWorkState,",
						"          {Unique ElloreeWorkCountry} = ElloreeWorkCountry,",
						"          {Unique ElloreeWorkRegion} = ElloreeWorkRegion,",
						"          {Unique ElloreeStrategicLoc} = ElloreeStrategicLoc,",
						"          {Unique ElloreeLocSortId} = ElloreeLocSortId),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientWorkOffice},",
						"          {Unique ClientWorkCity},",
						"          {Unique ClientWorkState},",
						"          {Unique ClientWorkCountry},",
						"          {Unique ClientStrategicLoc},",
						"          {Unique ElloreeWorkOffice},",
						"          {Unique ElloreeWorkCity},",
						"          {Unique ElloreeWorkState},",
						"          {Unique ElloreeWorkCountry},",
						"          {Unique ElloreeWorkRegion},",
						"          {Unique ElloreeStrategicLoc},",
						"          {Unique ElloreeLocSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['location_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingEthnicityMapping",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_location_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepEthnicityMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentLocationMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Performance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of performance values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerfromanceRatingMapTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseTalentRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingPerformanceMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepPerformanceMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotPerformanceAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "selectTalentDBRecs"
						},
						{
							"name": "selectTalentColumns"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectWokerDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PerfromanceRatingMapTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Year} as short,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseTalentRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performance Rating Sort Id},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotPerformanceAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotPerformanceAndEventTime sort(asc({Client Performance Rating}, true)) ~> SortOnGender",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ','PER')),",
						"          {Elloree Performance Rating} = '',",
						"          {Elloree Performance Rating Sort} = '',",
						"          {Performance Rating} = iif(isNull({Performance Rating}),'N/A',{Performance Rating})) ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientPerfRating} = ClientPerfRating,",
						"          {Unique ElloreePerfRating} = ElloreePerfRating,",
						"          {Unique ElloreePerfRatingSortId} = ElloreePerfRatingSortId),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Performance Rating} == {Unique ClientPerfRating},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join1",
						"join1 select(mapColumn(",
						"          {Client Performance Rating} = {Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Performance Rating} = {Unique ElloreePerfRating},",
						"          {Suggested Elloree Performance Rating Sort Id} = {Unique ElloreePerfRatingSortId},",
						"          {Worker ID} = {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client Performance Rating} == {Unique ClientPerfRating}",
						"     && {Client ID} != {Unique ClientId},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"Select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Performance Rating} = iif(isNull({Suggested Source}),{Unique ElloreePerfRating},{Suggested Elloree Performance Rating}),",
						"          {Suggested Elloree Performance Rating Sort Id} = iif(isNull({Suggested Source}),{Unique ElloreePerfRatingSortId},{Suggested Elloree Performance Rating Sort Id})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performance Rating Sort Id},",
						"          {Worker ID},",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select2",
						"selectWokerDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          Event,",
						"          {Event Year} = EventYear,",
						"          {Performance Rating} = PerfRating",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTalentDBRecs",
						"Talent select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Worker ID},",
						"          {Performance Rating}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTalentColumns",
						"selectTalentColumns, selectTalentDBRecs union(byName: true)~> union1",
						"DatabaseTalentRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          Event,",
						"          EventYear,",
						"          PerfRating),",
						"     TotalRecCount = count(WorkerId)) ~> selectWokerDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientPerfRating} = {Unique ClientPerfRating},",
						"          {Count Unique ElloreePerfRating} = {Unique ElloreePerfRating},",
						"          {Count Unique ElloreePerfRatingSortId} = {Unique ElloreePerfRatingSortId}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientPerfRating} == {Count Unique ClientPerfRating}",
						"     && {Unique ElloreePerfRating} == {Count Unique ElloreePerfRating}",
						"     && {Unique ElloreePerfRatingSortId} == {Count Unique ElloreePerfRatingSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientPerfRating} = {Unique ClientPerfRating}),",
						"     {Agg Unique ElloreePerfRating} = first({Unique ElloreePerfRating}),",
						"          {Agg Unique ElloreePerfRatingSortId} = first({Unique ElloreePerfRatingSortId})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientPerfRating} == {Agg Unique ClientPerfRating}",
						"     && {Unique ElloreePerfRating} == {Agg Unique ElloreePerfRating}",
						"     && {Unique ElloreePerfRatingSortId} == {Agg Unique ElloreePerfRatingSortId},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"PerfromanceRatingMapTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"PerfromanceRatingMapTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientPerfRating} = ClientPerfRating,",
						"          {Unique ElloreePerfRating} = ElloreePerfRating,",
						"          {Unique ElloreePerfRatingSortId} = ElloreePerfRatingSortId),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientPerfRating},",
						"          {Unique ElloreePerfRating},",
						"          {Unique ElloreePerfRatingSortId}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id},",
						"          {Performance Rating}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['perf_rating_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingPerformanceMapping",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_perf_rating_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepPerformanceMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_TalentData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ReqStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "AllReqData"
						},
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqStatusMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingReqStatusMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepReqStatusMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotReqStatusAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnReqStatus"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "select5"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "exists1"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllReqData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqStatusMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Suggested Elloree Requisition Status},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Requisition ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotReqStatusAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotReqStatusAndEventTime sort(asc({Client Requisition Status}, true)) ~> SortOnReqStatus",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Requisition Status} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientReqStatus} = ClientReqStatus,",
						"          {Unique ElloreeReqStatus} = ElloreeReqStatus),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Requisition Status} == {Unique ClientReqStatus},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Requisition Status} = {Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Requisition Status} = {Unique ElloreeReqStatus},",
						"          {Requisition ID} = {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, select1 join({Client ID} != {Unique ClientId}",
						"     && {Client Requisition Status} == {Unique ClientReqStatus},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Requisition Status} = iif(isNull({Suggested Source}),{Unique ClientReqStatus},{Suggested Elloree Requisition Status})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Requisition Status},",
						"          {Elloree Requisition Status},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Requisition Status},",
						"          {Requisition ID},",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Record Id} = ReqId,",
						"          {Requisition Status} = ReqStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"AllReqData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Requisition ID},",
						"          {Requisition Status}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5, selectReqDBRecs union(byName: true)~> union1",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          ReqStatus),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientReqStatus} = {Unique ClientReqStatus},",
						"          {Count Unique ElloreeReqStatus} = {Unique ElloreeReqStatus}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientReqStatus} == {Count Unique ClientReqStatus}",
						"     && {Unique ElloreeReqStatus} == {Count Unique ElloreeReqStatus},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientReqStatus} = {Unique ClientReqStatus}),",
						"     {Agg Unique ElloreeReqStatus} = first({Unique ElloreeReqStatus})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientReqStatus} == {Agg Unique ClientReqStatus}",
						"     && {Unique ElloreeReqStatus} == {Agg Unique ElloreeReqStatus},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ReqStatusMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ReqStatusMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientReqStatus} = ClientReqStatus,",
						"          {Unique ElloreeReqStatus} = ElloreeReqStatus),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> exists1",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"exists1 select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqStatus},",
						"          {Unique ElloreeReqStatus}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id},",
						"          {Requisition Status}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnReqStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['reqstatus_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingReqStatusMapping",
						"SortOnReqStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_reqstatus_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepReqStatusMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqStatusMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "AllReqData"
						},
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqTypeMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseReqRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingReqTypeMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepReqTypeMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotReqTypeAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnReqType"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueRows"
						},
						{
							"name": "SelectExistingReqTypeMapping"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select3"
						},
						{
							"name": "selectReqDBRecs"
						},
						{
							"name": "select4"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectReqDBRecsInit"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllReqData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ReqTypeMappingTbl",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseReqRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Suggested Elloree Requisition Type},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Requisition ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotReqTypeAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotReqTypeAndEventTime sort(asc({Client Requisition Type}, true)) ~> SortOnReqType",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Requisition Type} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientReqType} = ClientReqType,",
						"          {Unique ElloreeReqType} = ElloreeReqType),",
						"     ClientEngagementDt = last(ClientEngagementDt)) ~> SelectUniqueRows",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectExistingReqTypeMapping",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Requisition Type} == {Unique ClientReqType},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Requisition Type} = {Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Requisition Type} = {Unique ElloreeReqType},",
						"          {Requisition ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2, SelectExistingReqTypeMapping join({Client ID} != {Unique ClientId}",
						"     && {Client Requisition Type} == {Unique ClientReqType},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select3 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Requisition Type} = iif(isNull({Suggested Source}),{Unique ClientReqType},{Suggested Elloree Requisition Type})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Requisition Type},",
						"          {Elloree Requisition Type},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Requisition Type},",
						"          {Requisition ID},",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"selectReqDBRecsInit select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Requisition ID} = ReqId,",
						"          {Requisition Type} = ReqType",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqDBRecs",
						"AllReqData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, selectReqDBRecs union(byName: true)~> union1",
						"DatabaseReqRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          EventYear,",
						"          Event,",
						"          ReqId,",
						"          ReqType),",
						"     TotRecCount = count(ReqId)) ~> selectReqDBRecsInit",
						"SelectUniqueRows aggregate(groupBy({Count Unique ClientReqType} = {Unique ClientReqType},",
						"          {Count Unique ElloreeReqType} = {Unique ElloreeReqType}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueRows, GetCountOfClientForUniqueValues join({Unique ClientReqType} == {Count Unique ClientReqType}",
						"     && {Unique ElloreeReqType} == {Count Unique ElloreeReqType},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientReqType} = {Unique ClientReqType}),",
						"     {Agg Unique ElloreeReqType} = first({Unique ElloreeReqType})) ~> aggregate1",
						"SelectMappingWithMostClients, aggregate1 join({Unique ClientReqType} == {Agg Unique ClientReqType}",
						"     && {Unique ElloreeReqType} == {Agg Unique ElloreeReqType},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientReqType},",
						"          {Unique ElloreeReqType}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"ReqTypeMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"ReqTypeMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientReqType} = ClientReqType,",
						"          {Unique ElloreeReqType} = ElloreeReqType),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientReqType},",
						"          {Unique ElloreeReqType}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Requisition ID},",
						"          {Requisition Type}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnReqType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['reqtype_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingReqTypeMapping",
						"SortOnReqType sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_reqtype_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepReqTypeMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqTypeMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of veteran values across events and time periods.",
				"folder": {
					"name": "Client/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "VeteranMappingTbl"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicant"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseCoreRecords"
						},
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DatabaseApplicantRecords"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_MappingWorkingFldr",
								"type": "DatasetReference"
							},
							"name": "OutputWorkingVeteranMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_MappingPrepFldr",
								"type": "DatasetReference"
							},
							"name": "OutputPrepVeteranMapping"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotVeteranAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SortOnVeteran"
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SelectUniqueOtherClientValues"
						},
						{
							"name": "SelectWithoutEngagementDt"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "SelectApplicant"
						},
						{
							"name": "SelectCore"
						},
						{
							"name": "union1"
						},
						{
							"name": "selectCoreDBRecs"
						},
						{
							"name": "selectApplicantDBRecsInit"
						},
						{
							"name": "selectApplicantDBRecs"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "GetCountOfClientForUniqueValues"
						},
						{
							"name": "JoinClientIDCountInForMaxFilter"
						},
						{
							"name": "SelectMappingWithMostClients"
						},
						{
							"name": "CleanupSelectFields"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinBackFinalSelectMapping"
						},
						{
							"name": "TakeLastClientValForRemainingDups"
						},
						{
							"name": "NotEqualtoClientID"
						},
						{
							"name": "EqualtoClientId"
						},
						{
							"name": "GroupUniqueValues"
						},
						{
							"name": "SelectBasedOnMostRecentClientEngagment"
						},
						{
							"name": "SelectLastEngagementDt"
						},
						{
							"name": "selectUniqueClientIDValues"
						},
						{
							"name": "RemoveDupRows"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> VeteranMappingTbl",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as short,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicant",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseCoreRecords",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DatabaseApplicantRecords",
						"derivedColumn1 pivot(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Client Veteran},",
						"          {Elloree Veteran},",
						"          {Suggested Elloree Veteran},",
						"          {Suggested Source}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Record Id}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotVeteranAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"CreatePivotVeteranAndEventTime sort(asc({Client Veteran}, true)) ~> SortOnVeteran",
						"RemoveDupRows derive({Event and Year} = concat(toString({Event Year}),concat(' ',Event)),",
						"          {Elloree Veteran} = '') ~> AddDerivedEventYearColumn",
						"NotEqualtoClientID aggregate(groupBy({Unique ClientId} = ClientId,",
						"          {Unique ClientVeteran} = ClientVeteran,",
						"          {Unique ElloreeVeteran} = ElloreeVeteran),",
						"     CountClientId = count(ClientId)) ~> SelectUniqueOtherClientValues",
						"TakeLastClientValForRemainingDups select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWithoutEngagementDt",
						"SortOnEvent, selectUniqueClientIDValues join({Client ID} == {Unique ClientId}",
						"     && {Veteran Ind} == {Unique ClientVeteran},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Client Veteran} = {Veteran Ind},",
						"          {Elloree Veteran},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source} = {Unique ClientId},",
						"          {Suggested Elloree Veteran} = {Unique ElloreeVeteran},",
						"          {Record Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, SelectWithoutEngagementDt join({Client ID} != {Unique ClientId}",
						"     && {Client Veteran} == {Unique ClientVeteran},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> join2",
						"select2 derive({Suggested Source} = iif(isNull({Suggested Source}),{Unique ClientId},{Suggested Source}),",
						"          {Suggested Elloree Veteran} = iif(isNull({Suggested Source}),{Unique ClientVeteran},{Suggested Elloree Veteran})) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          {Client Veteran},",
						"          {Elloree Veteran},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event and Year},",
						"          {Suggested Source},",
						"          {Suggested Elloree Veteran},",
						"          {Record Id},",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate3 select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Record Id} = {Applicant ID},",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplicant",
						"AllCoreData select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id} = {Worker ID},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCore",
						"SelectCore, SelectApplicant, selectCoreDBRecs, selectApplicantDBRecs union(byName: true)~> union1",
						"aggregate2 select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Veteran Ind} = Veteran",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCoreDBRecs",
						"DatabaseApplicantRecords aggregate(groupBy({Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Record Id} = ApplicantId,",
						"          {Event Year} = EventYear,",
						"          Event,",
						"          {Veteran Ind} = Veteran),",
						"     TotRecCount = count(ApplicantId)) ~> selectApplicantDBRecsInit",
						"selectApplicantDBRecsInit select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectApplicantDBRecs",
						"DatabaseCoreRecords aggregate(groupBy(ClientId,",
						"          ClientEngagementDt,",
						"          WorkerId,",
						"          EventYear,",
						"          Event,",
						"          Veteran),",
						"     TotWorkers = count(WorkerId)) ~> aggregate2",
						"Applicant aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year},",
						"          Event,",
						"          {Applicant ID},",
						"          {Veteran Ind}),",
						"     TotAplicants = count({Applicant ID})) ~> aggregate3",
						"SelectUniqueOtherClientValues aggregate(groupBy({Count Unique ClientVeteran} = {Unique ClientVeteran},",
						"          {Count Unique ElloreeVeteran} = {Unique ElloreeVeteran}),",
						"     ClientIDCount = count({Unique ClientId})) ~> GetCountOfClientForUniqueValues",
						"SelectUniqueOtherClientValues, GetCountOfClientForUniqueValues join({Unique ClientVeteran} == {Count Unique ClientVeteran}",
						"     && {Unique ElloreeVeteran} == {Count Unique ElloreeVeteran},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinClientIDCountInForMaxFilter",
						"CleanupSelectFields aggregate(groupBy({Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}),",
						"     ClientIDCount = max(ClientIDCount)) ~> SelectMappingWithMostClients",
						"JoinClientIDCountInForMaxFilter select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran},",
						"          ClientIDCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CleanupSelectFields",
						"SelectMappingWithMostClients aggregate(groupBy({Agg Unique ClientVeteran} = {Unique ClientVeteran}),",
						"     {Agg Unique ElloreeVeteran} = first({Unique ElloreeVeteran})) ~> aggregate5",
						"SelectMappingWithMostClients, aggregate5 join({Unique ElloreeVeteran} == {Agg Unique ElloreeVeteran}",
						"     && {Unique ClientVeteran} == {Agg Unique ClientVeteran},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinBackFinalSelectMapping",
						"JoinBackFinalSelectMapping aggregate(groupBy({Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}),",
						"     {Unique ClientId} = last({Unique ClientId})) ~> TakeLastClientValForRemainingDups",
						"VeteranMappingTbl filter(ClientId!=$Flow_Client_Id) ~> NotEqualtoClientID",
						"VeteranMappingTbl filter(ClientId==$Flow_Client_Id) ~> EqualtoClientId",
						"EqualtoClientId aggregate(groupBy({Unique ClientId} = ClientId,",
						"          ClientEngagementDt,",
						"          {Unique ClientVeteran} = ClientVeteran,",
						"          {Unique ElloreeVeteran} = ElloreeVeteran),",
						"     RowCount = count(ClientId)) ~> GroupUniqueValues",
						"GroupUniqueValues, SelectLastEngagementDt exists(ClientEngagementDt == LastEngagementDt,",
						"     negate:false,",
						"     broadcast: 'both')~> SelectBasedOnMostRecentClientEngagment",
						"GroupUniqueValues aggregate(LastEngagementDt = max(ClientEngagementDt)) ~> SelectLastEngagementDt",
						"SelectBasedOnMostRecentClientEngagment select(mapColumn(",
						"          {Unique ClientId},",
						"          {Unique ClientVeteran},",
						"          {Unique ElloreeVeteran}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUniqueClientIDValues",
						"union1 aggregate(groupBy({Client ID},",
						"          {Client Engagement Date},",
						"          {Record Id},",
						"          {Event Year},",
						"          Event,",
						"          {Veteran Ind}),",
						"     RowCount = count({Client ID})) ~> RemoveDupRows",
						"SortOnVeteran sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['veteran_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkingVeteranMapping",
						"SortOnVeteran sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string,",
						"          Column_11 as string,",
						"          Column_12 as string,",
						"          Column_13 as string,",
						"          Column_14 as string,",
						"          Column_15 as string,",
						"          Column_16 as string,",
						"          Column_17 as string,",
						"          Column_18 as string,",
						"          Column_19 as string,",
						"          Column_20 as string,",
						"          Column_21 as string,",
						"          Column_22 as string,",
						"          Column_23 as string,",
						"          Column_24 as string,",
						"          Column_25 as string,",
						"          Column_26 as string,",
						"          Column_27 as string,",
						"          Column_28 as string",
						"     ),",
						"     partitionFileNames:['prep_veteran_mapping.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPrepVeteranMapping"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentVeteranMapTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingWorkingFldr')]",
				"[concat(variables('factoryId'), '/datasets/Source_MappingPrepFldr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_ApplicantID')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "ApplicantTemplate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputAudit"
						}
					],
					"transformations": [
						{
							"name": "GroupUniqueCandidateIDandWorkerIDs"
						},
						{
							"name": "CountCandidateIds"
						},
						{
							"name": "FilterForMultipleCandidateIDs"
						},
						{
							"name": "JoinForWorkerId"
						},
						{
							"name": "SelectFinalOutput"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as short,",
						"          {Event Quarter} as integer,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicantTemplate",
						"ApplicantTemplate aggregate(groupBy({Applicant ID},",
						"          {Internal Worker ID}),",
						"     RecordCount = countDistinct(concat({Applicant ID},{Internal Worker ID}))) ~> GroupUniqueCandidateIDandWorkerIDs",
						"GroupUniqueCandidateIDandWorkerIDs aggregate(groupBy({Applicant ID}),",
						"     InternalWorkerIDCount = sum(RecordCount)) ~> CountCandidateIds",
						"CountCandidateIds filter(InternalWorkerIDCount>1) ~> FilterForMultipleCandidateIDs",
						"FilterForMultipleCandidateIDs, GroupUniqueCandidateIDandWorkerIDs join(CountCandidateIds@{Applicant ID} == GroupUniqueCandidateIDandWorkerIDs@{Applicant ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinForWorkerId",
						"JoinForWorkerId select(mapColumn(",
						"          {Applicant ID} = CountCandidateIds@{Applicant ID},",
						"          {Internal Worker ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalOutput",
						"SelectFinalOutput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Applicant Id with Multiple Worker Ids.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputAudit"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_JobApplicants')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 2 files for hierarchy review.  The 1st file shows record counts by Business Org Level 1 and the second file shows counts by level 1 and level 2.  Output has placeholder columns for mapping.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_BusHierarchy",
								"type": "DatasetReference"
							},
							"name": "BusinessMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "BSOutputAllHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "BSOutputLOBlvl1Hierarchy"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						},
						{
							"name": "pivot2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort3"
						},
						{
							"name": "sort4"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort5"
						},
						{
							"name": "sort6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Business Group Level 1} as string,",
						"          {Client Business Group Level 2} as string,",
						"          {Client Business Group Level 3} as string,",
						"          {Client Business Group Level 4} as string,",
						"          {Elloree Business Group Level 1} as string,",
						"          {Elloree Business Group Level 2} as string,",
						"          {Elloree Business Group Level 3} as string,",
						"          {Elloree Business Group Level 4} as string,",
						"          {Suggested Elloree Business Group Level 1} as string,",
						"          {Suggested Elloree Business Group Level 2} as string,",
						"          {Suggested Elloree Business Group Level 3} as string,",
						"          {Suggested Elloree Business Group Level 4} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BusinessMapping",
						"sort4 pivot(groupBy({Business Group Level 1},",
						"          {Elloree Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Elloree Business Group Level 2}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot1",
						"sort3 pivot(groupBy({Business Group Level 1},",
						"          {Elloree Business Group Level 1}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> pivot2",
						"select1 derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year}))),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sort(asc({Event Quarter and Year}, true),",
						"     partitionBy('hash', 1)) ~> sort3",
						"derivedColumn1 sort(asc({Event Quarter and Year}, true)) ~> sort4",
						"AllCoreData, BusinessMapping join({Business Group Level 1} == {Client Business Group Level 1}",
						"     && {Business Group Level 2} == {Client Business Group Level 2},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Worker Status},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Business Group Level 1},",
						"          {Elloree Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"pivot1 sort(asc({Elloree Business Group Level 1}, true),",
						"     asc({Elloree Business Group Level 2}, true)) ~> sort5",
						"pivot2 sort(asc({Elloree Business Group Level 1}, true)) ~> sort6",
						"sort5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BSOutputAllHierarchy",
						"sort6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Lvl 1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BSOutputLOBlvl1Hierarchy"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_BusHierarchy')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_BusHierarchyCheck')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData1",
							"description": "Import all Core data.  Workflow will output orphan hierarchy based on records that do not match the current headcount hierarchy."
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData2",
							"description": "Import all core data.  Workflow will output orphan and current hierarchy along with record counts"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputOrphanHierarchy"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OuputOrphanAndCurrHrchyCounts"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputWorkerHierarchyDetail"
						}
					],
					"transformations": [
						{
							"name": "MaxEventDt"
						},
						{
							"name": "CurrentHCTEvent",
							"description": "Join on max HCT event date in order to pull only the Current headcount records"
						},
						{
							"name": "UniqueHierarchyRecords",
							"description": "Select unique hierarchy for current headcount records."
						},
						{
							"name": "SelectUniqueHierarchyCurrHCT",
							"description": "Select key and hierarchy fields."
						},
						{
							"name": "UniqueHierarchyAllEvents"
						},
						{
							"name": "SelectUniqueHierarchyFields"
						},
						{
							"name": "SelectCoreWithNoCurrentHierarchy"
						},
						{
							"name": "PullRecordsWithOrphans",
							"description": "Pull only records that do not have a hierarchy that matches a current hierarchy "
						},
						{
							"name": "UniqueWorkerWithOrphanHrchy",
							"description": "Pull unique worker ID and LOB lvl1 and LOB lvl 2 records."
						},
						{
							"name": "SelectUniqueWorkerIDsWithOrphanHierarchy"
						},
						{
							"name": "PullCurrentHierarchyIfExists",
							"description": "Join orphan workers ID's with current HCT worker ID's to pull in Current hierarchy if present."
						},
						{
							"name": "SelectWorkerIDandHierarcy",
							"description": "Select worker ID and hierarchy fields"
						},
						{
							"name": "CreateWorkerCountsbyHierarchy",
							"description": "Create counts for unique orphan and current hierarchy records"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "HCTFilter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData1",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData2",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"HCTFilter aggregate(groupBy(EventUnique = Event),",
						"     MaxEventDate = max({Event Date})) ~> MaxEventDt",
						"derivedColumn3, MaxEventDt join({Event Date} == MaxEventDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CurrentHCTEvent",
						"CurrentHCTEvent aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyRecords",
						"UniqueHierarchyRecords select(mapColumn(",
						"          {HierarchyKey Unique HCT} = {HierarchyKey Unique},",
						"          {Business Group Level 1 HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyCurrHCT",
						"derivedColumn1 aggregate(groupBy({HierarchyKey Unique} = HierarchyKey),",
						"     each(match(name!='HierarchyKey'), $$ = first($$))) ~> UniqueHierarchyAllEvents",
						"UniqueHierarchyAllEvents select(mapColumn(",
						"          {HierarchyKey Unique ALL} = {HierarchyKey Unique},",
						"          {Business Group Level 1 ALL} = {Business Group Level 1},",
						"          {Business Group Level 2 ALL} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueHierarchyFields",
						"SelectUniqueHierarchyFields, SelectUniqueHierarchyCurrHCT exists({HierarchyKey Unique ALL} == {HierarchyKey Unique HCT},",
						"     negate:true,",
						"     broadcast: 'auto')~> SelectCoreWithNoCurrentHierarchy",
						"derivedColumn2, SelectCoreWithNoCurrentHierarchy join(HierarchyKey == {HierarchyKey Unique ALL},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullRecordsWithOrphans",
						"PullRecordsWithOrphans aggregate(groupBy({Worker ID unique} = {Worker ID},",
						"          {Business Group Level 1 Unique} = {Business Group Level 1},",
						"          {Business Group Level 2 Unique} = {Business Group Level 2}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> UniqueWorkerWithOrphanHrchy",
						"UniqueWorkerWithOrphanHrchy select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Unique}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectUniqueWorkerIDsWithOrphanHierarchy",
						"SelectUniqueWorkerIDsWithOrphanHierarchy, CurrentHCTEvent join({Worker ID unique} == {Worker ID},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PullCurrentHierarchyIfExists",
						"PullCurrentHierarchyIfExists select(mapColumn(",
						"          {Worker ID unique},",
						"          {Business Group Level 1 Orphan} = {Business Group Level 1 Unique},",
						"          {Business Group Level 2 Orphan} = {Business Group Level 2 Unique},",
						"          {Business Group Level 1 Current HCT} = {Business Group Level 1},",
						"          {Business Group Level 2 Current HCT} = {Business Group Level 2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerIDandHierarcy",
						"SelectWorkerIDandHierarcy aggregate(groupBy({Business Group Level 1 Orph} = {Business Group Level 1 Orphan},",
						"          {Business Group Level 2 Orph} = {Business Group Level 2 Orphan},",
						"          {Business Group Level 1 Curr HCT} = {Business Group Level 1 Current HCT},",
						"          {Business Group Level 2 Curr HCT} = {Business Group Level 2 Current HCT}),",
						"     WorkerCount = count({Worker ID unique})) ~> CreateWorkerCountsbyHierarchy",
						"AllCoreData1 derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn1",
						"AllCoreData2 derive(HierarchyKey = concat({Business Group Level 1}, {Business Group Level 2})) ~> derivedColumn2",
						"HCTFilter derive(HierarchyKey = concat({Business Group Level 1},{Business Group Level 2})) ~> derivedColumn3",
						"CoreForHCT filter({Event Code}=='HCT') ~> HCTFilter",
						"SelectCoreWithNoCurrentHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputOrphanHierarchy",
						"CreateWorkerCountsbyHierarchy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphans All Levels.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OuputOrphanAndCurrHrchyCounts",
						"SelectWorkerIDandHierarcy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Hierarchy Orphan Worker Detail.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputWorkerHierarchyDetail"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_CorpTitle",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputCorpTitleReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotCorpTitleEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddCorpTitleMapping"
						},
						{
							"name": "SortOnCorpTitle"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TitleReview_ClientId as string,",
						"     TitleReview_ClientDt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as date 'yyyy-MM-dd',",
						"          EventMonth as integer,",
						"          {Event Quarter} as integer,",
						"          {Event Year} as short,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as double,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as date 'yyyy-MM-dd',",
						"          {Current Hire Date} as date 'yyyy-MM-dd',",
						"          {Years of Service} as double,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as integer,",
						"          {Last Promo Date} as date 'yyyy-MM-dd',",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as short,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as integer,",
						"          EmpCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Corporate Title} as string,",
						"          {Elloree Corporate Title} as string,",
						"          {Client Elloree Corporate Title} as string,",
						"          {Elloree Corporate Title Sort} as string,",
						"          {Suggested Elloree Corporate Title} as string,",
						"          {Suggested Client Elloree Corporate Title} as string,",
						"          {Suggested Elloree Corporate Title Sort} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount Curr Title} as string,",
						"          {2017 Headcount Prev Title} as string,",
						"          {2018 Headcount Curr Title} as string,",
						"          {2018 Headcount Prev Title} as string,",
						"          {2018 Hire Curr Title} as string,",
						"          {2018 Hire Prev Title} as string,",
						"          {2018 Promo Curr Title} as string,",
						"          {2018 Promo Prev Title} as string,",
						"          {2018 Term Curr Title} as string,",
						"          {2018 Term Prev Title} as string,",
						"          {2019 Headcount Curr Title} as string,",
						"          {2019 Headcount Prev Title} as string,",
						"          {2019 Hire Curr Title} as string,",
						"          {2019 Hire Prev Title} as string,",
						"          {2019 Promo Curr Title} as string,",
						"          {2019 Promo Prev Title} as string,",
						"          {2019 Term Curr Title} as string,",
						"          {2019 Term Prev Title} as string,",
						"          {2020 Headcount Curr Title} as string,",
						"          {2020 Headcount Prev Title} as string,",
						"          {2020 Hire Curr Title} as string,",
						"          {2020 Hire Prev Title} as string,",
						"          {2020 Promo Curr Title} as string,",
						"          {2020 Promo Prev Title} as string,",
						"          {2020 Term Curr Title} as string,",
						"          {2020 Term Prev Title} as string,",
						"          {2021 Headcount Curr Title} as string,",
						"          {2021 Headcount Prev Title} as string,",
						"          {2021 Hire Curr Title} as string,",
						"          {2021 Hire Prev Title} as string,",
						"          {2021 Promo Curr Title} as string,",
						"          {2021 Promo Prev Title} as string,",
						"          {2021 Term Curr Title} as string,",
						"          {2021 Term Prev Title} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorpTitleMapping",
						"SortOnEvent pivot(groupBy({Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Client Elloree Corporate Title},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotCorpTitleEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, CorpTitleMapping join({Corporate Title} == {Client Corporate Title},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddCorpTitleMapping",
						"CreatePivotCorpTitleEventTime sort(asc({Corporate Title}, true)) ~> SortOnCorpTitle",
						"AddCorpTitleMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Worker Status},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Client Corporate Title},",
						"          {Elloree Corporate Title},",
						"          {Elloree Corporate Title Sort},",
						"          {Client Elloree Corporate Title},",
						"          {Client Engagement Date} = CorpTitleMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnCorpTitle sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Corporate Title.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputCorpTitleReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_CorpTitle')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Duplicate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Output Duplicate Review report.  Currently ties to the union csv in blob.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CorePromotions"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHires"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Other"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_DivSlate_File",
								"type": "DatasetReference"
							},
							"name": "DivSlates"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "EventDuplicatesReport"
						}
					],
					"transformations": [
						{
							"name": "HeadcountRowCount"
						},
						{
							"name": "HeadcountSumRowsForDups"
						},
						{
							"name": "HctDuplicates"
						},
						{
							"name": "TerminationsRowCount"
						},
						{
							"name": "TerminationsSumRowsForDups"
						},
						{
							"name": "TermDuplicates"
						},
						{
							"name": "union1"
						},
						{
							"name": "HiresRowCount"
						},
						{
							"name": "HiresSumRowsForDups"
						},
						{
							"name": "HireDuplicates"
						},
						{
							"name": "PromotionsRowCount"
						},
						{
							"name": "PromotionsSumRowsForDups"
						},
						{
							"name": "PromoDuplicates"
						},
						{
							"name": "TalentRowCount"
						},
						{
							"name": "TalentSumRowsForDups"
						},
						{
							"name": "TalentDuplicates"
						},
						{
							"name": "RequisitionsRowCount"
						},
						{
							"name": "RequisitionsSumRowsForDups"
						},
						{
							"name": "RequisitionDuplicates"
						},
						{
							"name": "ApplicantRowCount"
						},
						{
							"name": "ApplicantSumRowsForDups"
						},
						{
							"name": "ApplicantDuplicates"
						},
						{
							"name": "PromoFilterOutClientAliasHeaderRow"
						},
						{
							"name": "HeadcountFilter"
						},
						{
							"name": "TerminationFilter"
						},
						{
							"name": "HiresFilter"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "OtherRowCount"
						},
						{
							"name": "OtherSumRowsForDups"
						},
						{
							"name": "ConcatEventandEventType"
						},
						{
							"name": "OtherDuplicates"
						},
						{
							"name": "SlateRowCount"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SlateSumRowsForDups"
						},
						{
							"name": "SlateDuplicates"
						},
						{
							"name": "RemoveNullOtherRows"
						},
						{
							"name": "RemoveNullSlateRows"
						},
						{
							"name": "RemoveNullPromoRows"
						},
						{
							"name": "RemoveNullTalentRows"
						},
						{
							"name": "RemoveNullReqRows"
						},
						{
							"name": "RemoveNullApplicantRows"
						},
						{
							"name": "RemoveNullHeadcountRows"
						},
						{
							"name": "RemoveNullTermRows"
						},
						{
							"name": "RemoveNullHireRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorePromotions",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHeadcount",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTerminations",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHires",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Other",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Requisition ID} as string,",
						"          {Event Year} as string,",
						"          {Candidates StM} as string,",
						"          {Internal Candidates StM} as string,",
						"          {External Candidates StM} as string,",
						"          {Candidates Hired} as string,",
						"          {Internal Candidates Hired} as string,",
						"          {External Candidates Hired} as string,",
						"          {White Candidates StM} as string,",
						"          {Internal White Candidates StM} as string,",
						"          {External White Candidates StM} as string,",
						"          {White Candidates Hired} as string,",
						"          {Internal White Candidates Hired} as string,",
						"          {External White Candidates Hired} as string,",
						"          {Black Candidates StM} as string,",
						"          {Internal Black Candidates StM} as string,",
						"          {External Black Candidates StM} as string,",
						"          {Black Candidates Hired} as string,",
						"          {Internal Black Candidates Hired} as string,",
						"          {External Black Candidates Hired} as string,",
						"          {Latinx Candidates StM} as string,",
						"          {Internal Latinx Candidates StM} as string,",
						"          {External Latinx Candidates StM} as string,",
						"          {Latinx Candidates Hired} as string,",
						"          {Internal Latinx Candidates Hired} as string,",
						"          {External Latinx Candidates Hired} as string,",
						"          {Asian Candidates StM} as string,",
						"          {Internal Asian Candidates StM} as string,",
						"          {External Asian Candidates StM} as string,",
						"          {Asian Candidates Hired} as string,",
						"          {Internal Asian Candidates Hired} as string,",
						"          {External Asian Candidates Hired} as string,",
						"          {2+ Races Candidates StM} as string,",
						"          {Internal 2+ Races Candidates StM} as string,",
						"          {External 2+ Races Candidates StM} as string,",
						"          {2+ Races Candidates Hired} as string,",
						"          {Internal 2+ Races Candidates Hired} as string,",
						"          {External 2+ Races Candidates Hired} as string,",
						"          {Other Candidates StM} as string,",
						"          {Internal Other Candidates StM} as string,",
						"          {External Other Candidates StM} as string,",
						"          {Other Candidates Hired} as string,",
						"          {Internal Other Candidates Hired} as string,",
						"          {External Other Candidates Hired} as string,",
						"          {Male Candidates StM} as string,",
						"          {Internal Male Candidates StM} as string,",
						"          {External Male Candidates StM} as string,",
						"          {Male Candidates Hired} as string,",
						"          {Internal Male Candidates Hired} as string,",
						"          {External Male Candidates Hired} as string,",
						"          {Female Candidates StM} as string,",
						"          {Internal Female Candidates StM} as string,",
						"          {External Female Candidates StM} as string,",
						"          {Female Candidates Hired} as string,",
						"          {Internal Female Candidates Hired} as string,",
						"          {External Female Candidates Hired} as string,",
						"          {Other Gender Candidates StM} as string,",
						"          {Internal Other Gender Candidates StM} as string,",
						"          {External Other Gender Candidates StM} as string,",
						"          {Other Gender Candidates Hired} as string,",
						"          {Internal Other Gender Candidates Hired} as string,",
						"          {External Other Gender Candidates Hired} as string,",
						"          {PoC Candidates StM} as string,",
						"          {Internal PoC Candidates StM} as string,",
						"          {External PoC Candidates StM} as string,",
						"          {PoC  Candidates Hired} as string,",
						"          {Internal PoC  Candidates Hired} as string,",
						"          {External PoC  Candidates Hired} as string,",
						"          {Diverse Candidates StM} as string,",
						"          {Internal Diverse Candidates StM} as string,",
						"          {External Diverse Candidates StM} as string,",
						"          {Diverse Candidates Hired} as string,",
						"          {Internal Diverse Candidates Hired} as string,",
						"          {External Diverse Candidates Hired} as string,",
						"          {Female Not PoC Candidates StM} as string,",
						"          {Internal Female Not PoC Candidates StM} as string,",
						"          {External Female Not PoC Candidates StM} as string,",
						"          {Female Not PoC Candidates Hired} as string,",
						"          {Internal Female Not PoC Candidates Hired} as string,",
						"          {External Female Not PoC Candidates Hired} as string,",
						"          {Female PoC Candidates StM} as string,",
						"          {Internal Female PoC Candidates StM} as string,",
						"          {External Female PoC Candidates StM} as string,",
						"          {Female PoC Candidates Hired} as string,",
						"          {Internal Female PoC Candidates Hired} as string,",
						"          {External Female PoC Candidates Hired} as string,",
						"          {Not Female PoC Candidates StM} as string,",
						"          {Internal Not Female PoC Candidates StM} as string,",
						"          {External Not Female PoC Candidates StM} as string,",
						"          {Not Female PoC Candidates Hired} as string,",
						"          {Internal Not Female PoC Candidates Hired} as string,",
						"          {External Not Female PoC Candidates Hired} as string,",
						"          {Not Female Not PoC Candidates StM} as string,",
						"          {Internal Not Female Not PoC Candidates StM} as string,",
						"          {External Not Female Not PoC Candidates StM} as string,",
						"          {Not Female Not PoC Candidates Hired} as string,",
						"          {Internal Not Female Not PoC Candidates Hired} as string,",
						"          {External Not Female Not PoC Candidates Hired} as string,",
						"          {Diverse Slate} as string,",
						"          {Internal Diverse Slate} as string,",
						"          {External Diverse Slate} as string,",
						"          {No Diverse Slate} as string,",
						"          {Internal No Diverse Slate} as string,",
						"          {External No Diverse Slate} as string,",
						"          {Diverse Hired Slate} as string,",
						"          {Internal Diverse Hired Slate} as string,",
						"          {External Diverse Hired Slate} as string,",
						"          {PoC Slate} as string,",
						"          {Internal PoC Slate} as string,",
						"          {External PoC Slate} as string,",
						"          {No PoC Slate} as string,",
						"          {Internal No PoC Slate} as string,",
						"          {External No PoC Slate} as string,",
						"          {PoC Hired Slate} as string,",
						"          {Internal PoC Hired Slate} as string,",
						"          {External PoC Hired Slate} as string,",
						"          {White Slate} as string,",
						"          {Internal White Slate} as string,",
						"          {External White Slate} as string,",
						"          {No White Slate} as string,",
						"          {Internal No White Slate} as string,",
						"          {External No White Slate} as string,",
						"          {White Hired Slate} as string,",
						"          {Internal White Hired Slate} as string,",
						"          {External White Hired Slate} as string,",
						"          {Black Slate} as string,",
						"          {Internal Black Slate} as string,",
						"          {External Black Slate} as string,",
						"          {No Black Slate} as string,",
						"          {Internal No Black Slate} as string,",
						"          {External No Black Slate} as string,",
						"          {Black Hired Slate} as string,",
						"          {Internal Black Hired Slate} as string,",
						"          {External Black Hired Slate} as string,",
						"          {Latinx Slate} as string,",
						"          {Internal Latinx Slate} as string,",
						"          {External Latinx Slate} as string,",
						"          {No Latinx Slate} as string,",
						"          {Internal No Latinx Slate} as string,",
						"          {External No Latinx Slate} as string,",
						"          {Latinx Hired Slate} as string,",
						"          {Internal Latinx Hired Slate} as string,",
						"          {External Latinx Hired Slate} as string,",
						"          {Asian Slate} as string,",
						"          {Internal Asian Slate} as string,",
						"          {External Asian Slate} as string,",
						"          {No Asian Slate} as string,",
						"          {Internal No Asian Slate} as string,",
						"          {External No Asian Slate} as string,",
						"          {Asian Hired Slate} as string,",
						"          {Internal Asian Hired Slate} as string,",
						"          {External Asian Hired Slate} as string,",
						"          {2+ Races Slate} as string,",
						"          {Internal 2+ Races Slate} as string,",
						"          {External 2+ Races Slate} as string,",
						"          {No 2+ Races Slate} as string,",
						"          {Internal No 2+ Races Slate} as string,",
						"          {External No 2+ Races Slate} as string,",
						"          {2+ Races Hired Slate} as string,",
						"          {Internal 2+ Races Hired Slate} as string,",
						"          {External 2+ Races Hired Slate} as string,",
						"          {Other Race Slate} as string,",
						"          {Internal Other Race Slate} as string,",
						"          {External Other Race Slate} as string,",
						"          {No Other Race Slate} as string,",
						"          {Internal No Other Race Slate} as string,",
						"          {External No Other Race Slate} as string,",
						"          {Other Race Hired Slate} as string,",
						"          {Internal Other Race Hired Slate} as string,",
						"          {External Other Race Hired Slate} as string,",
						"          {Female Slate} as string,",
						"          {Internal Female Slate} as string,",
						"          {External Female Slate} as string,",
						"          {No Female Slate} as string,",
						"          {Internal No Female Slate} as string,",
						"          {External No Female Slate} as string,",
						"          {Female Hired Slate} as string,",
						"          {Internal Female Hired Slate} as string,",
						"          {External Female Hired Slate} as string,",
						"          {Male Slate} as string,",
						"          {Internal Male Slate} as string,",
						"          {External Male Slate} as string,",
						"          {No Male Slate} as string,",
						"          {Internal No Male Slate} as string,",
						"          {External No Male Slate} as string,",
						"          {Male Hired Slate} as string,",
						"          {Internal Male Hired Slate} as string,",
						"          {External Male Hired Slate} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DivSlates",
						"HeadcountFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> HeadcountRowCount",
						"HeadcountRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> HeadcountSumRowsForDups",
						"RemoveNullHeadcountRows filter(DuplicateCount>1) ~> HctDuplicates",
						"TerminationFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> TerminationsRowCount",
						"TerminationsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> TerminationsSumRowsForDups",
						"RemoveNullTermRows filter(DuplicateCount>1) ~> TermDuplicates",
						"HctDuplicates, TermDuplicates, HireDuplicates, PromoDuplicates, TalentDuplicates, RequisitionDuplicates, ApplicantDuplicates, OtherDuplicates, SlateDuplicates union(byName: true)~> union1",
						"HiresFilter aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = countAll({Worker ID})) ~> HiresRowCount",
						"HiresRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> HiresSumRowsForDups",
						"RemoveNullHireRows filter(DuplicateCount>1) ~> HireDuplicates",
						"PromoFilterOutClientAliasHeaderRow aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> PromotionsRowCount",
						"PromotionsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> PromotionsSumRowsForDups",
						"RemoveNullPromoRows filter(DuplicateCount>1) ~> PromoDuplicates",
						"Talent aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = count({Worker ID})) ~> TalentRowCount",
						"TalentRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> TalentSumRowsForDups",
						"RemoveNullTalentRows filter(DuplicateCount>1) ~> TalentDuplicates",
						"Requisitions aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Requisition ID}),",
						"     RowCount = count({Requisition ID})) ~> RequisitionsRowCount",
						"RequisitionsRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> RequisitionsSumRowsForDups",
						"RemoveNullReqRows filter(DuplicateCount>1) ~> RequisitionDuplicates",
						"Applicants aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Applicant ID},",
						"          {Requisition ID}),",
						"     RowCount = count({Applicant ID})) ~> ApplicantRowCount",
						"ApplicantRowCount aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Applicant ID},",
						"          {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> ApplicantSumRowsForDups",
						"RemoveNullApplicantRows filter(DuplicateCount>1) ~> ApplicantDuplicates",
						"CorePromotions filter({Event Code}=='PRO') ~> PromoFilterOutClientAliasHeaderRow",
						"CoreHeadcount filter({Event Code}=='HCT') ~> HeadcountFilter",
						"CoreTerminations filter({Event Code}=='TER') ~> TerminationFilter",
						"CoreHires filter({Event Code}=='HIR') ~> HiresFilter",
						"derivedColumn1 select(mapColumn(",
						"          Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)},",
						"          DuplicateCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"ApplicantSumRowsForDups derive({Record Id (Worker/Req/Applicant)} = toString({Record Id (Worker/Req/Applicant)})) ~> derivedColumn1",
						"union1 sort(asc(Event, true)) ~> sort1",
						"Other aggregate(groupBy(Event,",
						"          {Event (Desc)},",
						"          {Event (Type)},",
						"          {Event Date},",
						"          {Worker ID}),",
						"     RowCount = countAll({Worker ID})) ~> OtherRowCount",
						"ConcatEventandEventType aggregate(groupBy(Event,",
						"          {Event Date},",
						"          {Record Id (Worker/Req/Applicant)} = {Worker ID}),",
						"     DuplicateCount = sum(RowCount)) ~> OtherSumRowsForDups",
						"OtherRowCount derive(Event = concat(concat(concat(concat(Event,' '),{Event (Type)}),' '),{Event (Desc)})) ~> ConcatEventandEventType",
						"RemoveNullOtherRows filter(DuplicateCount>1) ~> OtherDuplicates",
						"derivedColumn2 aggregate(groupBy(Event,",
						"          {Event Year},",
						"          {Requisition ID}),",
						"     RowCount = countAll({Requisition ID})) ~> SlateRowCount",
						"DivSlates derive(Event = 'Slate') ~> derivedColumn2",
						"SlateRowCount aggregate(groupBy(Event,",
						"          {Event Date} = {Event Year},",
						"          {Record Id (Worker/Req/Applicant)} = {Requisition ID}),",
						"     DuplicateCount = sum(RowCount)) ~> SlateSumRowsForDups",
						"RemoveNullSlateRows filter(DuplicateCount>1) ~> SlateDuplicates",
						"OtherSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullOtherRows",
						"SlateSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullSlateRows",
						"PromotionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullPromoRows",
						"TalentSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTalentRows",
						"RequisitionsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullReqRows",
						"FinalSelect filter(!(isNull(Event))) ~> RemoveNullApplicantRows",
						"HeadcountSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHeadcountRows",
						"TerminationsSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullTermRows",
						"HiresSumRowsForDups filter(!(isNull(Event))) ~> RemoveNullHireRows",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Duplicates Review Core.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> EventDuplicatesReport"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_TalentData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_OtherCore_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_DivSlate_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Ethnicity",
								"type": "DatasetReference"
							},
							"name": "EthnicityMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddEhtnicityMapping"
						},
						{
							"name": "SortOnEthnicity"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Race} as string,",
						"          {Client Hispanic or Latino Origin} as string,",
						"          {Elloree Race} as string,",
						"          {Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Elloree Race} as string,",
						"          {Suggested Elloree Hispanic or Latino Origin} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EthnicityMapping",
						"SortOnEvent pivot(groupBy(Race,",
						"          {Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, EthnicityMapping join(Race == {Client Race}",
						"     && {Hispanic or Latino Origin} == {Client Hispanic or Latino Origin},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddEhtnicityMapping",
						"CreatePivotEthnicityAndEventTime sort(asc(Race, true),",
						"     asc({Hispanic or Latino Origin}, true)) ~> SortOnEthnicity",
						"AddEhtnicityMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Date},",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Code},",
						"          {Event Type},",
						"          Event,",
						"          {Event Reason},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Rehire Indicator},",
						"          {Corporate Title},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Legacy Organization},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          EmpCount,",
						"          {Client ID} = EthnicityMapping@{Client ID},",
						"          {Client Engagement Date} = EthnicityMapping@{Client Engagement Date},",
						"          {Client Race},",
						"          {Client Hispanic or Latino Origin},",
						"          {Elloree Race},",
						"          {Elloree Hispanic or Latino Origin},",
						"          {Suggested Elloree Race},",
						"          {Suggested Elloree Hispanic or Latino Origin},",
						"          {Suggested Source},",
						"          {2017 Headcount},",
						"          {2018 Headcount},",
						"          {2018 Hire},",
						"          {2018 Promo},",
						"          {2018 Term},",
						"          {2019 Headcount},",
						"          {2019 Hire},",
						"          {2019 Promo},",
						"          {2019 Term},",
						"          {2020 Headcount},",
						"          {2020 Hire},",
						"          {2020 Promo},",
						"          {2020 Term},",
						"          {2021 Headcount},",
						"          {2021 Hire},",
						"          {2021 Promo},",
						"          {2021 Term}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnEthnicity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Ethnicity.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Ethnicity')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Event",
								"type": "DatasetReference"
							},
							"name": "EventMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEventReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEventAndEventTime"
						},
						{
							"name": "SortOnEventAndYear"
						},
						{
							"name": "AddEventMapping"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Event} as string,",
						"          {Client Event Type} as string,",
						"          {Client Event Reason} as string,",
						"          {Elloree Event} as string,",
						"          {Elloree Event Type} as string,",
						"          {Elloree Event Reason} as string,",
						"          {Elloree Termination Reason} as string,",
						"          {Suggested Elloree Event} as string,",
						"          {Suggested Elloree Event Type} as string,",
						"          {Suggested Elloree Event Reason} as string,",
						"          {Suggested Elloree Termination Reason} as string,",
						"          {Suggested Source} as string,",
						"          {2019 Headcount} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string,",
						"          {2022 Headcount} as string,",
						"          {2022 Hire} as string,",
						"          {2022 Promo} as string,",
						"          {2022 Term} as string,",
						"          {2023 Promo} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EventMapping",
						"SortOnEventAndYear pivot(groupBy(Event,",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Client Id},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEventAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEventAndYear",
						"AllCoreData, EventMapping join(Event == {Client Event}",
						"     && {Event Type} == {Client Event Type}",
						"     && {Event Reason} == {Client Event Reason},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddEventMapping",
						"CreatePivotEventAndEventTime sort(asc(Event, true),",
						"     asc({Event Type}, true),",
						"     asc({Event Reason}, true)) ~> SortOnEvent",
						"AddEventMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Worker Status},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Event},",
						"          {Elloree Event Type},",
						"          {Elloree Event Reason},",
						"          {Elloree Termination Reason},",
						"          {Client Id} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = EventMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"SortOnEvent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Event.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEventReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Event')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_EventSummary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEventSummaryReview"
						}
					],
					"transformations": [
						{
							"name": "CrosstabCountByEventAndYear"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"derivedColumn1 pivot(groupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     Count = sum(EmpCount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> CrosstabCountByEventAndYear",
						"AllCoreData derive(EmpCount = 1,",
						"          {Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> derivedColumn1",
						"CrosstabCountByEventAndYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Event Summary.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEventSummaryReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Gender",
								"type": "DatasetReference"
							},
							"name": "GenderMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotEthnicityAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddGenderMapping"
						},
						{
							"name": "SortOnGender"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Gender} as string,",
						"          {Elloree Gender} as string,",
						"          {Suggested Elloree Gender} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GenderMapping",
						"SortOnEvent pivot(groupBy(Gender,",
						"          {Elloree Gender},",
						"          {Client Id},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotEthnicityAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, GenderMapping join(Gender == {Client Gender},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddGenderMapping",
						"CreatePivotEthnicityAndEventTime sort(asc(Gender, true),",
						"     asc({Elloree Gender}, true)) ~> SortOnGender",
						"AddGenderMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Worker Status},",
						"          {Event Reason},",
						"          EmpCount,",
						"          {Elloree Gender},",
						"          {Client Id} = GenderMapping@{Client ID},",
						"          {Client Engagement Date} = GenderMapping@{Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnGender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Gender.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Gender')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of ethnicity values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_Location",
								"type": "DatasetReference"
							},
							"name": "LocationMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputEthnicityReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotLocationAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddLocationMapping"
						},
						{
							"name": "SortOnLocation"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Work Office Location} as string,",
						"          {Client Work City} as string,",
						"          {Client Work State} as string,",
						"          {Client Work Country} as string,",
						"          {Client Strategic Work Location Ind} as string,",
						"          {Elloree Work Ofiice} as string,",
						"          {Elloree Work City} as string,",
						"          {Elloree Work State} as string,",
						"          {Elloree Work Region} as string,",
						"          {Elloree Work Country} as string,",
						"          {Elloree Strategic Location} as string,",
						"          {Elloree Location Sort Id} as string,",
						"          {Suggested Elloree Work City} as string,",
						"          {Suggested Elloree Work State} as string,",
						"          {Suggested Elloree Work Country} as string,",
						"          {Suggested Elloree Work Region} as string,",
						"          {Suggested Elloree Strategic Location} as string,",
						"          {Suggested Elloree Location Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Headcount} as string,",
						"          {2018 Headcount} as string,",
						"          {2018 Hire} as string,",
						"          {2018 Promo} as string,",
						"          {2018 Term} as string,",
						"          {2019 Headcount} as string,",
						"          {2019 Hire} as string,",
						"          {2019 Promo} as string,",
						"          {2019 Term} as string,",
						"          {2020 Headcount} as string,",
						"          {2020 Hire} as string,",
						"          {2020 Promo} as string,",
						"          {2020 Term} as string,",
						"          {2021 Headcount} as string,",
						"          {2021 Hire} as string,",
						"          {2021 Promo} as string,",
						"          {2021 Term} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LocationMapping",
						"SortOnEvent pivot(groupBy({Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Elloree Work State},",
						"          {Elloree Work Country},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Quarter and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotLocationAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, LocationMapping join({Work Office Location} == {Client Work Office Location}",
						"     && {Work City} == {Client Work City}",
						"     && {Work State} == {Client Work State}",
						"     && {Work Country} == {Client Work Country}",
						"     && {Strategic Work Location Ind} == {Client Strategic Work Location Ind},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddLocationMapping",
						"CreatePivotLocationAndEventTime sort(asc({Work City}, true),",
						"     asc({Work State}, true),",
						"     asc({Work Country}, true),",
						"     asc({Client ID}, true),",
						"     asc({Client Engagement Date}, true)) ~> SortOnLocation",
						"AddLocationMapping select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Birth Year},",
						"          {Event Code},",
						"          {Event Type},",
						"          {Rehire Indicator},",
						"          {Event Reason},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          EmpCount,",
						"          {Generation Desc},",
						"          {Generation Sort ID},",
						"          {Years of Service Band},",
						"          {Years of Service Sort ID},",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Client Work Country},",
						"          {Client Work State},",
						"          {Client Work City},",
						"          {Elloree Region} = {Elloree Work Region},",
						"          {Elloree Work Country},",
						"          {Elloree Work State},",
						"          {Elloree Work City},",
						"          {Elloree Location Sort} = {Elloree Location Sort Id},",
						"          {Elloree Strategic Location}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event Quarter and Year} = concat(concat(toString(Event),concat(' Q',toString({Event Quarter}))),concat(' ',toString({Event Year})))) ~> AddDerivedEventYearColumn",
						"SortOnLocation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Location.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputEthnicityReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_Location')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_ManagerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Identify Manager IDs that are not represented as an employee in any headcount activity.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreForHCT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputMgrCountbyEvent",
							"description": "Output pivot table to audit folder."
						}
					],
					"transformations": [
						{
							"name": "IdentifyMgrsNotInHCT"
						},
						{
							"name": "pivotCountMgrsByEvent",
							"description": "Pivot table displaying counts by manager and event for manager IDs that do not exist in headcount."
						},
						{
							"name": "AddDerivedEventYearColumn"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "sort1"
						},
						{
							"name": "AllHeadcountData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreForHCT",
						"AllCoreData, AllHeadcountData exists(AllCoreData@{Direct Manager Worker ID} ==CoreForHCT@{Worker ID},",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'left')~> IdentifyMgrsNotInHCT",
						"SortOnEvent pivot(groupBy({Direct Manager Worker ID},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Direct Manager Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotCountMgrsByEvent",
						"IdentifyMgrsNotInHCT derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"pivotCountMgrsByEvent sort(asc({Direct Manager Worker ID}, true)) ~> sort1",
						"CoreForHCT filter({Event Code}=='HCT') ~> AllHeadcountData",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Managers Not In HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputMgrCountbyEvent"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_NullValue')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData",
							"description": "Import all core data.  This workflow identifies the number of null values are in each column by event type."
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"AllCoreData derive({Event Year - Null or N/A} = iif(isNull({Event Year}), 1,0),",
						"          {Event Date  - Null} = iif(isNull({Event Date}), 1,0),",
						"          {Event - Null} = iif(isNull(Event), 1,0),",
						"          {Event Type - Null} = iif(isNull({Event Type}), 1,0),",
						"          {Event Reason - Null} = iif(isNull({Event Reason}), 1,0),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}), 1,0),",
						"          {Worker Status - Null} = iif(isNull({Worker Status}), 1,0),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}), 1,0),",
						"          {Job Title - Null} = iif(isNull({Job Title}), 1,0),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}), 1,0),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}), 1,0),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}), 1,0),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}), 1,0),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}), 1,0),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}), 1,0),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}), 1,0),",
						"          {Work City - Null} = iif(isNull({Work City}), 1,0),",
						"          {Work State - Null} = iif(isNull({Work State}), 1,0),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}), 1,0),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}), 1,0),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}), 1,0),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}), 1,0),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}), 1,0),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}), 1,0),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}), 1,0),",
						"          {Race - Null} = iif(isNull(Race), 1,0),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender), 1,0),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}), 1,0),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ), 1,0),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}), 1,0),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null or N/A}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Event Reason - Null} = sum({Event Reason - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Status - Null} = sum({Worker Status - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office Location - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy(Event,",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy(Event),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          Event,",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Event Reason} = {Event Reason - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Status} = {Worker Status - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office Location} = {Work Office Location - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Null Review.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Applicants')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_Applicant_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
						"          {Applicant ID - Null} = iif(isNull({Applicant ID}),1,iif({Applicant ID}=='N/A',1,0)),",
						"          {Source - Null} = iif(isNull(Source),1,iif(Source=='N/A',1,0)),",
						"          {Applicant Type - Null} = iif(isNull({Applicant Type}),1,iif({Applicant Type}=='N/A',1,0)),",
						"          {Internal Worker ID - Null} = iif(isNull({Internal Worker ID}),1,iif({Internal Worker ID}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Applicant Final Disposition - Null} = iif(isNull({Applicant Final Disposition}),1,iif({Applicant Final Disposition}=='N/A',1,0)),",
						"          {Applicant Step Before Final Disposition - Null} = iif(isNull({Applicant Step Before Final Disposition}),1,iif({Applicant Step Before Final Disposition}=='N/A',1,0)),",
						"          {Applicant Rejected Reason - Null} = iif(isNull({Applicant Rejected Reason}),1,iif({Applicant Rejected Reason}=='N/A',1,0)),",
						"          {Applicant Other (1) - Null} = iif(isNull({Applicant Other (1)}),1,iif({Applicant Other (1)}=='N/A',1,0)),",
						"          {Applicant Other (2) - Null} = iif(isNull({Applicant Other (2)}),1,iif({Applicant Other (2)}=='N/A',1,0)),",
						"          {Applicant Other (3) - Null} = iif(isNull({Applicant Other (3)}),1,iif({Applicant Other (3)}=='N/A',1,0)),",
						"          {Applicant Other (4) - Null} = iif(isNull({Applicant Other (4)}),1,iif({Applicant Other (4)}=='N/A',1,0)),",
						"          {Applicant Other (5) - Null} = iif(isNull({Applicant Other (5)}),1,iif({Applicant Other (5)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'APP') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
						"          {Applicant ID - Null} = sum({Applicant ID - Null}),",
						"          {Source - Null} = sum({Source - Null}),",
						"          {Applicant Type - Null} = sum({Applicant Type - Null}),",
						"          {Internal Worker ID - Null} = sum({Internal Worker ID - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Applicant Final Disposition - Null} = sum({Applicant Final Disposition - Null}),",
						"          {Applicant Step Before Final Disposition - Null} = sum({Applicant Step Before Final Disposition - Null}),",
						"          {Applicant Rejected Reason - Null} = sum({Applicant Rejected Reason - Null}),",
						"          {Applicant Other (1) - Null} = sum({Applicant Other (1) - Null}),",
						"          {Applicant Other (2) - Null} = sum({Applicant Other (2) - Null}),",
						"          {Applicant Other (3) - Null} = sum({Applicant Other (3) - Null}),",
						"          {Applicant Other (4) - Null} = sum({Applicant Other (4) - Null}),",
						"          {Applicant Other (5) - Null} = sum({Applicant Other (5) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Requisition ID} = {Requisition ID - Null},",
						"          {Applicant ID} = {Applicant ID - Null},",
						"          Source = {Source - Null},",
						"          {Applicant Type} = {Applicant Type - Null},",
						"          {Internal Worker ID} = {Internal Worker ID - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Applicant Final Disposition} = {Applicant Final Disposition - Null},",
						"          {Applicant Step Before Final Disposition} = {Applicant Step Before Final Disposition - Null},",
						"          {Applicant Rejected Reason} = {Applicant Rejected Reason - Null},",
						"          {Applicant Other (1)} = {Applicant Other (1) - Null},",
						"          {Applicant Other (2)} = {Applicant Other (2) - Null},",
						"          {Applicant Other (3)} = {Applicant Other (3) - Null},",
						"          {Applicant Other (4)} = {Applicant Other (4) - Null},",
						"          {Applicant Other (5)} = {Applicant Other (5) - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Applicants.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_Applicant_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Headcount')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHeadcount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "HeadcountFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHeadcount",
						"HeadcountFilter derive({Event Year - Null or N/A} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Status - Null} = iif(isNull({Worker Status}),1,iif({Worker Status}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}),1,iif({Years in Job}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          {Generation Sort ID - Null} = iif(isNull({Generation Sort ID}),1,iif({Generation Sort ID}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null or N/A}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Status - Null} = sum({Worker Status - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Generation Sort ID - Null} = sum({Generation Sort ID - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Status} = {Worker Status - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Generation Sort ID} = {Generation Sort ID - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreHeadcount filter({Event Code}=='HCT') ~> HeadcountFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Headcount.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Hires')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreHires"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "HiresFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreHires",
						"HiresFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Rehire Indicator - Null} = iif(isNull({Rehire Indicator}),1,iif({Rehire Indicator}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Rehire Indicator - Null} = sum({Rehire Indicator - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Rehire Indicator} = {Rehire Indicator - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records},",
						"          {Client ID},",
						"          {Client Engagement Date}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreHires filter({Event Code}=='HIR') ~> HiresFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Hires.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Other')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_OtherCore_File",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event ID} as string,",
						"          Event as string,",
						"          {Event (Type)} as string,",
						"          {Event (Desc)} as string,",
						"          {Other (Char Value 1)} as string,",
						"          {Other (Char Value 2)} as string,",
						"          {Other (Num Value 1)} as string,",
						"          {Other (Num Value 2)} as string,",
						"          {Other (Date Value 1)} as string,",
						"          {Other (Date Value 2)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Applicants derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event (Type) - Null} = iif(isNull({Event (Type)}),1,iif({Event (Type)}=='N/A',1,0)),",
						"          {Event (Desc) - Null} = iif(isNull({Event (Desc)}),1,iif({Event (Desc)}=='N/A',1,0)),",
						"          {Other (Char Value 1) - Null} = iif(isNull({Other (Char Value 1)}),1,iif({Other (Char Value 1)}=='N/A',1,0)),",
						"          {Other (Char Value 2) - Null} = iif(isNull({Other (Char Value 2)}),1,iif({Other (Char Value 2)}=='N/A',1,0)),",
						"          {Other (Num Value 1) - Null} = iif(isNull({Other (Num Value 1)}),1,iif({Other (Num Value 2)}=='N/A',1,0)),",
						"          {Other (Num Value 2) - Null} = iif(isNull({Other (Num Value 2)}),1,iif({Other (Num Value 2)}=='N/A',1,0)),",
						"          {Other (Date Value 1) - Null} = iif(isNull({Other (Date Value 1)}),1,iif({Other (Date Value 1)}=='N/A',1,0)),",
						"          {Other (Date Value 2) - Null} = iif(isNull({Other (Date Value 2)}),1,iif({Other (Date Value 2)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'OTH') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event (Type) - Null} = sum({Event (Type) - Null}),",
						"          {Event (Desc) - Null} = sum({Event (Desc) - Null}),",
						"          {Other (Char Value 1) - Null} = sum({Other (Char Value 1) - Null}),",
						"          {Other (Char Value 2) - Null} = sum({Other (Char Value 2) - Null}),",
						"          {Other (Num Value 1) - Null} = sum({Other (Num Value 1) - Null}),",
						"          {Other (Num Value 2) - Null} = sum({Other (Num Value 2) - Null}),",
						"          {Other (Date Value 1) - Null} = sum({Other (Date Value 1) - Null}),",
						"          {Other (Date Value 2) - Null} = sum({Other (Date Value 2) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          {Event (Type)} = {Event (Type) - Null},",
						"          {Event (Desc)} = {Event (Desc) - Null},",
						"          {Other (Char Value 1)} = {Other (Char Value 1) - Null},",
						"          {Other (Char Value 2)} = {Other (Char Value 2) - Null},",
						"          {Other (Num Value 1)} = {Other (Num Value 1) - Null},",
						"          {Other (Num Value 2)} = {Other (Num Value 2) - Null},",
						"          {Other (Date Value 1)} = {Other (Date Value 1) - Null},",
						"          {Other (Date Value 2)} = {Other (Date Value 2) - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Other.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_OtherCore_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Promotions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CorePromotions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "PromotionsFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CorePromotions",
						"PromotionsFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Previous Job Title - Null} = iif(isNull({Previous Job Title}),1,iif({Previous Job Title}=='N/A',1,0)),",
						"          {Previous Job Family/Function - Null} = iif(isNull({Previous Job Family/Function}),1,iif({Previous Job Family/Function}=='N/A',1,0)),",
						"          {Years in Job - Null} = iif(isNull({Years in Job}),1,iif({Years in Job}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Previous Corporate Title - Null} = iif(isNull({Previous Corporate Title}),1,iif({Previous Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}),1,iif({Hispanic or Latino Origin}=='N/A',1,0)),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Previous Job Title - Null} = sum({Previous Job Title - Null}),",
						"          {Previous Job Family/Function - Null} = sum({Previous Job Family/Function - Null}),",
						"          {Years in Job - Null} = sum({Years in Job - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Previous Corporate Title - Null} = sum({Previous Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Years of Service - Null} = sum({Years of Service - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Previous Job Title} = {Previous Job Title - Null},",
						"          {Previous Job Family/Function} = {Previous Job Family/Function - Null},",
						"          {Years in Job} = {Years in Job - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Previous Corporate Title} = {Previous Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Years of Service} = {Years of Service - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CorePromotions filter({Event Code}=='PRO') ~> PromotionsFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Promotions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Requisitions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_JobReq_File",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          EventId as string,",
						"          Event as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"Requisitions derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Requisition ID - Null} = iif(isNull({Requisition ID}),1,iif({Requisition ID}=='N/A',1,0)),",
						"          {Requisition Type - Null} = iif(isNull({Requisition Type}),1,iif({Requisition Type}=='N/A',1,0)),",
						"          {Posting Date - Null} = iif(isNull({Posting Date}),1,iif({Posting Date}=='N/A',1,0)),",
						"          {Requisition Status - Null} = iif(isNull({Requisition Status}),1,iif({Requisition Status}=='N/A',1,0)),",
						"          {Number of Openings - Null} = iif(isNull({Number of Openings}),1,iif({Number of Openings}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Function - Null} = iif(isNull({Job Function}),1,iif({Job Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work Office City}),1,iif({Work Office City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work Office State}),1,iif({Work Office State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Office Country}),1,iif({Work Office Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Hiring Manager Worker ID - Null} = iif(isNull({Hiring Manager Worker ID}),1,iif({Hiring Manager Worker ID}=='N/A',1,0)),",
						"          {Primary Recruiter Worker ID - Null} = iif(isNull({Primary Recruiter Worker ID}),1,iif({Primary Recruiter Worker ID}=='N/A',1,0)),",
						"          {Requisition Other (1) - Null} = iif(isNull({Requisition Other (1)}),1,iif({Requisition Other (1)}=='N/A',1,0)),",
						"          {Requisition Other (2) - Null} = iif(isNull({Requisition Other (2)}),1,iif({Requisition Other (2)}=='N/A',1,0)),",
						"          {Requisition Other (3) - Null} = iif(isNull({Requisition Other (3)}),1,iif({Requisition Other (3)}=='N/A',1,0)),",
						"          {Requisition Other (4) - Null} = iif(isNull({Requisition Other (4)}),1,iif({Requisition Other (4)}=='N/A',1,0)),",
						"          {Requisition Other (5) - Null} = iif(isNull({Requisition Other (5)}),1,iif({Requisition Other (5)}=='N/A',1,0)),",
						"          EmpCount = 1,",
						"          {Event Code} = 'REQ') ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Requisition ID - Null} = sum({Requisition ID - Null}),",
						"          {Requisition Type - Null} = sum({Requisition Type - Null}),",
						"          {Posting Date - Null} = sum({Posting Date - Null}),",
						"          {Requisition Status - Null} = sum({Requisition Status - Null}),",
						"          {Number of Openings - Null} = sum({Number of Openings - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Function - Null} = sum({Job Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Hiring Manager Worker ID - Null} = sum({Hiring Manager Worker ID - Null}),",
						"          {Primary Recruiter Worker ID - Null} = sum({Primary Recruiter Worker ID - Null}),",
						"          {Requisition Other (1) - Null} = sum({Requisition Other (1) - Null}),",
						"          {Requisition Other (2) - Null} = sum({Requisition Other (2) - Null}),",
						"          {Requisition Other (3) - Null} = sum({Requisition Other (2) - Null}),",
						"          {Requisition Other (4) - Null} = sum({Requisition Other (4) - Null}),",
						"          {Requisition Other (5) - Null} = sum({Requisition Other (5) - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Requisition ID} = {Requisition ID - Null},",
						"          {Requisition Type} = {Requisition Type - Null},",
						"          {Posting Date} = {Posting Date - Null},",
						"          {Requisition Status} = {Requisition Status - Null},",
						"          {Number of Openings} = {Number of Openings - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Function} = {Job Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          {Hiring Manager Worker ID} = {Hiring Manager Worker ID - Null},",
						"          {Primary Recruiter Worker ID} = {Primary Recruiter Worker ID - Null},",
						"          {Requisition Other (1)} = {Requisition Other (1) - Null},",
						"          {Requisition Other (2)} = {Requisition Other (2) - Null},",
						"          {Requisition Other (3)} = {Requisition Other (3) - Null},",
						"          {Requisition Other (4)} = {Requisition Other (4) - Null},",
						"          {Requisition Other (5)} = {Requisition Other (5) - Null},",
						"          {Total Records},",
						"          {Event Review}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Requisitions.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_JobReq_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_TalentAssessment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTalent"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTalent",
						"CoreTalent derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Performance Rating - Null} = iif(isNull({Performance Rating}),1,iif({Performance Rating}=='N/A',1,0)),",
						"          {Performance Rating Date - Null} = iif(isNull({Performance Rating Date}), 1,0),",
						"          {Talent Identifier (1) - Null} = iif(isNull({Talent Identifier (1)}),1,iif({Talent Identifier (1)}=='N/A',1,0)),",
						"          {Talent Identifier (2) - Null} = iif(isNull({Talent Identifier (2)}),1,iif({Talent Identifier (2)}=='N/A',1,0)),",
						"          {Talent Identifier (3) - Null} = iif(isNull({Talent Identifier (3)}),1,iif({Talent Identifier (3)}=='N/A',1,0)),",
						"          {Talent Identifier (4) - Null} = iif(isNull({Talent Identifier (4)}),1,iif({Talent Identifier (4)}=='N/A',1,0)),",
						"          {Talent Identifier (5) - Null} = iif(isNull({Talent Identifier (5)}),1,iif({Talent Identifier (5)}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Review} = Event,",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Performance Rating - Null} = sum({Performance Rating - Null}),",
						"          {Performance Rating Date - Null} = sum({Performance Rating Date - Null}),",
						"          {Talent Identifier (1) - Null} = sum({Talent Identifier (1) - Null}),",
						"          {Talent Identifier (2) - Null} = sum({Talent Identifier (2) - Null}),",
						"          {Talent Identifier (3) - Null} = sum({Talent Identifier (3) - Null}),",
						"          {Talent Identifier (4) - Null} = sum({Talent Identifier (4) - Null}),",
						"          {Talent Identifier (5) - Null} = sum({Talent Identifier (5) - Null}),",
						"          Total = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Performance Rating} = {Performance Rating - Null},",
						"          {Performance Rating Date} = {Performance Rating Date - Null},",
						"          {Talent Identifier (1)} = {Talent Identifier (1) - Null},",
						"          {Talent Identifier (2)} = {Talent Identifier (2) - Null},",
						"          {Talent Identifier (3)} = {Talent Identifier (3) - Null},",
						"          {Talent Identifier (4) } = {Talent Identifier (4) - Null},",
						"          {Talent Identifier (5)} = {Talent Identifier (5) - Null},",
						"          {Total Records} = Total",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Talent Assessment.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_TalentData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Nulls_Terminations')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "CoreTerminations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputNullReview"
						}
					],
					"transformations": [
						{
							"name": "IdentifyNulls",
							"description": "Calculate whether a null value exists and assign 1 for count."
						},
						{
							"name": "AggregateNullsByColumn",
							"description": "Count nulls for each column and group by event."
						},
						{
							"name": "unpivotColumnNames",
							"description": "Unpivot as part of formatting to establish Column Name as the primary dimension column."
						},
						{
							"name": "pivotEvents",
							"description": "Pivot row to show counts by column names grouped by events."
						},
						{
							"name": "derivedColumn1",
							"description": "Pivot to show null counts by column name and grouped by events."
						},
						{
							"name": "ChangeColumnNames",
							"description": "Rename columns to remove 'Null' name tagging."
						},
						{
							"name": "TerminationsFilter"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as string,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CoreTerminations",
						"TerminationsFilter derive({Event Year - Null} = iif(isNull({Event Year}),1,iif({Event Year}=='N/A',1,0)),",
						"          {Event Date  - Null} = iif(isNull({Event Date}),1,iif({Event Date}=='N/A',1,0)),",
						"          {Event - Null} = iif(isNull(Event),1,iif(Event=='N/A',1,0)),",
						"          {Event Type - Null} = iif(isNull({Event Type}),1,iif({Event Type}=='N/A',1,0)),",
						"          {Event Reason - Null} = iif(isNull({Event Reason}),1,iif({Event Reason}=='N/A',1,0)),",
						"          {Worker ID - Null} = iif(isNull({Worker ID}),1,iif({Worker ID}=='N/A',1,0)),",
						"          {Worker Type - Null} = iif(isNull({Worker Type}),1,iif({Worker Type}=='N/A',1,0)),",
						"          {Job Title - Null} = iif(isNull({Job Title}),1,iif({Job Title}=='N/A',1,0)),",
						"          {Job Family/Function - Null} = iif(isNull({Job Family/Function}),1,iif({Job Family/Function}=='N/A',1,0)),",
						"          {Corporate Title - Null} = iif(isNull({Corporate Title}),1,iif({Corporate Title}=='N/A',1,0)),",
						"          {Manager Indicator - Null} = iif(isNull({Manager Indicator}),1,iif({Manager Indicator}=='N/A',1,0)),",
						"          {Direct Manager Worker ID - Null} = iif(isNull({Direct Manager Worker ID}),1,iif({Direct Manager Worker ID}=='N/A',1,0)),",
						"          {Legacy Organization - Null} = iif(isNull({Legacy Organization}),1,iif({Legacy Organization}=='N/A',1,0)),",
						"          {Work Office Location - Null} = iif(isNull({Work Office Location}),1,iif({Work Office Location}=='N/A',1,0)),",
						"          {Work City - Null} = iif(isNull({Work City}),1,iif({Work City}=='N/A',1,0)),",
						"          {Work State - Null} = iif(isNull({Work State}),1,iif({Work State}=='N/A',1,0)),",
						"          {Work Country - Null} = iif(isNull({Work Country}),1,iif({Work Country}=='N/A',1,0)),",
						"          {Strategic Work Location Ind - Null} = iif(isNull({Strategic Work Location Ind}),1,iif({Strategic Work Location Ind}=='N/A',1,0)),",
						"          {Original Hire Date - Null} = iif(isNull({Original Hire Date}),1,iif({Original Hire Date}=='N/A',1,0)),",
						"          {Current Hire Date - Null} = iif(isNull({Current Hire Date}),1,iif({Current Hire Date}=='N/A',1,0)),",
						"          {Years of Service - Null} = iif(isNull({Years of Service}),1,iif({Years of Service}=='N/A',1,0)),",
						"          {Business Group Level 1 - Null} = iif(isNull({Business Group Level 1}),1,iif({Business Group Level 1}=='N/A',1,0)),",
						"          {Business Group Level 2 - Null} = iif(isNull({Business Group Level 2}),1,iif({Business Group Level 2}=='N/A',1,0)),",
						"          {Business Group Level 3 - Null} = iif(isNull({Business Group Level 3}),1,iif({Business Group Level 3}=='N/A',1,0)),",
						"          {Business Group Level 4 - Null} = iif(isNull({Business Group Level 4}),1,iif({Business Group Level 4}=='N/A',1,0)),",
						"          {Race - Null} = iif(isNull(Race),1,iif(Race=='N/A',1,0)),",
						"          {Hispanic or Latino Origin - Null} = iif(isNull({Hispanic or Latino Origin}), 1,0),",
						"          {Gender - Null} = iif(isNull(Gender),1,iif(Gender=='N/A',1,0)),",
						"          {Veteran Ind - Null} = iif(isNull({Veteran Ind}),1,iif({Veteran Ind}=='N/A',1,0)),",
						"          {LGTBQ - Null} = iif(isNull(LGTBQ),1,iif(LGTBQ=='N/A',1,0)),",
						"          {Disability Ind - Null} = iif(isNull({Disability Ind}),1,iif({Disability Ind}=='N/A',1,0)),",
						"          {Birth Year - Null} = iif(isNull({Birth Year}),1,iif({Birth Year}=='N/A',1,0)),",
						"          {Generation Desc - Null} = iif(isNull({Generation Desc}),1,iif({Generation Desc}=='N/A',1,0)),",
						"          EmpCount = 1) ~> IdentifyNulls",
						"IdentifyNulls aggregate(groupBy({Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     {Event Year - Null} = sum({Event Year - Null}),",
						"          {Event Date  - Null} = sum({Event Date  - Null}),",
						"          {Event - Null} = sum({Event - Null}),",
						"          {Event Type - Null} = sum({Event Type - Null}),",
						"          {Worker ID - Null} = sum({Worker ID - Null}),",
						"          {Worker Type - Null} = sum({Worker Type - Null}),",
						"          {Job Title - Null} = sum({Job Title - Null}),",
						"          {Job Family/Function - Null} = sum({Job Family/Function - Null}),",
						"          {Corporate Title - Null} = sum({Corporate Title - Null}),",
						"          {Manager Indicator - Null} = sum({Manager Indicator - Null}),",
						"          {Direct Manager Worker ID - Null} = sum({Direct Manager Worker ID - Null}),",
						"          {Legacy Organization - Null} = sum({Legacy Organization - Null}),",
						"          {Work Office - Null} = sum({Work Office Location - Null}),",
						"          {Work City - Null} = sum({Work City - Null}),",
						"          {Work State - Null} = sum({Work State - Null}),",
						"          {Work Country - Null} = sum({Work Country - Null}),",
						"          {Strategic Work Location Ind - Null} = sum({Strategic Work Location Ind - Null}),",
						"          {Original Hire Date - Null} = sum({Original Hire Date - Null}),",
						"          {Current Hire Date - Null} = sum({Current Hire Date - Null}),",
						"          {Business Group Level 1 - Null} = sum({Business Group Level 1 - Null}),",
						"          {Business Group Level 2 - Null} = sum({Business Group Level 2 - Null}),",
						"          {Business Group Level 3 - Null} = sum({Business Group Level 3 - Null}),",
						"          {Business Group Level 4 - Null} = sum({Business Group Level 4 - Null}),",
						"          {Race - Null} = sum({Race - Null}),",
						"          {Hispanic or Latino Origin - Null} = sum({Hispanic or Latino Origin - Null}),",
						"          {Gender - Null} = sum({Gender - Null}),",
						"          {Veteran Ind - Null} = sum({Veteran Ind - Null}),",
						"          {LGTBQ - Null} = sum({LGTBQ - Null}),",
						"          {Disability Ind - Null} = sum({Disability Ind - Null}),",
						"          {Birth Year - Null} = sum({Birth Year - Null}),",
						"          {Generation Desc - Null} = sum({Generation Desc - Null}),",
						"          {Total Records} = sum(EmpCount)) ~> AggregateNullsByColumn",
						"ChangeColumnNames unpivot(output(",
						"          {Table Columns} as string,",
						"          Total as long",
						"     ),",
						"     ungroupBy({Event Review},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Total Records}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotColumnNames",
						"derivedColumn1 pivot(groupBy({Event Review},",
						"          {Table Columns},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event Review}),",
						"     { Null Total} = sum(Total),",
						"          { Null % of Total} = sum({%}),",
						"     columnNaming: '$V$N',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> pivotEvents",
						"unpivotColumnNames derive({%} = round(Total/{Total Records}*100,0)) ~> derivedColumn1",
						"AggregateNullsByColumn select(mapColumn(",
						"          {Event Review} = {Event Code},",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Event Year} = {Event Year - Null},",
						"          {Event Date} = {Event Date  - Null},",
						"          Event = {Event - Null},",
						"          {Event Type} = {Event Type - Null},",
						"          {Worker ID} = {Worker ID - Null},",
						"          {Worker Type} = {Worker Type - Null},",
						"          {Job Title} = {Job Title - Null},",
						"          {Job Family/Function} = {Job Family/Function - Null},",
						"          {Corporate Title} = {Corporate Title - Null},",
						"          {Manager Indicator} = {Manager Indicator - Null},",
						"          {Direct Manager Worker ID} = {Direct Manager Worker ID - Null},",
						"          {Legacy Organization} = {Legacy Organization - Null},",
						"          {Work Office} = {Work Office - Null},",
						"          {Work City} = {Work City - Null},",
						"          {Work State} = {Work State - Null},",
						"          {Work Country} = {Work Country - Null},",
						"          {Strategic Work Location Ind} = {Strategic Work Location Ind - Null},",
						"          {Original Hire Date} = {Original Hire Date - Null},",
						"          {Current Hire Date} = {Current Hire Date - Null},",
						"          {Business Group Level 1} = {Business Group Level 1 - Null},",
						"          {Business Group Level 2} = {Business Group Level 2 - Null},",
						"          {Business Group Level 3} = {Business Group Level 3 - Null},",
						"          {Business Group Level 4} = {Business Group Level 4 - Null},",
						"          Race = {Race - Null},",
						"          {Hispanic or Latino Origin} = {Hispanic or Latino Origin - Null},",
						"          Gender = {Gender - Null},",
						"          {Veteran Ind} = {Veteran Ind - Null},",
						"          LGTBQ = {LGTBQ - Null},",
						"          {Disability Ind} = {Disability Ind - Null},",
						"          {Birth Year} = {Birth Year - Null},",
						"          {Generation Desc} = {Generation Desc - Null},",
						"          {Total Records}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ChangeColumnNames",
						"CoreTerminations filter({Event Code}=='TER') ~> TerminationsFilter",
						"pivotEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Null Review Terminations.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputNullReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_PerformanceRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow outputs 1 file for review of performance values across events and time periods.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_TalentData_File",
								"type": "DatasetReference"
							},
							"name": "AllCoreData"
						},
						{
							"dataset": {
								"referenceName": "Source_Mapping_PerformanceRating",
								"type": "DatasetReference"
							},
							"name": "PerformanceMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputPeerformanceReview"
						}
					],
					"transformations": [
						{
							"name": "CreatePivotPerformanceAndEventTime"
						},
						{
							"name": "SortOnEvent"
						},
						{
							"name": "AddPerformanceMapping"
						},
						{
							"name": "SortOnRating"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AddDerivedEventYearColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Event Year} as string,",
						"          {Event Date} as string,",
						"          Event as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AllCoreData",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as string,",
						"          {Client Performance Rating} as string,",
						"          {Elloree Performance Rating} as string,",
						"          {Elloree Performance Rating Sort} as string,",
						"          {Suggested Elloree Performance Rating} as string,",
						"          {Suggested Elloree Performane Rating Sort Id} as string,",
						"          {Suggested Source} as string,",
						"          {2017 Talent Assessment} as string,",
						"          {2018 Talent Assessment} as string,",
						"          {2019 Talent Assessment} as string,",
						"          {2020 Talent Assessment} as string,",
						"          {2021 Talent Assessment} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PerformanceMapping",
						"SortOnEvent pivot(groupBy({Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Client ID},",
						"          {Client Engagement Date}),",
						"     pivotBy({Event and Year}),",
						"     {} = count({Worker ID}),",
						"     columnNaming: '$N$V',",
						"     lateral: false,",
						"     partitionBy('hash', 1)) ~> CreatePivotPerformanceAndEventTime",
						"AddDerivedEventYearColumn sort(asc({Event Year}, true)) ~> SortOnEvent",
						"AllCoreData, PerformanceMapping join({Performance Rating} == {Client Performance Rating},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddPerformanceMapping",
						"CreatePivotPerformanceAndEventTime sort(asc({Performance Rating}, true),",
						"     asc({Elloree Performance Rating}, true)) ~> SortOnRating",
						"AddPerformanceMapping select(mapColumn(",
						"          {Client ID} = AllCoreData@{Client ID},",
						"          {Client Engagement Date} = AllCoreData@{Client Engagement Date},",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)},",
						"          {Client ID} = PerformanceMapping@{Client ID},",
						"          {Client Engagement Date} = PerformanceMapping@{Client Engagement Date},",
						"          {Client Performance Rating},",
						"          {Elloree Performance Rating},",
						"          {Elloree Performance Rating Sort},",
						"          {Suggested Elloree Performance Rating},",
						"          {Suggested Elloree Performane Rating Sort Id},",
						"          {Suggested Source},",
						"          {2017 Talent Assessment},",
						"          {2018 Talent Assessment},",
						"          {2019 Talent Assessment},",
						"          {2020 Talent Assessment},",
						"          {2021 Talent Assessment}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive({Event and Year} = concat(toString(Event),concat(' ',{Event Year}))) ~> AddDerivedEventYearColumn",
						"SortOnRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Dimension Review - Performance.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPeerformanceReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_TalentData_File')]",
				"[concat(variables('factoryId'), '/datasets/Source_Mapping_PerformanceRating')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Template_Column_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "TalentAssessment"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Headcount",
								"type": "DatasetReference"
							},
							"name": "HeadcountColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Hires",
								"type": "DatasetReference"
							},
							"name": "HiresColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Terminations",
								"type": "DatasetReference"
							},
							"name": "TerminationsColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Promotions",
								"type": "DatasetReference"
							},
							"name": "PromotionsColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_TalentAssessmentColumnMapping",
								"type": "DatasetReference"
							},
							"name": "TalentAssessmentColumnMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputColumnSummaryReview"
						}
					],
					"transformations": [
						{
							"name": "UnpivotToTransposeHCTColumnNames"
						},
						{
							"name": "SelectOnlyHCTColumnNameField"
						},
						{
							"name": "SelectUniqueHCTColumnRows"
						},
						{
							"name": "UnpivotToTransposeTermColumnNames"
						},
						{
							"name": "SelectUniqueTermColumnRows"
						},
						{
							"name": "SelectOnlyTermColumnNameField"
						},
						{
							"name": "UnpivotToTransposePromoColumnNames"
						},
						{
							"name": "SelectUniquePromoColumnRows"
						},
						{
							"name": "SelectOnlyPromoColumnNameField"
						},
						{
							"name": "UnpivotToTransposeHireColumnNames"
						},
						{
							"name": "SelectUniqueHireColumnRows"
						},
						{
							"name": "SelectOnlyHireColumnNameField"
						},
						{
							"name": "UnpivotToTransposeTalentAssessmentColumnNames"
						},
						{
							"name": "SelectUniqueTalentAssessmentColumnRows"
						},
						{
							"name": "SelectOnlyTalentAssessmentColumnNameField"
						},
						{
							"name": "HeadcountColumnJoinToMapping"
						},
						{
							"name": "HiresColumnJoinToMapping"
						},
						{
							"name": "TerminationsColumnJoinToMapping"
						},
						{
							"name": "PromotionsColumnJoinToMapping"
						},
						{
							"name": "TalentAssessmentColumnJoinToMapping"
						},
						{
							"name": "AddHCTColumnDescription"
						},
						{
							"name": "AddTermColumnDescription"
						},
						{
							"name": "AddPromoColumnDescription"
						},
						{
							"name": "AddHireColumnDescription"
						},
						{
							"name": "AddTalentAssessmentColumnDescription"
						},
						{
							"name": "AddHCTDerivedColumnForAggGrouping"
						},
						{
							"name": "AddTermDerivedColumnForAggGrouping"
						},
						{
							"name": "AddPromoDerivedColumnForAggGrouping"
						},
						{
							"name": "AddHireDerivedColumnForAggGrouping"
						},
						{
							"name": "AddTalentAssessmentDerivedColumnForAggGrouping"
						},
						{
							"name": "SelectHeadcountSummary"
						},
						{
							"name": "SelectTerminationSummary"
						},
						{
							"name": "SelectPromotionSummary"
						},
						{
							"name": "SelectHireSummary"
						},
						{
							"name": "SelectTalentAssessmentSummary"
						},
						{
							"name": "UnionAllEventColumnSummaries"
						},
						{
							"name": "SortEvents"
						},
						{
							"name": "HeadcountRemoveClientRefColumn"
						},
						{
							"name": "TerminationsRemoveClientRefColumn"
						},
						{
							"name": "PromotionsRemoveClientRefColumn"
						},
						{
							"name": "HiresRemoveClientRefColumn"
						},
						{
							"name": "TalentRemoveClientRefColumn"
						},
						{
							"name": "sort1"
						},
						{
							"name": "sort2"
						},
						{
							"name": "sort3"
						},
						{
							"name": "sort4"
						},
						{
							"name": "sort6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years in Job} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TalentAssessment",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HeadcountColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HiresColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TerminationsColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PromotionsColumnMapping",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TalentAssessmentColumnMapping",
						"AddHCTDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeHCTColumnNames",
						"SelectUniqueHCTColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyHCTColumnNameField",
						"UnpivotToTransposeHCTColumnNames aggregate(groupBy({Column Name} = Column),",
						"     {Total Count} = count(Column)) ~> SelectUniqueHCTColumnRows",
						"AddTermDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeTermColumnNames",
						"UnpivotToTransposeTermColumnNames aggregate(groupBy({Column Name} = Column),",
						"     {Total Count} = count(Column)) ~> SelectUniqueTermColumnRows",
						"SelectUniqueTermColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTermColumnNameField",
						"AddPromoDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposePromoColumnNames",
						"UnpivotToTransposePromoColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniquePromoColumnRows",
						"SelectUniquePromoColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyPromoColumnNameField",
						"AddHireDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeHireColumnNames",
						"UnpivotToTransposeHireColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueHireColumnRows",
						"SelectUniqueHireColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyHireColumnNameField",
						"AddTalentAssessmentDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeTalentAssessmentColumnNames",
						"UnpivotToTransposeTalentAssessmentColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueTalentAssessmentColumnRows",
						"SelectUniqueTalentAssessmentColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyTalentAssessmentColumnNameField",
						"SelectOnlyHCTColumnNameField, HeadcountColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HeadcountColumnJoinToMapping",
						"SelectOnlyHireColumnNameField, HiresColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> HiresColumnJoinToMapping",
						"SelectOnlyTermColumnNameField, TerminationsColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TerminationsColumnJoinToMapping",
						"SelectOnlyPromoColumnNameField, PromotionsColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> PromotionsColumnJoinToMapping",
						"SelectOnlyTalentAssessmentColumnNameField, TalentAssessmentColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TalentAssessmentColumnJoinToMapping",
						"HeadcountColumnJoinToMapping derive({Event Template} = 'Headcount') ~> AddHCTColumnDescription",
						"TerminationsColumnJoinToMapping derive({Event Template} = 'Terminations') ~> AddTermColumnDescription",
						"PromotionsColumnJoinToMapping derive({Event Template} = 'Promotions') ~> AddPromoColumnDescription",
						"HiresColumnJoinToMapping derive({Event Template} = 'Hires') ~> AddHireColumnDescription",
						"TalentAssessmentColumnJoinToMapping derive({Event Template} = 'Talent Assessment') ~> AddTalentAssessmentColumnDescription",
						"HeadcountRemoveClientRefColumn derive({Event Sheet} = 'Headcount') ~> AddHCTDerivedColumnForAggGrouping",
						"TerminationsRemoveClientRefColumn derive({Event Sheet} = 'Terminations') ~> AddTermDerivedColumnForAggGrouping",
						"PromotionsRemoveClientRefColumn derive({Event Sheet} = 'Promotions') ~> AddPromoDerivedColumnForAggGrouping",
						"HiresRemoveClientRefColumn derive({Event Sheet} = 'Hires') ~> AddHireDerivedColumnForAggGrouping",
						"TalentRemoveClientRefColumn derive({Event Sheet} = 'Talent Assessment') ~> AddTalentAssessmentDerivedColumnForAggGrouping",
						"sort6 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHeadcountSummary",
						"sort1 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTerminationSummary",
						"sort2 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPromotionSummary",
						"sort3 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHireSummary",
						"sort4 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTalentAssessmentSummary",
						"SelectHeadcountSummary, SelectTerminationSummary, SelectPromotionSummary, SelectHireSummary, SelectTalentAssessmentSummary union(byName: true)~> UnionAllEventColumnSummaries",
						"UnionAllEventColumnSummaries sort(asc({Event Template}, true)) ~> SortEvents",
						"Headcount select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HeadcountRemoveClientRefColumn",
						"Terminations select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TerminationsRemoveClientRefColumn",
						"Promotions select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PromotionsRemoveClientRefColumn",
						"Hires select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> HiresRemoveClientRefColumn",
						"TalentAssessment select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Top Performer},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TalentRemoveClientRefColumn",
						"AddTermColumnDescription sort(asc({Sort Id}, true)) ~> sort1",
						"AddPromoColumnDescription sort(asc({Sort Id}, true)) ~> sort2",
						"AddHireColumnDescription sort(asc({Sort Id}, true)) ~> sort3",
						"AddTalentAssessmentColumnDescription sort(asc({Sort Id}, true)) ~> sort4",
						"AddHCTColumnDescription sort(asc({Sort Id}, true)) ~> sort6",
						"SortEvents sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Column Review Core.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputColumnSummaryReview"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_Headcount')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Terminations')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Promotions')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Hires')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_TalentAssessment')]",
				"[concat(variables('factoryId'), '/datasets/Source_ColumnMapping_Headcount')]",
				"[concat(variables('factoryId'), '/datasets/Source_ColumnMapping_Hires')]",
				"[concat(variables('factoryId'), '/datasets/Source_ColumnMapping_Terminations')]",
				"[concat(variables('factoryId'), '/datasets/Source_ColumnMapping_Promotions')]",
				"[concat(variables('factoryId'), '/datasets/Source_TalentAssessmentColumnMapping')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_Template_Column_TA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Requisition",
								"type": "DatasetReference"
							},
							"name": "RequisitionColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Req_Test",
								"type": "DatasetReference"
							},
							"name": "Requisitions"
						},
						{
							"dataset": {
								"referenceName": "Source_ColumnMapping_Applicant",
								"type": "DatasetReference"
							},
							"name": "ApplicanrColumnMapping"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_JobApplicants",
								"type": "DatasetReference"
							},
							"name": "Applicants"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ReqRemoveClientRefColumn"
						},
						{
							"name": "AddReqDerivedColumnForAggGrouping"
						},
						{
							"name": "UnpivotToTransposeReqColumnNames"
						},
						{
							"name": "SelectUniqueReqColumnRows"
						},
						{
							"name": "SelectOnlyReqColumnNameField"
						},
						{
							"name": "ReqColumnJoinToMapping"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectReqSummary"
						},
						{
							"name": "sort1"
						},
						{
							"name": "AppliantRemoveClientRefColumn"
						},
						{
							"name": "AddApplicantsDerivedColumnForAggGrouping"
						},
						{
							"name": "UnpivotToTransposeApplColumnNames"
						},
						{
							"name": "SelectUniqueApplColumnRows"
						},
						{
							"name": "SelectOnlyApplColumnNameField"
						},
						{
							"name": "ApplColumnJoinToMapping"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "SelectApplSummary"
						},
						{
							"name": "sort2"
						},
						{
							"name": "union1"
						},
						{
							"name": "sort3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RequisitionColumnMapping",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Requisition Type} as string,",
						"          {Posting Date} as string,",
						"          {Requisition Status} as string,",
						"          {Number of Openings} as string,",
						"          {Job Title} as string,",
						"          {Job Function} as string,",
						"          {Corporate Title} as string,",
						"          {Work Office Location} as string,",
						"          {Work Office City} as string,",
						"          {Work Office State} as string,",
						"          {Work Office Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          {Hiring Manager Worker ID} as string,",
						"          {Primary Recruiter Worker ID} as string,",
						"          {Requisition Other (1)} as string,",
						"          {Requisition Other (2)} as string,",
						"          {Requisition Other (3)} as string,",
						"          {Requisition Other (4)} as string,",
						"          {Requisition Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Requisitions",
						"source(output(",
						"          {Sort Id} as integer,",
						"          {Column Name} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ApplicanrColumnMapping",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Requisition ID} as string,",
						"          {Applicant ID} as string,",
						"          Source as string,",
						"          {Applicant Type} as string,",
						"          {Internal Worker ID} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Applicant Final Disposition} as string,",
						"          {Applicant Step Before Final Disposition} as string,",
						"          {Applicant Rejected Reason} as string,",
						"          {Applicant Other (1)} as string,",
						"          {Applicant Other (2)} as string,",
						"          {Applicant Other (3)} as string,",
						"          {Applicant Other (4)} as string,",
						"          {Applicant Other (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Applicants",
						"Requisitions select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Requisition ID},",
						"          {Requisition Type},",
						"          {Posting Date},",
						"          {Requisition Status},",
						"          {Number of Openings},",
						"          {Job Title},",
						"          {Job Function},",
						"          {Corporate Title},",
						"          {Work Office Location},",
						"          {Work Office City},",
						"          {Work Office State},",
						"          {Work Office Country},",
						"          {Strategic Work Location Ind},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          {Hiring Manager Worker ID},",
						"          {Primary Recruiter Worker ID},",
						"          {Requisition Other (1)},",
						"          {Requisition Other (2)},",
						"          {Requisition Other (3)},",
						"          {Requisition Other (4)},",
						"          {Requisition Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReqRemoveClientRefColumn",
						"ReqRemoveClientRefColumn derive({Event Sheet} = 'Requisitions') ~> AddReqDerivedColumnForAggGrouping",
						"AddReqDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeReqColumnNames",
						"UnpivotToTransposeReqColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueReqColumnRows",
						"SelectUniqueReqColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyReqColumnNameField",
						"SelectOnlyReqColumnNameField, RequisitionColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ReqColumnJoinToMapping",
						"ReqColumnJoinToMapping derive({Event Template} = 'Requisitions') ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Event Template},",
						"          {Column Name},",
						"          {Client Column},",
						"          {Sort Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqSummary",
						"SelectReqSummary sort(asc({Sort Id}, true)) ~> sort1",
						"Applicants select(mapColumn(",
						"          {Event Year},",
						"          {Event Quarter},",
						"          {Event Date},",
						"          {Requisition ID},",
						"          {Applicant ID},",
						"          Source,",
						"          {Applicant Type},",
						"          {Internal Worker ID},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Applicant Final Disposition},",
						"          {Applicant Step Before Final Disposition},",
						"          {Applicant Rejected Reason},",
						"          {Applicant Other (1)},",
						"          {Applicant Other (2)},",
						"          {Applicant Other (3)},",
						"          {Applicant Other (4)},",
						"          {Applicant Other (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AppliantRemoveClientRefColumn",
						"AppliantRemoveClientRefColumn derive({Event Sheet} = 'Applicants') ~> AddApplicantsDerivedColumnForAggGrouping",
						"AddApplicantsDerivedColumnForAggGrouping unpivot(output(",
						"          Column as string,",
						"          Value as string",
						"     ),",
						"     ungroupBy({Event Sheet}),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnpivotToTransposeApplColumnNames",
						"UnpivotToTransposeApplColumnNames aggregate(groupBy({Column Name} = Column),",
						"     each(match(name!='Event'), $$ = first($$))) ~> SelectUniqueApplColumnRows",
						"SelectUniqueApplColumnRows select(mapColumn(",
						"          {Client Column} = {Column Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectOnlyApplColumnNameField",
						"SelectOnlyApplColumnNameField, ApplicanrColumnMapping join({Client Column} == {Column Name},",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ApplColumnJoinToMapping",
						"ApplColumnJoinToMapping derive({Event Template} = 'Applicants') ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          {Client Column},",
						"          {Sort Id},",
						"          {Column Name},",
						"          {Event Template}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectApplSummary",
						"SelectApplSummary sort(asc({Sort Id}, true)) ~> sort2",
						"sort1, sort2 union(byName: true)~> union1",
						"union1 sort(asc({Event Template}, true)) ~> sort3",
						"sort3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Column Review TA.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_ColumnMapping_Requisition')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Req_Test')]",
				"[concat(variables('factoryId'), '/datasets/Source_ColumnMapping_Applicant')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_JobApplicants')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_WorkerId')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This workflow takes unique IDs from each core event table and compares to unique worker IDs from all headcount to identify IDs not in headcount.  Results could highlight an issue with ID anonymization.",
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Template_Headcount",
								"type": "DatasetReference"
							},
							"name": "Headcount"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Terminations",
								"type": "DatasetReference"
							},
							"name": "Terminations"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Promotions",
								"type": "DatasetReference"
							},
							"name": "Promotions"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_TalentAssessment",
								"type": "DatasetReference"
							},
							"name": "Talent"
						},
						{
							"dataset": {
								"referenceName": "Source_Template_Hires",
								"type": "DatasetReference"
							},
							"name": "Hires"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTotalSummary"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTermIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputPromoIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputTalentIDsNotInHeadcount"
						},
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "OutputHireIDsNotInHeadcount"
						}
					],
					"transformations": [
						{
							"name": "SelectUniqueWorkerIDTerminations"
						},
						{
							"name": "SelectAllEmpIDsInTerminations"
						},
						{
							"name": "SelectUniqueEmpIDHeadcount"
						},
						{
							"name": "SelectAllEmpIDsInHeadcount"
						},
						{
							"name": "SelectTermIDsNotInHeadcount"
						},
						{
							"name": "AggregateTermIDsNotInHeadcount"
						},
						{
							"name": "TotalIDsInHeadcount"
						},
						{
							"name": "CombineHeadcountAndTermIDCounts"
						},
						{
							"name": "TagEventCheckForTerms"
						},
						{
							"name": "DisplayTotalTermIDsVSTotalHeadcount"
						},
						{
							"name": "SelectUniqueWorkerIDPromotions"
						},
						{
							"name": "SelectAllEmpIDsInPromotions"
						},
						{
							"name": "SelectPromoIDsNotInHeadcount"
						},
						{
							"name": "AggregatePromoIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndPromoIDCounts"
						},
						{
							"name": "TagEventCheckForPromos"
						},
						{
							"name": "DisplayTotalPromoIDsVSTotalHeadcount"
						},
						{
							"name": "CombineTotalWorkerIDSummaryAllEvents"
						},
						{
							"name": "SelectUniqueWorkerIDTalent"
						},
						{
							"name": "SelectAllEmpIDsInTalent"
						},
						{
							"name": "SelectTalentIDsNotInHeadcount"
						},
						{
							"name": "AggregateTalentIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndTalentIDCounts"
						},
						{
							"name": "TagEventCheckForTalent"
						},
						{
							"name": "DisplayTotalTalentIDsVSTotalHeadcount"
						},
						{
							"name": "CountTotalTerms"
						},
						{
							"name": "TotalTermsIdentifier"
						},
						{
							"name": "JoinTotalWorkerIDEventCountsWithSummary"
						},
						{
							"name": "CountTotalPromotions"
						},
						{
							"name": "TotalPromosIdentifier"
						},
						{
							"name": "CountTotalTalent"
						},
						{
							"name": "TotalTalentIdentifier"
						},
						{
							"name": "TotalEventRecords"
						},
						{
							"name": "select1"
						},
						{
							"name": "SelectUniqueWorkerIDHires"
						},
						{
							"name": "SelectAllEmpIDsInHires"
						},
						{
							"name": "SelectHireIDsNotInHeadcount"
						},
						{
							"name": "AggregateHireIDsNotInHeadcount"
						},
						{
							"name": "CombineHeadcountAndHireIDCounts"
						},
						{
							"name": "TagEventCheckForHires"
						},
						{
							"name": "DisplayTotalHireIDsVSTotalHeadcount"
						},
						{
							"name": "CountTotalHires"
						},
						{
							"name": "TotalHireIdentifier"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "select5"
						},
						{
							"name": "select6"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "derivedColumn5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Worker ID} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Headcount",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Event Reason} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Last Promo Date} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Terminations",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years in Job} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Promotions",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Performance Rating} as string,",
						"          {Performance Rating Date} as string,",
						"          {Top Performer} as string,",
						"          {Talent Identifier (1)} as string,",
						"          {Talent Identifier (2)} as string,",
						"          {Talent Identifier (3)} as string,",
						"          {Talent Identifier (4)} as string,",
						"          {Talent Identifier (5)} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Talent",
						"source(output(",
						"          {DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>} as string,",
						"          {Event Year} as string,",
						"          {Event Quarter} as string,",
						"          {Event Date} as string,",
						"          {Event Type} as string,",
						"          {Worker ID} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Legacy Organization} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Hires",
						"select3 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTerminations",
						"SelectUniqueWorkerIDTerminations select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTerminations",
						"select2 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> SelectUniqueEmpIDHeadcount",
						"SelectUniqueEmpIDHeadcount select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHeadcount",
						"SelectAllEmpIDsInTerminations, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTerminations@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectTermIDsNotInHeadcount",
						"SelectTermIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Terminations Not in HCT} = count({Worker ID})) ~> AggregateTermIDsNotInHeadcount",
						"SelectAllEmpIDsInHeadcount aggregate(groupBy(Event),",
						"     {Total Count} = count({Worker ID})) ~> TotalIDsInHeadcount",
						"AggregateTermIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTermIDCounts",
						"CombineHeadcountAndTermIDCounts derive({Event Check} = 'Terminations') ~> TagEventCheckForTerms",
						"TagEventCheckForTerms aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Terminations Not in HCT})) ~> DisplayTotalTermIDsVSTotalHeadcount",
						"select4 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDPromotions",
						"SelectUniqueWorkerIDPromotions select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInPromotions",
						"SelectAllEmpIDsInPromotions, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInPromotions@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectPromoIDsNotInHeadcount",
						"SelectPromoIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Promotions Not in HCT} = count({Worker ID})) ~> AggregatePromoIDsNotInHeadcount",
						"AggregatePromoIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndPromoIDCounts",
						"CombineHeadcountAndPromoIDCounts derive({Event Check} = 'Promotions') ~> TagEventCheckForPromos",
						"TagEventCheckForPromos aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Promotions Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalPromoIDsVSTotalHeadcount",
						"DisplayTotalTermIDsVSTotalHeadcount, DisplayTotalPromoIDsVSTotalHeadcount, DisplayTotalTalentIDsVSTotalHeadcount, DisplayTotalHireIDsVSTotalHeadcount union(byName: true)~> CombineTotalWorkerIDSummaryAllEvents",
						"select5 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDTalent",
						"SelectUniqueWorkerIDTalent select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInTalent",
						"SelectAllEmpIDsInTalent, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInTalent@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'left')~> SelectTalentIDsNotInHeadcount",
						"SelectTalentIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Talent Not in HCT} = count({Worker ID})) ~> AggregateTalentIDsNotInHeadcount",
						"AggregateTalentIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndTalentIDCounts",
						"CombineHeadcountAndTalentIDCounts derive({Event Check} = 'Talent') ~> TagEventCheckForTalent",
						"TagEventCheckForTalent aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Talent Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalTalentIDsVSTotalHeadcount",
						"SelectAllEmpIDsInTerminations aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTerms",
						"CountTotalTerms derive({Event Check} = 'Terminations') ~> TotalTermsIdentifier",
						"CombineTotalWorkerIDSummaryAllEvents, TotalEventRecords join(CombineTotalWorkerIDSummaryAllEvents@{Event Check} == TotalEventRecords@{Event Check},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotalWorkerIDEventCountsWithSummary",
						"SelectAllEmpIDsInPromotions aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalPromotions",
						"CountTotalPromotions derive({Event Check} = 'Promotions') ~> TotalPromosIdentifier",
						"SelectAllEmpIDsInTalent aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalTalent",
						"CountTotalTalent derive({Event Check} = 'Talent') ~> TotalTalentIdentifier",
						"TotalTermsIdentifier, TotalPromosIdentifier, TotalTalentIdentifier, TotalHireIdentifier union(byName: true)~> TotalEventRecords",
						"JoinTotalWorkerIDEventCountsWithSummary select(mapColumn(",
						"          Event = CombineTotalWorkerIDSummaryAllEvents@{Event Check},",
						"          {Total IDs Not in HCT},",
						"          {Total Unique Worker ID's in Event} = {Total Event Record Count}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select6 aggregate(groupBy({Worker ID}),",
						"     each(match(name!='Worker ID'), $$ = first($$))) ~> SelectUniqueWorkerIDHires",
						"SelectUniqueWorkerIDHires select(mapColumn(",
						"          {Worker ID},",
						"          Event",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAllEmpIDsInHires",
						"SelectAllEmpIDsInHires, SelectAllEmpIDsInHeadcount exists(SelectAllEmpIDsInHires@{Worker ID} == SelectAllEmpIDsInHeadcount@{Worker ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> SelectHireIDsNotInHeadcount",
						"SelectHireIDsNotInHeadcount aggregate(groupBy(Event),",
						"     {Total Hires Not in HCT} = count({Worker ID})) ~> AggregateHireIDsNotInHeadcount",
						"AggregateHireIDsNotInHeadcount, TotalIDsInHeadcount union(byName: true)~> CombineHeadcountAndHireIDCounts",
						"CombineHeadcountAndHireIDCounts derive({Event Check} = 'Hire') ~> TagEventCheckForHires",
						"TagEventCheckForHires aggregate(groupBy({Event Check}),",
						"     {Total IDs Not in HCT} = sum({Total Hires Not in HCT}),",
						"          {Total Count} = sum({Total Count})) ~> DisplayTotalHireIDsVSTotalHeadcount",
						"SelectAllEmpIDsInHires aggregate(groupBy(Event),",
						"     {Total Event Record Count} = count({Worker ID})) ~> CountTotalHires",
						"CountTotalHires derive({Event Check} = 'Hire') ~> TotalHireIdentifier",
						"Headcount filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter1",
						"Terminations filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter2",
						"Promotions filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter3",
						"Talent filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter4",
						"Hires filter(isNull({DO NOT USE THIS COLUMN.  DO NOT ALTER HEADER NAMES ON THIS ROW==>})) ~> filter5",
						"derivedColumn1 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Worker ID},",
						"          {Worker Status},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn2 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Event Reason},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Years in Job},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"derivedColumn3 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Previous Job Title},",
						"          {Previous Job Family/Function},",
						"          {Previous Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Years of Service},",
						"          {Years in Job},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn4 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Performance Rating},",
						"          {Performance Rating Date},",
						"          {Top Performer},",
						"          {Talent Identifier (1)},",
						"          {Talent Identifier (2)},",
						"          {Talent Identifier (3)},",
						"          {Talent Identifier (4)},",
						"          {Talent Identifier (5)}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"derivedColumn5 select(mapColumn(",
						"          {Event Year},",
						"          {Event Date},",
						"          Event,",
						"          {Event Type},",
						"          {Worker ID},",
						"          {Worker Type},",
						"          {Job Title},",
						"          {Job Family/Function},",
						"          {Corporate Title},",
						"          {Manager Indicator},",
						"          {Direct Manager Worker ID},",
						"          {Legacy Organization},",
						"          {Work Office Location},",
						"          {Work City},",
						"          {Work State},",
						"          {Work Country},",
						"          {Strategic Work Location Ind},",
						"          {Original Hire Date},",
						"          {Current Hire Date},",
						"          {Rehire Indicator},",
						"          {Business Group Level 1},",
						"          {Business Group Level 2},",
						"          {Business Group Level 3},",
						"          {Business Group Level 4},",
						"          Race,",
						"          {Hispanic or Latino Origin},",
						"          Gender,",
						"          {Veteran Ind},",
						"          LGTBQ,",
						"          {Disability Ind},",
						"          {Birth Year},",
						"          {Generation Desc}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"filter1 derive(Event = 'Headcount') ~> derivedColumn1",
						"filter2 derive(Event = 'Terminations') ~> derivedColumn2",
						"filter3 derive(Event = 'Promotions') ~> derivedColumn3",
						"filter4 derive(Event = 'Talent') ~> derivedColumn4",
						"filter5 derive(Event = 'Hires') ~> derivedColumn5",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker ID Review Summary.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTotalSummary",
						"SelectTermIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Terms Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTermIDsNotInHeadcount",
						"SelectPromoIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Promos Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputPromoIDsNotInHeadcount",
						"SelectTalentIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Talent Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputTalentIDsNotInHeadcount",
						"SelectHireIDsNotInHeadcount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs in Hires Not in HCT.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OutputHireIDsNotInHeadcount"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_Template_Headcount')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Terminations')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Promotions')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_TalentAssessment')]",
				"[concat(variables('factoryId'), '/datasets/Source_Template_Hires')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Review_WorkerId_HCT_Compare')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Audit Reports"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_FactTbl_AllCoreData_File",
								"type": "DatasetReference"
							},
							"name": "Core"
						},
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "CoreDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Source_AuditFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "HCTFilter"
						},
						{
							"name": "MaxYear"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "MaxYearMinus1"
						},
						{
							"name": "MaxYearMinus2"
						},
						{
							"name": "MaxYearMinus3"
						},
						{
							"name": "MaxYearMinus4"
						},
						{
							"name": "SelectWorkerAndYear"
						},
						{
							"name": "TotalWorkersMaxYear"
						},
						{
							"name": "JoinMaxMinus1"
						},
						{
							"name": "TotalWorkersMaxYearMinus1"
						},
						{
							"name": "JoinMaxMinus2"
						},
						{
							"name": "TotalWorkersMaxYearMinus2"
						},
						{
							"name": "JoinMaxMinus3"
						},
						{
							"name": "TotalWorkersMaxYearMinus3"
						},
						{
							"name": "JoinMaxMinus4"
						},
						{
							"name": "TotalWorkersMaxYearMinus4"
						},
						{
							"name": "JoinMaxMinus1forCompare"
						},
						{
							"name": "selectMax"
						},
						{
							"name": "selectMaxMinus1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "JoinMaxMinus2forCompare"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "selectMaxMinus2"
						},
						{
							"name": "JoinMaxMinus3forCompare"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "selectMaxMinus3"
						},
						{
							"name": "JoinMaxMinus4forCompare"
						},
						{
							"name": "selectMaxMinus4"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "JoinTotalMax"
						},
						{
							"name": "FinalSelectMaxCompare"
						},
						{
							"name": "JoinTotal1P"
						},
						{
							"name": "FinalSelect1PCompare"
						},
						{
							"name": "JoinTotal2P"
						},
						{
							"name": "FinalSelect2PCompare"
						},
						{
							"name": "JoinTotal3P"
						},
						{
							"name": "FinalSelect3PCompare"
						},
						{
							"name": "MaxYearMinus5"
						},
						{
							"name": "JoinMaxMinus5"
						},
						{
							"name": "selectMaxMinus5"
						},
						{
							"name": "TotalWorkersMaxYearMinus5"
						},
						{
							"name": "JoinMaxMinus5forCompare"
						},
						{
							"name": "aggregate5"
						},
						{
							"name": "JoinTotal4P"
						},
						{
							"name": "FinalSelect4PCompare"
						},
						{
							"name": "CalcMaxPercent"
						},
						{
							"name": "Calc1PPercent"
						},
						{
							"name": "Calc2PPercent"
						},
						{
							"name": "Calc3PPercent"
						},
						{
							"name": "Calc4PPercent"
						},
						{
							"name": "union1"
						},
						{
							"name": "TERFilter"
						},
						{
							"name": "JoinFilterMaxTER"
						},
						{
							"name": "JoinFilter1PTER"
						},
						{
							"name": "JoinFilter2PTER"
						},
						{
							"name": "JoinFilter3PTER"
						},
						{
							"name": "JoinFilter4PTER"
						},
						{
							"name": "SelectTERColumns"
						},
						{
							"name": "MaxTERExist5PHC"
						},
						{
							"name": "Terminations4PCount"
						},
						{
							"name": "MaxTERExist4PHC"
						},
						{
							"name": "Terminations3PCount"
						},
						{
							"name": "MaxTERExist3PHC"
						},
						{
							"name": "Terminations2PCount"
						},
						{
							"name": "MaxTERExist2PHC"
						},
						{
							"name": "Terminations1PCount"
						},
						{
							"name": "MaxTERExist1PHC"
						},
						{
							"name": "TerminationsMaxCount"
						},
						{
							"name": "JoinMaxTERCount"
						},
						{
							"name": "FinalSelect1P"
						},
						{
							"name": "Join1PTERCount"
						},
						{
							"name": "FinalSelect2P"
						},
						{
							"name": "Join2PTERCount"
						},
						{
							"name": "FinalSelect3P"
						},
						{
							"name": "Join3PTERCount"
						},
						{
							"name": "FinalSelect4P"
						},
						{
							"name": "Join4PTERCount"
						},
						{
							"name": "FinalSelect5P"
						},
						{
							"name": "HIRFilter"
						},
						{
							"name": "SelectHIRColumns"
						},
						{
							"name": "JoinFilterMaxHIR"
						},
						{
							"name": "HireMaxCount"
						},
						{
							"name": "MaxHIRExistMaxHC"
						},
						{
							"name": "JoinFilter1PHIR"
						},
						{
							"name": "HIR1PExist1PHC"
						},
						{
							"name": "Hire1PCount"
						},
						{
							"name": "JoinFilter2PHIR"
						},
						{
							"name": "HIR2PExist2PHC"
						},
						{
							"name": "Hire2PCount"
						},
						{
							"name": "JoinFilter3PHIR"
						},
						{
							"name": "HIR3PExist3PHC"
						},
						{
							"name": "Hire3PCount"
						},
						{
							"name": "JoinFilter4PHIR"
						},
						{
							"name": "HIR4PExist4PHC"
						},
						{
							"name": "Hire4PCount"
						},
						{
							"name": "Join4PHIRCount"
						},
						{
							"name": "Join3PHIRCount"
						},
						{
							"name": "Join2PHIRCount"
						},
						{
							"name": "Join1PHIRCount"
						},
						{
							"name": "JoinMaxHIRCount"
						},
						{
							"name": "SelectCoreDBFields"
						},
						{
							"name": "UnionWithCoreDB"
						},
						{
							"name": "RemoveDupsCore"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          {Client ID} as string,",
						"          {Client Engagement Date} as date 'MM/dd/yyyy',",
						"          {Client Engagement Type} as string,",
						"          {Worker ID} as string,",
						"          {Event Date} as string,",
						"          EventMonth as string,",
						"          {Event Quarter} as string,",
						"          {Event Year} as integer,",
						"          {Event Code} as string,",
						"          {Event Type} as string,",
						"          Event as string,",
						"          {Event Reason} as string,",
						"          {Worker Status} as string,",
						"          {Worker Type} as string,",
						"          {Job Title} as string,",
						"          {Job Family/Function} as string,",
						"          {Years in Job} as string,",
						"          {Previous Job Title} as string,",
						"          {Previous Job Family/Function} as string,",
						"          {Original Hire Date} as string,",
						"          {Current Hire Date} as string,",
						"          {Years of Service} as string,",
						"          {Years of Service Band} as string,",
						"          {Years of Service Sort ID} as string,",
						"          {Last Promo Date} as string,",
						"          {Rehire Indicator} as string,",
						"          {Corporate Title} as string,",
						"          {Previous Corporate Title} as string,",
						"          {Manager Indicator} as string,",
						"          {Direct Manager Worker ID} as string,",
						"          {Work Office Location} as string,",
						"          {Work City} as string,",
						"          {Work State} as string,",
						"          {Work Country} as string,",
						"          {Strategic Work Location Ind} as string,",
						"          {Legacy Organization} as string,",
						"          {Business Group Level 1} as string,",
						"          {Business Group Level 2} as string,",
						"          {Business Group Level 3} as string,",
						"          {Business Group Level 4} as string,",
						"          Race as string,",
						"          {Hispanic or Latino Origin} as string,",
						"          Gender as string,",
						"          {Veteran Ind} as string,",
						"          LGTBQ as string,",
						"          {Disability Ind} as string,",
						"          {Birth Year} as string,",
						"          {Generation Desc} as string,",
						"          {Generation Sort ID} as string,",
						"          EmpCount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Core",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CoreDB",
						"RemoveDupsCore filter({Event Code}=='HCT') ~> filter1",
						"RemoveDupsCore filter({Event Code}=='HCT') ~> HCTFilter",
						"filter1 aggregate({Event Year Last} = max({Event Year})) ~> MaxYear",
						"SelectWorkerAndYear, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMax",
						"filter1 aggregate({Event Year -1} = max({Event Year})-1) ~> MaxYearMinus1",
						"filter1 aggregate({Event Year -2} = max({Event Year})-2) ~> MaxYearMinus2",
						"filter1 aggregate({Event Year -3} = max({Event Year})-3) ~> MaxYearMinus3",
						"filter1 aggregate({Event Year -4} = max({Event Year})-4) ~> MaxYearMinus4",
						"HCTFilter select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWorkerAndYear",
						"JoinMax aggregate(groupBy({Event Year Last}),",
						"     {Total Max} = count({Worker ID})) ~> TotalWorkersMaxYear",
						"SelectWorkerAndYear, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus1",
						"JoinMaxMinus1 aggregate(groupBy({Event Year -1}),",
						"     {Total Max -1} = count({Worker ID})) ~> TotalWorkersMaxYearMinus1",
						"SelectWorkerAndYear, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus2",
						"JoinMaxMinus2 aggregate(groupBy({Event Year -2}),",
						"     TotalWorkersMaxYearMinus2 = count({Worker ID})) ~> TotalWorkersMaxYearMinus2",
						"SelectWorkerAndYear, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus3",
						"JoinMaxMinus3 aggregate(groupBy({Event Year -3}),",
						"     TotalWorkersMaxYearMinus3 = count({Worker ID})) ~> TotalWorkersMaxYearMinus3",
						"SelectWorkerAndYear, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus4",
						"JoinMaxMinus4 aggregate(groupBy({Event Year -4}),",
						"     TotalWorkersMaxYearMinus4 = count({Worker ID})) ~> TotalWorkersMaxYearMinus4",
						"selectMax, selectMaxMinus1 join({Max Worker ID} == {1P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus1forCompare",
						"JoinMax select(mapColumn(",
						"          {Max Client ID} = {Client ID},",
						"          {Max Client Engagement Date} = {Client Engagement Date},",
						"          {Max Worker ID} = {Worker ID},",
						"          {Max Event Year} = {Event Year},",
						"          {Event Year Last}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMax",
						"JoinMaxMinus1 select(mapColumn(",
						"          {1P Client ID} = {Client ID},",
						"          {1P Client Engagement Date} = {Client Engagement Date},",
						"          {1P Worker ID} = {Worker ID},",
						"          {1P Event Year} = {Event Year},",
						"          {Event Year -1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus1",
						"JoinMaxMinus1forCompare aggregate(groupBy({Client ID} = {Max Client ID},",
						"          {Client Engagement Date} = {Max Client Engagement Date},",
						"          {1P Event Year},",
						"          {Max Event Year}),",
						"     {Total 1P HCT in Latest HCT} = count({1P Worker ID})) ~> aggregate1",
						"selectMaxMinus1, selectMaxMinus2 join({1P Worker ID} == {2P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus2forCompare",
						"JoinMaxMinus2forCompare aggregate(groupBy({Client ID} = {1P Client ID},",
						"          {Client Engagement Date} = {1P Client Engagement Date},",
						"          {2P Event Year},",
						"          {1P Event Year}),",
						"     {Total Max -2 in Max -1} = count({2P Worker ID})) ~> aggregate2",
						"JoinMaxMinus2 select(mapColumn(",
						"          {2P Client ID} = {Client ID},",
						"          {2P Client Engagement Date} = {Client Engagement Date},",
						"          {2P Worker ID} = {Worker ID},",
						"          {2P Event Year} = {Event Year},",
						"          {Event Year -2}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus2",
						"selectMaxMinus2, selectMaxMinus3 join({2P Worker ID} == {3P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus3forCompare",
						"JoinMaxMinus3forCompare aggregate(groupBy({Client ID} = {2P Client ID},",
						"          {Client Engagement Date} = {2P Client Engagement Date},",
						"          {3P Event Year},",
						"          {2P Event Year}),",
						"     {Total Max -3 in Max -2} = count({3P Worker ID})) ~> aggregate3",
						"JoinMaxMinus3 select(mapColumn(",
						"          {3P Client ID} = {Client ID},",
						"          {3P Client Engagement Date} = {Client Engagement Date},",
						"          {3P Worker ID} = {Worker ID},",
						"          {3P Event Year} = {Event Year},",
						"          {Event Year -3}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus3",
						"selectMaxMinus3, selectMaxMinus4 join({3P Worker ID} == {4P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus4forCompare",
						"JoinMaxMinus4 select(mapColumn(",
						"          {4P Client ID} = {Client ID},",
						"          {4P Client Engagement Date} = {Client Engagement Date},",
						"          {4P Worker ID} = {Worker ID},",
						"          {4P Event Year} = {Event Year},",
						"          {Event Year -4}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus4",
						"JoinMaxMinus4forCompare aggregate(groupBy({Client ID} = {3P Client ID},",
						"          {Client Engagement Date} = {3P Client Engagement Date},",
						"          {4P Event Year},",
						"          {3P Event Year}),",
						"     {Total Max -4 in Max -3} = count({4P Worker ID})) ~> aggregate4",
						"aggregate1, TotalWorkersMaxYear join({Max Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinTotalMax",
						"JoinTotalMax select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {1P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total 1P HCT in Latest HCT},",
						"          {Compare Yr} = {Event Year Last},",
						"          {Compare Yr HCT} = {Total Max}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectMaxCompare",
						"aggregate2, TotalWorkersMaxYearMinus1 join({1P Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal1P",
						"JoinTotal1P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {2P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -2 in Max -1},",
						"          {Compare Yr} = {Event Year -1},",
						"          {Compare Yr HCT} = {Total Max -1}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect1PCompare",
						"aggregate3, TotalWorkersMaxYearMinus2 join({2P Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal2P",
						"JoinTotal2P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {3P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -3 in Max -2},",
						"          {Compare Yr} = {Event Year -2},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus2",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect2PCompare",
						"aggregate4, TotalWorkersMaxYearMinus3 join({3P Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal3P",
						"JoinTotal3P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {4P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -4 in Max -3},",
						"          {Compare Yr} = {Event Year -3},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect3PCompare",
						"filter1 aggregate({Event Year -5} = max({Event Year})-5) ~> MaxYearMinus5",
						"SelectWorkerAndYear, MaxYearMinus5 join({Event Year} == {Event Year -5},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus5",
						"JoinMaxMinus5 select(mapColumn(",
						"          {5P Client ID} = {Client ID},",
						"          {5P Client Engagement Date} = {Client Engagement Date},",
						"          {5P Worker ID} = {Worker ID},",
						"          {5P Event Year} = {Event Year},",
						"          {Event Year -5}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMaxMinus5",
						"JoinMaxMinus5 aggregate(TotalWorkersMaxYearMinus5 = count({Worker ID})) ~> TotalWorkersMaxYearMinus5",
						"selectMaxMinus4, selectMaxMinus5 join({4P Worker ID} == {5P Worker ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxMinus5forCompare",
						"JoinMaxMinus5forCompare aggregate(groupBy({Client ID} = {4P Client ID},",
						"          {Client Engagement Date} = {4P Client Engagement Date},",
						"          {5P Event Year},",
						"          {4P Event Year}),",
						"     {Total Max -5 in Max -4} = count({4P Worker ID})) ~> aggregate5",
						"aggregate5, TotalWorkersMaxYearMinus4 join({4P Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinTotal4P",
						"JoinTotal4P select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr} = {5P Event Year},",
						"          {Prior Yr HCT in Compare YR HCT} = {Total Max -5 in Max -4},",
						"          {Compare Yr} = {Event Year -4},",
						"          {Compare Yr HCT} = TotalWorkersMaxYearMinus4",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect4PCompare",
						"FinalSelect1P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> CalcMaxPercent",
						"FinalSelect2P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc1PPercent",
						"FinalSelect3P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc2PPercent",
						"FinalSelect4P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc3PPercent",
						"FinalSelect5P derive({Match %} = round((({Prior Yr HCT in Compare Yr HCT}/{Compare Yr HCT})*100),1)) ~> Calc4PPercent",
						"Calc4PPercent, Calc3PPercent, Calc2PPercent, Calc1PPercent, CalcMaxPercent union(byName: true)~> union1",
						"SelectTERColumns filter({Event Code}=='TER') ~> TERFilter",
						"TERFilter, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilterMaxTER",
						"TERFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter1PTER",
						"TERFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter2PTER",
						"TERFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter3PTER",
						"TERFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter4PTER",
						"RemoveDupsCore select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTERColumns",
						"JoinFilter4PTER, selectMaxMinus5 exists({Worker ID} == {5P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist5PHC",
						"MaxTERExist5PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations4PCount",
						"JoinFilter3PTER, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist4PHC",
						"MaxTERExist4PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations3PCount",
						"JoinFilter2PTER, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist3PHC",
						"MaxTERExist3PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations2PCount",
						"JoinFilter1PTER, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist2PHC",
						"MaxTERExist2PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> Terminations1PCount",
						"JoinFilterMaxTER, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
						"     negate:false,",
						"     broadcast: 'both')~> MaxTERExist1PHC",
						"MaxTERExist1PHC aggregate(groupBy({Termination Year} = {Event Year}),",
						"     {Terms Not In Compare Yr HCT} = count({Worker ID})) ~> TerminationsMaxCount",
						"FinalSelectMaxCompare, TerminationsMaxCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinMaxTERCount",
						"JoinMaxHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect1P",
						"FinalSelect1PCompare, Terminations1PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join1PTERCount",
						"Join1PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect2P",
						"FinalSelect2PCompare, Terminations2PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join2PTERCount",
						"Join2PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect3P",
						"FinalSelect3PCompare, Terminations3PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join3PTERCount",
						"Join3PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect4P",
						"FinalSelect4PCompare, Terminations4PCount join({Compare Yr} == {Termination Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join4PTERCount",
						"Join4PHIRCount select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Prior Yr},",
						"          {Prior Yr HCT in Compare Yr HCT} = {Prior Yr HCT in Compare YR HCT},",
						"          {Termination Year},",
						"          {Prior Yr HCT Terms Not In Compare Yr HCT} = {Terms Not In Compare Yr HCT},",
						"          {Hire Year},",
						"          {Hires in Compare HCT},",
						"          {Compare Yr},",
						"          {Compare Yr HCT}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect5P",
						"SelectHIRColumns filter({Event Code}=='HIR') ~> HIRFilter",
						"RemoveDupsCore select(mapColumn(",
						"          {Client ID},",
						"          {Client Engagement Date},",
						"          {Worker ID},",
						"          {Event Year},",
						"          {Event Code}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectHIRColumns",
						"HIRFilter, MaxYear join({Event Year} == {Event Year Last},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilterMaxHIR",
						"MaxHIRExistMaxHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> HireMaxCount",
						"JoinFilterMaxHIR, selectMax exists({Worker ID} == {Max Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> MaxHIRExistMaxHC",
						"HIRFilter, MaxYearMinus1 join({Event Year} == {Event Year -1},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilter1PHIR",
						"JoinFilter1PHIR, selectMaxMinus1 exists({Worker ID} == {1P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR1PExist1PHC",
						"HIR1PExist1PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire1PCount",
						"HIRFilter, MaxYearMinus2 join({Event Year} == {Event Year -2},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinFilter2PHIR",
						"JoinFilter2PHIR, selectMaxMinus2 exists({Worker ID} == {2P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR2PExist2PHC",
						"HIR2PExist2PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire2PCount",
						"HIRFilter, MaxYearMinus3 join({Event Year} == {Event Year -3},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter3PHIR",
						"JoinFilter3PHIR, selectMaxMinus3 exists({Worker ID} == {3P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR3PExist3PHC",
						"HIR3PExist3PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire3PCount",
						"HIRFilter, MaxYearMinus4 join({Event Year} == {Event Year -4},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinFilter4PHIR",
						"JoinFilter4PHIR, selectMaxMinus4 exists({Worker ID} == {4P Worker ID},",
						"     negate:false,",
						"     broadcast: 'auto')~> HIR4PExist4PHC",
						"HIR4PExist4PHC aggregate(groupBy({Hire Year} = {Event Year}),",
						"     {Hires in Compare HCT} = count({Worker ID})) ~> Hire4PCount",
						"Join4PTERCount, Hire4PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join4PHIRCount",
						"Join3PTERCount, Hire3PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join3PHIRCount",
						"Join2PTERCount, Hire2PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join2PHIRCount",
						"Join1PTERCount, Hire1PCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> Join1PHIRCount",
						"JoinMaxTERCount, HireMaxCount join({Compare Yr} == {Hire Year},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> JoinMaxHIRCount",
						"CoreDB select(mapColumn(",
						"          {Client ID} = ClientId,",
						"          {Client Engagement Date} = ClientEngagementDt,",
						"          {Worker ID} = WorkerId,",
						"          {Event Year} = EventYear,",
						"          {Event Code} = EventId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCoreDBFields",
						"Core, SelectCoreDBFields union(byName: true)~> UnionWithCoreDB",
						"UnionWithCoreDB aggregate(groupBy({Client Engagement Date},",
						"          {Event Year},",
						"          {Event Code},",
						"          {Worker ID}),",
						"     {Client ID} = max({Client ID})) ~> RemoveDupsCore",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Template - Worker IDs HCT Compare Over Time.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source_FactTbl_AllCoreData_File')]",
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]",
				"[concat(variables('factoryId'), '/datasets/Source_AuditFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Applicant')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantFact"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplicantFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantFact",
						"ApplicantFact alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ApplicantId as string,",
						"          Source as string,",
						"          ApplType as string,",
						"          InternalWorkerId as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          ApplFinalDisp as string,",
						"          ApplStepBeforeFinalDisp as string,",
						"          ApplRejectedReason as string,",
						"          ApplOther1 as string,",
						"          ApplOther2 as string,",
						"          ApplOther3 as string,",
						"          ApplOther4 as string,",
						"          ApplOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentApplicantFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_ApplicantStatus')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplStatusFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplStatusFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantStatus",
						"ApplicantStatus alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ApplId as string,",
						"          ReqId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Applicants as integer,",
						"          WhiteAppl as integer,",
						"          BlackAppl as integer,",
						"          LatinxAppl as integer,",
						"          AsianAppl as integer,",
						"          TwoorMoreAppl as integer,",
						"          OtherAppl as integer,",
						"          DNSIDAppl as integer,",
						"          PoCAppl as integer,",
						"          FemaleAppl as integer,",
						"          MaleAppl as integer,",
						"          OtherGenderAppl as integer,",
						"          DNSIDGenderAppl as integer,",
						"          DiverseAppl as integer,",
						"          ApplRejected as integer,",
						"          ApplWithdrew as integer,",
						"          Candidates as integer,",
						"          CandRejectedHR as integer,",
						"          CandStM as integer,",
						"          CandRejectedHM as integer,",
						"          CandInterviewed as integer,",
						"          CandHired as integer,",
						"          CandWithdrew as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentApplStatusFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Client')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "ClientTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentClientTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[ClientTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ClientTbl",
						"ClientTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          ClientSector as string,",
						"          ClientDesc as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentClientTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_DivSlate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DivSlateFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDivSlateFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASlateFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DivSlateFactTbl",
						"DivSlateFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          CandStM as integer,",
						"          IntCandStM as integer,",
						"          ExtCandStM as integer,",
						"          CandHired as integer,",
						"          IntCandHired as integer,",
						"          ExtCandHired as integer,",
						"          WhiteCandStM as integer,",
						"          IntWhiteCandStM as integer,",
						"          ExtWhiteCandStM as integer,",
						"          WhiteCandHired as integer,",
						"          IntWhiteCandHired as integer,",
						"          ExtWhiteCandHired as integer,",
						"          BlackCandStM as integer,",
						"          IntBlackCandStM as integer,",
						"          ExtBlackCandStM as integer,",
						"          BlackCandHired as integer,",
						"          IntBlackCandHired as integer,",
						"          ExtBlackCandHired as integer,",
						"          LatinxCandStM as integer,",
						"          IntLatinxCandStM as integer,",
						"          ExtLatinxCandStM as integer,",
						"          LatinxCandHired as integer,",
						"          IntLatinxCandHired as integer,",
						"          ExtLatinxCandHired as integer,",
						"          AsianCandStM as integer,",
						"          IntAsianCandStM as integer,",
						"          ExtAsianCandStM as integer,",
						"          AsianCandHired as integer,",
						"          IntAsianCandHired as integer,",
						"          ExtAsianCandHired as integer,",
						"          TwoPlusRacesCandStM as integer,",
						"          IntTwoPlusRacesCandStM as integer,",
						"          ExtTwoPlusRacesCandStM as integer,",
						"          TwoPlusRacesCandHired as integer,",
						"          IntTwoPlusRacesCandHired as integer,",
						"          ExtTwoPlusRacesCandHired as integer,",
						"          OtherCandStM as integer,",
						"          IntOtherCandStM as integer,",
						"          ExtOtherCandStM as integer,",
						"          OtherCandHired as integer,",
						"          IntOtherCandHired as integer,",
						"          ExtOtherCandHired as integer,",
						"          MaleCandStM as integer,",
						"          IntMaleCandStM as integer,",
						"          ExtMaleCandStM as integer,",
						"          MaleCandHired as integer,",
						"          IntMaleCandHired as integer,",
						"          ExtMaleCandHired as integer,",
						"          FemaleCandStM as integer,",
						"          IntFemaleCandStM as integer,",
						"          ExtFemaleCandStM as integer,",
						"          FemaleCandHired as integer,",
						"          IntFemaleCandHired as integer,",
						"          ExtFemaleCandHired as integer,",
						"          OtherGenderCandStM as integer,",
						"          IntOtherGenderCandStM as integer,",
						"          ExtOtherGenderCandStM as integer,",
						"          OtherGenderCandHired as integer,",
						"          IntOtherGenderCandHired as integer,",
						"          ExtOtherGenderCandHired as integer,",
						"          PoCCandStM as integer,",
						"          IntPoCCandStM as integer,",
						"          ExtPoCCandStM as integer,",
						"          PoCCandHired as integer,",
						"          IntPoCCandHired as integer,",
						"          ExtPoCCandHired as integer,",
						"          DiverseCandStM as integer,",
						"          IntDiverseCandStM as integer,",
						"          ExtDiverseCandStM as integer,",
						"          DiverseCandHired as integer,",
						"          IntDiverseCandHired as integer,",
						"          ExtDiverseCandHired as integer,",
						"          FemalePoCCandStM as integer,",
						"          IntFemalePoCCandStM as integer,",
						"          ExtFemalePoCCandStM as integer,",
						"          FemalePoCCandHired as integer,",
						"          IntFemalePoCCandHired as integer,",
						"          ExtFemalePoCCandHired as integer,",
						"          FemaleNotPoCCandStM as integer,",
						"          IntFemaleNotPoCCandStM as integer,",
						"          ExtFemaleNotPoCCandStM as integer,",
						"          FemaleNotPoCCandHired as integer,",
						"          IntFemaleNotPoCCandHired as integer,",
						"          ExtFemaleNotPoCCandHired as integer,",
						"          NotFemalePoCCandStM as integer,",
						"          IntNotFemalePoCCandStM as integer,",
						"          ExtNotFemalePoCCandStM as integer,",
						"          NotFemalePoCCandHired as integer,",
						"          IntNotFemalePoCCandHired as integer,",
						"          ExtNotFemalePoCCandHired as integer,",
						"          NotFemaleNotPoCCandStM as integer,",
						"          IntNotFemaleNotPoCCandStM as integer,",
						"          ExtNotFemaleNotPoCCandStM as integer,",
						"          NotFemaleNotPoCCandHired as integer,",
						"          IntNotFemaleNotPoCCandHired as integer,",
						"          ExtNotFemaleNotPoCCandHired as integer,",
						"          DiverseSlate as string,",
						"          IntDiverseSlate as string,",
						"          ExtDiverseSlate as string,",
						"          NoDiverseSlate as string,",
						"          IntNoDiverseSlate as string,",
						"          ExtNoDiverseSlate as string,",
						"          DiverseHiredSlate as string,",
						"          IntDiverseHiredSlate as string,",
						"          ExtDiverseHiredSlate as string,",
						"          PoCSlate as string,",
						"          IntPoCSlate as string,",
						"          ExtPoCSlate as string,",
						"          NoPoCSlate as string,",
						"          IntNoPoCSlate as string,",
						"          ExtNoPoCSlate as string,",
						"          PoCHiredSlate as string,",
						"          IntPoCHiredSlate as string,",
						"          ExtPoCHiredSlate as string,",
						"          WhiteSlate as string,",
						"          IntWhiteSlate as string,",
						"          ExtWhiteSlate as string,",
						"          NoWhiteSlate as string,",
						"          IntNoWhiteSlate as string,",
						"          ExtNoWhiteSlate as string,",
						"          WhiteHiredSlate as string,",
						"          IntWhiteHiredSlate as string,",
						"          ExtWhiteHiredSlate as string,",
						"          BlackSlate as string,",
						"          IntBlackSlate as string,",
						"          ExtBlackSlate as string,",
						"          NoBlackSlate as string,",
						"          IntNoBlackSlate as string,",
						"          ExtNoBlackSlate as string,",
						"          BlackHiredSlate as string,",
						"          IntBlackHiredSlate as string,",
						"          ExtBlackHiredSlate as string,",
						"          LatinxSlate as string,",
						"          IntLatinxSlate as string,",
						"          ExtLatinxSlate as string,",
						"          NoLatinxSlate as string,",
						"          IntNoLatinxSlate as string,",
						"          ExtNoLatinxSlate as string,",
						"          LatinxHiredSlate as string,",
						"          IntLatinxHiredSlate as string,",
						"          ExtLatinxHiredSlate as string,",
						"          AsianSlate as string,",
						"          IntAsianSlate as string,",
						"          ExtAsianSlate as string,",
						"          NoAsianSlate as string,",
						"          IntNoAsianSlate as string,",
						"          ExtNoAsianSlate as string,",
						"          AsianHiredSlate as string,",
						"          IntAsianHiredSlate as string,",
						"          ExtAsianHiredSlate as string,",
						"          TwoPlusRacesSlate as string,",
						"          IntTwoPlusRacesSlate as string,",
						"          ExtTwoPlusRacesSlate as string,",
						"          NoTwoPlusRacesSlate as string,",
						"          IntNoTwoPlusRacesSlate as string,",
						"          ExtNoTwoPlusRacesSlate as string,",
						"          TwoPlusRacesHiredSlate as string,",
						"          IntTwoPlusRacesHiredSlate as string,",
						"          ExtTwoPlusRacesHiredSlate as string,",
						"          OtherRaceSlate as string,",
						"          IntOtherRaceSlate as string,",
						"          ExtOtherRaceSlate as string,",
						"          NoOtherRaceSlate as string,",
						"          IntNoOtherRaceSlate as string,",
						"          ExtNoOtherRaceSlate as string,",
						"          OtherRaceHiredSlate as string,",
						"          IntOtherRaceHiredSlate as string,",
						"          ExtOtherRaceHiredSlate as string,",
						"          FemaleSlate as string,",
						"          IntFemaleSlate as string,",
						"          ExtFemaleSlate as string,",
						"          NoFemaleSlate as string,",
						"          IntNoFemaleSlate as string,",
						"          ExtNoFemaleSlate as string,",
						"          FemaleHiredSlate as string,",
						"          IntFemaleHiredSlate as string,",
						"          ExtFemaleHiredSlate as string,",
						"          MaleSlate as string,",
						"          IntMaleSlate as string,",
						"          ExtMaleSlate as string,",
						"          NoMaleSlate as string,",
						"          IntNoMaleSlate as string,",
						"          ExtNoMaleSlate as string,",
						"          MaleHiredSlate as string,",
						"          IntMaleHiredSlate as string,",
						"          ExtMaleHiredSlate as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentDivSlateFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"OtherCoreFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_PerfRatingHist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingHistFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingHistFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingHistTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingHistFactTbl",
						"PerfRatingHistFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          LastPerfYear as integer,",
						"          LastPerfRatingDt as date,",
						"          LastClientPerfRating as string,",
						"          LastElloreePerfRating as string,",
						"          LastElloreePerfRatingSortId as integer,",
						"          LastTopTalentInd as string,",
						"          CurrPerfYear as integer,",
						"          CurrPerfRatingDt as date,",
						"          CurrTalentTag as string,",
						"          CurrClientPerfRating as string,",
						"          CurrElloreePerfRating as string,",
						"          CurrElloreePerfRatingSortId as integer,",
						"          CurrTopTalentInd as string,",
						"          P1PerfYear as integer,",
						"          P1PerfRatingDt as date,",
						"          P1ClientPerfRating as string,",
						"          P1ElloreePerfRating as string,",
						"          P1ElloreePerfRatingSortId as integer,",
						"          P1TopTalentInd as string,",
						"          P2PerfYear as integer,",
						"          P2PerfRatingDt as date,",
						"          P2ClientPerfRating as string,",
						"          P2ElloreePerfRating as string,",
						"          P2ElloreePerfRatingSortId as integer,",
						"          P2TopTalentInd as string,",
						"          P3PerfYear as integer,",
						"          P3PerfRatingDt as date,",
						"          P3ClientPerfRating as string,",
						"          P3ElloreePerfRating as string,",
						"          P3ElloreePerfRatingSortId as integer,",
						"          P3TopTalentInd as string,",
						"          LastTalentTagYear as integer,",
						"          LastTalentTag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingHistFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Req')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "Requisition"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> Requisition",
						"Requisition alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          ReqId as string,",
						"          ReqType as string,",
						"          PostingDt as date,",
						"          ReqStatus as string,",
						"          NumberofOpenings as integer,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          CorpTitle as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          HiringMgrWorkerId as string,",
						"          PrimaryRecruiterWorkerId as string,",
						"          ReqOther1 as string,",
						"          ReqOther2 as string,",
						"          ReqOther3 as string,",
						"          ReqOther4 as string,",
						"          ReqOther5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentReqFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_SilverMedalist')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "SilverMedalistFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSilverMedalistFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TASilverMedalistFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> SilverMedalistFactTbl",
						"SilverMedalistFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventYear as integer,",
						"          ReqId as string,",
						"          ApplId as string,",
						"          IntWorkerId as string,",
						"          SilverMedalistInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentSilverMedalistFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          WorkerId as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> SpeedbumpsFactTbl",
						"SpeedbumpsFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentSpeedbumpsFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_Talent')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "TalentFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentTalentFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TalentFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> TalentFactTbl",
						"TalentFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventYear as integer,",
						"          EventDt as date,",
						"          Event as string,",
						"          EventType as string,",
						"          PerfRating as string,",
						"          PerfRatingDt as date,",
						"          TalentIdentifier1 as string,",
						"          TalentIdentifier2 as string,",
						"          TalentIdentifier3 as string,",
						"          TalentIdentifier4 as string,",
						"          TalentIdentifier5 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentTalentFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_All_Rec_FactTbl_YearRef')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/All Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "YearRefTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentYearRefTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[YearRefTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> YearRefTbl",
						"YearRefTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          CurEventYear as integer,",
						"          P1EventYear as integer,",
						"          P2EventYear as integer,",
						"          P3EventYear as integer,",
						"          P4EventYear as integer,",
						"          P5EventYear as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentYearRefTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Core')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventType as string,",
						"          EventReason as string,",
						"          WorkerStatus as string,",
						"          WorkerType as string,",
						"          JobTitle as string,",
						"          JobFunction as string,",
						"          YearsinJob as double,",
						"          PrevJobTitle as string,",
						"          PrevJobFunction as string,",
						"          LastPromoDt as date,",
						"          OrigHireDt as date,",
						"          CurrHireDt as date,",
						"          RehireInd as string,",
						"          YearsofSrvc as double,",
						"          YearsofSrvcBand as string,",
						"          YearsofSrvcBandSortId as integer,",
						"          CorpTitle as string,",
						"          PrevCorpTitle as string,",
						"          ManagerInd as string,",
						"          DirectMgrWorkerId as string,",
						"          WorkOfficeLoc as string,",
						"          WorkOfficeCity as string,",
						"          WorkOfficeState as string,",
						"          WorkOfficeCountry as string,",
						"          WorkStrategicLocInd as string,",
						"          LegacyOrg as string,",
						"          BusinessGrpLvl1 as string,",
						"          BusinessGrpLvl2 as string,",
						"          BusinessGrpLvl3 as string,",
						"          BusinessGrpLvl4 as string,",
						"          Race as string,",
						"          HispanicLatinoOrigin as string,",
						"          Gender as string,",
						"          Veteran as string,",
						"          LGTBQ as string,",
						"          DisabilityInd as string,",
						"          BirthYear as integer,",
						"          Generation as string,",
						"          GenerationSortId as integer,",
						"          EmpCount as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCoreFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_OtherCore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "OtherCoreFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentOtherCoreFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[OtherCoreFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> OtherCoreFactTbl",
						"OtherCoreFactTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEngagementType as string,",
						"          WorkerId as string,",
						"          EventDt as date,",
						"          EventMonth as integer,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          Event as string,",
						"          EventId as string,",
						"          EventDesc as string,",
						"          EventType as string,",
						"          OtherCharVal11 as string,",
						"          OtherCharVal2 as string,",
						"          OtherNumVal1 as double,",
						"          OtherNumVal2 as double,",
						"          OtherDtVal1 as date,",
						"          OtherDtVal2 as date,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentOtherCoreFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Speedbmps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "Speedbumps"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_Year as string,",
						"     Flow_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}' and EventYear = '{$Flow_Year}' and EventQuarter = '{$Flow_Quarter}'\"),",
						"     format: 'query') ~> Speedbumps",
						"Speedbumps alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt','EventQuarter','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentSpeedbumpsFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Qtr_Rec_FactTbl_Speedbumps')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Fact Tables/Quarter Records"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "SpeedbumpsFactTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentSpeedbumpsFactTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string,",
						"     Flow_SB_Year as string,",
						"     Flow_SB_Quarter as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[SpeedbumpsFactTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> SpeedbumpsFactTbl",
						"SpeedbumpsFactTbl alterRow(deleteIf(EventQuarter==toInteger($Flow_SB_Quarter)),",
						"     deleteIf(EventYear==toInteger($Flow_SB_Year))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          EventQuarter as integer,",
						"          EventYear as integer,",
						"          CoreEventId as string,",
						"          CoreEventQuarter as integer,",
						"          CoreEventDate as date,",
						"          WorkerId as string,",
						"          SpeedbumnpWorkerStatus as string,",
						"          SpeedbumpPopulationInd as string,",
						"          Speedbump1Name as string,",
						"          Speedbump1Desc as string,",
						"          Speedbump1Flag as string,",
						"          Speedbump2Name as string,",
						"          Speedbump2Desc as string,",
						"          Speedbump2Flag as string,",
						"          Speedbump3Name as string,",
						"          Speedbump3Desc as string,",
						"          Speedbump3Flag as string,",
						"          Speedbump4Name as string,",
						"          Speedbump4Desc as string,",
						"          Speedbump4Flag as string,",
						"          Speedbump5Name as string,",
						"          Speedbump5Desc as string,",
						"          Speedbump5Flag as string,",
						"          Speedbump6Name as string,",
						"          Speedbump6Desc as string,",
						"          Speedbump6Flag as string,",
						"          Speedbump7Name as string,",
						"          Speedbump7Desc as string,",
						"          Speedbump7Flag as string,",
						"          Speedbump8Name as string,",
						"          Speedbump8Desc as string,",
						"          Speedbump8Flag as string,",
						"          Speedbump9Name as string,",
						"          Speedbump9Desc as string,",
						"          Speedbump9Flag as string,",
						"          Speedbump10Name as string,",
						"          Speedbump10Desc as string,",
						"          Speedbump10Flag as string,",
						"          Speedbump11Name as string,",
						"          Speedbump11Desc as string,",
						"          Speedbump11Flag as string,",
						"          Speedbump12Name as string,",
						"          Speedbump12Desc as string,",
						"          Speedbump12Flag as string,",
						"          Speedbump13Name as string,",
						"          Speedbump13Desc as string,",
						"          Speedbump13Flag as string,",
						"          Speedbump14Name as string,",
						"          Speedbump14Desc as string,",
						"          Speedbump14Flag as string,",
						"          Speedbump15Name as string,",
						"          Speedbump15Desc as string,",
						"          Speedbump15Flag as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt','EventQuarter','EventYear'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentSpeedbumpsFactTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ApplFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "ApplicantFlowMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentApplFlowMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAApplMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ApplicantFlowMap",
						"ApplicantFlowMap alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientApplFinalDisp as string,",
						"          ClientApplStepBeforeFinalDisp as string,",
						"          ClientApplRejectedReason as string,",
						"          ElloreeApplFinalDisp as string,",
						"          ElloreeApplCategory as string,",
						"          ElloreeSubmittedtoMgrFl as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentApplFlowMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_BusHierarchy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "BusinessHIerarchy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBusHierarchyMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecordsFromCandidateStatus"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[BusinessMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> BusinessHIerarchy",
						"BusinessHIerarchy alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientBusGrpLvl1 as string,",
						"          ClientBusGrpLvl2 as string,",
						"          ClientBusGrpLvl3 as string,",
						"          ClientBusGrpLvl4 as string,",
						"          ElloreeBusGrpLvl1 as string,",
						"          ElloreeBusGrpLvl2 as string,",
						"          ElloreeBusGrpLvl3 as string,",
						"          ElloreeBusGrpLvl4 as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecordsFromCandidateStatus"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentBusHierarchyMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_CorpTitle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "CorpTitleMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentCorpTitleMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[CorpTitleMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> CorpTitleMap",
						"CorpTitleMap alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientCorpTitle as string,",
						"          ClientElloreeCorpTitle as string,",
						"          ElloreeCorpTitle as string,",
						"          ElloreeCorpTitleSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentCorpTitleMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Disability')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DisabilityMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentDisabilityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[DisabilityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> DisabilityMap",
						"DisabilityMap alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientDisabilityInd as string,",
						"          ElloreeDisabilityInd as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentDisabilityMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Ethnicity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "EthnicityMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEthnicityMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EthnicityMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EthnicityMapTbl",
						"EthnicityMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientRace as string,",
						"          ClientHispanicLatinoOrigin as string,",
						"          ElloreeRace as string,",
						"          ElloreeHispanicLatinoOrigin as string,",
						"          ElloreeEthnicGroup as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentEthnicityMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Event')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "EventMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentEventMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[EventMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> EventMapTbl",
						"EventMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientEvent as string,",
						"          ClientEventType as string,",
						"          ClientEventReason as string,",
						"          ElloreeEvent as string,",
						"          ElloreeEventType as string,",
						"          ElloreeEventReason as string,",
						"          ElloreeTermReason as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentEventMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Gender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "GenderMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentGenderMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[GenderMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> GenderMapTbl",
						"GenderMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientGender as string,",
						"          ElloreeGender as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentGenderMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_LGTBQ')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "LGBTQMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLGBTQMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LGTBQMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LGBTQMapTbl",
						"LGBTQMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientLGTBQ as string,",
						"          ElloreeLGTBQ as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentLGBTQMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "LocationMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentLocationMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[LocationMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> LocationMapTbl",
						"LocationMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientWorkOffice as string,",
						"          ClientWorkCity as string,",
						"          ClientWorkState as string,",
						"          ClientWorkCountry as string,",
						"          ClientStrategicLoc as string,",
						"          ElloreeWorkOffice as string,",
						"          ElloreeWorkCity as string,",
						"          ElloreeWorkState as string,",
						"          ElloreeWorkCountry as string,",
						"          ElloreeWorkRegion as string,",
						"          ElloreeStrategicLoc as string,",
						"          ElloreeLocSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentLocationMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_PerfRating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "PerfRatingMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentPerfRatingMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[PerfRatingMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> PerfRatingMapTbl",
						"PerfRatingMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientPerfRating as string,",
						"          ElloreePerfRating as string,",
						"          ElloreePerfRatingSortId as integer,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentPerfRatingMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ReqStatusMap')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqStatusMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqStatusMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqStatusMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ReqStatusMapTbl",
						"ReqStatusMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqStatus as string,",
						"          ElloreeReqStatus as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentReqStatusMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_ReqType')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "ReqTypeMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentReqTypeMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[TAReqTypeMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> ReqTypeMapTbl",
						"ReqTypeMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientReqType as string,",
						"          ElloreeReqType as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentReqTypeMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Rec_Mapping_Veteran')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Mapping Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "VeteranMapTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentVeteranMapTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Flow_Client_Id as string,",
						"     Flow_Client_Dt as string",
						"}",
						"source(output(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[VeteranMapTbl] where ClientId = '{$Flow_Client_Id}' and ClientEngagementDt = '{$Flow_Client_Dt}'\"),",
						"     format: 'query') ~> VeteranMapTbl",
						"VeteranMapTbl alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ClientId as string,",
						"          ClientEngagementDt as date,",
						"          ClientVeteran as string,",
						"          ElloreeVeteran as string,",
						"          LoadDt as date",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['ClientId','ClientEngagementDt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentVeteranMapTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_Tmp_OtherCoreAnalysis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Client/Database/Delete Records/Temp Tables"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "Core"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentTmp_OtherAnalysisTbl",
								"type": "DatasetReference"
							},
							"name": "DeleteRecords"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"select * from [dbo].[Tmp_OtherAnalysisTbl]\"),",
						"     format: 'query') ~> Core",
						"Core alterRow(deleteIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as integer,",
						"          Type as string,",
						"          Year as integer,",
						"          Quarter as integer",
						"     ),",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['Id','Type','Year','Quarter'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DeleteRecords"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/etalentTmp_OtherAnalysisTbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FullLoad_BLSTbl')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "External Data/BLS"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_AmerIndAlaskNat_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "AmerIndAlaskNatTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "Female"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_Latinx_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "LatinxTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "Male"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_NatHawPacIsl_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "NatHawPacIslTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "Total"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_TwoOrMore_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "TwoOrMoreTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemale"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMale"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotal"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Asian_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "AsianTotalNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Black_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "BlackTotalNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_Other_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "OtherTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Female_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteFemaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMaleHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Male_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteMaleNonHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_Hisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotalHisp"
						},
						{
							"dataset": {
								"referenceName": "BLS_White_Total_NonHisp_Tbl",
								"type": "DatasetReference"
							},
							"name": "WhiteTotalNonHisp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "etalentBLSTbl",
								"type": "DatasetReference"
							},
							"name": "FullLoadBLSTable"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AmerIndAlaskNatTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Female",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LatinxTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Male",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NatHawPacIslTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Total",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TwoOrMoreTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMale",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotal",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AsianTotalNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BlackTotalNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OtherTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteFemaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMaleHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteMaleNonHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotalHisp",
						"source(output(",
						"          Source as string,",
						"          SourceId as string,",
						"          Desc as string,",
						"          Year as short,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WhiteTotalNonHisp",
						"union1 derive(LastRefreshDt = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          LastRefreshDt,",
						"          Source,",
						"          SourceId,",
						"          SourceDesc = Desc,",
						"          Year,",
						"          Quarter,",
						"          Latest,",
						"          EthnicOrigin,",
						"          Race,",
						"          Gender,",
						"          Headcount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"AmerIndAlaskNatFemale, AmerIndAlaskNatMale, AmerIndAlaskNatTotal, AsianFemale, AsianMale, AsianTotal, BlackFemale, BlackMale, BlackTotal, Female, LatinxFemale, LatinxMale, LatinxTotal, Male, NatHawPacIslFemale, NatHawPacIslMale, NatHawPacIslTotal, Total, TwoOrMoreFemale, TwoOrMoreMale, TwoOrMoreTotal, WhiteFemale, WhiteMale, WhiteTotal, AsianFemaleHisp, AsianFemaleNonHisp, AsianMaleHisp, AsianMaleNonHisp, AsianTotalHisp, AsianTotalNonHisp, BlackFemaleHisp, BlackFemaleNonHisp, BlackMaleHisp, BlackMaleNonHisp, BlackTotalHisp, BlackTotalNonHisp, OtherFemaleHisp, OtherMaleHisp, OtherTotalHisp, WhiteFemaleHisp, WhiteFemaleNonHisp, WhiteMaleHisp, WhiteMaleNonHisp, WhiteTotalHisp, WhiteTotalNonHisp union(byName: true)~> union1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LastRefreshDt as date,",
						"          Source as string,",
						"          SourceId as string,",
						"          SourceDesc as string,",
						"          Year as integer,",
						"          Quarter as integer,",
						"          Latest as string,",
						"          EthnicOrigin as string,",
						"          Race as string,",
						"          Gender as string,",
						"          Headcount as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FullLoadBLSTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BLS_AmerIndAlaskNat_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_AmerIndAlaskNat_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_AmerIndAlaskNat_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Latinx_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Latinx_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Latinx_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_NatHawPacIsl_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_NatHawPacIsl_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_NatHawPacIsl_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_TwoOrMore_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_TwoOrMore_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_TwoOrMore_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Female_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Male_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Total_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Female_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Female_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Male_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Male_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Total_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Asian_Total_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Female_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Female_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Male_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Male_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Total_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Black_Total_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Other_Female_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Other_Male_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_Other_Total_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Female_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Female_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Male_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Male_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Total_Hisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/BLS_White_Total_NonHisp_Tbl')]",
				"[concat(variables('factoryId'), '/datasets/etalentBLSTbl')]"
			]
		}
	]
}